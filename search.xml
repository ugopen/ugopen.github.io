<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NX二次开发-Modeler error：tag limit would be exceeded</title>
      <link href="/post/da9d7e37.html"/>
      <url>/post/da9d7e37.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="e7ab4c8795419571296be6bd5d3e76c370978aadef412dfaea32fdcb9aab866b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 公共 </tag>
            
            <tag> NX二次开发 </tag>
            
            <tag> 疑难杂症 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++获取终端相关信息</title>
      <link href="/post/eee2cd9d.html"/>
      <url>/post/eee2cd9d.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="057e7706fddfd71bb37000c38921ac4b761e0aa7a2c376ace2ef306b2c8dfd8c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 公共 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>firefox剪切板无法粘贴设置</title>
      <link href="/post/ce9787df.html"/>
      <url>/post/ce9787df.html</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>无法从浏览器的剪贴板中读取，请确保你已授予此网站从剪贴板中读取的访问权限。</p><span id="more"></span><h3 id="firefox配置"><a href="#firefox配置" class="headerlink" title="firefox配置"></a>firefox配置</h3><p>在地址栏输入<code>about:config</code>回车，输入<code>clipboard</code>关键字搜索，再将<code>dom.events.asyncClipboard.readText</code>和<code>dom.events.testing.asyncClipboard</code>状态设置为<code>true</code>。</p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dom.events.asyncClipboard.readTexttrue</span><br><span class="line">dom.events.testing.asyncClipboardtrue</span><br></pre></td></tr></table></figure><p><img src="http://image.camcad.cn/2023/06/firefox%20clipboard.bmp" alt="firefox clipboard"></p>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> firefox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NX二次开发-Error detected during FMS operation</title>
      <link href="/post/d9970f4.html"/>
      <url>/post/d9970f4.html</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>C#开发的克隆应用，TC与NX集成环境下克隆，开启日志后，程序执行结束后弹出错误。<br><code>注：C++相同应用代码并没有此类问题出现。</code><br><img src="http://image.camcad.cn/2023/06/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91-Teamcenter%20Error.png" alt="NX二次开发-Teamcenter Error"><br><img src="http://image.camcad.cn/2023/06/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91-Error%20detected%20during%20FMS%20operation.png" alt="NX二次开发-Error detected during FMS operation"></p><span id="more"></span><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>由于指定的日志文件后缀不符合要求所致，将日志的后缀设置成<code>.clone</code>即可。<br><img src="http://image.camcad.cn/2023/06/nx_cloning_log_file.jpg" alt="nx_cloning_log_file"></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><img src="http://image.camcad.cn/2023/06/uf_clone_set_logfile.jpg" alt="uf_clone_set_logfile"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">constants</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> CloneLogFilename = <span class="string">&quot;\\nxclone.clone&quot;</span>;       <span class="comment">// 克隆日志文件 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 空运行</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.m_dryrun)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> getEnv = Environment.GetEnvironmentVariable(<span class="string">&quot;temp&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> filename = getEnv + constants.CloneLogFilename;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.m_clone.SetLogfile(filename);</span><br><span class="line">    <span class="keyword">this</span>.m_clone.SetDryrun(<span class="keyword">this</span>.m_dryrun);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NX二次开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NX外部模式-发布技术数据包/三维PDF</title>
      <link href="/post/771521dc.html"/>
      <url>/post/771521dc.html</url>
      
        <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>NX本地模式下发布技术数据包&#x2F;三维PDF，在使用发布应用程序<code>PublishTDPNative.exe</code>前，需要在系统环境变量名称为<code>Path</code>中增加NX安装目录下<code>NXBIN</code>的绝对路径。</p><span id="more"></span><h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h3><h4 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h4><p>在系统环境变量名称为<code>Path</code>中增加NX安装目录下<code>NXBIN</code>的绝对路径，便于本地模式启动NX相关依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">E:\Program Files\Siemens\NX1953\NXBIN</span><br></pre></td></tr></table></figure><h4 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h4><p>在NX安装目录下找到<code>TDP</code>文件夹，NX1953的<code>TDP</code>目录结构如下（不同NX版本可能有所不同）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3dpdf</span><br><span class="line">application</span><br><span class="line">batch</span><br><span class="line">batch example</span><br><span class="line">localization</span><br><span class="line">manifest</span><br><span class="line">startup</span><br><span class="line">templates</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h4><p>打开<code>batch</code>文件夹，并且执行发布数据包&#x2F;三维PDF应用<code>PublishTDPNative.exe</code>，在当前目录下使用系统终端，执行操作命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\PublishTDPNative.exe -config_file=&quot;E:\Program Files\Siemens\NX1953\TDP\batch example\PublishTDPNativeOptions3DPDF.xml&quot;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Windows PowerShell</span><br><span class="line">版权所有（C） Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">安装最新的 PowerShell，了解新功能和改进！https://aka.ms/PSWindows</span><br><span class="line"></span><br><span class="line">PS E:\Program Files\Siemens\NX1953\TDP\batch&gt; .\PublishTDPNative.exe -config_file=&quot;E:\Program Files\Siemens\NX1953\TDP\batch example\PublishTDPNativeOptions3DPDF.xml&quot;</span><br><span class="line"></span><br><span class="line">Translator Log File created at: C:\TEMP\TDP_ExamplePart.log</span><br><span class="line">[PK_BODY_change_partition returned: 1088]</span><br><span class="line">PS E:\Program Files\Siemens\NX1953\TDP\batch&gt;</span><br></pre></td></tr></table></figure><h2 id="技术文档"><a href="#技术文档" class="headerlink" title="技术文档"></a>技术文档</h2><figure class="highlight xml"><figcaption><span>PublishTDPREADME.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1) 简介</span><br><span class="line">此目录中提供的批处理模式可执行文件是从NX命令提示符中连续发布多个技术数据包的程序。</span><br><span class="line"></span><br><span class="line">2) 提供的文件</span><br><span class="line">PublishTDPNative.exe - 用于本地NX TDP发布的批处理模式可执行文件</span><br><span class="line">PublishTDPNativeOptions.xsd - 用于验证本地NX TDP批处理XML配置文件的XML模式</span><br><span class="line">PublishTDPTeamcenter.exe - 用于管理模式NX TDP发布的批处理模式可执行文件</span><br><span class="line">PublishTDPTeamcenterOptions.xsd - 用于验证管理模式NX TDP批处理XML配置文件的XML模式</span><br><span class="line"></span><br><span class="line">此外，还提供了示例配置文件和零件。这些可以在目录“%UGII_BASE_DIR%\TDP\batch example\”中找到。</span><br><span class="line"></span><br><span class="line">PublishTDPNativeOptions3DPDF.xml - 用于在本地NX中发布3D PDF TDP的示例XML配置文件</span><br><span class="line">PublishTDPNativeOptionsJTPDF.xml - 用于在本地NX中发布JT加PDF TDP的示例XML配置文件</span><br><span class="line">parts.txt - 用于发布示例中使用的样本数据集文件</span><br><span class="line">attachments.txt - 用于发布示例中使用的样本附件列表文件</span><br><span class="line"></span><br><span class="line">2) 用法</span><br><span class="line">(3A) 在本地NX中发布技术数据包</span><br><span class="line"></span><br><span class="line">要在本地NX中发布TDP，必须首先创建一个XML配置文件，以供批处理程序使用。要创建XML配置文件，可以使用XML模式定义文件“PublishTDPNativeOptions.xsd”查看必须指定什么。</span><br><span class="line"></span><br><span class="line">要在数据集文件中指定零件文件，请使用标准操作系统格式。</span><br><span class="line">示例：C:\partfile\abc.prt</span><br><span class="line"></span><br><span class="line">要在附件列表文件中指定附件，请使用标准操作系统格式。</span><br><span class="line">示例：C:\attachments\attachment1.prt</span><br><span class="line">示例：C:\attachments\attachment1.JPG</span><br><span class="line"></span><br><span class="line">参数 变量 说明</span><br><span class="line">-config_file [filepath] - 指定XML配置文件的本地磁盘位置</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">从NX命令提示符，以下命令</span><br><span class="line">PublishTDPNative -config_file=&quot;C:\TDP\PublishTDPNativeOptions3DPDF.xml&quot;</span><br><span class="line"></span><br><span class="line">...根据以下指定发布所有TDP：</span><br><span class="line">XML配置文件：“C:\TDP\PublishTDPNativeOptions3DPDF.xml”</span><br></pre></td></tr></table></figure><h3 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h3><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab"><a href="#tab-1">主文件</a></li><li class="tab"><a href="#tab-2">附件文件</a></li><li class="tab"><a href="#tab-3">图档文件</a></li></ul><div class="tab-content"><div class="tab-pane" id="tab-1"><p><code>注意</code>本地模式需要设置3DPDF输出目录例如：<code>&lt;output_directory&gt;c:\temp\&lt;/output_directory&gt;</code>，在主流程文件中设置。</p><p>NX模板文件：<code>${UGII_BASE_DIR}\tdp\templates\A4_Size_part_portrait_3dpdf.prt</code></p><h4 id="主流程文件"><a href="#主流程文件" class="headerlink" title="主流程文件"></a>主流程文件</h4><figure class="highlight xml"><figcaption><span>PublishTDPNativeOptions3DPDF.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">=======================================================================</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    Copyright 2018 Siemens Product Lifecycle Management Software Inc.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        All Rights Reserved.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">=======================================================================</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    This is the sample XML configuration file used with native TDP batch</span></span><br><span class="line"><span class="comment">    processing to publish a 3D PDF TDP.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    The XML file is validated against PublishTDPNativeOptions.xsd. The XML </span></span><br><span class="line"><span class="comment">    standard can be found in http://www.w3.org/XML/Schema.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">=======================================================================</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">native_run</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  The following run will publish a 3D PDF TDP with:</span></span><br><span class="line"><span class="comment">    - A set of parts defined in $&#123;UGII_BASE_DIR&#125;\tdp\batch example\parts.txt</span></span><br><span class="line"><span class="comment">    - A template part at $&#123;UGII_BASE_DIR&#125;\tdp\templates\A4_Size_part_portrait_3dpdf.prt</span></span><br><span class="line"><span class="comment">    - No output directory specified. This will use the output directory specified in</span></span><br><span class="line"><span class="comment">        the NX customer default. This directory MUST have write access.</span></span><br><span class="line"><span class="comment">    - With all views published</span></span><br><span class="line"><span class="comment">    - With no STEP attachment</span></span><br><span class="line"><span class="comment">    - With a password of 123456</span></span><br><span class="line"><span class="comment">    - With text pairs: Part Number: 1-A</span></span><br><span class="line"><span class="comment">                       Description: Bracket</span></span><br><span class="line"><span class="comment">                       Revision: A</span></span><br><span class="line"><span class="comment">                       Design Date: 01/01/2019</span></span><br><span class="line"><span class="comment">                       Designer: John Doe</span></span><br><span class="line"><span class="comment">    - With attachments defined in $&#123;UGII_BASE_DIR&#125;\tdp\batch example\attachments.txt</span></span><br><span class="line"><span class="comment">    - With no JT attachment</span></span><br><span class="line"><span class="comment">    - With model accuracy at Maximum</span></span><br><span class="line"><span class="comment">    - With no compression to the model</span></span><br><span class="line"><span class="comment">    - With overridden background and pmi color</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">publish_3DPDF</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataset</span>&gt;</span>$&#123;UGII_BASE_DIR&#125;\tdp\batch example\parts.txt<span class="tag">&lt;/<span class="name">dataset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template_part</span>&gt;</span>$&#123;UGII_BASE_DIR&#125;\tdp\templates\A4_Size_part_portrait_3dpdf.prt<span class="tag">&lt;/<span class="name">template_part</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- this configuration file uses the output directory specified by NX customer default --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- to override the NX customer default, you may specify an &lt;output_directory&gt; like the example below:</span></span><br><span class="line"><span class="comment">         &lt;output_directory&gt;C:\TDP\Output&lt;/output_directory&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">output_directory</span>&gt;</span>c:\temp\<span class="tag">&lt;/<span class="name">output_directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">views</span>&gt;</span>All Views<span class="tag">&lt;/<span class="name">views</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">generate_step</span>&gt;</span>false<span class="tag">&lt;/<span class="name">generate_step</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">texts</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Part Number<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1-A<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Bracket<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Revision<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>A<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Design Date<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>01/01/2019<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Designer<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">texts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attachment_list</span>&gt;</span>$&#123;UGII_BASE_DIR&#125;\tdp\batch example\attachments.txt<span class="tag">&lt;/<span class="name">attachment_list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">generate_jt</span>&gt;</span>false<span class="tag">&lt;/<span class="name">generate_jt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">accuracy</span>&gt;</span>Maximum<span class="tag">&lt;/<span class="name">accuracy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">compression</span>&gt;</span>false<span class="tag">&lt;/<span class="name">compression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">override_properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">override_colors</span>&gt;</span>true<span class="tag">&lt;/<span class="name">override_colors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">background_color</span>&gt;</span>1<span class="tag">&lt;/<span class="name">background_color</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pmi_color</span>&gt;</span>216<span class="tag">&lt;/<span class="name">pmi_color</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">override_properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">publish_3DPDF</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">native_run</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight xml"><figcaption><span>attachments.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;UGII_BASE_DIR&#125;\tdp\batch example\TDP_ExamplePart.jpg</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><figure class="highlight xml"><figcaption><span>parts.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;UGII_BASE_DIR&#125;\tdp\batch example\TDP_ExamplePart.prt</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> NX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NX二次开发：C#调用C++界面获取值</title>
      <link href="/post/6cvc59ff.html"/>
      <url>/post/6cvc59ff.html</url>
      
        <content type="html"><![CDATA[<h3 id="C-函数定义"><a href="#C-函数定义" class="headerlink" title="C++函数定义"></a>C++函数定义</h3><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> DllExport <span class="type">char</span>* g_value = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">DllExport <span class="type">char</span>* <span class="title">returnCSharpValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">g_value = <span class="string">&quot;C++返回给C#的值&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> g_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">DllExport <span class="type">void</span>  <span class="title">ufusr</span><span class="params">(<span class="type">char</span> *param, <span class="type">int</span> *retcod, <span class="type">int</span> param_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tc_select_action *thetc_select_action = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">UF_UGMGR_initialize</span>(<span class="number">0</span>, <span class="literal">nullptr</span>);</span><br><span class="line">        thetc_select_action = <span class="keyword">new</span> <span class="built_in">tc_select_action</span>();</span><br><span class="line">        <span class="comment">// The following method shows the dialog immediately</span></span><br><span class="line">        thetc_select_action-&gt;<span class="built_in">Show</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">UF_UGMGR_terminate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(exception&amp; ex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//---- Enter your exception handling code here -----</span></span><br><span class="line">        tc_select_action::theUI-&gt;<span class="built_in">NXMessageBox</span>()-&gt;<span class="built_in">Show</span>(<span class="string">&quot;Block Styler&quot;</span>, NXOpen::NXMessageBox::DialogTypeError, ex.<span class="built_in">what</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(thetc_select_action != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> thetc_select_action;</span><br><span class="line">        thetc_select_action = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="C-函数定义-1"><a href="#C-函数定义-1" class="headerlink" title="C#函数定义"></a>C#函数定义</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口定义</span></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;tc_select_action.dll&quot;</span>, EntryPoint = <span class="string">&quot;ufusr&quot;</span>, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">cplusplusUfusr</span>(<span class="params"><span class="built_in">string</span> param, <span class="built_in">int</span>[] retcod, <span class="built_in">int</span> param_len</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数定义</span></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;tc_select_action.dll&quot;</span>, EntryPoint = <span class="string">&quot;returnCSharpValue&quot;</span>, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">getCplusplusValue</span>()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开C++界面</span></span><br><span class="line">cplusplusUfusr(<span class="literal">null</span>, <span class="literal">null</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用C++内部函数</span></span><br><span class="line">IntPtr pCplusplusValue = getCplusplusValue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转成ANSI字符串</span></span><br><span class="line"><span class="built_in">string</span> cplusplusValue = Marshal.PtrToStringAnsi(pCplusplusValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印显示</span></span><br><span class="line">UFSession.GetUFSession().Ui.OpenListingWindow();</span><br><span class="line">UFSession.GetUFSession().Ui.WriteListingWindow(cplusplusValue);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> NX二次开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NX二次开发 </tag>
            
            <tag> C++ </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NX二次开发：第一个C#程序</title>
      <link href="/post/5bdc59ff.html"/>
      <url>/post/5bdc59ff.html</url>
      
        <content type="html"><![CDATA[<p>创建第一个NX二次开发C#程序，然后<code>Ctrl + u</code>的方式调用C#通过编译生成的<code>.dll</code>动态链接文件。</p><span id="more"></span><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> NXOpen;</span><br><span class="line"><span class="keyword">using</span> NXOpen.UF;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Emmet</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Session theSession;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Emmet theEmmet;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emmet</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            theSession = Session.GetSession();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NXOpen.NXException ex)</span><br><span class="line">        &#123;</span><br><span class="line">             UI.GetUI().NXMessageBox.Show(<span class="string">&quot;Message&quot;</span>, NXMessageBox.DialogType.Error, ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> retValue = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// TO-DO</span></span><br><span class="line">            UFSession theUFSession = UFSession.GetUFSession();</span><br><span class="line">            theUFSession.Ui.DisplayMessage(<span class="string">&quot;Hello World!&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NXOpen.NXException ex)</span><br><span class="line">        &#123;</span><br><span class="line">             UI.GetUI().NXMessageBox.Show(<span class="string">&quot;Message&quot;</span>, NXMessageBox.DialogType.Error, ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">GetUnloadOption</span>(<span class="params"><span class="built_in">string</span> arg</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> NX二次开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NX二次开发 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础教程十二：Linux的软件安装</title>
      <link href="/post/4c410899.html"/>
      <url>/post/4c410899.html</url>
      
        <content type="html"><![CDATA[<h2 id="课件转载《这个程猿有点呆-Linux基础教程》"><a href="#课件转载《这个程猿有点呆-Linux基础教程》" class="headerlink" title="课件转载《这个程猿有点呆_Linux基础教程》"></a>课件转载《<a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=1">这个程猿有点呆_Linux基础教程</a>》</h2><h1 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h1><ul><li><a href="#%E7%9B%AE%E5%BD%95">目录：</a><ul><li><a href="#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">环境变量</a></li><li><a href="#%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E6%96%B9%E5%BC%8F">软件的安装方式</a></li><li><a href="#rpm%E5%AE%89%E8%A3%85">RPM安装</a></li><li><a href="#%E5%8E%8B%E7%BC%A9%E5%8C%85%E8%A7%A3%E5%8E%8B%E5%AE%89%E8%A3%85">压缩包解压安装</a></li><li><a href="#yum%E5%AE%89%E8%A3%85">YUM安装</a></li><li><a href="#%E5%AE%89%E8%A3%85mysql%E6%95%B0%E6%8D%AE%E5%BA%93">安装Mysql数据库</a><span id="more"></span></li></ul></li></ul><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.当我们执行一个命令的时候，默认从当前路径开始查找</span><br><span class="line"></span><br><span class="line">2.如果当前路径找不到对应的命令文件，从环境变量$PATH查找</span><br><span class="line"></span><br><span class="line">3.$PATH的配置文件在 /etc/profile</span><br><span class="line"></span><br><span class="line">4.window 路径与路径之间用;(分号)连接</span><br><span class="line"></span><br><span class="line">5.Linux路径与路径之间用:（冒号）连接</span><br><span class="line"></span><br><span class="line">6.Linux每次修改完成之后，需要重新加载文件 source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="软件的安装方式"><a href="#软件的安装方式" class="headerlink" title="软件的安装方式"></a>软件的安装方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.解压就可以使用</span><br><span class="line"></span><br><span class="line">2.使用安装包安装(window-exe，Linux-rpm)</span><br><span class="line">  自己下载安装包</span><br><span class="line">  使用统一的软件帮助我们安装</span><br><span class="line"></span><br><span class="line">3.通过源码安装</span><br></pre></td></tr></table></figure><h2 id="RPM安装"><a href="#RPM安装" class="headerlink" title="RPM安装"></a>RPM安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1.RedHat Package Manager,它属于红帽的一种包管理方式</span><br><span class="line"></span><br><span class="line">2.通过RPM命令安装软件</span><br><span class="line">  示例：rpm -ivh jdk-7u67-linux-x64.rpm</span><br><span class="line"></span><br><span class="line">3.可以查询软件</span><br><span class="line">  rpm -qa  grep jdk</span><br><span class="line">  rpm -q jdk</span><br><span class="line"></span><br><span class="line">4.卸载</span><br><span class="line">  rpm -e jdk-1.7.0\_67-fcs.x86\_64</span><br><span class="line"></span><br><span class="line">5.需要手动配置Java的环境变量</span><br><span class="line">  vim /etc/profile</span><br><span class="line"></span><br><span class="line">  export JAVA\_HOME=/usr/java/jdk1.7.0\_67</span><br><span class="line">  export PATH=$JAVA\_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">6.重新加载配置文件</span><br><span class="line">  source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="压缩包解压安装"><a href="#压缩包解压安装" class="headerlink" title="压缩包解压安装"></a>压缩包解压安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.解压文件</span><br><span class="line">  tar -zxf apache-tomcat-7.0.61.tar.gz</span><br><span class="line"></span><br><span class="line">2.拷贝到/opt/school目录下</span><br><span class="line">  创建文件夹：mkdir -p /opt/lucky</span><br><span class="line">  复制文件 ：cp -r apache-tomcat-7.0.61 /opt/school</span><br><span class="line"></span><br><span class="line">3.启动tomcat</span><br><span class="line">  跳    到：cd /opt/school/apache-tomcat-7.0.61/bin/</span><br><span class="line">  开始安装：./startup.sh</span><br></pre></td></tr></table></figure><h2 id="YUM安装"><a href="#YUM安装" class="headerlink" title="YUM安装"></a>YUM安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">一、yum的作用</span><br><span class="line">  1.可以帮我们管理RPM包</span><br><span class="line">  2.可以帮我们安装软件，</span><br><span class="line">  3.如果软件有其他依赖，会帮我们安装依赖后在安装软件</span><br><span class="line">  4.类似于Maven</span><br><span class="line"></span><br><span class="line">二、yum命令</span><br><span class="line">  1.查询命令或者软件（search）</span><br><span class="line">  2.查看包的信息（info）</span><br><span class="line">  3.查询安装的rpm包，或者只查询某一周（list / list jdk）</span><br><span class="line"></span><br><span class="line">三、更换yum源</span><br><span class="line">  1.首先安装wget</span><br><span class="line">    yum install wget -y</span><br><span class="line"></span><br><span class="line">  2.将系统原始配置文件失效</span><br><span class="line">    mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"></span><br><span class="line">  3.使用Wget获取阿里yum源配置文件</span><br><span class="line">    wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</span><br><span class="line">    wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"> </span><br><span class="line">  4.清空以前yum源的缓存</span><br><span class="line">    yum clean all</span><br><span class="line"></span><br><span class="line">  5.获取阿里云的缓存</span><br><span class="line">    yum makecache</span><br></pre></td></tr></table></figure><h2 id="安装Mysql数据库"><a href="#安装Mysql数据库" class="headerlink" title="安装Mysql数据库"></a>安装Mysql数据库</h2><p>Mysql的下载地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p><a href="http://image.camcad.cn/2022/03/2022032711151584.jpg"><img src="http://image.camcad.cn/2022/03/2022032711151584-644x1024.jpg"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#----------安装Mysql依赖【perl net-tools】</span><br><span class="line">yum install perl net-tools -y</span><br><span class="line"></span><br><span class="line">#----------卸载mariadb</span><br><span class="line">rpm -qa  grep mariadb</span><br><span class="line">rpm -e --nodeps mariadb-libs-5.5.60-1.el7\_5.x86\_64</span><br><span class="line"></span><br><span class="line">#----------安装mysql</span><br><span class="line">tar -xvf mysql-8.0.18-1.el7.x86\_64.rpm-bundle.tar</span><br><span class="line">rpm -ivh mysql-community-common-8.0.18-1.el7.x86\_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-8.0.18-1.el7.x86\_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-8.0.18-1.el7.x86\_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-8.0.18-1.el7.x86\_64.rpm</span><br><span class="line"></span><br><span class="line">#----------启动mysql</span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line">#----------查找密码并登陆Mysql</span><br><span class="line">cat /var/log/mysqld.log  grep password</span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">#----------修改Mysql密码 8.0版本输入命令：</span><br><span class="line">set global validate\_password.policy=LOW;</span><br><span class="line">set global validate\_password.length=6;</span><br><span class="line"></span><br><span class="line">#更改加密方式</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27; PASSWORD EXPIRE NEVER;</span><br><span class="line"></span><br><span class="line">#更新用户密码</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql\_native\_password BY &#x27;123456&#x27;;</span><br><span class="line"></span><br><span class="line">#刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">#----------修改Mysql密码 5.7版本输入命令：</span><br><span class="line">set global validate\_password\_policy=LOW;</span><br><span class="line">set global validate\_password\_length=6</span><br><span class="line">alter user root@localhost identified by &#x27;123456&#x27;;</span><br><span class="line"></span><br><span class="line">#----------修改Mysql链接地址</span><br><span class="line">use mysql;</span><br><span class="line">update user set host=&#x27;%&#x27; where user = &#x27;root&#x27;;</span><br><span class="line">commit;</span><br><span class="line">exit;</span><br><span class="line"></span><br><span class="line">systemctl restart mysqld;</span><br><span class="line">#----------使用Navicat连接Mysql</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux新手村 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础教程十一：Linux的系统进程</title>
      <link href="/post/1e3dd843.html"/>
      <url>/post/1e3dd843.html</url>
      
        <content type="html"><![CDATA[<h2 id="课件转载《这个程猿有点呆-Linux基础教程》"><a href="#课件转载《这个程猿有点呆-Linux基础教程》" class="headerlink" title="课件转载《这个程猿有点呆_Linux基础教程》"></a>课件转载《<a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=1">这个程猿有点呆_Linux基础教程</a>》</h2><h1 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h1><ul><li><a href="#l1.1">进程信息</a></li><li><a href="#l1.2">后台进程</a></li><li><a href="#l1.3">杀死进程</a><span id="more"></span></li></ul><h2 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">一、查看进程信息：ps -ef</span><br><span class="line">  1.符号（UID        PID  PPID  C STIME TTY          TIME CMD）</span><br><span class="line">  2.UID 所属用户</span><br><span class="line">  3.PID 当前进程编号</span><br><span class="line">  4.PPID 当前进程编号的父进程编号</span><br><span class="line"></span><br><span class="line">二、查到firefox的进程（ps -ef  grep firefox）</span><br><span class="line"></span><br><span class="line">三、所有进程信息（ps -aux）</span><br><span class="line"></span><br><span class="line">四、ps -aux --sort -pcpu</span><br><span class="line"></span><br><span class="line">五、当前服务器内存使用率（top）</span><br></pre></td></tr></table></figure><h2 id="后台进程"><a href="#后台进程" class="headerlink" title="后台进程"></a>后台进程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.只需要在命令的后面添加一个 &amp; 符号</span><br><span class="line">  ping www.baidu.com &gt;&gt; baidu &amp;</span><br><span class="line"></span><br><span class="line">2.jobs -l</span><br><span class="line">  可以查看当前的后台进程</span><br><span class="line">  但是只有当前用户界面可以获取到</span><br></pre></td></tr></table></figure><h2 id="杀死进程（kill-9）"><a href="#杀死进程（kill-9）" class="headerlink" title="杀死进程（kill -9）"></a>杀死进程（kill -9）</h2><h3 id="示例：kill-9-17599"><a href="#示例：kill-9-17599" class="headerlink" title="示例：kill -9 17599"></a>示例：kill -9 17599</h3><p><strong>说明：-9（强制终止退出）</strong></p><p><strong>说明：17599 （PID）</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux新手村 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础教程十：管道与重定向</title>
      <link href="/post/a8356c28.html"/>
      <url>/post/a8356c28.html</url>
      
        <content type="html"><![CDATA[<h2 id="课件转载《这个程猿有点呆-Linux基础教程》"><a href="#课件转载《这个程猿有点呆-Linux基础教程》" class="headerlink" title="课件转载《这个程猿有点呆_Linux基础教程》"></a>课件转载《<a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=1">这个程猿有点呆_Linux基础教程</a>》</h2><h1 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h1><ul><li><a href="#l1.1">管道</a></li><li><a href="#l1.2">重定向</a><span id="more"></span></li></ul><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.定义：将前面命令的结果作为参数传递给后面的命令</span><br><span class="line"></span><br><span class="line">2.grep</span><br><span class="line">  强大的文本搜索工具</span><br><span class="line">  cat profile  grep if</span><br><span class="line">  ls /  grep ^t</span><br></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.定义：改变数据输出的位置，方向</span><br><span class="line"></span><br><span class="line">2.0 in 1 out 2 err</span><br><span class="line">  ls / 1&gt; lucky 标准输出</span><br><span class="line">  ls / &gt; lucky 标准输出</span><br><span class="line">  ls abcd 2&gt;lucky 错误输出</span><br><span class="line"></span><br><span class="line">3.&gt; 替换 &gt;&gt; 追加</span><br><span class="line">  ls / 1&gt;&gt; lucky</span><br><span class="line">  ls / 1&gt; lucky</span><br><span class="line"></span><br><span class="line">4.结合使用</span><br><span class="line">  ls /etc /abc &gt; lucky 2&gt;&amp;1</span><br><span class="line">  ls /etc /abc &gt;&gt; lucky 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">5.信息黑洞</span><br><span class="line">  ls /etc /abc &gt;&gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux新手村 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础教程九：用户-组-权限</title>
      <link href="/post/cffb534.html"/>
      <url>/post/cffb534.html</url>
      
        <content type="html"><![CDATA[<h2 id="课件转载《这个程猿有点呆-Linux基础教程》"><a href="#课件转载《这个程猿有点呆-Linux基础教程》" class="headerlink" title="课件转载《这个程猿有点呆_Linux基础教程》"></a>课件转载《<a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=1">这个程猿有点呆_Linux基础教程</a>》</h2><h1 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h1><ul><li><a href="#l1.1">用户</a></li><li><a href="#l1.2">组</a></li><li><a href="#l1.3">权限</a></li><li><a href="#l1.4">权限赋予</a></li></ul><span id="more"></span><h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1.新增用户（useradd）</span><br><span class="line">  示例：useradd luckyboy</span><br><span class="line">  说明：会创建同名的组和家目录</span><br><span class="line"></span><br><span class="line">2.设置密码（passwd）</span><br><span class="line">  示例：passwd luckyboy</span><br><span class="line"></span><br><span class="line">3.删除用户（userdel）</span><br><span class="line">  示例：userdel -r luckyboy</span><br><span class="line">  说明：会删除家目录和组</span><br><span class="line"></span><br><span class="line">4.修改用户信息（usermod）</span><br><span class="line">  修改用户名：usermod -l luckyss luckyls</span><br><span class="line">  说     明：家目录和组名称是不会被修改的</span><br><span class="line"></span><br><span class="line">  锁定用户名：usermod -L luckyss</span><br><span class="line">  解锁用户名：usermod -U luckyss</span><br><span class="line"></span><br><span class="line">5.常用文件：</span><br><span class="line">  cat /etc/shadow</span><br><span class="line">    用户名和密码</span><br><span class="line"></span><br><span class="line">  cat /etc/passwd</span><br><span class="line">    用户名，编号,组编号,家目录，命令，目录</span><br><span class="line">    6.5系统0-499 普通 500+</span><br><span class="line">    7.6系统0-999 普通 1000+</span><br><span class="line"></span><br><span class="line">6.切换账户（su）</span><br><span class="line">  示例：su luckyboy</span><br></pre></td></tr></table></figure><h2 id="组"><a href="#组" class="headerlink" title="组"></a>组</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1.创建组（groupadd）</span><br><span class="line">  示例：groupadd lucky</span><br><span class="line"></span><br><span class="line">2.删除组（groupdel）</span><br><span class="line">  示例：groupdel lucky</span><br><span class="line"></span><br><span class="line">3.修改组名称（groupmod）</span><br><span class="line">  示例：groupmod -n school lucky</span><br><span class="line"></span><br><span class="line">4.查看用户对应的组（groups）</span><br><span class="line">  示例：groups lucky</span><br><span class="line">  说明：当我们创建用户的时候，会默认创建一个同名的主组</span><br><span class="line"></span><br><span class="line">5.修改用户的组（usermod）</span><br><span class="line">  主  组：usermod -g lucky schoolboy</span><br><span class="line">  附属组：usermod -G lucky schoolls</span><br></pre></td></tr></table></figure><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><table><thead><tr><th align="center">权限项</th><th align="center">读</th><th align="center">写</th><th align="center">执行</th><th align="center">读</th><th align="center">写</th><th align="center">执行</th><th align="center">读</th><th align="center">写</th><th align="center">执行</th></tr></thead><tbody><tr><td align="center">字符表示</td><td align="center">(r)</td><td align="center">(w)</td><td align="center">(x)</td><td align="center">(r)</td><td align="center">(w)</td><td align="center">(x)</td><td align="center">(r)</td><td align="center">(w)</td><td align="center">(x)</td></tr><tr><td align="center">数字表示</td><td align="center">4</td><td align="center">2</td><td align="center">1</td><td align="center">4</td><td align="center">2</td><td align="center">1</td><td align="center">4</td><td align="center">2</td><td align="center">1</td></tr><tr><td align="center">权限分配</td><td align="center">文件所有者</td><td align="center">文件所有者</td><td align="center">文件所有者</td><td align="center">文件所属组用户</td><td align="center">文件所属组用户</td><td align="center">文件所属组用户</td><td align="center">其他用户</td><td align="center">其他用户</td><td align="center">其他用户</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">一、查看文件的权限</span><br><span class="line">  1.示例：drw-r-xr-x 9 n1 m1 4096 Nov 13 00:30 apache-tomcat-7.0.61</span><br><span class="line">  2.三组权限，每组3个字母</span><br><span class="line">    r :读取权限</span><br><span class="line">    w :写入权限</span><br><span class="line">    x :执行权限</span><br><span class="line">    -:没有权限</span><br><span class="line">  3.root :所属用户(属主)</span><br><span class="line">  4.root：所属的组（属组）</span><br><span class="line"></span><br><span class="line">二、权限的UGO模型</span><br><span class="line">  1.三组权限</span><br><span class="line">  2.属主的权限：属组的权限：其他的权限</span><br><span class="line">  3.所以说：将来修改文件的权限 可以从rwx和ugo两个方面进行修改</span><br><span class="line"></span><br><span class="line">三、修改文件的权限</span><br><span class="line">  1.修改文件所属</span><br><span class="line">    chown n1 /var/lucky1</span><br><span class="line">    chown n1:m1 /var/lucky2</span><br><span class="line">    修改文件夹时，让子目录迭代修改</span><br><span class="line">      chown -R n1:m1 school</span><br><span class="line">   chgrp m2 lucky3</span><br><span class="line">      当用户的组被修改之后，需要重新登录才能获取新组的权限</span><br><span class="line">  2.修改文件的rwx</span><br><span class="line">    chmod o+w lucky4</span><br><span class="line">    chmod ug+rw lucky4</span><br><span class="line">    chmod ugo-rw lucky4</span><br><span class="line">    权限RWX分别对应数字 4 2 1（ 5= 4+0+1 r-x）</span><br><span class="line">      chmod 664 lucky4 --&gt; (rw- rw-r--)</span><br></pre></td></tr></table></figure><p><a href="http://image.camcad.cn/2022/03/2022032706180319.jpg"><img src="http://image.camcad.cn/2022/03/2022032706180319.jpg"></a></p><h2 id="权限赋予"><a href="#权限赋予" class="headerlink" title="权限赋予"></a>权限赋予</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.我们可以将管理用的权限分配给普通用户</span><br><span class="line"></span><br><span class="line">2.文件位置在 vi /etc/sudoers</span><br><span class="line"></span><br><span class="line">3.但是修改这个文件需要使用命令</span><br><span class="line">  visudo</span><br><span class="line">  修改 Line 99</span><br><span class="line">  n1 ALL=(root) /sbin/useradd</span><br><span class="line">  n1 ALL=(root) /sbin/\*</span><br><span class="line"></span><br><span class="line">4.如何使用</span><br><span class="line">  su n1</span><br><span class="line">  sudo chkconfig iptables off</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux新手村 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础教程八：日期与时间</title>
      <link href="/post/a284483c.html"/>
      <url>/post/a284483c.html</url>
      
        <content type="html"><![CDATA[<h2 id="课件转载《这个程猿有点呆-Linux基础教程》"><a href="#课件转载《这个程猿有点呆-Linux基础教程》" class="headerlink" title="课件转载《这个程猿有点呆_Linux基础教程》"></a>课件转载《<a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=1">这个程猿有点呆_Linux基础教程</a>》</h2><h1 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h1><ul><li><a href="#l1.1">时间命令</a></li><li><a href="#l1.2">日期自动同步</a><span id="more"></span></li></ul><h2 id="时间命令"><a href="#时间命令" class="headerlink" title="时间命令"></a>时间命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">一、查看时区</span><br><span class="line">  1、ll /etc/localtime</span><br><span class="line">       /etc/localtime --&gt; ../usr/share/zoneinfo/America/Los\_Angeles</span><br><span class="line">  2、ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"></span><br><span class="line">二、date</span><br><span class="line">  查看当前系统时间</span><br><span class="line"></span><br><span class="line">三、cal</span><br><span class="line">  查看日历（示例如下：）</span><br><span class="line">     March 2022     </span><br><span class="line">Su Mo Tu We Th Fr Sa</span><br><span class="line">       1  2  3  4  5</span><br><span class="line"> 6  7  8  9 10 11 12</span><br><span class="line">13 14 15 16 17 18 19</span><br><span class="line">20 21 22 23 24 25 26</span><br><span class="line">27 28 29 30 31</span><br><span class="line"></span><br><span class="line">四、修改时间</span><br><span class="line">  date -s 11:11:11</span><br><span class="line">  date -s 2019-11-11</span><br><span class="line">  date -s &#x27;2019-11-11 11:11:11&#x27;</span><br></pre></td></tr></table></figure><h2 id="日期自动同步"><a href="#日期自动同步" class="headerlink" title="日期自动同步"></a>日期自动同步</h2><ul><li><strong>自动同步时间</strong></li></ul><ol><li>安装同步软件（yum install ntp -y）</li><li>同步命令（ntpdate cn.ntp.org.cn）</li></ol><ul><li><strong>本地搭建NTP服务</strong></li></ul><ol><li>开启本地NTP服务器（service ntpd start）</li><li>打开配置表（vi &#x2F;etc&#x2F;ntp.conf）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#========权限控制============</span><br><span class="line">restrict default kod nomodify notrap nopeer noquery 拒绝IPV4用户</span><br><span class="line">restrict -6 default kod nomodify notrap nopeer noquery 拒绝IPV6用户</span><br><span class="line">restrict 210.72.145.44 授权国家授时中心服务器访问本地NTP</span><br><span class="line">restrict 133.100.11.8 授权133.100.11.8访问本地NTP</span><br><span class="line">restrict 127.0.0.1</span><br><span class="line">restrict -6 ::1</span><br><span class="line">restrict 192.168.188.2 mask 255.255.255.0 nomodify 本地网段授权访问</span><br><span class="line"></span><br><span class="line">#=========源服务器===========</span><br><span class="line">server cn.ntp.org.cn prefer 指定上级更新时间服务器，优先使用这个地址</span><br><span class="line"></span><br><span class="line">#=========差异分析===========</span><br><span class="line">driftfile /var/lib/ntp/drift</span><br><span class="line">keys /etc/ntp/keys</span><br></pre></td></tr></table></figure></li></ol><ul><li>客户端同步时间（ntpdate 192.168.188.100）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux新手村 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础教程七：Linux 的网络信息</title>
      <link href="/post/e6855abe.html"/>
      <url>/post/e6855abe.html</url>
      
        <content type="html"><![CDATA[<h2 id="课件转载《这个程猿有点呆-Linux基础教程》"><a href="#课件转载《这个程猿有点呆-Linux基础教程》" class="headerlink" title="课件转载《这个程猿有点呆_Linux基础教程》"></a>课件转载《<a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=1">这个程猿有点呆_Linux基础教程</a>》</h2><h1 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h1><ul><li><a href="#l1.1">主机名称</a></li><li><a href="#l1.2">DNS解析</a></li><li><a href="#l1.3">网络相关命令</a></li><li><a href="#l1.4">防火墙</a></li><li><a href="#l1.5">加密算法</a></li><li><a href="#l1.6">主机间的相互免秘钥</a></li><li><a href="#l1.7">主机名与Host校验</a><span id="more"></span></li></ul><h2 id="主机名称"><a href="#主机名称" class="headerlink" title="主机名称"></a>主机名称</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">临时修改</span><br><span class="line">hostname school</span><br><span class="line"></span><br><span class="line">长久修改</span><br><span class="line">vi /etc/hostname</span><br></pre></td></tr></table></figure><h2 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、域名解析服务</span><br><span class="line"></span><br><span class="line">2、可以将域名转换为IP地址</span><br><span class="line"></span><br><span class="line">3、DNS域名劫持</span><br><span class="line">  window --&gt; C:\\Windows\\System32\\drivers\\etc\\hosts</span><br><span class="line">  123.56.138.186 www.baidu.com</span><br><span class="line">  123.56.138.186 www.taodao.com</span><br><span class="line"></span><br><span class="line">4、修改主机域名</span><br><span class="line">  vi /etc/hosts</span><br><span class="line">  将来我们需要把所有的虚拟机都配置hosts文件</span><br><span class="line">  192.168.31.101 bd1601</span><br><span class="line">  192.168.31.102 bd1602</span><br></pre></td></tr></table></figure><h2 id="网络相关命令"><a href="#网络相关命令" class="headerlink" title="网络相关命令"></a>网络相关命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">一、ifconfig</span><br><span class="line">  1.查看当前网卡的配置信息</span><br><span class="line">  2.这个命令属于 net-tools中的一个命令，但是Centos7中minimal版并没有集成这个包</span><br><span class="line">  3.所以7的时候需要自己手动安装</span><br><span class="line">  4.如果没有ifconfig ，可以使用ip addr 临时代替</span><br><span class="line"></span><br><span class="line">二、netstat</span><br><span class="line">  1.查看当前网络的状态信息</span><br><span class="line">  2.一个机器默认有65536个端口号\[0,65535\]</span><br><span class="line">  3.这是一个逻辑的概念，将来我们需要使用程序监听指定的端口，等待别人的访问</span><br><span class="line">  4.一个端口只能被一个程序所监听, 端口已经被占用</span><br><span class="line">  5.netstat -anp</span><br><span class="line">  6.netstat -r 核心路由表 == route</span><br><span class="line"></span><br><span class="line">三、ping</span><br><span class="line">  1.查看与目标IP地址是否能够连通</span><br><span class="line"></span><br><span class="line">四、telnet</span><br><span class="line">  1.查看与目标IP的指定端口是否能够连通</span><br><span class="line">  2.yum install telnet -y</span><br><span class="line">  3.telnet 192.168.31.44 22</span><br><span class="line"></span><br><span class="line">五、curl</span><br><span class="line">  1.restful 我们所有的资源在网络上中都有唯一的定位</span><br><span class="line">  2.那么我们可以通过这个唯一定位标识指定的资源</span><br><span class="line">  3.http://localhost:8080/lucky/user.action/666</span><br><span class="line">  4.curl -X GET http://www.baidu.com</span><br></pre></td></tr></table></figure><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><ul><li>防火墙技术是通过有机结合各类用于安全管理与筛选的软件和硬件设备，帮助计算机网络于其内、 外网之间构建一道相对隔绝的保护屏障，以保护用户资料与信息安全性的一种技术</li><li>在centOS7+中 使用firewalld代替以前的 iptables ；<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#查看防火墙状态</span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"></span><br><span class="line">#临时停止firewall</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line">#禁止firewall开机启动</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line"></span><br><span class="line">firewall-cmd --state ##查看防火墙状态，是否是running</span><br><span class="line"></span><br><span class="line">firewall-cmd --reload ##重新载入配置，比如添加规则之后，需要执行此命令</span><br><span class="line"></span><br><span class="line">firewall-cmd --get-zones ##列出支持的zone</span><br><span class="line"></span><br><span class="line">firewall-cmd --get-services ##列出支持的服务，在列表中的服务是放行的</span><br><span class="line"></span><br><span class="line">firewall-cmd --query-service ftp ##查看ftp服务是否支持，返回yes或者no</span><br><span class="line"></span><br><span class="line">firewall-cmd --add-service=ftp ##临时开放ftp服务</span><br><span class="line"></span><br><span class="line">firewall-cmd --add-service=ftp --permanent ##永久开放ftp服务</span><br><span class="line"></span><br><span class="line">firewall-cmd --remove-service=ftp --permanent ##永久移除ftp服务</span><br><span class="line"></span><br><span class="line">firewall-cmd --add-port=80/tcp --permanent ##永久添加80端口</span><br></pre></td></tr></table></figure></li><li>开启一个端口的正确操作<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">\# 添加</span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line"></span><br><span class="line">#重新载入</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">firewall-cmd --zone=public --query-port=80/tcp</span><br><span class="line"></span><br><span class="line">#删除</span><br><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure></li></ul><h2 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h2><h3 id="不可逆加密算法"><a href="#不可逆加密算法" class="headerlink" title="不可逆加密算法"></a>不可逆加密算法</h3><p> </p><p><a href="http://image.camcad.cn/2022/03/2022032614204444.jpg"><img src="http://image.camcad.cn/2022/03/2022032614204444.jpg"></a></p><ul><li><strong>可以通过数据计算加密后的结果，但是通过结果无法计算出加密数据</strong></li><li><strong>应用场景</strong></li></ul><ol><li>Hash算法常用在不可还原的密码存储、信息完整性校验。</li><li>文档、音视频文件、软件安装包等用新老摘要对比是否一样(接收到的文件是否被修改)</li><li>用户名或者密码加密后数据库存储(数据库大多数不会存储关键信息的明文，就像很多登录功能的忘记密码不能找回，只能重置)</li></ol><ul><li><strong>常见加密算法</strong></li></ul><ol><li>MD5（<a href="http://www.jsons.cn/md5/">http://www.jsons.cn/md5/</a>）</li><li>hash（<a href="https://tool.oschina.net/encrypt?type=2">https://tool.oschina.net/encrypt?type=2</a>）</li></ol><ul><li><strong>案例</strong></li></ul><ol><li>蚂蚁emmet —&gt; MD5 —&gt; 1ce737794994523d1cb1603d404b18bf</li><li>蚂蚁emmet —&gt; SHA1—&gt; eef246d5ba2da59177042e5afc6f26440ba4336c</li></ol><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><p><a href="http://image.camcad.cn/2022/03/2022032614360146.jpg"><img src="http://image.camcad.cn/2022/03/2022032614360146.jpg"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1、Symmetric Key Encryption</span><br><span class="line"></span><br><span class="line">2、代表性算法叫做 DES、3DES、Blowfish、IDEA、RC4、RC5、RC6和AES</span><br><span class="line"></span><br><span class="line">3、特点：</span><br><span class="line">  加密和解密使用相同的秘钥</span><br><span class="line"></span><br><span class="line">4、优点：</span><br><span class="line">  生成密钥的算法公开、计算量小、加密速度快、加密效率高、密钥较短</span><br><span class="line"></span><br><span class="line">5、缺点</span><br><span class="line">  双方共同的密钥，有一方密钥被窃取，双方都影响</span><br><span class="line">  如果为每个客户都生成不同密钥，则密钥数量巨大，密钥管理有压力</span><br><span class="line"></span><br><span class="line">6、应用场景</span><br><span class="line">  登录信息用户名和密码加密、传输加密、指令加密</span><br><span class="line"></span><br><span class="line">7、案例（AES）：(http://tool.chacuo.net/cryptaes/)</span><br><span class="line">  明文：Linux是世界上最好的操作系统，没有之一</span><br><span class="line">  密钥：蚂蚁emmet</span><br><span class="line">  加密：IoJu94+AOUyFSOxSwSSHxQFtumf2LQiOFSx6ZD2WdbNA5P/Bkb/NHPyRIDB4EwuQ</span><br></pre></td></tr></table></figure><h3 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><p><a href="http://image.camcad.cn/2022/03/202203261446024.jpg"><img src="http://image.camcad.cn/2022/03/202203261446024.jpg"></a></p><ul><li><strong>Asymmetric Key Encryption</strong></li><li><strong>非对称加密算法需要一对密钥(两个密钥)：</strong></li></ul><ol><li>公开密钥(publickey)和私有密钥(privatekey)(简称公钥，私钥)</li><li>公开密钥与私有密钥生成时是一对</li><li>用公钥加密只能是对应的私钥解密，同理用私钥加密只能用对应的公钥解密</li></ol><ul><li><strong>代表性算法叫做 RSA、ECC、Diffie-Hellman、El Gamal、DSA(数字签名用)</strong></li><li><strong>优点：</strong></li></ul><ol><li>安全高(几乎很难破解)</li></ol><ul><li><strong>缺点：</strong></li></ul><ol><li>加解密相对速度慢、密钥长、计算量大、效率低</li></ol><ul><li><strong>应用场景</strong></li></ul><ol><li>HTTPS(ssl)证书里制作、CRS请求证书、金融通信加密、蓝牙等硬件信息加密配对传输、关键的登录信息验证。</li></ol><ul><li><strong>案例（RSA）</strong>：<a href="http://tool.chacuo.net/cryptrsaprikey">http://tool.chacuo.net/cryptrsaprikey</a></li></ul><p> <strong>公钥</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDjlHREYDiL9p5bAPBsMCy+UIaH</span><br><span class="line">e4MAm7djkuHYW3aGQLgG9Rc1CSRaFeNXBw+llDsnIgBPgoUI4S8N2m87n25zJ5jH</span><br><span class="line">7pEyWoZsAeTgpqJ6fzfciRpGHsawZ+AxVs0PeIvBMVIIZfpP4tIK5WVau7mVt0gy</span><br><span class="line">/bU+PtX35wVymIKy7QIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p><strong>私钥</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">\-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAOOUdERgOIv2nlsA</span><br><span class="line">8GwwLL5Qhod7gwCbt2OS4dhbdoZAuAb1FzUJJFoV41cHD6WUOyciAE+ChQjhLw3a</span><br><span class="line">bzufbnMnmMfukTJahmwB5OCmonp/N9yJGkYexrBn4DFWzQ94i8ExUghl+k/i0grl</span><br><span class="line">ZVq7uZW3SDL9tT4+1ffnBXKYgrLtAgMBAAECgYBOkrvNu7bqQ/yKiPl5MOzRzHWW</span><br><span class="line">I0OomxqnC1hkXbe/RGsFI+ueSQi+/Z2fN3XkghgmO6wFx5ds6GpZixgqarIz8z/Z</span><br><span class="line">AixGVx7BgUgAzIZ4OOsm7uLpPs7WEVLWn1I4/59HxnzWX85ShBsfJc4tFb566Bc2</span><br><span class="line">/5SaBurNXlOURFFs9QJBAPUL/qCWZ5JljXEtlLqaumEY54WT6+dJpL0j2bsmvktk</span><br><span class="line">CkMpzqCKy8ymiFPa5FyZDRsZfLQBoHWv7SVKD0wOFMcCQQDtwJcAsOrxWApQ19tr</span><br><span class="line">9wrrv0QB0XPkJjOL85x/I+6Q6CMd2YQs8ze2ex+J45VWtADQYi2VixgmtI9pNmW7</span><br><span class="line">eJ6rAkAe2s/I8KdB67+PjKm5hVoKd9RPIX0GtmMj3avAwPQdEg+ovU7jMBbRQfbQ</span><br><span class="line">eDNg5XSdAOyOzdWie/BkTZr3fJ5pAkEAr9OVGOK97ZxRjboyGRNMfVXdOwRV4YorJ</span><br><span class="line">5j9URkZ5gNrcVY/uixuX4TEvAte3MrbOP03MLmL+imlQAdxD4h/zHwJBANY0vxVf</span><br><span class="line">8tzwPdXcNWK8ZCqmWLR8sDTrzRdwNejBraYb00yEngGy1uALsDNevXtzrRkh8dzV</span><br><span class="line">QI5y+RliuFYWd14=</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p><strong>加密</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IpaC8/W8s3UL9wDuz8pRUA3bG3jE0Ch0MqCiVd3LXHBXSDRVckvD20cUEnBkiG0N85NfY6rv</span><br><span class="line">M0iyb4fNkic4BhmLQg6AsV4L8LEIptSwPJwlVqJprqh7MHN+R9y/PekSmpZYAxitTaFFfgJP</span><br><span class="line">DhGYl45TmWLj2vhGoOQy/INK9boy=</span><br></pre></td></tr></table></figure><p><strong>明文</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">今晚八点学校小树林见</span><br></pre></td></tr></table></figure><h2 id="主机间的相互免秘钥"><a href="#主机间的相互免秘钥" class="headerlink" title="主机间的相互免秘钥"></a>主机间的相互免秘钥</h2><ul><li><strong>可以通过ssh命令免秘钥连接到其他的主机</strong></li><li><strong>如果是第一次建立连接，需要输入yes</strong></li></ul><ol><li>在 ~&#x2F;.ssh&#x2F;known_hosts 文件记录了以前访问地址(ip hostname)的信息</li><li>在访问地址的时候如果没有收录到known_hosts文件中，就需要输入yes</li><li>如果以前收录到known_hosts中，直接输入密码即可</li></ol><ul><li><strong>需要输入密码</strong></li></ul><ol><li>生成秘钥</li><li>ssh-keygen -t rsa -P ‘’ -f ~&#x2F;.ssh&#x2F;id_rsa</li></ol><p><a href="http://image.camcad.cn/2022/03/2022032615074231.jpg"><img src="http://image.camcad.cn/2022/03/2022032615074231.jpg"></a></p><ol><li>如果你想免秘钥登录谁，只需要把自己的公钥传递给对方主机即可</li><li>这个秘钥要放在 ~&#x2F;.ssh&#x2F;authorized_keys</li><li>ssh-copy-id -i ~&#x2F;.ssh&#x2F;id_rsa.pub <a href="mailto:&#114;&#x6f;&#111;&#116;&#64;&#49;&#x39;&#50;&#x2e;&#49;&#x36;&#x38;&#x2e;&#53;&#x38;&#x2e;&#x32;&#48;&#49;">&#114;&#x6f;&#111;&#116;&#64;&#49;&#x39;&#50;&#x2e;&#49;&#x36;&#x38;&#x2e;&#53;&#x38;&#x2e;&#x32;&#48;&#49;</a></li></ol><p><a href="http://image.camcad.cn/2022/03/20220326151004100.jpg"><img src="http://image.camcad.cn/2022/03/20220326151004100-1024x259.jpg"></a></p><ul><li><strong>相互面秘钥工作流程</strong></li></ul><p><a href="http://image.camcad.cn/2022/03/202203261511129.jpg"><img src="http://image.camcad.cn/2022/03/202203261511129-1024x542.jpg"></a></p><h2 id="主机名与Host校验"><a href="#主机名与Host校验" class="headerlink" title="主机名与Host校验"></a>主机名与Host校验</h2><p><a href="http://image.camcad.cn/2022/03/2022032615121564.jpg"><img src="http://image.camcad.cn/2022/03/2022032615121564.jpg"></a></p><ul><li>错误原因：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Cannot determine realm for numeric host</span><br><span class="line"></span><br><span class="line">解决方案1--本次</span><br><span class="line">  ssh -v -o GSSAPIAuthentication=no root@192.168.189.201</span><br><span class="line"></span><br><span class="line">解决方案2--所有</span><br><span class="line">  1、修改 /etc/ssh/ssh\_config文件的配置，以后则不会再出现此问题</span><br><span class="line">  2、最后面添加两行：</span><br><span class="line">   StrictHostKeyChecking no</span><br><span class="line">   UserKnownHostsFile /dev/null</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux新手村 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础教程六：VI 和 VIM 编辑器</title>
      <link href="/post/56333b4d.html"/>
      <url>/post/56333b4d.html</url>
      
        <content type="html"><![CDATA[<h2 id="课件转载《这个程猿有点呆-Linux基础教程》"><a href="#课件转载《这个程猿有点呆-Linux基础教程》" class="headerlink" title="课件转载《这个程猿有点呆_Linux基础教程》"></a>课件转载《<a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=1">这个程猿有点呆_Linux基础教程</a>》</h2><h1 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h1><ul><li><a href="#l1.1">打开文件</a></li><li><a href="#l1.2">三种模式</a></li><li><a href="#l1.3">三种模式切换</a></li><li><a href="#l1.4">光标操作（命令模式）</a></li><li><a href="#l1.5">进入编辑模式</a></li><li><a href="#l1.6">辅助操作（命令模式）</a></li><li><a href="#l1.7">末行模式</a><span id="more"></span></li></ul><h2 id="VI和VIM编辑器"><a href="#VI和VIM编辑器" class="headerlink" title="VI和VIM编辑器"></a>VI和VIM编辑器</h2><p><a href="http://image.camcad.cn/2022/03/2022032609323754.png"><img src="http://image.camcad.cn/2022/03/2022032609323754.png"></a></p><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">正常打开</span><br><span class="line">vi profile</span><br><span class="line"></span><br><span class="line">打开文件，并将光标置于第8行</span><br><span class="line">vi +8 profile</span><br><span class="line"></span><br><span class="line">打开最后一行</span><br><span class="line">vi + profile</span><br><span class="line">按n查找下一个，按N查找上一个</span><br><span class="line"></span><br><span class="line">打开指定搜索单词的位置</span><br><span class="line">vi +/if profile</span><br></pre></td></tr></table></figure><h2 id="三种模式"><a href="#三种模式" class="headerlink" title="三种模式"></a>三种模式</h2><ul><li><strong>编辑模式</strong>-–编辑模式中，每一个按键都有其他的功能</li><li><strong>输入模式</strong>-–每一个按键按下什么，就像文本中数据输入什么</li><li><strong>末行（命令行）模式</strong>-–我们可以直接在VI中输入特定的命令</li></ul><h2 id="三种模式切换"><a href="#三种模式切换" class="headerlink" title="三种模式切换"></a>三种模式切换</h2><p><a href="http://image.camcad.cn/2022/03/202203260943107.jpg"><img src="http://image.camcad.cn/2022/03/202203260943107-1024x550.jpg"></a></p><h2 id="光标操作（命令模式）"><a href="#光标操作（命令模式）" class="headerlink" title="光标操作（命令模式）"></a>光标操作（命令模式）</h2><table><thead><tr><th align="center">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">j</td><td align="left"><code>下移</code></td></tr><tr><td align="center">k</td><td align="left"><code>上移</code></td></tr><tr><td align="center">h</td><td align="left"><code>左移</code></td></tr><tr><td align="center">l</td><td align="left"><code>右移</code></td></tr><tr><td align="center">0（数字）</td><td align="left"><code>将光标移动到行首</code></td></tr><tr><td align="center">$</td><td align="left"><code>将光标移动到行尾</code></td></tr><tr><td align="center">b</td><td align="left"><code>将光标移动到单词首字符</code></td></tr><tr><td align="center">e</td><td align="left"><code>将光标移动到单词未字符</code></td></tr><tr><td align="center">%</td><td align="left"><code>括号对应查找</code></td></tr><tr><td align="center">(</td><td align="left">将光标移动到段落首行</td></tr><tr><td align="center">)</td><td align="left">将光标移动到段落未尾</td></tr><tr><td align="center">w</td><td align="left">将光标移动到下个单词行首</td></tr><tr><td align="center">gg</td><td align="left">将光标移动到文件首行</td></tr><tr><td align="center">G</td><td align="left">将光标移动到文件未行</td></tr><tr><td align="center">H</td><td align="left">将光标移动到页首</td></tr><tr><td align="center">M</td><td align="left">将光标移动到页中</td></tr><tr><td align="center">L</td><td align="left">将光标移动到页尾</td></tr></tbody></table><h2 id="进入编辑模式"><a href="#进入编辑模式" class="headerlink" title="进入编辑模式"></a>进入编辑模式</h2><table><thead><tr><th align="center">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">i</td><td align="left"><code>在当前字符前开始编辑</code></td></tr><tr><td align="center">I</td><td align="left">在当前行首开始编辑</td></tr><tr><td align="center">a</td><td align="left"><code>在当前字符后开始编辑</code></td></tr><tr><td align="center">A</td><td align="left">在当前行尾开始编辑</td></tr><tr><td align="center">o</td><td align="left">在当前字符下方插入行开始编辑</td></tr><tr><td align="center">O</td><td align="left">在当前字符上方插入行开始编辑</td></tr><tr><td align="center">s</td><td align="left">删除光标所选字符，开始编辑</td></tr><tr><td align="center">S</td><td align="left">删除光标所在行，开始编辑</td></tr></tbody></table><h2 id="辅助操作（命令模式）"><a href="#辅助操作（命令模式）" class="headerlink" title="辅助操作（命令模式）"></a>辅助操作（命令模式）</h2><table><thead><tr><th align="center">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">ctrl + shift +t</td><td align="left">终端左右分屏</td></tr><tr><td align="center">gg&#x3D;G</td><td align="left">自动格式化程序</td></tr><tr><td align="center">shuft + k</td><td align="left">查看帮助文档</td></tr><tr><td align="center">[d</td><td align="left">查看定义语句，将光标移动到待查看函数单词上</td></tr><tr><td align="center">~</td><td align="left"><code>转换大小写</code></td></tr><tr><td align="center">u</td><td align="left">撤销</td></tr><tr><td align="center">ctrl + r</td><td align="left">反向撤销</td></tr><tr><td align="center">dd</td><td align="left">删除整行</td></tr><tr><td align="center">dw</td><td align="left">删除单词（前提条件光标需要在单词首字符位置处）</td></tr><tr><td align="center">yy</td><td align="left">复制整行</td></tr><tr><td align="center">x（小写）</td><td align="left">剪切（不带回车）</td></tr><tr><td align="center">X（大写）</td><td align="left">剪切（带回车）</td></tr><tr><td align="center">p（小写）</td><td align="left">粘贴（在光标位置处，下行粘贴，提前带回车符号）或者（在光标后面粘贴）</td></tr><tr><td align="center">P（大写）</td><td align="left">粘贴（在光标位置处，上行粘贴，提前带回车符号）或者（在光标前面粘贴）</td></tr><tr><td align="center">&#x2F; （比如：”&#x2F;emmet”）</td><td align="left">查找命令，通过“n”继续查找下个字符或单词</td></tr><tr><td align="center">*</td><td align="left">查找命令，在单词位置处，通过“*”命令查找下一个此单词位置</td></tr><tr><td align="center">#</td><td align="left">查找命令，在单词位置处，通过“#”命令查找上一个此单词位置</td></tr><tr><td align="center">ctrl + ww</td><td align="left">切换窗口 （分屏后操作）</td></tr><tr><td align="center">ctrl “+” w “+” &#x3D;</td><td align="left">所有窗口设置成适合大小（分屏后操作）</td></tr></tbody></table><h2 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h2><table><thead><tr><th align="center">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">:w</td><td align="left"><code>保存文件</code></td></tr><tr><td align="center">:q</td><td align="left"><code>退出</code></td></tr><tr><td align="center">:vsp</td><td align="left">左右（分屏操作）</td></tr><tr><td align="center">:sp</td><td align="left">上下（分屏操作）</td></tr><tr><td align="center">:s&#x2F;原数据&#x2F;新数据</td><td align="left">单行替换，将光标移动到替换行上</td></tr><tr><td align="center">:%s&#x2F;原数据&#x2F;新数据</td><td align="left">单行首个替换，将光标移动到替换行上</td></tr><tr><td align="center">:%s&#x2F;原数据&#x2F;新数据&#x2F;g</td><td align="left">全文替换，将光标移动到替换行上</td></tr><tr><td align="center">:起始行号,终止行号%s&#x2F;原数据&#x2F;新数据&#x2F;g</td><td align="left">指定区域全文替换，将光标移动到替换行上</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux新手村 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础教程五：Linux 的文件系统</title>
      <link href="/post/5d1289e5.html"/>
      <url>/post/5d1289e5.html</url>
      
        <content type="html"><![CDATA[<h2 id="课件转载《这个程猿有点呆-Linux基础教程》"><a href="#课件转载《这个程猿有点呆-Linux基础教程》" class="headerlink" title="课件转载《这个程猿有点呆_Linux基础教程》"></a>课件转载《<a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=1">这个程猿有点呆_Linux基础教程</a>》</h2><h1 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h1><ul><li><a href="#l1.1">万事万物皆文件</a></li><li><a href="#l1.2">Linux二级文件目录</a></li><li><a href="#l1.3">Linux的文件操作</a></li><li><a href="#l1.4">读取文件信息</a></li><li><a href="#l1.6">计算机间的数据传输</a></li><li><a href="#l1.7">文件大小</a></li><li><a href="#l1.8">文件压缩</a></li></ul><span id="more"></span><h2 id="万事万物皆文件"><a href="#万事万物皆文件" class="headerlink" title="万事万物皆文件"></a>万事万物皆文件</h2><h3 id="文件系统：操作系统如何管理文件，内部定义了一些规则或者定义"><a href="#文件系统：操作系统如何管理文件，内部定义了一些规则或者定义" class="headerlink" title="文件系统：操作系统如何管理文件，内部定义了一些规则或者定义"></a>文件系统：操作系统如何管理文件，内部定义了一些规则或者定义</h3><h3 id="所以在Linux中所有的东西都是以文件的方式进行操作"><a href="#所以在Linux中所有的东西都是以文件的方式进行操作" class="headerlink" title="所以在Linux中所有的东西都是以文件的方式进行操作"></a>所以在Linux中所有的东西都是以文件的方式进行操作</h3><h3 id="在Linux中，文件的访问不和Window的一样。window依靠的是通过盘符进行访问"><a href="#在Linux中，文件的访问不和Window的一样。window依靠的是通过盘符进行访问" class="headerlink" title="在Linux中，文件的访问不和Window的一样。window依靠的是通过盘符进行访问"></a>在Linux中，文件的访问不和Window的一样。window依靠的是通过盘符进行访问</h3><h3 id="Linux维护着一个树状结构的文件模型"><a href="#Linux维护着一个树状结构的文件模型" class="headerlink" title="Linux维护着一个树状结构的文件模型"></a>Linux维护着一个树状结构的文件模型</h3><ul><li>只有一个根节点 ,他的名字叫做 &#x2F;</li><li>一个节点上可以有多个子节点</li></ul><h3 id="查找文件的方式"><a href="#查找文件的方式" class="headerlink" title="查找文件的方式"></a>查找文件的方式</h3><ul><li><strong>相对路径</strong></li></ul><ol><li>以当前路径为基准点，查找其他资源（vi ..&#x2F;etc&#x2F;sysconfig&#x2F;network）</li></ol><ul><li><strong>绝对路径</strong></li></ul><ol><li>以根目录为基准点，查找其他资源（vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33）</li></ol><ul><li><strong>日常使用中，只要找到路径即可，但是如果是一些配置文件，尽量写绝对路径</strong></li></ul><h3 id="可以随意的挂载磁盘"><a href="#可以随意的挂载磁盘" class="headerlink" title="可以随意的挂载磁盘"></a>可以随意的挂载磁盘</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/disk1 /usr/download</span><br><span class="line">disk1 1T</span><br><span class="line"></span><br><span class="line">mount /dev/disk2 /usr/upload</span><br><span class="line">disk2 100T</span><br><span class="line"></span><br><span class="line">mount /dev/disk3 /usr/upload/photo</span><br><span class="line">disk3 1P</span><br></pre></td></tr></table></figure><h2 id="Linux二级文件目录"><a href="#Linux二级文件目录" class="headerlink" title="Linux二级文件目录"></a>Linux二级文件目录</h2><p><a href="http://image.camcad.cn/2022/03/2022032608164967.jpg"><img src="http://image.camcad.cn/2022/03/2022032608164967.jpg"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">/bin：</span><br><span class="line">bin是Binary的缩写, 这个目录存放着最经常使用的命令。</span><br><span class="line"></span><br><span class="line">/boot：</span><br><span class="line">这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</span><br><span class="line"></span><br><span class="line">/dev ：</span><br><span class="line">dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</span><br><span class="line"></span><br><span class="line">/etc：</span><br><span class="line">这个目录用来存放所有的系统管理所需要的配置文件和子目录。</span><br><span class="line"></span><br><span class="line">/home：</span><br><span class="line">用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</span><br><span class="line"></span><br><span class="line">/lib：</span><br><span class="line">这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</span><br><span class="line"></span><br><span class="line">/lost+found：</span><br><span class="line">这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</span><br><span class="line"></span><br><span class="line">/media：</span><br><span class="line">linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</span><br><span class="line"></span><br><span class="line">/mnt：</span><br><span class="line">系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</span><br><span class="line"></span><br><span class="line">/opt：</span><br><span class="line">这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</span><br><span class="line"></span><br><span class="line">/proc：</span><br><span class="line">这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：echo 1 &gt; /proc/sys/net/ipv4/icmp\_echo\_ignore\_all</span><br><span class="line"></span><br><span class="line">/root：</span><br><span class="line">该目录为系统管理员，也称作超级权限者的用户主目录。</span><br><span class="line"></span><br><span class="line">/sbin：</span><br><span class="line">s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</span><br><span class="line"></span><br><span class="line">/selinux：</span><br><span class="line">这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</span><br><span class="line"></span><br><span class="line">/srv：</span><br><span class="line">该目录存放一些服务启动之后需要提取的数据。</span><br><span class="line"></span><br><span class="line">/sys：</span><br><span class="line">这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</span><br><span class="line"></span><br><span class="line">/tmp：</span><br><span class="line">这个目录是用来存放一些临时文件的。</span><br><span class="line"></span><br><span class="line">/usr：</span><br><span class="line">这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</span><br><span class="line"></span><br><span class="line">/usr/bin：</span><br><span class="line">系统用户使用的应用程序。</span><br><span class="line"></span><br><span class="line">/usr/sbin：</span><br><span class="line">超级用户使用的比较高级的管理程序和系统守护程序。</span><br><span class="line"></span><br><span class="line">/usr/src：</span><br><span class="line">内核源代码默认的放置目录。</span><br><span class="line"></span><br><span class="line">/var：</span><br><span class="line">这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</span><br><span class="line"></span><br><span class="line">/run：</span><br><span class="line">是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</span><br></pre></td></tr></table></figure><h2 id="Linux的文件操作"><a href="#Linux的文件操作" class="headerlink" title="Linux的文件操作"></a>Linux的文件操作</h2><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><ul><li><strong>改变当前工作目录</strong></li></ul><h3 id="ls或ll"><a href="#ls或ll" class="headerlink" title="ls或ll"></a>ls或ll</h3><ul><li><p><strong>显示出指定目录下所有的文件</strong></p></li><li><p>文件的类型（linux共有七&#x2F;八种文件类型）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">普通文件：-</span><br><span class="line"></span><br><span class="line">目录文件：d</span><br><span class="line"></span><br><span class="line">字符设备文件：c</span><br><span class="line"></span><br><span class="line">块设备文件：b</span><br><span class="line"></span><br><span class="line">软连接：l</span><br><span class="line"></span><br><span class="line">管道文件：p</span><br><span class="line"></span><br><span class="line">套接字：s</span><br><span class="line"></span><br><span class="line">未知文件</span><br></pre></td></tr></table></figure></li><li><p>-rw-r–r–. 1 root root 3384 Nov 11 23:51 install.log.syslog</p></li></ul><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><ul><li><strong>创建文件目录</strong></li><li>mkdir -p a&#x2F;b&#x2F;c&#x2F;d&#x2F;e&#x2F;f 会自动创建文件父目录</li><li>mkdir -p lucky&#x2F;{1234}ls 一次可以创建多个子目录</li></ul><h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><ul><li><strong>删除空文件夹</strong></li><li>rmdir: failed to remove ‘a1’: Directory not empty</li><li>rmdir: failed to remove ‘baidu’: Not a directory</li><li>可以安全的删除文件目录</li></ul><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><ul><li><strong>拷贝文件或者文件目录</strong></li><li>cp 源文件 目标目录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp abcd /opt</span><br><span class="line"></span><br><span class="line">cp /opt/abcd ./</span><br></pre></td></tr></table></figure><ul><li><strong>拷贝文件夹</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp -r lucky /opt</span><br><span class="line"></span><br><span class="line">拷贝文件夹下所有的内容</span><br><span class="line">cp: omitting directory ‘/root/a1’</span><br></pre></td></tr></table></figure></li></ul><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><ul><li><strong>移动文件或者文件夹</strong></li><li>mv a1 &#x2F;opt</li><li>mv abc &#x2F;opt</li><li><strong>修改文件名称</strong></li><li>mv a abcd</li></ul><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><ul><li><strong>删除文件</strong></li><li>rm install.log</li><li>rm -f install.log</li><li><strong>删除文件夹</strong></li><li>rm -r abcd</li><li>rm -rf abcd （谨慎使用，从删库到跑路）</li></ul><h3 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h3><ul><li><strong>查看文件的状态</strong></li><li>Inode 当前文件在文件系统的唯一标识，类似于ID</li><li>时间</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">access 访问时间</span><br><span class="line"></span><br><span class="line">modify 修改文件内容时间</span><br><span class="line"></span><br><span class="line">change 修改文件元数据信息时间</span><br><span class="line">  1、文件大小 ，文件所有者 ，文件权限</span><br><span class="line">  2、对于文件的描述信息</span><br></pre></td></tr></table></figure><p><a href="http://image.camcad.cn/2022/03/2022032609001687.jpg"><img src="http://image.camcad.cn/2022/03/2022032609001687.jpg"></a></p><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><ul><li><strong>如果没有就创建一个文件</strong></li><li>如果该文件已经存在，修改文件的三个时间，将三个时间改为当前时间</li></ul><h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h3><ul><li><strong>创建文件的链接（快捷方式）</strong></li><li><strong>软(符号)连接</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">创建软链接</span><br><span class="line">ln -s lucky01 sl</span><br><span class="line">注意：软连接和原始文件不是同一个文件</span><br><span class="line"></span><br><span class="line">删除软链接</span><br><span class="line">rm -rf lucky01</span><br></pre></td></tr></table></figure><ul><li><strong>硬链接</strong></li><li>ln lucky02 hl</li><li>硬链接和原始文件使用文件系统中的同一个文件</li><li>如果你害怕一个文件被别人误删，你可以使用硬链接保护这个文件</li><li>软硬链接在链接文件的时候，推荐使用文件的绝对路径,否则有可能会出现问题</li></ul><h2 id="读取文件信息"><a href="#读取文件信息" class="headerlink" title="读取文件信息"></a>读取文件信息</h2><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><ul><li><strong>将整个文档加载到内存中，并进行一次性显示</strong></li><li>除非后面使用管道，传递数据</li></ul><h3 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h3><ul><li><strong>将整个文档加载到内存中，并进行一次性按行逆序显示</strong></li></ul><h3 id="more-less"><a href="#more-less" class="headerlink" title="more less"></a>more less</h3><ul><li><strong>分页查看文档内容</strong></li><li>快捷键</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">回车 下一行</span><br><span class="line">空格 下一页</span><br><span class="line">b 回退</span><br><span class="line">q 退出</span><br></pre></td></tr></table></figure><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><ul><li><strong>从文章开始读取N行</strong></li><li>默认如果超过10行读取10行,否则读取现在行数</li><li>head -5 profile</li></ul><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><ul><li><strong>从文章末尾读取N行</strong></li><li>head -3 profile tail -1</li><li>利用管道只读取第N行</li><li>管道的作用就相当于把前面的结果以参数的方式传递给后面的命令</li><li><strong>读取新增数据</strong></li><li>ping <a href="http://www.baidu.com/">www.baidu.com</a> &gt;&gt;baidu（将生成的数据放入baidu文件中，如果文件不存在就生成）</li><li>tail -F baidu</li><li>如果f</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1、它会监听指定inode的文件数据变化，直到当文件被删除后</span><br></pre></td></tr></table></figure><ul><li>如果F</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、它会监听指定名字的文件,如果文件被删除后，重新创建</span><br><span class="line">2、它会重新监听新文件的数据变化，监听不受影响</span><br></pre></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><ul><li><strong>查找指定的文件</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-type 按文件类型搜索  d/p/s/c/b/l/f:文件</span><br><span class="line"></span><br><span class="line">-name 按文件名搜索</span><br><span class="line">find ./ -name &quot;\*file\*.jpg&quot;</span><br><span class="line"></span><br><span class="line">-maxdepth 指定搜索深度。应作为第一个参数出现。</span><br><span class="line">find ./ -maxdepth 1 -name &quot;\*file\*.jpg&quot;</span><br><span class="line"></span><br><span class="line">-size 按文件大小搜索. 单位：k、M、G</span><br><span class="line">find /home/itcast -size +20M -size -50M</span><br><span class="line"></span><br><span class="line">-atime、mtime、ctime 天  amin、mmin、cmin 分钟。</span><br><span class="line"></span><br><span class="line">-exec：将find搜索的结果集执行某一指定命令。</span><br><span class="line">find /usr/ -name &#x27;\*tmp\*&#x27; -exec ls -ld &#123;&#125; \\;</span><br><span class="line"></span><br><span class="line">-ok: 以交互式的方式 将find搜索的结果集执行某一指定命令</span><br><span class="line"></span><br><span class="line">-xargs：将find搜索的结果集执行某一指定命令。  当结果集数量过大时，可以分片映射。</span><br><span class="line">find /usr/ -name &#x27;\*tmp\*&#x27;  xargs ls -ld </span><br><span class="line"></span><br><span class="line">-print0：</span><br><span class="line">find /usr/ -name &#x27;\*tmp\*&#x27; -print0  xargs  -0 ls -ld </span><br></pre></td></tr></table></figure><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><ul><li><strong>找文件内容</strong></li><li>grep -r ‘copy’ .&#x2F; -n （<code>-n参数：:显示行号</code>）</li><li>ps aux grep ‘cupsd’  （检索进程结果集）</li></ul><h2 id="计算机间的数据传输"><a href="#计算机间的数据传输" class="headerlink" title="计算机间的数据传输"></a>计算机间的数据传输</h2><h3 id="Window-lt-–-gt-Linux"><a href="#Window-lt-–-gt-Linux" class="headerlink" title="Window &lt;–&gt; Linux"></a>Window &lt;–&gt; Linux</h3><ul><li><strong>lrzsz</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">需要手动安装</span><br><span class="line">yum install lrzsz -y</span><br><span class="line"></span><br><span class="line">rz</span><br><span class="line">将文件从window上传到Linux</span><br><span class="line"></span><br><span class="line">sz</span><br><span class="line">将文件从Linux传输到Window</span><br></pre></td></tr></table></figure><ul><li><strong>xftp</strong>-–较为通用的文件传输方式</li></ul><h3 id="Linux-lt-–-gt-Linux"><a href="#Linux-lt-–-gt-Linux" class="headerlink" title="Linux &lt;–&gt; Linux"></a>Linux &lt;–&gt; Linux</h3><ul><li><strong>scp 源数据地址(source) 目标数据地址(target)</strong></li><li>scp apache-tomcat-7.0.61.tar.gz <a href="mailto:&#114;&#111;&#111;&#x74;&#x40;&#x31;&#57;&#x32;&#x2e;&#49;&#x36;&#56;&#x2e;&#x33;&#x31;&#x2e;&#52;&#52;">&#114;&#111;&#111;&#x74;&#x40;&#x31;&#57;&#x32;&#x2e;&#49;&#x36;&#56;&#x2e;&#x33;&#x31;&#x2e;&#52;&#52;</a>:&#x2F;opt</li><li>scp <a href="mailto:&#114;&#111;&#x6f;&#116;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#54;&#x38;&#46;&#51;&#x31;&#46;&#52;&#52;">&#114;&#111;&#x6f;&#116;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#54;&#x38;&#46;&#51;&#x31;&#46;&#52;&#52;</a>:&#x2F;opt&#x2F;apache-tomcat-7.0.61.tar.gz .&#x2F;</li><li>scp -r apache-tomcat-7.0.61 <a href="mailto:&#x72;&#x6f;&#x6f;&#116;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#x36;&#56;&#x2e;&#x33;&#x31;&#46;&#52;&#52;">&#x72;&#x6f;&#x6f;&#116;&#64;&#x31;&#x39;&#x32;&#46;&#x31;&#x36;&#56;&#x2e;&#x33;&#x31;&#46;&#52;&#52;</a>:&#x2F;opt</li></ul><h2 id="文件大小"><a href="#文件大小" class="headerlink" title="文件大小"></a>文件大小</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">分区信息</span><br><span class="line">df -h</span><br><span class="line"></span><br><span class="line">指定文件目录大小</span><br><span class="line">du -h --max-depth=1 apache-tomcat-7.0.61</span><br><span class="line"></span><br><span class="line">swap</span><br><span class="line">  1、一个特殊分区，以硬盘代替内存</span><br><span class="line">  2、当内存使用满的时候，可以将一部分数据写出到swap分区中</span><br></pre></td></tr></table></figure><h2 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h2><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tar压缩：</span><br><span class="line">  tar -zc(压缩)f(文件) tomcat.tar.gz(压缩后的名字) apache-tomcat-7.0.61(源文件)</span><br><span class="line">    tar -zcvf 要生成的压缩包名 压缩材料。</span><br><span class="line">      tar zcvf  test.tar.gz  file1 dir2   使用 gzip方式压缩。</span><br><span class="line">      tar jcvf  test.tar.gz  file1 dir2   使用 bzip2方式压缩。</span><br><span class="line"></span><br><span class="line">tar解压：</span><br><span class="line">  tar -zx(解压)v(过程)f(文件) lucky.tar.gz</span><br><span class="line">      tar zxvf  test.tar.gz   使用 gzip方式解压缩。</span><br><span class="line">      tar jxvf  test.tar.gz   使用 bzip2方式解压缩。</span><br></pre></td></tr></table></figure><h3 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar解压：</span><br><span class="line">  rar a -r  压缩包名（带.rar后缀） 压缩材料。</span><br><span class="line">    rar a -r testrar.rarstdio.h test2.mp3</span><br><span class="line"></span><br><span class="line">rar解压：</span><br><span class="line">  unrar x 压缩包名（带.rar后缀）</span><br></pre></td></tr></table></figure><h3 id="zip和unzip"><a href="#zip和unzip" class="headerlink" title="zip和unzip"></a>zip和unzip</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">安装</span><br><span class="line">yum install zip unzip -y</span><br><span class="line"></span><br><span class="line">zip压缩：</span><br><span class="line">  zip -r 压缩包名（带.zip后缀） 压缩材料。</span><br><span class="line">    zip -r testzip.zip dir stdio.h test2.mp3</span><br><span class="line"></span><br><span class="line">unzip解压：</span><br><span class="line">  unzip 压缩包名（带.zip后缀）</span><br><span class="line">    unzip  testzip.zip</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux新手村 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础教程四：Linux 命令</title>
      <link href="/post/7c6d711a.html"/>
      <url>/post/7c6d711a.html</url>
      
        <content type="html"><![CDATA[<h2 id="课件转载《这个程猿有点呆-Linux基础教程》"><a href="#课件转载《这个程猿有点呆-Linux基础教程》" class="headerlink" title="课件转载《这个程猿有点呆_Linux基础教程》"></a>课件转载《<a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=1">这个程猿有点呆_Linux基础教程</a>》</h2><h1 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h1><ul><li><a href="#l1.1">命令学习法</a></li><li><a href="#l1.2">常用的命令</a></li><li><a href="#l1.3">特殊字符</a></li></ul><h2 id="命令学习法"><a href="#命令学习法" class="headerlink" title="命令学习法"></a>命令学习法</h2><h3 id="Linux命令与参数之间必须用空格隔开"><a href="#Linux命令与参数之间必须用空格隔开" class="headerlink" title="Linux命令与参数之间必须用空格隔开"></a>Linux命令与参数之间必须用空格隔开</h3><h3 id="Linux命令是区分大小写的"><a href="#Linux命令是区分大小写的" class="headerlink" title="Linux命令是区分大小写的"></a>Linux命令是区分大小写的</h3><span id="more"></span><h3 id="如果输入了错误的命令"><a href="#如果输入了错误的命令" class="headerlink" title="如果输入了错误的命令"></a>如果输入了错误的命令</h3><ul><li>-bash: abcd: command not found</li><li>命令敲错了</li><li>命令未安装</li></ul><h3 id="type-命令的类型"><a href="#type-命令的类型" class="headerlink" title="type 命令的类型"></a>type 命令的类型</h3><ul><li>cd is a shell builtin</li><li>ping is &#x2F;bin&#x2F;ping</li><li>ll is aliased to `ls -l –color&#x3D;auto’</li><li>for is a shell keyword</li></ul><h3 id="命令的帮助文档"><a href="#命令的帮助文档" class="headerlink" title="命令的帮助文档"></a>命令的帮助文档</h3><p>**help—**内置命令的帮助文档</p><p><strong>man</strong>-–外部命令的帮助文档</p><ol><li>因为当前系统为minimal的安装包，very basic 没有man包</li><li>需要手动安装man（<code>yum install man man-pages -y</code>）</li></ol><p><strong>将来工作中如果遇到生疏的命令，直接百度</strong></p><ol><li>如果不是为了装C,完全没必要查看命令手册</li></ol><h2 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">whereis（例如：whereis cd）</td><td align="left">查询命令文件的位置</td></tr><tr><td align="left">file（例如：file anaconda-ks.cfg）</td><td align="left">查看文件的类型</td></tr><tr><td align="left">who</td><td align="left">查看当前在线的用户</td></tr><tr><td align="left">whoami</td><td align="left">我是谁</td></tr><tr><td align="left">pwd</td><td align="left">我在那</td></tr><tr><td align="left">uname -a</td><td align="left">查看内核信息</td></tr><tr><td align="left">echo 类似于 sout syso</td><td align="left">打印语句</td></tr><tr><td align="left">clear</td><td align="left">清屏</td></tr><tr><td align="left">history</td><td align="left">历史</td></tr></tbody></table><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">“.” 点</span><br><span class="line">  1、如果文件的开始是.说明当前文件是一个隐藏文件</span><br><span class="line">  2、“.” 指向当前目录</span><br><span class="line">  3、“..” 指向当前目录的上级目录</span><br><span class="line"></span><br><span class="line">“$”</span><br><span class="line">  1、说明这是一个变量</span><br><span class="line">  2、“$PATH” Linux的环境变量</span><br><span class="line"></span><br><span class="line">“\*” 星号</span><br><span class="line">  1、通配符</span><br><span class="line"></span><br><span class="line">“~”</span><br><span class="line">  1、当前用户的家目录</span><br><span class="line">  2、每个用户的家目录是不同的</span><br><span class="line">  3、root用户家目录在系统根目录下</span><br><span class="line">  4、其他用户的家目录在/home/用户名为家目录</span><br><span class="line"></span><br><span class="line">空格</span><br><span class="line">  1、Linux的命令与参数用空格隔开</span><br><span class="line"></span><br><span class="line">“/”</span><br><span class="line">  1、整个Linux的文件根目录</span><br><span class="line"></span><br><span class="line">命令的参数</span><br><span class="line">  1、如果是单词一般加 “--”</span><br><span class="line">  2、如果是字母或者缩写 一般加 “-”</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux新手村 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础教程三：虚拟机安装与配置</title>
      <link href="/post/a0504be0.html"/>
      <url>/post/a0504be0.html</url>
      
        <content type="html"><![CDATA[<h2 id="课件转载《这个程猿有点呆-Linux基础教程》"><a href="#课件转载《这个程猿有点呆-Linux基础教程》" class="headerlink" title="课件转载《这个程猿有点呆_Linux基础教程》"></a>课件转载《<a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=1">这个程猿有点呆_Linux基础教程</a>》</h2><h1 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h1><ul><li><a href="#l1.1">虚拟化技术</a></li><li><a href="#l1.2">创建虚拟主机</a></li><li><a href="#l1.3">安装操作系统</a></li><li><a href="#l1.4">配置常见参数</a></li><li><a href="#l1.5">快照与克隆</a></li><li><a href="#l1.6">修改克隆机配置</a></li><li><a href="#l1.7">连接Linux服务器</a></li></ul><h2 id="虚拟化技术"><a href="#虚拟化技术" class="headerlink" title="虚拟化技术"></a>虚拟化技术</h2><ul><li><strong>可以更好的利用计算机闲置的资源</strong></li><li><strong>我们可以在计算机中虚拟出多台虚拟机帮助我们执行程序或者业务</strong></li><li><strong>虚拟机的各种组成理论上和真实主机是一样的</strong></li><li><strong>如果要使用这种技术只需要安装对应的软件即可</strong><span id="more"></span></li></ul><ol><li>Virtualbox</li><li>VirtualMachine</li></ol><h2 id="创建虚拟主机"><a href="#创建虚拟主机" class="headerlink" title="创建虚拟主机"></a>创建虚拟主机</h2><p><a href="https://notes.camcad.cn/5175.html">https://notes.camcad.cn/5175.html</a></p><h2 id="安装操作系统"><a href="#安装操作系统" class="headerlink" title="安装操作系统"></a>安装操作系统</h2><p><a href="https://www.bilibili.com/video/BV1554y1n7zv?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1554y1n7zv?spm_id_from&#x3D;333.999.0.0</a></p><h2 id="配置常见参数"><a href="#配置常见参数" class="headerlink" title="配置常见参数"></a>配置常见参数</h2><h3 id="查看自己虚拟网卡地址"><a href="#查看自己虚拟网卡地址" class="headerlink" title="查看自己虚拟网卡地址"></a>查看自己虚拟网卡地址</h3><ul><li><strong>编辑–&gt;虚拟机网络编辑器–&gt;vmnet8</strong></li></ul><p><a href="http://image.camcad.cn/2022/03/2022032605551557.jpg"><img src="http://image.camcad.cn/2022/03/2022032605551557.jpg"></a></p><h3 id="修改网络配置信息"><a href="#修改网络配置信息" class="headerlink" title="修改网络配置信息"></a>修改网络配置信息</h3><ul><li><strong>vi编辑器简单使用</strong></li></ul><ol><li>光标位置</li><li>dd—删除一行</li><li>i—将文档变成可修改模式</li><li>esc—退出编辑</li><li>:wq—保存并退出</li></ol><ul><li><strong>修改网络信息</strong></li></ul><ol><li>vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</li></ol><p><a href="http://image.camcad.cn/2022/03/2022032606072938.jpg"><img src="http://image.camcad.cn/2022/03/2022032606072938.jpg"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--修改</span><br><span class="line">ONBOOT=yes</span><br><span class="line">BOOTPROTO=static //静态网络IP dhcp 动态获取网络IP</span><br><span class="line">--添加</span><br><span class="line">IPADDR=192.168.58.100</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.58.2</span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">删除------</span><br><span class="line">UUID</span><br></pre></td></tr></table></figure><p><a href="http://image.camcad.cn/2022/03/2022032606130219.jpg"><img src="http://image.camcad.cn/2022/03/2022032606130219.jpg"></a></p><ul><li><strong>重启网卡重新加载配置文件</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br><span class="line">systemctl restart network.service</span><br><span class="line">ping www.baidu.com</span><br><span class="line">ctrl+c 终止命令的执行</span><br></pre></td></tr></table></figure><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><ul><li>保护本机的端口不被别人访问</li><li>如果端口需要被别人访问到，需要添加端口的防火墙例外</li><li>关闭防火墙</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">查看防火墙状态</span><br><span class="line">systemctl status firewalld (查看防火墙状态)</span><br><span class="line"></span><br><span class="line">本次开机状态下防火墙关闭</span><br><span class="line">systemctl stop firewalld (本次服务内关闭防火墙)</span><br><span class="line"></span><br><span class="line">服务器重启后防火墙禁用</span><br><span class="line">systemctl disable firewalld(禁用防火墙服务)</span><br></pre></td></tr></table></figure><h3 id="软件安装限制"><a href="#软件安装限制" class="headerlink" title="软件安装限制"></a>软件安装限制</h3><ul><li>操作系统对未知软件的安装有可能拒绝或者警告，我们需要禁用这个功能</li><li><code>vi /etc/selinux/config</code></li><li>SELINUX&#x3D;disabled</li></ul><p><a href="http://image.camcad.cn/2022/03/2022032606260711.jpg"><img src="http://image.camcad.cn/2022/03/2022032606260711.jpg"></a></p><h3 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">halt</span><br><span class="line">直接拔掉电源</span><br><span class="line"></span><br><span class="line">poweroff</span><br><span class="line">直接关闭机器，但是有可能当前虚拟机其他人在使用</span><br><span class="line"></span><br><span class="line">shutdown -h now</span><br><span class="line">马上关闭计算机 ，但是可以给其他用户发送消息</span><br><span class="line"></span><br><span class="line">reboot</span><br><span class="line">重启虚拟机</span><br></pre></td></tr></table></figure><h2 id="快照与克隆"><a href="#快照与克隆" class="headerlink" title="快照与克隆"></a>快照与克隆</h2><h3 id="拍摄快照"><a href="#拍摄快照" class="headerlink" title="拍摄快照"></a>拍摄快照</h3><ul><li>记录当前虚拟机的状态</li><li>拍摄快照的时候一定要关机</li></ul><h3 id="转到"><a href="#转到" class="headerlink" title="转到"></a>转到</h3><ul><li>回到某一个历史快照的节点</li></ul><h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><ul><li>复制某一个历史快照节点</li><li>克隆的方式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">链接克隆</span><br><span class="line">  1.当前节点文件夹只存储差异性数据</span><br><span class="line">  2.相同数据存放在原始节点上</span><br><span class="line">  3.优点：节省硬盘空间 缺点：耦合性大</span><br><span class="line"></span><br><span class="line">完整克隆</span><br><span class="line">  1.就是基于原始节点完全拷贝到新节点的文件夹中</span><br><span class="line">  2.优点：耦合性抵 缺点：硬盘空间使用大</span><br><span class="line">  3.推荐使用完整克隆</span><br></pre></td></tr></table></figure><p><a href="http://image.camcad.cn/2022/03/2022032606373816.jpg"><img src="http://image.camcad.cn/2022/03/2022032606373816.jpg"></a></p><h2 id="修改克隆机配置"><a href="#修改克隆机配置" class="headerlink" title="修改克隆机配置"></a>修改克隆机配置</h2><h3 id="网络信息"><a href="#网络信息" class="headerlink" title="网络信息"></a>网络信息</h3><p>参考 <a href="#l1.4">修改网络配置信息</a></p><h3 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hostname</span><br><span class="line">修改完成后需要重启生效</span><br><span class="line"></span><br><span class="line">hostname bd16</span><br><span class="line">本次启动中有效，重启虚拟机还是使用原来的名字</span><br></pre></td></tr></table></figure><h2 id="连接Linux服务器"><a href="#连接Linux服务器" class="headerlink" title="连接Linux服务器"></a>连接Linux服务器</h2><h3 id="Xshell—负责向虚拟机输入命令"><a href="#Xshell—负责向虚拟机输入命令" class="headerlink" title="Xshell—负责向虚拟机输入命令"></a>Xshell—负责向虚拟机输入命令</h3><h3 id="XFtp—负责向虚拟机传输文件"><a href="#XFtp—负责向虚拟机传输文件" class="headerlink" title="XFtp—负责向虚拟机传输文件"></a>XFtp—负责向虚拟机传输文件</h3>]]></content>
      
      
      <categories>
          
          <category> Linux新手村 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础教程二：计算机软件体系</title>
      <link href="/post/33b0a85d.html"/>
      <url>/post/33b0a85d.html</url>
      
        <content type="html"><![CDATA[<h2 id="课件转载《这个程猿有点呆-Linux基础教程》"><a href="#课件转载《这个程猿有点呆-Linux基础教程》" class="headerlink" title="课件转载《这个程猿有点呆_Linux基础教程》"></a>课件转载《<a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=1">这个程猿有点呆_Linux基础教程</a>》</h2><h1 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h1><ul><li><a href="#l1.1">网络连接概念</a></li><li><a href="#l1.2">网络连接模式</a></li><li><a href="#l1.3">软件分类</a></li><li><a href="#l1.4">Linux分支</a></li><li><a href="#l1.5">Linux下载</a></li></ul><h2 id="网络连接概念"><a href="#网络连接概念" class="headerlink" title="网络连接概念"></a>网络连接概念</h2><h3 id="IP地址IPADDR"><a href="#IP地址IPADDR" class="headerlink" title="IP地址IPADDR"></a>IP地址IPADDR</h3><ul><li><strong>IP地址是一种逻辑地址，用来标识网络中一个个主机</strong></li></ul><ol><li>IP地址&#x3D;网络地址+主机地址</li><li>IP地址是一个 4 * 8bit（1字节）由 0&#x2F;1 组成的数字串（IP4协议）<span id="more"></span></li></ol><ul><li><strong>子网掩码NETMASK</strong></li></ul><ol><li>子网掩码只有一个功能，就是将IP地址划分为网络地址和主机地址两部分</li><li>子网掩码用来判断任意两台计算机的IP地址是否在同一个子网中的根据</li><li>（A 192.168.7.111， B 192.168.8.222）</li><li>（255.255.0.0）</li></ol><ul><li><strong>默认网关GATEWAY</strong></li></ul><ol><li>连接两个不同的网络的设备都可以叫网关设备；网关的作用就是实现两个网络之间进行通讯与控制</li><li>网关地址就是网关设备的IP地址</li></ol><ul><li><strong>域名服务器DNS</strong></li></ul><ol><li>DNS是域名服务器，用来解析域名的（域名和IP之间的解析）</li><li>如果没有这东西，登陆某个网站时就必须输入该网站的IP地址，有了DNS就可以直接输入网址</li><li>C:\Windows\System32\drivers\etc\hosts（本地主机配置文件：127.0.0.1）</li></ol><p><a href="http://image.camcad.cn/2022/03/2022032603590677.jpg"><img src="http://image.camcad.cn/2022/03/2022032603590677.jpg"></a></p><h2 id="网络连接模式"><a href="#网络连接模式" class="headerlink" title="网络连接模式"></a>网络连接模式</h2><h3 id="host-onboy-主机模式"><a href="#host-onboy-主机模式" class="headerlink" title="host-onboy(主机模式)"></a>host-onboy(主机模式)</h3><ul><li>在某些特殊的网络调试环境中，要求将真实环境和虚拟环境隔离开，这时你就可采用hostonboy模式</li><li>在host-onboy模式中，所有的虚拟系统是可以相互通信的，但虚拟系统和真实的网络是被隔离开的</li><li>在host-onboy模式下，虚拟系统的TCP&#x2F;IP配置信息都是由VMnet1(host-onboy)虚拟网络的DHCP服务器来动态分配的</li></ul><h3 id="bridged-桥接模式"><a href="#bridged-桥接模式" class="headerlink" title="bridged(桥接模式)"></a>bridged(桥接模式)</h3><ul><li>VMWare虚拟出来的操作系统就像是局域网中的一台独立的主机，它可以访问网内任何一台机 器</li><li>使用桥接模式的虚拟系统和宿主机器的关系，就像连接在同一个Hub上的两台电脑</li><li>当前主机IP 为 192.168.8.100 虚拟机 192.168.8.xxx（学习期间为了防止IP冲突，所以不选择这种模式）</li></ul><h3 id="NAT-网络地址转换模式"><a href="#NAT-网络地址转换模式" class="headerlink" title="NAT(网络地址转换模式)"></a>NAT(网络地址转换模式)</h3><ul><li>使用NAT模式，就是让虚拟系统借助NAT(网络地址转换)功能，通过宿主机器所在的网络来访问公网</li><li>NAT模式下的虚拟系统的TCP&#x2F;IP配置信息是由VMnet8(NAT)虚拟网络的DHCP服务器提供的虚拟系统也就无法和本局域网中的其他真实主机进行通讯</li></ul><p><a href="http://image.camcad.cn/2022/03/2022032604095623.jpg"><img src="http://image.camcad.cn/2022/03/2022032604095623.jpg"></a></p><h2 id="软件分类"><a href="#软件分类" class="headerlink" title="软件分类"></a>软件分类</h2><h3 id="应用软件"><a href="#应用软件" class="headerlink" title="应用软件"></a>应用软件</h3><ul><li>就是为了实现某些业务功能</li><li>应用软件要基于对应的系统软件</li><li>不同的操作系统要安装不同的软件</li></ul><h3 id="系统软件"><a href="#系统软件" class="headerlink" title="系统软件"></a>系统软件</h3><ul><li>就是为了和硬件打交道</li><li>屏蔽应用软件与硬件的差异</li></ul><h3 id="系统软件的分类"><a href="#系统软件的分类" class="headerlink" title="系统软件的分类"></a>系统软件的分类</h3><ul><li><strong>Window</strong></li></ul><ol><li>用户量全球最大</li><li>收费，不开源，民用较多</li><li>各种软件比较齐全</li></ol><ul><li><strong>Mac</strong></li></ul><ol><li>只限定于某些苹果的品牌机</li><li>ios–自成一家</li></ol><ul><li><strong>GNU&#x2F;Linux</strong></li></ul><ol><li>GNU是一个开源软件组织,世界上所有的软件都应该开源免费</li><li>GNU Is Not Unix</li><li>GCC++</li><li>托瓦兹 林纳斯 Linus – Linux(Linux is not unix)</li><li>Logo是企鹅</li></ol><h2 id="Linux分支"><a href="#Linux分支" class="headerlink" title="Linux分支"></a>Linux分支</h2><h3 id="RedHat（收费）"><a href="#RedHat（收费）" class="headerlink" title="RedHat（收费）"></a>RedHat（收费）</h3><ul><li><strong>CentOS</strong></li></ul><ol><li>完全开源免费</li><li>不要使用最新版的CentOS</li></ol><ul><li><strong>主要用于服务器版本</strong></li></ul><p><a href="http://image.camcad.cn/2022/03/2022032604202270.jpg"><img src="http://image.camcad.cn/2022/03/2022032604202270.jpg"></a></p><h3 id="Debain（免费）"><a href="#Debain（免费）" class="headerlink" title="Debain（免费）"></a>Debain（免费）</h3><ul><li><strong>Ubuntu</strong></li></ul><ol><li>视窗界面良好的Linux系统</li><li>一些主流的软件都支持Ubuntu系统</li></ol><p><a href="http://image.camcad.cn/2022/03/2022032604214147.jpg"><img src="http://image.camcad.cn/2022/03/2022032604214147.jpg"></a></p><h2 id="Linux下载"><a href="#Linux下载" class="headerlink" title="Linux下载"></a>Linux下载</h2><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><p><a href="https://linux.org/">https://linux.org/</a></p><h3 id="下载页面"><a href="#下载页面" class="headerlink" title="下载页面"></a>下载页面</h3><p><a href="https://linux.org/pages/download/">https://linux.org/pages/download/</a></p><h3 id="CentOS7-6下载地址"><a href="#CentOS7-6下载地址" class="headerlink" title="CentOS7.6下载地址"></a>CentOS7.6下载地址</h3><p><a href="http://vault.centos.org/7.6.1810/">http://vault.centos.org/7.6.1810/</a></p><h3 id="镜像的分类"><a href="#镜像的分类" class="headerlink" title="镜像的分类"></a>镜像的分类</h3><ul><li><strong>everything</strong></li></ul><p>This image contains the complete set of packages for CentOS Linux 7. It can be used for installing or populating a local mirror.</p><p>此映像包含用于CentOS Linux 7的完整软件包集。它可以用于安装或填充本地镜像。</p><ul><li><strong>minimal</strong></li></ul><p>The aim of this image is to install a very basic CentOS 6.5 system with the minimum of packages needed to have a functional system.</p><p>这个映像的目的是安装一个非常基本的CentOS 6.5系统，使用拥有一个功能系统所需的最小包。</p><ul><li><strong>netinstall</strong></li></ul><p>This is the network install and rescue image.</p><p>这是网络安装和救援映像。</p><h3 id="操作系统的位数"><a href="#操作系统的位数" class="headerlink" title="操作系统的位数"></a>操作系统的位数</h3><ul><li><strong>优先选择64位，将来安装软件有更好兼容性</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux新手村 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 基础教程一：计算机硬件体系</title>
      <link href="/post/cc034800.html"/>
      <url>/post/cc034800.html</url>
      
        <content type="html"><![CDATA[<h2 id="课件转载《这个程猿有点呆-Linux基础教程》"><a href="#课件转载《这个程猿有点呆-Linux基础教程》" class="headerlink" title="课件转载《这个程猿有点呆_Linux基础教程》"></a>课件转载《<a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=1">这个程猿有点呆_Linux基础教程</a>》</h2><h1 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h1><ul><li><a href="#l1.1">计算机硬件之冯诺依曼体系</a></li><li><a href="#l1.2">冯诺依曼体系硬件组成五大模块</a></li><li><a href="#l1.3">机械硬盘与固态硬盘的工作原理</a></li><li><a href="#l1.4">顺序读写与随机读写</a></li></ul><h2 id="计算机硬件之冯诺依曼体系"><a href="#计算机硬件之冯诺依曼体系" class="headerlink" title="计算机硬件之冯诺依曼体系"></a>计算机硬件之冯诺依曼体系</h2><h3 id="冯-诺依曼体系结构"><a href="#冯-诺依曼体系结构" class="headerlink" title="冯 诺依曼体系结构"></a>冯 诺依曼体系结构</h3><ul><li>计算机处理的数据和指令一律用二进制数表示</li><li>顺序执行程序</li><li>计算机硬件由运算器、控制器、存储器、输入设备和输出设备五大部分组成<span id="more"></span></li></ul><p><a href="http://image.camcad.cn/2022/03/2022032507270843.jpg"><img src="http://image.camcad.cn/2022/03/2022032507270843.jpg"></a></p><h2 id="冯诺依曼体系硬件组成五大模块"><a href="#冯诺依曼体系硬件组成五大模块" class="headerlink" title="冯诺依曼体系硬件组成五大模块"></a>冯诺依曼体系硬件组成五大模块</h2><h3 id="输入设备"><a href="#输入设备" class="headerlink" title="输入设备"></a>输入设备</h3><ul><li><strong>输入设备用来将人们熟悉的信息形式转换为机器能够识别的信息形式</strong></li></ul><ol><li>常见的有键盘，鼠标等</li></ol><h3 id="输出设备"><a href="#输出设备" class="headerlink" title="输出设备"></a>输出设备</h3><ul><li><strong>输出设备可以将机器运算结果转换为人们熟悉的信息形式</strong></li></ul><ol><li>打印机输出，显示器输出等</li></ol><h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><ul><li><strong>存储器用来存放数据和程序</strong></li><li><strong>RAM(random access memory）即随机存储 内存</strong>：</li></ul><ol><li>速度快，容量小</li><li>掉电易失</li><li>逻辑IO</li></ol><ul><li><strong>ROM（Read-Onboy Memory）即只读内存 硬盘</strong>：</li></ul><ol><li>容量大，速度相对较慢</li><li>长久保存</li><li>物理IO</li></ol><h3 id="CPU（中央处理器）"><a href="#CPU（中央处理器）" class="headerlink" title="CPU（中央处理器）"></a>CPU（中央处理器）</h3><ul><li><strong>控制器</strong></li></ul><ol><li>控制器主要用来控制和指挥程序和数据的输入运行，以及处理运算结果</li></ol><ul><li><strong>运算器</strong></li></ul><ol><li>运算器主要运行算数运算和逻辑运算，并将中间结果暂存到运算器中</li></ol><p><a href="http://image.camcad.cn/2022/03/2022032511520964.jpg"><img src="http://image.camcad.cn/2022/03/2022032511520964.jpg"></a></p><h2 id="机械硬盘与固态硬盘的工作原理"><a href="#机械硬盘与固态硬盘的工作原理" class="headerlink" title="机械硬盘与固态硬盘的工作原理"></a>机械硬盘与固态硬盘的工作原理</h2><h3 id="硬盘的分类（硬盘按照存储介质的不同可以分为如下两种）"><a href="#硬盘的分类（硬盘按照存储介质的不同可以分为如下两种）" class="headerlink" title="硬盘的分类（硬盘按照存储介质的不同可以分为如下两种）"></a>硬盘的分类（硬盘按照存储介质的不同可以分为如下两种）</h3><ul><li><strong>机械硬盘（Hard Disk Driver, HDD）</strong></li></ul><ol><li>机械硬盘采用磁性碟片来存储数据</li><li>用显微镜把盘片放大，会看见盘片表面凹凸不平，凸起的地方被磁化，凹的地方是没有被磁化</li><li>凸起的地方代表数字1（磁化为1），凹的地方代表数字0。</li><li>硬盘可以以二进制来存储表示文字、图片等信息。</li><li>硬盘可以根据转速来判断硬盘的好坏 7200转&#x2F;分 100-200M&#x2F;s</li></ol><p><a href="http://image.camcad.cn/2022/03/2022032512030263.jpg"><img src="http://image.camcad.cn/2022/03/2022032512030263.jpg"></a></p><ul><li><strong>固态硬盘（Solid State Disk, SSD）</strong></li></ul><ol><li>固态硬盘通过闪存颗粒（固态电子存储芯片阵列）来存储数据</li></ol><p><a href="http://image.camcad.cn/2022/03/2022032512072028.jpg"><img src="http://image.camcad.cn/2022/03/2022032512072028.jpg"></a></p><ul><li><strong>读写速度的区别</strong></li></ul><ol><li>固态硬盘的读取速度普遍可以达到400M&#x2F;s，写入速度也可以达到130M&#x2F;s以上</li><li>其读写速度是普通机械硬盘的3-5倍</li></ol><ul><li><strong>机械硬盘的数据读写</strong></li></ul><ol><li>主流的硬盘半机械半电子硬盘(机械硬盘)</li><li>硬盘的转速(转速越快读取越快)</li><li>寻道时间</li><li>数据传输时间</li></ol><p><a href="http://image.camcad.cn/2022/03/2022032512111375.jpg"><img src="http://image.camcad.cn/2022/03/2022032512111375.jpg"></a></p><h2 id="顺序读写与随机读写"><a href="#顺序读写与随机读写" class="headerlink" title="顺序读写与随机读写"></a>顺序读写与随机读写</h2><p><a href="http://image.camcad.cn/2022/03/2022032512171823.jpg"><img src="http://image.camcad.cn/2022/03/2022032512171823.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> Linux新手村 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础教程</title>
      <link href="/post/b094a100.html"/>
      <url>/post/b094a100.html</url>
      
        <content type="html"><![CDATA[<h4 id="计算机硬件体系"><a href="#计算机硬件体系" class="headerlink" title="计算机硬件体系"></a>计算机硬件体系</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">001</td><td align="left"><a href="https://notes.camcad.cn/post/cc034800.html">Linux基础教程001：计算机硬件之冯诺依曼体系</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=1">12:44</a></td></tr><tr><td align="center">002</td><td align="left"><a href="https://notes.camcad.cn/post/cc034800.html">Linux基础教程002：冯诺依曼体系硬件组成五大模块</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=2">09:01</a></td></tr><tr><td align="center">003</td><td align="left"><a href="https://notes.camcad.cn/post/cc034800.html">Linux基础教程003：机械硬盘与固态硬盘的工作原理</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=3">10:27</a></td></tr><tr><td align="center">004</td><td align="left"><a href="https://notes.camcad.cn/post/cc034800.html">Linux基础教程004：机械硬盘数据读取方式</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=4">09:19</a></td></tr><tr><td align="center">005</td><td align="left"><a href="https://notes.camcad.cn/post/cc034800.html">Linux基础教程005：顺序读写与随机读写</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=5">03:29</a></td></tr></tbody></table><span id="more"></span><h4 id="计算机软件体系"><a href="#计算机软件体系" class="headerlink" title="计算机软件体系"></a>计算机软件体系</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">006</td><td align="left"><a href="https://notes.camcad.cn/post/33b0a85d.html">Linux基础教程006：网络组成之网址-子网掩码-默认网关</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=6">15:12</a></td></tr><tr><td align="center">007</td><td align="left"><a href="https://notes.camcad.cn/post/33b0a85d.html">Linux基础教程007：网络组成8域名解析服务</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=7">16:01</a></td></tr><tr><td align="center">008</td><td align="left"><a href="https://notes.camcad.cn/post/33b0a85d.html">Linux基础教程008：网络的桥接和网络地址转换</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=8">07:12</a></td></tr><tr><td align="center">009</td><td align="left"><a href="https://notes.camcad.cn/post/33b0a85d.html">Linux基础教程009：软件的分类</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=9">12:31</a></td></tr><tr><td align="center">010</td><td align="left"><a href="https://notes.camcad.cn/post/33b0a85d.html">Linux基础教程010：Linux系统的分支</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=10">04:47</a></td></tr><tr><td align="center">011</td><td align="left"><a href="https://notes.camcad.cn/post/33b0a85d.html">Linux基础教程011：Linux官网与系统版本选择</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=11">09:27</a></td></tr></tbody></table><h4 id="虚拟机安装与配置"><a href="#虚拟机安装与配置" class="headerlink" title="虚拟机安装与配置"></a>虚拟机安装与配置</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">012</td><td align="left"><a href="https://notes.camcad.cn/post/a0504be0.html">Linux基础教程012：虚拟化技术</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=12">04:16</a></td></tr><tr><td align="center">013</td><td align="left"><a href="https://notes.camcad.cn/post/a0504be0.html">Linux基础教程013：VM安装流程</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=13">04:01</a></td></tr><tr><td align="center">014</td><td align="left"><a href="https://notes.camcad.cn/post/a0504be0.html">Linux基础教程014：创建新的虚拟机</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=14">05:45</a></td></tr><tr><td align="center">015</td><td align="left"><a href="https://notes.camcad.cn/post/a0504be0.html">Linux基础教程015：为新的虚拟机安装操作系统</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=15">13:02</a></td></tr><tr><td align="center">016</td><td align="left"><a href="https://notes.camcad.cn/post/a0504be0.html">Linux基础教程016：配置Linux网络信息</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=16">14:00</a></td></tr><tr><td align="center">017</td><td align="left"><a href="https://notes.camcad.cn/post/a0504be0.html">Linux基础教程017：配置Linux防火墙</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=17">03:26</a></td></tr><tr><td align="center">018</td><td align="left"><a href="https://notes.camcad.cn/post/a0504be0.html">Linux基础教程018：配置Linux软件安装限制</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=18">02:34</a></td></tr><tr><td align="center">019</td><td align="left"><a href="https://notes.camcad.cn/post/a0504be0.html">Linux基础教程019：关机并拍摄虚拟机快照</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=19">03:41</a></td></tr><tr><td align="center">020</td><td align="left"><a href="https://notes.camcad.cn/post/a0504be0.html">Linux基础教程020：虚拟机快照的两种克隆方式</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=20">11:03</a></td></tr><tr><td align="center">021</td><td align="left"><a href="https://notes.camcad.cn/post/a0504be0.html">Linux基础教程021：虚拟机本地连接工具XShell+XFtp（连接Linux服务器）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=21">08:44</a></td></tr></tbody></table><h4 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">022</td><td align="left"><a href="https://notes.camcad.cn/post/7c6d711a.html">Linux基础教程022：Linux命令学习策略</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=22">10:16</a></td></tr><tr><td align="center">023</td><td align="left"><a href="https://notes.camcad.cn/post/7c6d711a.html">Linux基础教程023：Linux常见命令</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=23">07:39</a></td></tr><tr><td align="center">024</td><td align="left"><a href="https://notes.camcad.cn/post/7c6d711a.html">Linux基础教程024：Linux常见的特殊符号</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=24">09:18</a></td></tr></tbody></table><h4 id="Linux的文件系统"><a href="#Linux的文件系统" class="headerlink" title="Linux的文件系统"></a>Linux的文件系统</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">025</td><td align="left"><a href="https://notes.camcad.cn/post/5d1289e5.html">Linux基础教程025：Linux文件系统和挂载策略</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=25">16:45</a></td></tr><tr><td align="center">026</td><td align="left"><a href="https://notes.camcad.cn/post/5d1289e5.html">Linux基础教程026：Linux万事万物皆文件</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=26">04:05</a></td></tr><tr><td align="center">027</td><td align="left"><a href="https://notes.camcad.cn/post/5d1289e5.html">Linux基础教程027：Linux根目录下文件夹作用</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=27">09:21</a></td></tr><tr><td align="center">028</td><td align="left"><a href="https://notes.camcad.cn/post/5d1289e5.html">Linux基础教程028：Linux文件系统命令-cd ll mkdir rmdir</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=28">10:53</a></td></tr><tr><td align="center">029</td><td align="left"><a href="https://notes.camcad.cn/post/5d1289e5.html">Linux基础教程029：Linux文件系统命令-cp拷贝</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=29">04:40</a></td></tr><tr><td align="center">030</td><td align="left"><a href="https://notes.camcad.cn/post/5d1289e5.html">Linux基础教程030：Linux文件系统命令-mv剪切与重命名</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=30">02:21</a></td></tr><tr><td align="center">031</td><td align="left"><a href="https://notes.camcad.cn/post/5d1289e5.html">Linux基础教程031：Linux文件系统命令-rm删除</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=31">03:49</a></td></tr><tr><td align="center">032</td><td align="left"><a href="https://notes.camcad.cn/post/5d1289e5.html">Linux基础教程032：Linux文件系统命令-touch创建 stat元数据</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=32">07:15</a></td></tr><tr><td align="center">033</td><td align="left"><a href="https://notes.camcad.cn/post/5d1289e5.html">Linux基础教程033：Linux文件系统命令-ln链接中符号链接和硬链接的应用场景</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=33">12:24</a></td></tr><tr><td align="center">034</td><td align="left"><a href="https://notes.camcad.cn/post/5d1289e5.html">Linux基础教程034：Linux文件系统命令-cat tac more less</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=34">04:33</a></td></tr><tr><td align="center">035</td><td align="left"><a href="https://notes.camcad.cn/post/5d1289e5.html">Linux基础教程035：Linux文件系统命令-head前N行tail后N行</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=35">10:06</a></td></tr><tr><td align="center">036</td><td align="left"><a href="https://notes.camcad.cn/post/5d1289e5.html">Linux基础教程036：Linux文件系统命令-find文件位置查找</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=36">02:16</a></td></tr></tbody></table><h4 id="VI和VIM编辑器"><a href="#VI和VIM编辑器" class="headerlink" title="VI和VIM编辑器"></a>VI和VIM编辑器</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">037</td><td align="left"><a href="https://notes.camcad.cn/post/56333b4d.html">Linux基础教程037：Linux文件系统命令-vi打开文件</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=37">04:10</a></td></tr><tr><td align="center">038</td><td align="left"><a href="https://notes.camcad.cn/post/56333b4d.html">Linux基础教程038：Linux文件系统命令-vi三种模式</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=38">02:48</a></td></tr><tr><td align="center">039</td><td align="left"><a href="https://notes.camcad.cn/post/56333b4d.html">Linux基础教程039：Linux文件系统命令-vi模式切换</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=39">07:01</a></td></tr><tr><td align="center">040</td><td align="left"><a href="https://notes.camcad.cn/post/56333b4d.html">Linux基础教程040：Linux文件系统命令-vi编辑模式与输入模式</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=40">10:33</a></td></tr><tr><td align="center">041</td><td align="left"><a href="https://notes.camcad.cn/post/56333b4d.html">Linux基础教程041：Linux文件系统命令-vi末行模式 保存与退出</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=41">03:02</a></td></tr><tr><td align="center">042</td><td align="left"><a href="https://notes.camcad.cn/post/56333b4d.html">Linux基础教程042：Linux文件系统命令-vi末行模式 查找与替换</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=42">04:28</a></td></tr><tr><td align="center">043</td><td align="left"><a href="https://notes.camcad.cn/post/56333b4d.html">Linux基础教程043：Linux文件系统命令-vim与vi最常见的错误ATTENTION</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=43">03:48</a></td></tr></tbody></table><h4 id="操作系统文件传输"><a href="#操作系统文件传输" class="headerlink" title="操作系统文件传输"></a>操作系统文件传输</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">044</td><td align="left"><a href="https://notes.camcad.cn/post/5d1289e5.html#l1.8">Linux基础教程044：Linux文件系统命令-操作系统文件传输(w+l)lrzsz xftp</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=44">04:42</a></td></tr><tr><td align="center">045</td><td align="left"><a href="https://notes.camcad.cn/post/5d1289e5.html#l1.8">Linux基础教程045：Linux文件系统命令-操作系统文件传输(l+l)scp</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=45">08:30</a></td></tr><tr><td align="center">046</td><td align="left"><a href="https://notes.camcad.cn/post/5d1289e5.html#l1.8">Linux基础教程046：Linux文件系统命令-df分区du大小</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=46">02:42</a></td></tr></tbody></table><h4 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">047</td><td align="left"><a href="https://notes.camcad.cn/post/5d1289e5.html#l1.8">Linux基础教程047：Linux文件系统命令-tar与zip</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=47">04:40</a></td></tr></tbody></table><h4 id="Linux的网络信息"><a href="#Linux的网络信息" class="headerlink" title="Linux的网络信息"></a>Linux的网络信息</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">048</td><td align="left"><a href="https://notes.camcad.cn/post/e6855abe.html">Linux基础教程048：Linux网络命令-主机名与DNS</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=48">06:42</a></td></tr><tr><td align="center">049</td><td align="left"><a href="https://notes.camcad.cn/post/e6855abe.html">Linux基础教程049：Linux网络命令-ifconfig netstat ping netstat curl</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=49">07:18</a></td></tr><tr><td align="center">050</td><td align="left"><a href="https://notes.camcad.cn/post/e6855abe.html">Linux基础教程050：Linux网络命令-防火墙</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=50">06:02</a></td></tr><tr><td align="center">051</td><td align="left"><a href="https://notes.camcad.cn/post/e6855abe.html">Linux基础教程051：Linux网络命令-不可逆加密算法</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=51">10:14</a></td></tr><tr><td align="center">052</td><td align="left"><a href="https://notes.camcad.cn/post/e6855abe.html">Linux基础教程052：Linux网络命令-对称加密算法</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=52">08:38</a></td></tr><tr><td align="center">053</td><td align="left"><a href="https://notes.camcad.cn/post/e6855abe.html">Linux基础教程053：Linux网络命令-非对称加密算法</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=53">18:29</a></td></tr><tr><td align="center">054</td><td align="left"><a href="https://notes.camcad.cn/post/e6855abe.html">Linux基础教程054：Linux网络命令-相互免秘钥</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=54">10:03</a></td></tr><tr><td align="center">055</td><td align="left"><a href="https://notes.camcad.cn/post/e6855abe.html">Linux基础教程055：Linux网络命令-修改Know_hosts确认信息</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=55">05:21</a></td></tr><tr><td align="center">056</td><td align="left"><a href="https://notes.camcad.cn/post/e6855abe.html">Linux基础教程056：Linux网络命令-免秘钥数据校验过程</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=56">04:33</a></td></tr></tbody></table><h4 id="日期与时间"><a href="#日期与时间" class="headerlink" title="日期与时间"></a>日期与时间</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">057</td><td align="left"><a href="https://notes.camcad.cn/post/a284483c.html">Linux基础教程057：Linux时间日期-时间同步策略</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=57">15:23</a></td></tr></tbody></table><h4 id="用户与组-权限"><a href="#用户与组-权限" class="headerlink" title="用户与组 权限"></a>用户与组 权限</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">058</td><td align="left"><a href="https://notes.camcad.cn/post/cffb534.html">Linux基础教程058：Linux用户组权限-用户</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=58">06:22</a></td></tr><tr><td align="center">059</td><td align="left"><a href="https://notes.camcad.cn/post/cffb534.html">Linux基础教程059：Linux用户组权限-组</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=59">03:14</a></td></tr><tr><td align="center">060</td><td align="left"><a href="https://notes.camcad.cn/post/cffb534.html">Linux基础教程060：Linux用户组权限-权限rwx</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=60">10:10</a></td></tr><tr><td align="center">061</td><td align="left"><a href="https://notes.camcad.cn/post/cffb534.html">Linux基础教程061：Linux用户组权限-用户和文件权限关系</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=61">05:52</a></td></tr><tr><td align="center">064</td><td align="left"><a href="https://notes.camcad.cn/post/a8356c28.html">Linux基础教程064：Linux脚本编程-管道</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=62">02:14</a></td></tr><tr><td align="center">065</td><td align="left"><a href="https://notes.camcad.cn/post/a8356c28.html">Linux基础教程065：Linux脚本编程-输出重定向</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=63">08:22</a></td></tr><tr><td align="center">066</td><td align="left"><a href="https://notes.camcad.cn/post/1e3dd843.html">Linux基础教程066：Linux进程-查看进程信息</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=64">07:07</a></td></tr><tr><td align="center">067</td><td align="left"><a href="https://notes.camcad.cn/post/1e3dd843.html">Linux基础教程067：Linux进程-后台进程</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=65">03:42</a></td></tr></tbody></table><h4 id="Linux的软件安装"><a href="#Linux的软件安装" class="headerlink" title="Linux的软件安装"></a>Linux的软件安装</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">068</td><td align="left"><a href="https://notes.camcad.cn/post/4c410899.html">Linux基础教程068：Linux软件安装-环境变量</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=66">03:29</a></td></tr><tr><td align="center">069</td><td align="left"><a href="https://notes.camcad.cn/post/4c410899.html">Linux基础教程069：Linux软件安装-三种软件安装的方式</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=67">03:44</a></td></tr><tr><td align="center">070</td><td align="left"><a href="https://notes.camcad.cn/post/4c410899.html">Linux基础教程070：Linux软件安装-rpm安装JDK</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=68">11:39</a></td></tr><tr><td align="center">071</td><td align="left"><a href="https://notes.camcad.cn/post/4c410899.html">Linux基础教程071：Linux软件安装-tar安装Tomcat</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=69">05:01</a></td></tr><tr><td align="center">072</td><td align="left"><a href="https://notes.camcad.cn/post/4c410899.html">Linux基础教程072：Linux软件安装-yum安装</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=70">10:37</a></td></tr><tr><td align="center">073</td><td align="left"><a href="https://notes.camcad.cn/post/4c410899.html">Linux基础教程073：Linux软件安装-更换yum源</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=71">05:17</a></td></tr><tr><td align="center">074</td><td align="left"><a href="https://notes.camcad.cn/post/4c410899.html">Linux基础教程074：Linux软件安装-安装Mysql8</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=72">07:30</a></td></tr><tr><td align="center">075</td><td align="left"><a href="https://notes.camcad.cn/post/4c410899.html">Linux基础教程075：Linux软件安装-修改Mysql8的环境配置</a></td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=73">07:14</a></td></tr></tbody></table><h4 id="Linux三剑客"><a href="#Linux三剑客" class="headerlink" title="Linux三剑客"></a>Linux三剑客</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">076</td><td align="left">Linux基础教程076：Linux三剑客-cut sort wc</td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=74">11:02</a></td></tr><tr><td align="center">077</td><td align="left">Linux基础教程077：Linux三剑客-grep</td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=75">02:54</a></td></tr><tr><td align="center">078</td><td align="left">Linux基础教程078：Linux三剑客-sed awk</td><td align="center"><a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=76">11:58</a></td></tr></tbody></table><h2 id="视频转载《这个程猿有点呆-Linux基础教程》"><a href="#视频转载《这个程猿有点呆-Linux基础教程》" class="headerlink" title="视频转载《这个程猿有点呆_Linux基础教程》"></a>视频转载《<a href="https://www.bilibili.com/video/BV16Q4y1y7xS?p=1">这个程猿有点呆_Linux基础教程</a>》</h2>]]></content>
      
      
      <categories>
          
          <category> Linux新手村 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT新手村05：信号和槽机制</title>
      <link href="/post/a55f1847.html"/>
      <url>/post/a55f1847.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2022/02/2022021411463352.png"><img src="http://image.camcad.cn/2022/02/2022021411463352-1024x696.png"></a></p><span id="more"></span><p>信号槽是 Qt 框架引以为豪的机制之一。所谓信号槽，实际就是观察者模式。<code>当某个事件发生之后</code>，比如，按钮检测到自己被点击了一下，它就会发出一个信号（signal）。这种发出是没有目的的，类似广播。如果有对象对这个信号感兴趣，<code>它就会使用连接（connect）函数</code>，意思是，<code>将想要处理的信号和自己的一个函数（称为槽（slot））绑定来处理这个信号</code>。也就是说，<code>当信号发出时，被连接的槽函数会自动被回调</code>。这就类似观察者模式：当发生了感兴趣的事件，某一个操作就会被自动触发。</p><h2 id="系统自带的信号和槽"><a href="#系统自带的信号和槽" class="headerlink" title="系统自带的信号和槽"></a>系统自带的信号和槽</h2><p>下面我们完成一个小功能，我们已经学习了按钮的创建，但是还没有体现出按钮的功能，按钮最大的功能也就是点击后触发一些事情，比如我们点击按钮，就把当前的窗口给关闭掉，那么在Qt中，这样的功能如何实现呢？</p><p>其实无法两行代码就可以搞定了，我们看下面的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QPushButton * quitBtn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;关闭窗口&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">connect</span>(quitBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;MyWidget::close);</span><br></pre></td></tr></table></figure><p>第一行是创建一个关闭按钮，这个之前已经学过，第二行就是核心了，也就是信号槽的使用方式</p><p><strong>connect()函数最常用的一般形式：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(sender, signal, receiver, slot);</span><br><span class="line"></span><br><span class="line">参数解释：</span><br><span class="line"><span class="number">1</span>）sender：发出信号的对象</span><br><span class="line"><span class="number">2</span>）signal：发送对象发出的信号</span><br><span class="line"><span class="number">3</span>）receiver：接收信号的对象</span><br><span class="line"><span class="number">4</span>）slot：接收对象在接收到信号之后所需要调用的函数（槽函数）</span><br></pre></td></tr></table></figure><p>那么系统自带的信号和槽通常如何查找呢，这个就需要利用帮助文档了，在帮助文档中比如我们上面的按钮的点击信号，在帮助文档中输入QPushButton，首先我们可以在Contents中寻找关键字 signals，信号的意思，但是我们发现并没有找到，这时候我们应该想到也许这个信号的被父类继承下来的，因此我们去他的父类QAbstractButton中就可以找到该关键字，点击signals索引到系统自带的信号有如下几个 <a href="http://image.camcad.cn/2021/07/2021071906043894.png"><img src="http://image.camcad.cn/2021/07/2021071906043894.png"></a> 这里的clicked就是我们要找到，槽函数的寻找方式和信号一样，只不过他的关键字是slot。 <a href="http://image.camcad.cn/2021/07/2021071906574650.png"><img src="http://image.camcad.cn/2021/07/2021071906574650.png"></a></p><h2 id="自定义信号和槽"><a href="#自定义信号和槽" class="headerlink" title="自定义信号和槽"></a>自定义信号和槽</h2><p>使用connect()可以让我们连接系统提供的信号和槽。但是，Qt 的信号槽机制并不仅仅是使用系统提供的那部分，还会允许我们自己设计自己的信号和槽。 下面我们看看使用 Qt 的信号槽：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">首先定义一个学生类和老师类：</span><br><span class="line">    老师类中声明信号 饿了 hungry</span><br><span class="line">signals:</span><br><span class="line">       <span class="function"><span class="type">void</span> <span class="title">hungury</span><span class="params">()</span></span>;</span><br><span class="line">    学生类中声明槽   请客 treat</span><br><span class="line">    <span class="keyword">public</span> slots:</span><br><span class="line">       <span class="function"><span class="type">void</span> <span class="title">treat</span><span class="params">()</span></span>;</span><br><span class="line">    在窗口中声明一个公共方法下课，这个方法的调用会触发老师饿了这个信号，而响应槽函数学生请客</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">MyWidget::ClassIsOver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//发送信号</span></span><br><span class="line">    emit teacher-&gt;<span class="built_in">hungury</span>();</span><br><span class="line">&#125;</span><br><span class="line">    学生响应了槽函数，并且打印信息</span><br><span class="line"><span class="comment">//自定义槽函数 实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Student::treat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;该吃饭了！&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">在窗口中连接信号槽</span><br><span class="line">    teacher = <span class="keyword">new</span> <span class="built_in">Teacher</span>(<span class="keyword">this</span>);</span><br><span class="line">    student = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(teacher,&amp;Teacher::hungury,student,&amp;Student::treat);</span><br><span class="line">并且调用下课函数，测试打印出 “该吃饭了”</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************/</span></span><br><span class="line"></span><br><span class="line">自定义的信号 hungry带参数，需要提供重载的自定义信号和 自定义槽</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hungury</span><span class="params">(QString name)</span></span>;  自定义信号</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">treat</span><span class="params">(QString name )</span></span>;    自定义槽</span><br><span class="line">但是由于有两个重名的自定义信号和自定义的槽，直接连接会报错，所以需要利用函数指针来指向函数地址， 然后在做连接</span><br><span class="line"><span class="built_in">void</span> (Teacher:: * teacherSingal)(QString) = &amp;Teacher::hungury;</span><br><span class="line"><span class="built_in">void</span> (Student:: * studentSlot)(QString) = &amp;Student::treat;</span><br><span class="line"><span class="built_in">connect</span>(teacher,teacherSingal,student,studentSlot);</span><br></pre></td></tr></table></figure><h3 id="自定义信号槽需要注意的事项："><a href="#自定义信号槽需要注意的事项：" class="headerlink" title="自定义信号槽需要注意的事项："></a>自定义信号槽需要注意的事项：</h3><ul><li>发送者和接收者都需要是QObject的子类（当然，槽函数是全局函数、Lambda 表达式等无需接收者的时候除外）；</li><li>信号和槽函数返回值是 void</li><li>信号只需要声明，不需要实现</li><li>槽函数需要声明也需要实现</li><li>槽函数是普通的成员函数，作为成员函数，会受到 public、private、protected 的影响；</li><li>使用 emit 在恰当的位置发送信号；</li><li>使用connect()函数连接信号和槽。</li><li>任何成员函数、static 函数、全局函数和 Lambda 表达式都可以作为槽函数</li><li>信号槽要求信号和槽的参数一致，所谓一致，是参数类型一致。</li><li>如果信号和槽的参数不一致，允许的情况是，槽函数的参数可以比信号的少，即便如此，槽函数存在的那些参数的顺序也必须和信号的前面几个一致起来。这是因为，你可以在槽函数中选择忽略信号传来的数据（也就是槽函数的参数比信号的少）。</li></ul><h2 id="信号槽的拓展"><a href="#信号槽的拓展" class="headerlink" title="信号槽的拓展"></a>信号槽的拓展</h2><h3 id="一个信号可以和多个槽相连"><a href="#一个信号可以和多个槽相连" class="headerlink" title="一个信号可以和多个槽相连"></a>一个信号可以和多个槽相连</h3><p>如果是这种情况，这些槽会一个接一个的被调用，但是它们的调用顺序是不确定的。</p><h3 id="多个信号可以连接到一个槽"><a href="#多个信号可以连接到一个槽" class="headerlink" title="多个信号可以连接到一个槽"></a>多个信号可以连接到一个槽</h3><p>只要任意一个信号发出，这个槽就会被调用。</p><h3 id="一个信号可以连接到另外的一个信号"><a href="#一个信号可以连接到另外的一个信号" class="headerlink" title="一个信号可以连接到另外的一个信号"></a>一个信号可以连接到另外的一个信号</h3><p>当第一个信号发出时，第二个信号被发出。除此之外，这种信号-信号的形式和信号-槽的形式没有什么区别。</p><h3 id="槽可以被取消链接"><a href="#槽可以被取消链接" class="headerlink" title="槽可以被取消链接"></a>槽可以被取消链接</h3><p>这种情况并不经常出现，因为当一个对象delete之后，Qt自动取消所有连接到这个对象上面的槽。</p><h3 id="信号槽可以断开"><a href="#信号槽可以断开" class="headerlink" title="信号槽可以断开"></a>信号槽可以断开</h3><p>利用disconnect关键字是可以断开信号槽的</p><h3 id="使用Lambda-表达式"><a href="#使用Lambda-表达式" class="headerlink" title="使用Lambda 表达式"></a>使用Lambda 表达式</h3><p>在使用 Qt 5 的时候，能够支持 Qt 5 的编译器都是支持 Lambda 表达式的。在连接信号和槽的时候，槽函数可以使用Lambda表达式的方式进行处理。</p><h2 id="Qt4版本的信号槽写法"><a href="#Qt4版本的信号槽写法" class="headerlink" title="Qt4版本的信号槽写法"></a>Qt4版本的信号槽写法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(zt,<span class="built_in">SIGNAL</span>(<span class="built_in">hungry</span>(QString)),st,<span class="built_in">SLOT</span>(<span class="built_in">treat</span>(QString)));</span><br></pre></td></tr></table></figure><p>这里使用了SIGNAL和SLOT这两个宏，将两个函数名转换成了字符串。注意到connect()函数的 signal 和 slot 都是接受字符串，一旦出现连接不成功的情况，Qt4是没有编译错误的（因为一切都是字符串，编译期是不检查字符串是否匹配），而是在运行时给出错误。这无疑会增加程序的不稳定性。 Qt5在语法上完全兼容Qt4，而反之是不可以的。</p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>C++11中的Lambda表达式用于定义并创建匿名的函数对象，以简化编程工作。</p><p>首先看一下Lambda表达式的基本构成：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[capture](parameters) <span class="keyword">mutable</span> -&gt;<span class="keyword">return</span>-type</span><br><span class="line">&#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[函数对象参数](操作符重载函数参数)<span class="keyword">mutable</span> -&gt;返回值&#123;函数体&#125;</span><br></pre></td></tr></table></figure><h3 id="函数对象参数；"><a href="#函数对象参数；" class="headerlink" title="函数对象参数；"></a>函数对象参数；</h3><p>[]，标识一个Lambda的开始，这部分必须存在，不能省略。函数对象参数是传递给编译器自动生成的函数对象类的构造函数的。函数对象参数只能使用那些到定义Lambda为止时Lambda所在作用范围内可见的局部变量（包括Lambda所在类的this）。函数对象参数有以下形式：</p><ul><li>1）空。没有使用任何函数对象参数。</li><li>2）&#x3D;。函数体内可以使用Lambda所在作用范围内所有可见的局部变量（包括Lambda所在类的this），并且是值传递方式（相当于编译器自动为我们按值传递了所有局部变量）。</li><li>3）&amp;。函数体内可以使用Lambda所在作用范围内所有可见的局部变量（包括Lambda所在类的this），并且是引用传递方式（相当于编译器自动为我们按引用传递了所有局部变量）。</li><li>4）this。函数体内可以使用Lambda所在类中的成员变量。</li><li>5）a。将a按值进行传递。按值进行传递时，函数体内不能修改传递进来的a的拷贝，因为默认情况下函数是const的。要修改传递进来的a的拷贝，可以添加mutable修饰符。</li><li>6）&amp;a。将a按引用进行传递。</li><li>7）a, &amp;b。将a按值进行传递，b按引用进行传递。</li><li>8）&#x3D;，&amp;a, &amp;b。除a和b按引用进行传递外，其他参数都按值进行传递。</li><li>9）&amp;, a, b。除a和b按值进行传递外，其他参数都按引用进行传递。</li></ul><h3 id="操作符重载函数参数"><a href="#操作符重载函数参数" class="headerlink" title="操作符重载函数参数;"></a>操作符重载函数参数;</h3><p>标识重载的()操作符的参数，没有参数时，这部分可以省略。参数可以通过按值（如：(a,b)）和按引用（如：(&amp;a,&amp;b)）两种方式进行传递。</p><h3 id="可修改标示符；"><a href="#可修改标示符；" class="headerlink" title="可修改标示符；"></a>可修改标示符；</h3><p>mutable声明，这部分可以省略。按值传递函数对象参数时，加上mutable修饰符后，可以修改按值传递进来的拷贝（注意是能修改拷贝，而不是值本身）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">QPushButton * myBtn = <span class="keyword">new</span> <span class="built_in">QPushButton</span> (<span class="keyword">this</span>);</span><br><span class="line">    QPushButton * myBtn2 = <span class="keyword">new</span> <span class="built_in">QPushButton</span> (<span class="keyword">this</span>);</span><br><span class="line">    myBtn2-&gt;<span class="built_in">move</span>(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">    <span class="type">int</span> m = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(myBtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,[m] ()<span class="keyword">mutable</span> &#123; m = <span class="number">100</span> + <span class="number">10</span>; <span class="built_in">qDebug</span>() &lt;&lt; m; &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(myBtn2,&amp;QPushButton::clicked,<span class="keyword">this</span>,[=] ()  &#123; <span class="built_in">qDebug</span>() &lt;&lt; m; &#125;);</span><br><span class="line"> <span class="built_in">qDebug</span>() &lt;&lt; m;</span><br></pre></td></tr></table></figure><h3 id="函数返回值；"><a href="#函数返回值；" class="headerlink" title="函数返回值；"></a>函数返回值；</h3><p>-&gt;返回值类型，标识函数返回值的类型，当返回值为void，或者函数体中只有一处return的地方（此时编译器可以自动推断出返回值类型）时，这部分可以省略。</p><h3 id="是函数体；"><a href="#是函数体；" class="headerlink" title="是函数体；"></a>是函数体；</h3><p>{}，标识函数的实现，这部分不能省略，但函数体可以为空。</p>]]></content>
      
      
      <categories>
          
          <category> QT基础教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT新手村04：对象模型（对象树）</title>
      <link href="/post/3a49afdb.html"/>
      <url>/post/3a49afdb.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2022/02/2022021411463352.png"><img src="http://image.camcad.cn/2022/02/2022021411463352-1024x696.png"></a></p><span id="more"></span><h2 id="对象模型（对象树）"><a href="#对象模型（对象树）" class="headerlink" title="对象模型（对象树）"></a>对象模型（对象树）</h2><p><a href="http://image.camcad.cn/2021/07/202107160859367.png"><img src="http://image.camcad.cn/2021/07/202107160859367-1024x496.png"></a> 在Qt中创建对象的时候会提供一个Parent对象指针，下面来解释这个parent到底是干什么的。</p><h3 id="QObject是以对象树的形式组织起来的。"><a href="#QObject是以对象树的形式组织起来的。" class="headerlink" title="QObject是以对象树的形式组织起来的。"></a>QObject是以对象树的形式组织起来的。</h3><ul><li>1）当你创建一个QObject对象时，会看到QObject的构造函数接收一个QObject指针作为参数，这个参数就是 parent，也就是父对象指针。这相当于，在创建QObject对象时，可以提供一个其父对象，我们创建的这个QObject对象会自动添加到其父对象的children()列表。</li><li>2）当父对象析构的时候，这个列表中的所有对象也会被析构。（注意，这里的父对象并不是继承意义上的父类！）这种机制在 GUI 程序设计中相当有用。例如，一个按钮有一个QShortcut（快捷键）对象作为其子对象。当我们删除按钮的时候，这个快捷键理应被删除。这是合理的。</li></ul><h3 id="QWidget是能够在屏幕上显示的一切组件的父类。"><a href="#QWidget是能够在屏幕上显示的一切组件的父类。" class="headerlink" title="QWidget是能够在屏幕上显示的一切组件的父类。"></a>QWidget是能够在屏幕上显示的一切组件的父类。</h3><ul><li>1）QWidget继承自QObject，因此也继承了这种对象树关系。一个孩子自动地成为父组件的一个子组件。因此，它会显示在父组件的坐标系统中，被父组件的边界剪裁。例如，当用户关闭一个对话框的时候，应用程序将其删除，那么，我们希望属于这个对话框的按钮、图标等应该一起被删除。事实就是如此，因为这些都是对话框的子组件。</li><li>2）当然，我们也可以自己删除子对象，它们会自动从其父对象列表中删除。比如，当我们删除了一个工具栏时，其所在的主窗口会自动将该工具栏从其子对象列表中删除，并且自动调整屏幕显示。</li></ul><h3 id="Qt-引入对象树的概念，在一定程度上解决了内存问题。"><a href="#Qt-引入对象树的概念，在一定程度上解决了内存问题。" class="headerlink" title="Qt 引入对象树的概念，在一定程度上解决了内存问题。"></a>Qt 引入对象树的概念，在一定程度上解决了内存问题。</h3><ul><li>1）当一个QObject对象在堆上创建的时候，Qt 会同时为其创建一个对象树。不过，对象树中对象的顺序是没有定义的。这意味着，销毁这些对象的顺序也是未定义的。</li><li>2）任何对象树中的 QObject对象 delete 的时候，如果这个对象有 parent，则自动将其从 parent 的children()列表中删除；如果有孩子，则自动 delete 每一个孩子。Qt 保证没有QObject会被 delete 两次，这是由析构顺序决定的。</li></ul><p>如果QObject在栈上创建，Qt 保持同样的行为。正常情况下，这也不会发生什么问题。来看下下面的代码片段：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    QWidget window;</span><br><span class="line">    <span class="function">QPushButton <span class="title">quit</span><span class="params">(<span class="string">&quot;Quit&quot;</span>, &amp;window)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作为父组件的 window 和作为子组件的 quit 都是QObject的子类（事实上，它们都是QWidget的子类，而QWidget是QObject的子类）。这段代码是正确的，quit 的析构函数不会被调用两次，因为标准 C++要求，局部对象的析构顺序应该按照其创建顺序的相反过程。因此，这段代码在超出作用域时，会先调用 quit 的析构函数，将其从父对象 window 的子对象列表中删除，然后才会再调用 window 的析构函数。</p><p>但是，如果我们使用下面的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function">QPushButton <span class="title">quit</span><span class="params">(<span class="string">&quot;Quit&quot;</span>)</span></span>;</span><br><span class="line">    QWidget window;</span><br><span class="line">    quit.<span class="built_in">setParent</span>(&amp;window);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情况又有所不同，析构顺序就有了问题。我们看到，在上面的代码中，作为父对象的 window 会首先被析构，因为它是最后一个创建的对象。在析构过程中，它会调用子对象列表中每一个对象的析构函数，也就是说， quit 此时就被析构了。然后，代码继续执行，在 window 析构之后，quit 也会被析构，因为 quit 也是一个局部变量，在超出作用域的时候当然也需要析构。但是，这时候已经是第二次调用 quit 的析构函数了，C++ 不允许调用两次析构函数，因此，程序崩溃了。</p><p>由此我们看到，Qt 的对象树机制虽然帮助我们在一定程度上解决了内存问题，但是也引入了一些值得注意的事情。这些细节在今后的开发过程中很可能时不时跳出来烦扰一下，所以，我们最好从开始就养成良好习惯，在 Qt 中，尽量在构造的时候就指定 parent 对象，并且大胆在堆上创建。</p><h2 id="Qt窗口坐标系"><a href="#Qt窗口坐标系" class="headerlink" title="Qt窗口坐标系"></a>Qt窗口坐标系</h2><p><strong>坐标系</strong>-–以左上角为原点（0,0），X向右增加，Y向下增加。 <a href="http://image.camcad.cn/2021/07/202107160916196.jpg"><img src="http://image.camcad.cn/2021/07/202107160916196.jpg"></a> 对于嵌套窗口，其坐标是相对于父窗口来说的。</p>]]></content>
      
      
      <categories>
          
          <category> QT基础教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT新手村03：第一个QT小程序</title>
      <link href="/post/4a52f6.html"/>
      <url>/post/4a52f6.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2022/02/2022021411463352.png"><img src="http://image.camcad.cn/2022/02/2022021411463352-1024x696.png"></a></p><h2 id="QT按钮的创建"><a href="#QT按钮的创建" class="headerlink" title="QT按钮的创建"></a>QT按钮的创建</h2><p>在Qt程序中，最常用的控件之一就是按钮了，首先我们来看下如何创建一个按钮。</p><span id="more"></span><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>1）通过VS里面的代码设置按钮标题，中文会出现乱码的情况，需要加字符集<code>#pragma execution_character_set(&quot;utf-8&quot;)</code>，加上“UTF-8”字符集后，中文将不在复现乱码的情况。</li><li>2）头文件<code>#include &lt;QtWidgets/QPushButton&gt;</code></li><li>3）实例化对象<code>QPushButton * btn = new QPushButton;</code></li></ul><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置标题</span></span><br><span class="line"><span class="built_in">setWindowTitle</span>(<span class="string">&quot;EMMET_Button_Demo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置窗口大小</span></span><br><span class="line"><span class="built_in">resize</span>(<span class="number">600</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置窗口固定大小</span></span><br><span class="line"><span class="built_in">setFixedSize</span>(<span class="number">600</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个按钮</span></span><br><span class="line">QPushButton* btn = <span class="keyword">new</span> QPushButton;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定按钮标题</span></span><br><span class="line">btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;EMMET_第一个按钮&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让按钮依赖父对象显示</span></span><br><span class="line">btn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置按钮位置</span></span><br><span class="line">btn-&gt;<span class="built_in">move</span>(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置按钮大小</span></span><br><span class="line">btn-&gt;<span class="built_in">resize</span>(<span class="number">150</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure><ul><li>上面代码中，一个按钮其实就是一个QPushButton类下的对象，如果只是创建出对象，是无法显示到窗口中的，所以我们需要依赖一个父窗口，也就是指定一个父亲利用setParent函数即可，如果想设置按钮上显示的文字利用setText，移动按钮位置用move</li><li>对于窗口而言，我们可以修改左上角窗口的标题setWindowTitle，重新指定窗口大小：resize，或者设置固定的窗口大小setFixedSize；</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;QT_NX_QPushButton.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtWidgets/QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    QT_NX_QPushButton w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QT-NX-QPushButton-h"><a href="#QT-NX-QPushButton-h" class="headerlink" title="QT_NX_QPushButton.h"></a>QT_NX_QPushButton.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> execution_character_set(<span class="string">&quot;utf-8&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtWidgets/QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtWidgets/QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_QT_NX_QPushButton.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QT_NX_QPushButton</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">QT_NX_QPushButton</span>(QWidget *parent = Q_NULLPTR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::QT_NX_QPushButtonClass ui;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="QT-NX-QPushButton-cpp"><a href="#QT-NX-QPushButton-cpp" class="headerlink" title="QT_NX_QPushButton.cpp"></a>QT_NX_QPushButton.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;QT_NX_QPushButton.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">QT_NX_QPushButton::<span class="built_in">QT_NX_QPushButton</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    ui.<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置标题</span></span><br><span class="line">    <span class="built_in">setWindowTitle</span>(<span class="string">&quot;EMMET_Button_Demo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置窗口大小</span></span><br><span class="line">    <span class="built_in">resize</span>(<span class="number">600</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置窗口固定大小</span></span><br><span class="line">    <span class="built_in">setFixedSize</span>(<span class="number">600</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个按钮</span></span><br><span class="line">    QPushButton* btn = <span class="keyword">new</span> QPushButton;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定按钮标题</span></span><br><span class="line">    btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;EMMET_第一个按钮&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让按钮依赖父对象显示</span></span><br><span class="line">    btn-&gt;<span class="built_in">setParent</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置按钮位置</span></span><br><span class="line">    btn-&gt;<span class="built_in">move</span>(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置按钮大小</span></span><br><span class="line">    btn-&gt;<span class="built_in">resize</span>(<span class="number">150</span>, <span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="以上代码编译执行结果如下-动态图（GIF）："><a href="#以上代码编译执行结果如下-动态图（GIF）：" class="headerlink" title="以上代码编译执行结果如下 动态图（GIF）："></a>以上代码编译执行结果如下 动态图（GIF）：</h2><p><a href="http://image.camcad.cn/2021/07/2021071608442699.gif"><img src="http://image.camcad.cn/2021/07/2021071608442699-1024x875.gif"></a></p>]]></content>
      
      
      <categories>
          
          <category> QT基础教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT新手村02：创建Qt项目</title>
      <link href="/post/bab83e16.html"/>
      <url>/post/bab83e16.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2022/02/2022021411463352.png"><img src="http://image.camcad.cn/2022/02/2022021411463352-1024x696.png"></a></p><span id="more"></span><h1 id="创建Qt项目"><a href="#创建Qt项目" class="headerlink" title="创建Qt项目"></a>创建Qt项目</h1><h2 id="2-1-使用向导创建"><a href="#2-1-使用向导创建" class="headerlink" title="2.1 使用向导创建"></a>2.1 使用向导创建</h2><h3 id="1-界面选择“Qt-Widgets-Application”向导创建QTWidget应用程序项目。"><a href="#1-界面选择“Qt-Widgets-Application”向导创建QTWidget应用程序项目。" class="headerlink" title="1. 界面选择“Qt Widgets Application”向导创建QTWidget应用程序项目。"></a>1. 界面选择“Qt Widgets Application”向导创建QTWidget应用程序项目。</h3><p><a href="http://image.camcad.cn/2021/07/2021071606152524.jpg"><img src="http://image.camcad.cn/2021/07/2021071606152524.jpg"></a></p><h3 id="2-目名称以及项目存放路径。"><a href="#2-目名称以及项目存放路径。" class="headerlink" title="2. 目名称以及项目存放路径。"></a>2. 目名称以及项目存放路径。</h3><p><a href="http://image.camcad.cn/2021/07/2021071606195475.jpg"><img src="http://image.camcad.cn/2021/07/2021071606195475.jpg"></a></p><h3 id="3-包含在项目中的配置。默认情况下，此项目的推荐设置被选中。"><a href="#3-包含在项目中的配置。默认情况下，此项目的推荐设置被选中。" class="headerlink" title="3. 包含在项目中的配置。默认情况下，此项目的推荐设置被选中。"></a>3. 包含在项目中的配置。默认情况下，此项目的推荐设置被选中。</h3><p><a href="http://image.camcad.cn/2021/07/2021071606244910.jpg"><img src="http://image.camcad.cn/2021/07/2021071606244910.jpg"></a></p><h3 id="4-生成一个QTWidget应用程序项目。应用程序派生自QApplication，并包含一个空小部件。Base-vlass选择“QWidget”。"><a href="#4-生成一个QTWidget应用程序项目。应用程序派生自QApplication，并包含一个空小部件。Base-vlass选择“QWidget”。" class="headerlink" title="4. 生成一个QTWidget应用程序项目。应用程序派生自QApplication，并包含一个空小部件。Base vlass选择“QWidget”。"></a>4. 生成一个QTWidget应用程序项目。应用程序派生自QApplication，并包含一个空小部件。Base vlass选择“<strong>QWidget</strong>”。</h3><p><a href="http://image.camcad.cn/2021/07/2021071607411053.png"><img src="http://image.camcad.cn/2021/07/2021071607411053.png"></a> <a href="http://image.camcad.cn/2021/07/2021071606283898.jpg"><img src="http://image.camcad.cn/2021/07/2021071606283898.jpg"></a></p><h3 id="5-一个最简单的QT应用程序"><a href="#5-一个最简单的QT应用程序" class="headerlink" title="5. 一个最简单的QT应用程序"></a>5. 一个最简单的QT应用程序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;QT_NX_DEMO.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtWidgets/QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    QT_NX_DEMO w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li><p>Qt系统提供的标准类名声明头文件没有.h后缀</p></li><li><p>Qt一个类对应一个头文件，类名就是头文件名</p><h4 id="QApplication应用程序类"><a href="#QApplication应用程序类" class="headerlink" title="QApplication应用程序类"></a>QApplication应用程序类</h4></li><li><p>管理图形用户界面应用程序的控制流和主要设置。</p></li><li><p>是Qt的整个后台管理的命脉它包含主事件循环，在其中来自窗口系统和其它资源的所有事件处理和调度。它也处理应用程序的初始化和结束，并且提供对话管理。</p></li><li><p>对于任何一个使用Qt的图形用户界面应用程序，都正好存在一个QApplication 对象，而不论这个应用程序在同一时间内是不是有0、1、2或更多个窗口。</p><h4 id="a-exec"><a href="#a-exec" class="headerlink" title="a.exec()"></a>a.exec()</h4><p>程序进入消息循环，等待对用户输入进行响应。这里main()把控制权转交给Qt，Qt完成事件处理工作，当应用程序退出的时候exec()的值就会返回。在exec()中，Qt接受并处理用户和系统的事件并且把它们传递给适当的窗口部件。</p></li></ul><h4 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QApplication a  应用程序对象，有且仅有一个</span><br><span class="line">QT_NX_DEMO w;  实例化窗口对象</span><br><span class="line">w.<span class="built_in">show</span>()  调用show函数 显示窗口</span><br><span class="line"><span class="keyword">return</span> a.<span class="built_in">exec</span>()  让应用程序对象进入消息循环机制中，代码阻塞到当前行</span><br></pre></td></tr></table></figure><h3 id="6-点击“本地Windows调试器”进行编译。出现一个新的窗口表明成功。"><a href="#6-点击“本地Windows调试器”进行编译。出现一个新的窗口表明成功。" class="headerlink" title="6. 点击“本地Windows调试器”进行编译。出现一个新的窗口表明成功。"></a>6. 点击“本地Windows调试器”进行编译。出现一个新的窗口表明成功。</h3><p><a href="http://image.camcad.cn/2021/07/2021071607000480.jpg"><img src="http://image.camcad.cn/2021/07/2021071607000480-1024x790.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> QT基础教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QT新手村01：QT概述</title>
      <link href="/post/5d44f0e2.html"/>
      <url>/post/5d44f0e2.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2022/02/2022021411463352.png"><img src="http://image.camcad.cn/2022/02/2022021411463352-1024x696.png"></a></p><h1 id="QT概述"><a href="#QT概述" class="headerlink" title="QT概述"></a>QT概述</h1><h2 id="1-1-什么是Qt"><a href="#1-1-什么是Qt" class="headerlink" title="1.1 什么是Qt"></a>1.1 什么是Qt</h2><p>Qt是一个跨平台的C++图形用户界面应用程序框架。它为应用程序开发者提供建立艺术级图形界面所需的所有功能。它是完全面向对象的，很容易扩展，并且允许真正的组件编程。</p><span id="more"></span><h2 id="1-2-Qt的发展史"><a href="#1-2-Qt的发展史" class="headerlink" title="1.2 Qt的发展史"></a>1.2 Qt的发展史</h2><ul><li>1991年 Qt最早由奇趣科技开发</li><li>1996年 进入商业领域，它也是目前流行的Linux桌面环境KDE的基础</li><li>2008年 奇趣科技被诺基亚公司收购，Qt称为诺基亚旗下的编程语言</li><li>2012年 Qt又被Digia公司收购</li><li>2014年4月 跨平台的集成开发环境Qt Creator3.1.0发布，同年5月20日配发了Qt5.3正式版，至此Qt实现了对iOS、Android、WP等各平台的全面支持。</li></ul><h2 id="1-3-支持的平台"><a href="#1-3-支持的平台" class="headerlink" title="1.3 支持的平台"></a>1.3 支持的平台</h2><ul><li>Windows – XP、Vista、Win7、Win8、Win2008、Win10</li><li>Uinux&#x2F;X11 – Linux、Sun Solaris、HP-UX、Compaq Tru64 UNIX、IBM AIX、SGI IRIX、FreeBSD、BSD&#x2F;OS、和其他很多X11平台</li><li>Macintosh – Mac OS X</li><li>Embedded – 有帧缓冲支持的嵌入式Linux平台，Windows CE</li></ul><h2 id="1-4-Qt版本"><a href="#1-4-Qt版本" class="headerlink" title="1.4 Qt版本"></a>1.4 Qt版本</h2><p>Qt按照不同的版本发行，分为商业版和开源版</p><ul><li><strong>商业版</strong> 为商业软件提供开发，他们提供传统商业软件发行版，并且提供在商业有效期内的免费升级和技术支持服务。</li><li><strong>开源版</strong> 为了开发自有而设计的开放源码软件，它提供了和商业版本同样的功能，在GNU通用公共许可下，它是免费的。</li></ul><h2 id="1-5-Qt的下载与安装"><a href="#1-5-Qt的下载与安装" class="headerlink" title="1.5 Qt的下载与安装"></a>1.5 Qt的下载与安装</h2><p><strong>官方下载地址：</strong><a href="https://download.qt.io/archive/qt/">https://download.qt.io/archive/qt/</a></p><ul><li><strong>Linux Host</strong></li><li>Qt 5.5.0 for Linux 32-bit (535 MB) (info)</li><li>Qt 5.5.0 for Linux 64-bit (532 MB) (info)</li><li>Qt 5.5.0 for Android (Linux 64-bit, 605 MB) (info)</li><li>Qt 5.5.0 for Android (Linux 32-bit, 608 MB) (info)</li><li><strong>OS X Host</strong></li><li>Qt 5.5.0 for Mac (588 MB) (info)</li><li>Qt 5.5.0 for Android (Mac, 652 MB) (info)</li><li>Qt 5.5.0 for Android and iOS (Mac, 1.7 GB) (info)</li><li><strong>Windows Host</strong></li><li>Qt 5.5.0 for Windows 64-bit (VS 2013, 650 MB) (info)</li><li>Qt 5.5.0 for Windows 32-bit (VS 2013, 633 MB) (info)</li><li>Qt 5.5.0 for Windows 32-bit (VS 2012, 587 MB) (info)</li><li>Qt 5.5.0 for Windows 32-bit (VS 2010, 585 MB) (info)</li><li>Qt 5.5.0 for Windows 32-bit (MinGW 4.9.2, 959 MB) (info)</li><li>Qt 5.5.0 for Android (Windows 32-bit, 1.0 GB) (info)</li><li>Qt 5.5.0 for Windows RT 32-bit (621 MB) (info)</li></ul><p><strong>安装</strong></p><ul><li>默认安装（建议组件全部选中）</li><li>Qt对不同的平台提供了不同版本的安装包，可根据实际情况自行下载安装，本文档使用qt-opensource-windows-x86-mingw482_opengl-5.3.1 版本进行讲解</li></ul><p><strong>QT与VS集成安装教程：</strong><a href="https://blog.csdn.net/qq_36163982/article/details/98515472">https://blog.csdn.net/qq_36163982&#x2F;article&#x2F;details&#x2F;98515472</a></p><h2 id="1-6-Qt的优点"><a href="#1-6-Qt的优点" class="headerlink" title="1.6 Qt的优点"></a>1.6 Qt的优点</h2><ul><li>跨平台，几乎支持所有的平台</li><li>接口简单，容易上手，学习QT框架对学习其他框架有参考意义。</li><li>一定程度上简化了内存回收机制</li><li>开发效率高，能够快速的构建应用程序。</li><li>有很好的社区氛围，市场份额在缓慢上升。</li><li>可以进行嵌入式开发。</li></ul><h2 id="1-7-成功案例"><a href="#1-7-成功案例" class="headerlink" title="1.7 成功案例"></a>1.7 成功案例</h2><ul><li>Linux桌面环境KDE</li><li>WPS Office 办公软件</li><li>Skype 网络电话</li><li>Google Earth 谷歌地图</li><li>VLC多媒体播放器</li><li>VirtualBox虚拟机软件</li></ul>]]></content>
      
      
      <categories>
          
          <category> QT基础教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式</title>
      <link href="/post/9725cb23.html"/>
      <url>/post/9725cb23.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">001</td><td align="left"><a href="https://notes.camcad.cn/post/bc751e30.html">C++设计模式01：设计模式简介</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=1">43:28</a></td></tr><tr><td align="center">002</td><td align="left"><a href="https://notes.camcad.cn/post/a61819da.html">C++设计模式02：面向对象设计原则</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=2">35:24</a></td></tr></tbody></table><h4 id="组件协作"><a href="#组件协作" class="headerlink" title="组件协作"></a>组件协作</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">003</td><td align="left"><a href="https://notes.camcad.cn/post/1850cb09.html">C++设计模式03：模板方法（Template Method）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=3">44:52</a></td></tr><tr><td align="center">004</td><td align="left"><a href="https://notes.camcad.cn/post/fecc2092.html">C++设计模式04：策略模式（Strategy）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=4">32:21</a></td></tr><tr><td align="center">005</td><td align="left"><a href="https://notes.camcad.cn/post/4919115d.html">C++设计模式05：观察者模式（Observer &#x2F; Event）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=5">48:03</a></td></tr></tbody></table><h4 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">006</td><td align="left"><a href="https://notes.camcad.cn/post/1da0e9fd.html">C++设计模式06：装饰模式（Decorator）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=6">42:24</a></td></tr><tr><td align="center">007</td><td align="left"><a href="https://notes.camcad.cn/post/b0354483.html">C++设计模式07：桥模式（Bridge）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=7">24:39</a></td></tr></tbody></table><h4 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">008</td><td align="left"><a href="https://notes.camcad.cn/post/d39d84e.html">C++设计模式08：工厂方法（Factory Method）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=8">38:45</a></td></tr><tr><td align="center">009</td><td align="left"><a href="https://notes.camcad.cn/post/8f86a457.html">C++设计模式09：抽象工厂（Abstract Factory）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=9">28:18</a></td></tr><tr><td align="center">010</td><td align="left"><a href="https://notes.camcad.cn/post/663bd6c2.html">C++设计模式10：原型模式（Prototype）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=10">17:33</a></td></tr><tr><td align="center">011</td><td align="left"><a href="https://notes.camcad.cn/post/82fc4ef.html">C++设计模式11：构建器（Builder）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=11">22:00</a></td></tr></tbody></table><h4 id="对象性能"><a href="#对象性能" class="headerlink" title="对象性能"></a>对象性能</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">012</td><td align="left"><a href="https://notes.camcad.cn/post/f0c1b62d.html">C++设计模式12：单例模式（Singleton）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=12">31:36</a></td></tr><tr><td align="center">013</td><td align="left"><a href="https://notes.camcad.cn/post/d3dd74d6.html">C++设计模式13：享元模式（Flyweight）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=13">20:06</a></td></tr></tbody></table><h4 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">014</td><td align="left"><a href="https://notes.camcad.cn/post/6600c949.html">C++设计模式14：门面模式（Facade）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=14">16:22</a></td></tr><tr><td align="center">015</td><td align="left"><a href="https://notes.camcad.cn/post/c80aa8ba.html">C++设计模式15：代理模式（Proxy）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=15">17:58</a></td></tr><tr><td align="center">016</td><td align="left"><a href="https://notes.camcad.cn/post/a3de17af.html">C++设计模式16：适配器（Adapter）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=16">23:15</a></td></tr><tr><td align="center">017</td><td align="left"><a href="https://notes.camcad.cn/post/d8b901a7.html">C++设计模式17：中介者（Mediator）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=17">19:13</a></td></tr></tbody></table><h4 id="状态变化"><a href="#状态变化" class="headerlink" title="状态变化"></a>状态变化</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">018</td><td align="left"><a href="https://notes.camcad.cn/post/1c464225.html">C++设计模式18：状态模式（State）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=18">22:24</a></td></tr><tr><td align="center">019</td><td align="left"><a href="https://notes.camcad.cn/post/2b1e6c0c.html">C++设计模式19：备忘录（Memento）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=19">17:42</a></td></tr></tbody></table><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">020</td><td align="left"><a href="https://notes.camcad.cn/post/7bc400cd.html">C++设计模式20：组合模式（Composite）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=20">19:20</a></td></tr><tr><td align="center">021</td><td align="left"><a href="https://notes.camcad.cn/post/5a23ee24.html">C++设计模式21：迭代器（Iterator）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=21">15:21</a></td></tr><tr><td align="center">022</td><td align="left"><a href="https://notes.camcad.cn/post/c4d890cb.html">C++设计模式22：职责链（Chain of Resposibility）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=22">17:40</a></td></tr></tbody></table><h4 id="行为变化"><a href="#行为变化" class="headerlink" title="行为变化"></a>行为变化</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">023</td><td align="left"><a href="https://notes.camcad.cn/post/3842801a.html">C++设计模式23：命令模式（Command）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=23">18:27</a></td></tr><tr><td align="center">024</td><td align="left"><a href="https://notes.camcad.cn/post/fe5f15e1.html">C++设计模式24：访问器（Visitor）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=24">31:42</a></td></tr></tbody></table><h4 id="领域问题"><a href="#领域问题" class="headerlink" title="领域问题"></a>领域问题</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">025</td><td align="left"><a href="https://notes.camcad.cn/post/5a91b797.html">C++设计模式25：解析器（Interpreter）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=25">30:30</a></td></tr></tbody></table><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">026</td><td align="left"><a href="https://notes.camcad.cn/post/b797e8f6.html">C++设计模式26：设计模式总结</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=26">39:22</a></td></tr></tbody></table><h3 id="视频转载《李建忠-C-设计模式》"><a href="#视频转载《李建忠-C-设计模式》" class="headerlink" title="视频转载《李建忠_C++设计模式》"></a>视频转载《<a href="https://space.bilibili.com/435866355?spm_id_from=333.788.b_765f7570696e666f.2">李建忠_C++设计模式</a>》</h3>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式26：设计模式总结</title>
      <link href="/post/b797e8f6.html"/>
      <url>/post/b797e8f6.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="设计模式总结"><a href="#设计模式总结" class="headerlink" title="设计模式总结"></a>设计模式总结</h1><h2 id="一个目标"><a href="#一个目标" class="headerlink" title="一个目标"></a>一个目标</h2><p>管理变化，提高复用！</p><h2 id="两种手段"><a href="#两种手段" class="headerlink" title="两种手段"></a>两种手段</h2><p>分解VS.抽象</p><h2 id="八大原则"><a href="#八大原则" class="headerlink" title="八大原则"></a>八大原则</h2><ul><li>依赖倒置原则(DIP )</li><li>开放封闭原则(OCP)</li><li>单一职责原则(SRP )</li><li>Liskov替换原则(LSP)</li><li>接口隔离原则(ISP)</li><li>对象组合优于类继承</li><li>封装变化点</li><li>面向接口编程</li></ul><h2 id="重构技法"><a href="#重构技法" class="headerlink" title="重构技法"></a>重构技法</h2><ul><li>静态–&gt;动态</li><li>早绑定–&gt;晚绑定</li><li>继承–&gt;组合</li><li>编译时依赖–&gt;运行时依赖</li><li>紧耦合–&gt;松耦合</li></ul><h2 id="从封装变化角度对模式分类"><a href="#从封装变化角度对模式分类" class="headerlink" title="从封装变化角度对模式分类"></a>从封装变化角度对模式分类</h2><h3 id="组件协作"><a href="#组件协作" class="headerlink" title="组件协作"></a>组件协作</h3><ul><li>Template Method</li><li>Strategy</li><li>Observer &#x2F; Event</li></ul><h3 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h3><ul><li>Decorator</li><li>Bridge</li></ul><h3 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h3><ul><li>Factory Method</li><li>Abstract Factory</li><li>Prototype</li><li>Builder</li></ul><h3 id="对象性能"><a href="#对象性能" class="headerlink" title="对象性能"></a>对象性能</h3><ul><li>Singleton</li><li>Flyweight</li></ul><h3 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h3><ul><li>Facade</li><li>Proxy</li><li>Mediator</li><li>Adapter</li></ul><h3 id="状态变化"><a href="#状态变化" class="headerlink" title="状态变化:"></a>状态变化:</h3><ul><li>Memento.</li><li>State</li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li>Composite</li><li>Iterator</li><li>Chain of Resposibility</li></ul><h3 id="行为变化"><a href="#行为变化" class="headerlink" title="行为变化"></a>行为变化</h3><ul><li>Command</li><li>Visitor</li></ul><h3 id="领域问题"><a href="#领域问题" class="headerlink" title="领域问题"></a>领域问题</h3><ul><li>Interpreter</li></ul><h2 id="C-对象模型"><a href="#C-对象模型" class="headerlink" title="C++对象模型"></a>C++对象模型</h2><p><a href="http://image.camcad.cn/2021/07/2021071813021251.jpg"><img src="http://image.camcad.cn/2021/07/2021071813021251.jpg"></a></p><h2 id="关注变化点和稳定点"><a href="#关注变化点和稳定点" class="headerlink" title="关注变化点和稳定点"></a>关注变化点和稳定点</h2><p><a href="http://image.camcad.cn/2021/07/202107181303079.jpg"><img src="http://image.camcad.cn/2021/07/202107181303079.jpg"></a></p><h2 id="什么时候不用模式"><a href="#什么时候不用模式" class="headerlink" title="什么时候不用模式"></a>什么时候不用模式</h2><ul><li>代码可读性很差时</li><li>需求理解还很浅时</li><li>变化没有显现时</li><li>不是系统的关键依赖点</li><li>项目没有复用价值时</li><li>项目将要发布时</li></ul><h2 id="经验之谈"><a href="#经验之谈" class="headerlink" title="经验之谈"></a>经验之谈</h2><ul><li>不要为模式而模式</li><li>关注抽象类&amp;接口</li><li>理清变化点和稳定点</li><li>审视依赖关系</li><li>要有Framework和Application的区隔思维</li><li>良好的设计是演化的结果</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式25：解析器（Interpreter）</title>
      <link href="/post/5a91b797.html"/>
      <url>/post/5a91b797.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“领域规则”模式"><a href="#“领域规则”模式" class="headerlink" title="“领域规则”模式"></a>“领域规则”模式</h2><p>在特定领域中，某些变化虽然频繁，但可以抽象为某种规则。这时候，结合特定领域，将问题抽象为语法规则，从而给出在该领域下的一般性解决方案。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>Interpreter</li></ul><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，如果某一特定领域的问题比较复杂，类似的结构不断重复出现，如果使用普通的编程方式来实现将面临非常频繁的变化。</li><li>2）在这种情况下，将特定领域的问题表达为某种语法规则下的句子，然后构建一个解释器来解释这样的句子，从而达到解决问题的目的。 <a href="http://image.camcad.cn/2021/07/2021071812332490.jpg"><img src="http://image.camcad.cn/2021/07/2021071812332490.jpg"></a><span id="more"></span></li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>给定一个语言，定义它的文法的一种表示，并定义一种解释器，这个解释器使用该表示来解释语言中的句子。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071812355982.jpg"><img src="http://image.camcad.cn/2021/07/2021071812355982.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Interpreter模式的应用场合是Interpreter模式应用中的难点，只有满足“业务规则频繁变化，且类似的结构不断重复出现，并且容易抽象为语法规则的问题“才适合使用Interpreter模式。</li><li>2）使用Interpreter模式来表示方法规则，从而可以使用面向对象技巧来方便地”扩展“文法。</li><li>3）Interpreter模式比较适合简单的文法表示，对于复杂的文法表示，Interpreter模式会产生比较大的类层次结构，需要求助于语法分析生成器这样的标准工具。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">解析器模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"><h2 id="解析器-DEMO"><a href="#解析器-DEMO" class="headerlink" title="解析器_DEMO"></a>解析器_DEMO</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Expression &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual int interpreter(map&lt;char, int&gt; var)=0;</span><br><span class="line">    virtual ~Expression()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//变量表达式</span><br><span class="line">class VarExpression: public Expression &#123;</span><br><span class="line"></span><br><span class="line">    char key;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    VarExpression(const char&amp; key)</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int interpreter(map&lt;char, int&gt; var) override &#123;</span><br><span class="line">        return var[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//符号表达式</span><br><span class="line">class SymbolExpression : public Expression &#123;</span><br><span class="line"></span><br><span class="line">    // 运算符左右两个参数</span><br><span class="line">protected:</span><br><span class="line">    Expression* left;</span><br><span class="line">    Expression* right;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    SymbolExpression( Expression* left,  Expression* right):</span><br><span class="line">        left(left),right(right)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//加法运算</span><br><span class="line">class AddExpression : public SymbolExpression &#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    AddExpression(Expression* left, Expression* right):</span><br><span class="line">        SymbolExpression(left,right)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    int interpreter(map&lt;char, int&gt; var) override &#123;</span><br><span class="line">        return left-&gt;interpreter(var) + right-&gt;interpreter(var);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//减法运算</span><br><span class="line">class SubExpression : public SymbolExpression &#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    SubExpression(Expression* left, Expression* right):</span><br><span class="line">        SymbolExpression(left,right)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    int interpreter(map&lt;char, int&gt; var) override &#123;</span><br><span class="line">        return left-&gt;interpreter(var) - right-&gt;interpreter(var);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Expression*  analyse(string expStr) &#123;</span><br><span class="line"></span><br><span class="line">    stack&lt;Expression*&gt; expStack;</span><br><span class="line">    Expression* left = nullptr;</span><br><span class="line">    Expression* right = nullptr;</span><br><span class="line">    for(int i=0; i&lt;expStr.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        switch(expStr[i])</span><br><span class="line">        &#123;</span><br><span class="line">            case &#x27;+&#x27;:</span><br><span class="line">                // 加法运算</span><br><span class="line">                left = expStack.top();</span><br><span class="line">                right = new VarExpression(expStr[++i]);</span><br><span class="line">                expStack.push(new AddExpression(left, right));</span><br><span class="line">                break;</span><br><span class="line">            case &#x27;-&#x27;:</span><br><span class="line">                // 减法运算</span><br><span class="line">                left = expStack.top();</span><br><span class="line">                right = new VarExpression(expStr[++i]);</span><br><span class="line">                expStack.push(new SubExpression(left, right));</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                // 变量表达式</span><br><span class="line">                expStack.push(new VarExpression(expStr[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Expression* expression = expStack.top();</span><br><span class="line"></span><br><span class="line">    return expression;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void release(Expression* expression)&#123;</span><br><span class="line"></span><br><span class="line">    //释放表达式树的节点内存...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line"></span><br><span class="line">    string expStr = &quot;a+b-c+d-e&quot;;</span><br><span class="line">    map&lt;char, int&gt; var;</span><br><span class="line">    var.insert(make_pair(&#x27;a&#x27;,5));</span><br><span class="line">    var.insert(make_pair(&#x27;b&#x27;,2));</span><br><span class="line">    var.insert(make_pair(&#x27;c&#x27;,1));</span><br><span class="line">    var.insert(make_pair(&#x27;d&#x27;,6));</span><br><span class="line">    var.insert(make_pair(&#x27;e&#x27;,10));</span><br><span class="line"></span><br><span class="line">    Expression* expression= analyse(expStr);</span><br><span class="line"></span><br><span class="line">    int result=expression-&gt;interpreter(var);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;result&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    release(expression);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式24：访问器（Visitor）</title>
      <link href="/post/fe5f15e1.html"/>
      <url>/post/fe5f15e1.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“行为变化”模式"><a href="#“行为变化”模式" class="headerlink" title="“行为变化”模式"></a>“行为变化”模式</h2><p>在组件的构建过程中，组件行为的变化经常导致组件本身剧烈的变化。“行为变化”模式将组件的行为和组件本身进行解耦，从而支持组件行为的变化，实现两者之间的松耦合。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>Commmand</li><li>Visitor</li></ul><h1 id="Visitor访问器"><a href="#Visitor访问器" class="headerlink" title="Visitor访问器"></a>Visitor访问器</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，由于需求的改变，某些类层次结构中常常需要增加新的行为(方法），如果直接在基类中做这样的更改，将会给子类带来很繁童的变更负担，甚至破坏原有设计。</li><li>2）如何在不更改类层次结构的前提下，在运行时根据需要透明地为类层次结构上的各个类动态添加新的操作,从而避免上述问题?<span id="more"></span></li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>表示一个作用于某对象结构中的各元素的操作。使得可以在不改变（稳定)各元素的类的前提下定义（扩展）作用于这些元素的新操作（变化)。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071707040062.jpg"><img src="http://image.camcad.cn/2021/07/2021071707040062.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Visitor模式通过所谓双重分发（doule dispatch），来实现在不更改（不添加新的操作-编译时），Element类层次结构的前提下，在运行时透明地为类层次结构上的各个类动态添加新的操作（支持变化）。</li><li>2）所谓双重分发即Visitor模式中间包括了两个多态分发（注意其中的多态机制）：第一个为accept方法的多态辨析；第二个为Visitor ElementX方法的多态辨析。</li><li>3）Visitor模式的最大缺点在于扩展类层次结构（增添新的Element子类），会导致Visitor类的改变。因此Vistor模式适用于“Element类层次结构稳定，而其中的操作却经常面临频繁改动”。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">访问器模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"><h2 id="访问器-DEMO"><a href="#访问器-DEMO" class="headerlink" title="访问器_DEMO"></a>访问器_DEMO</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Element</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void Func1() = 0;</span><br><span class="line"></span><br><span class="line">    virtual void Func2(int data)=0;</span><br><span class="line">    virtual void Func3(int data)=0;</span><br><span class="line">    //...</span><br><span class="line"></span><br><span class="line">    virtual ~Element()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ElementA : public Element</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void Func1() override&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Func2(int data) override&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ElementB : public Element</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void Func1() override&#123;</span><br><span class="line">        //***</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Func2(int data) override &#123;</span><br><span class="line">        //***</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Visitor;</span><br><span class="line"></span><br><span class="line">class Element</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void accept(Visitor&amp; visitor) = 0; //第一次多态辨析</span><br><span class="line"></span><br><span class="line">    virtual ~Element()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ElementA : public Element</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void accept(Visitor &amp;visitor) override &#123;</span><br><span class="line">        visitor.visitElementA(*this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ElementB : public Element</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void accept(Visitor &amp;visitor) override &#123;</span><br><span class="line">        visitor.visitElementB(*this); //第二次多态辨析</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Visitor&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void visitElementA(ElementA&amp; element) = 0;</span><br><span class="line">    virtual void visitElementB(ElementB&amp; element) = 0;</span><br><span class="line"></span><br><span class="line">    virtual ~Visitor()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//==================================</span><br><span class="line"></span><br><span class="line">//扩展1</span><br><span class="line">class Visitor1 : public Visitor&#123;</span><br><span class="line">public:</span><br><span class="line">    void visitElementA(ElementA&amp; element) override&#123;</span><br><span class="line">        cout &lt;&lt; &quot;Visitor1 is processing ElementA&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void visitElementB(ElementB&amp; element) override&#123;</span><br><span class="line">        cout &lt;&lt; &quot;Visitor1 is processing ElementB&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//扩展2</span><br><span class="line">class Visitor2 : public Visitor&#123;</span><br><span class="line">public:</span><br><span class="line">    void visitElementA(ElementA&amp; element) override&#123;</span><br><span class="line">        cout &lt;&lt; &quot;Visitor2 is processing ElementA&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void visitElementB(ElementB&amp; element) override&#123;</span><br><span class="line">        cout &lt;&lt; &quot;Visitor2 is processing ElementB&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Visitor2 visitor;</span><br><span class="line">    ElementB elementB;</span><br><span class="line">    elementB.accept(visitor);// double dispatch</span><br><span class="line"></span><br><span class="line">    ElementA elementA;</span><br><span class="line">    elementA.accept(visitor);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式23：命令模式（Command）</title>
      <link href="/post/3842801a.html"/>
      <url>/post/3842801a.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“行为变化”模式"><a href="#“行为变化”模式" class="headerlink" title="“行为变化”模式"></a>“行为变化”模式</h2><p>在组件的构建过程中，组件行为的变化经常导致组件本身剧烈的变化。“行为变化”模式将组件的行为和组件本身进行解耦，从而支持组件行为的变化，实现两者之间的松耦合。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>Commmand</li><li>Visitor</li></ul><h1 id="command命令模式"><a href="#command命令模式" class="headerlink" title="command命令模式"></a>command命令模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，“行为请求者”与“行为实现者”通常呈现一种“紧耦合”。但在某些场合——比如需要对行为进行“记录、撤销&#x2F;重做(undo&#x2F;redo)、事务”等处理，这种无法抵御变化的紧耦合是不合适的。</li><li>2）在这种情况下，如何将“行为请求者”与“行为实现者”解耦?将一组行为抽象为对象，可以实现二者之间的松耦合。<span id="more"></span></li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>将一个请求(行为)封装为一个对象，从而使你可用不同的请求对客户进行参数化;对请求排队或记录请求日志，以及支持可撤销的操作。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071706200668.jpg"><img src="http://image.camcad.cn/2021/07/2021071706200668-1024x324.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Command模式的根本目的在于将“行为请求者”与“行为实现者”解耦，在面向对象语言中，常见的实现手段是“将行为抽象为对象”。</li><li>2）实现Command接口的具体命令对象ConcreteCommand有时候根据需要可能会保存一些额外的状态信息。通过使用Composite模式，可以将多个“命令”封装为一个“复合命令”MacroCommand。</li><li>3）Command模式与C++中的函数对象有些类似。但两者定义行为接口的规范有所区别:Command以面向对象中的“接口-实现”来定义行为接口规范，更严格，但有性能损失;C++函数对象以函数签名来定义行为接口规范，更灵活，性能更高。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">命令模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"><h2 id="命令模式-DEMO"><a href="#命令模式-DEMO" class="headerlink" title="命令模式_DEMO"></a>命令模式_DEMO</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Command</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void execute() = 0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ConcreteCommand1 : public Command</span><br><span class="line">&#123;</span><br><span class="line">    string arg;</span><br><span class="line">public:</span><br><span class="line">    ConcreteCommand1(const string &amp; a) : arg(a) &#123;&#125;</span><br><span class="line">    void execute() override</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt; &quot;#1 process...&quot;&lt;&lt;arg&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ConcreteCommand2 : public Command</span><br><span class="line">&#123;</span><br><span class="line">    string arg;</span><br><span class="line">public:</span><br><span class="line">    ConcreteCommand2(const string &amp; a) : arg(a) &#123;&#125;</span><br><span class="line">    void execute() override</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt; &quot;#2 process...&quot;&lt;&lt;arg&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class MacroCommand : public Command</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;Command*&gt; commands;</span><br><span class="line">public:</span><br><span class="line">    void addCommand(Command *c) &#123; commands.push_back(c); &#125;</span><br><span class="line">    void execute() override</span><br><span class="line">    &#123;</span><br><span class="line">        for (auto &amp;c : commands)</span><br><span class="line">        &#123;</span><br><span class="line">            c-&gt;execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    ConcreteCommand1 command1(receiver, &quot;Arg ###&quot;);</span><br><span class="line">    ConcreteCommand2 command2(receiver, &quot;Arg $$$&quot;);</span><br><span class="line"></span><br><span class="line">    MacroCommand macro;</span><br><span class="line">    macro.addCommand(&amp;command1);</span><br><span class="line">    macro.addCommand(&amp;command2);</span><br><span class="line"></span><br><span class="line">    macro.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式22：职责链（Chain of Resposibility）</title>
      <link href="/post/c4d890cb.html"/>
      <url>/post/c4d890cb.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“数据结构“模式"><a href="#“数据结构“模式" class="headerlink" title="“数据结构“模式"></a>“数据结构“模式</h2><p>常常有一些组件在内部具有特定的数据结构，如果让客户程序依赖这些特定的数据结构，将极大地破坏组件的复用，这时候，将这些特定数据结构封装在内部，在外部提供统一的接口，来实现与特定数据结构无关的访问，是一种行之有效的解决方案。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>Composite</li><li>Iterator</li><li>Chain of Resposibility</li></ul><h1 id="Chain-of-Resposibility职责链"><a href="#Chain-of-Resposibility职责链" class="headerlink" title="Chain of Resposibility职责链"></a>Chain of Resposibility职责链</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，一个请求可能被多个对象处理，但是每个请求在运行时只能有一个接受者，如果显式指定，将必不可少地带来请求发送者与接受者的紧耦合。</li><li>2）如何使请求的发送者不需要指定具体的接受者?让请求的接受者自己在运行时决定来处理请求，从而使两者解耦。<span id="more"></span></li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递请求，直到有一个对象处理它为止。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071705453480.jpg"><img src="http://image.camcad.cn/2021/07/2021071705453480.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Chain of Responsibility模式的应用场合在于“一个请求可能有多个接受者，但是最后真正的接受者只有一个”，这时候请求发送者与接受者的耦合有可能出现“变化脆弱”的症状，职责链的自的就是将二者解耦，从而更好地应对变化。</li><li>2）应用了Chain of Responsibility模式后，对象的职责分派将更具灵活性。我们可以在运行时动态添加&#x2F;修改请求的处理职责。</li><li>3）如果请求传递到职责链的末尾仍得不到处理，应该有一个合理的缺省机制。这也是每一个接受对象的责任，而不是发出请求的对象的责任。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">职责链模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"><h2 id="职责链-DEMO"><a href="#职责链-DEMO" class="headerlink" title="职责链_DEMO"></a>职责链_DEMO</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">enum class RequestType</span><br><span class="line">&#123;</span><br><span class="line">    REQ_HANDLER1,</span><br><span class="line">    REQ_HANDLER2,</span><br><span class="line">    REQ_HANDLER3</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Reqest</span><br><span class="line">&#123;</span><br><span class="line">    string description;</span><br><span class="line">    RequestType reqType;</span><br><span class="line">public:</span><br><span class="line">    Reqest(const string &amp; desc, RequestType type) : description(desc), reqType(type) &#123;&#125;</span><br><span class="line">    RequestType getReqType() const &#123; return reqType; &#125;</span><br><span class="line">    const string&amp; getDescription() const &#123; return description; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ChainHandler&#123;</span><br><span class="line"></span><br><span class="line">    ChainHandler *nextChain;</span><br><span class="line">    void sendReqestToNextHandler(const Reqest &amp; req)</span><br><span class="line">    &#123;</span><br><span class="line">        if (nextChain != nullptr)</span><br><span class="line">            nextChain-&gt;handle(req);</span><br><span class="line">    &#125;</span><br><span class="line">protected:</span><br><span class="line">    virtual bool canHandleRequest(const Reqest &amp; req) = 0;</span><br><span class="line">    virtual void processRequest(const Reqest &amp; req) = 0;</span><br><span class="line">public:</span><br><span class="line">    ChainHandler() &#123; nextChain = nullptr; &#125;</span><br><span class="line">    void setNextChain(ChainHandler *next) &#123; nextChain = next; &#125;</span><br><span class="line"></span><br><span class="line">    void handle(const Reqest &amp; req)</span><br><span class="line">    &#123;</span><br><span class="line">        if (canHandleRequest(req))</span><br><span class="line">            processRequest(req);</span><br><span class="line">        else</span><br><span class="line">            sendReqestToNextHandler(req);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Handler1 : public ChainHandler&#123;</span><br><span class="line">protected:</span><br><span class="line">    bool canHandleRequest(const Reqest &amp; req) override</span><br><span class="line">    &#123;</span><br><span class="line">        return req.getReqType() == RequestType::REQ_HANDLER1;</span><br><span class="line">    &#125;</span><br><span class="line">    void processRequest(const Reqest &amp; req) override</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;Handler1 is handle reqest: &quot; &lt;&lt; req.getDescription() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Handler2 : public ChainHandler&#123;</span><br><span class="line">protected:</span><br><span class="line">    bool canHandleRequest(const Reqest &amp; req) override</span><br><span class="line">    &#123;</span><br><span class="line">        return req.getReqType() == RequestType::REQ_HANDLER2;</span><br><span class="line">    &#125;</span><br><span class="line">    void processRequest(const Reqest &amp; req) override</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;Handler2 is handle reqest: &quot; &lt;&lt; req.getDescription() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Handler3 : public ChainHandler&#123;</span><br><span class="line">protected:</span><br><span class="line">    bool canHandleRequest(const Reqest &amp; req) override</span><br><span class="line">    &#123;</span><br><span class="line">        return req.getReqType() == RequestType::REQ_HANDLER3;</span><br><span class="line">    &#125;</span><br><span class="line">    void processRequest(const Reqest &amp; req) override</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;Handler3 is handle reqest: &quot; &lt;&lt; req.getDescription() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    Handler1 h1;</span><br><span class="line">    Handler2 h2;</span><br><span class="line">    Handler3 h3;</span><br><span class="line">    h1.setNextChain(&amp;h2);</span><br><span class="line">    h2.setNextChain(&amp;h3);</span><br><span class="line"></span><br><span class="line">    Reqest req(&quot;process task ... &quot;, RequestType::REQ_HANDLER3);</span><br><span class="line">    h1.handle(req);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式21：迭代器（Iterator）</title>
      <link href="/post/5a23ee24.html"/>
      <url>/post/5a23ee24.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“数据结构“模式"><a href="#“数据结构“模式" class="headerlink" title="“数据结构“模式"></a>“数据结构“模式</h2><p>常常有一些组件在内部具有特定的数据结构，如果让客户程序依赖这些特定的数据结构，将极大地破坏组件的复用，这时候，将这些特定数据结构封装在内部，在外部提供统一的接口，来实现与特定数据结构无关的访问，是一种行之有效的解决方案。</p><span id="more"></span><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>Composite</li><li>Iterator</li><li>Chain of Resposibility</li></ul><h1 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，集合对象内部结构常常变化各异。但对于这些集合对象，我们希望在不暴露其内部结构的同时，可以让外部客户代码透明地访问其中包含的元素;同时这种“透明遍历”也为“同一种算法在多种集合对象上进行操作”提供了可能。</li><li>2）使用面向对象技术将这种遍历机制抽象为“迭代器对象”为“应对变化中的集合对象”提供了一种优雅的方式。</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露（稳定）该对象的内部表示。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071705181644.jpg"><img src="http://image.camcad.cn/2021/07/2021071705181644.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）迭代抽象:访问一个聚合对象的内容而无需暴露它的内部表示。</li><li>2）迭代多态:为遍历不同的集合结构提供一个统一的接口，从而支持同样的算法在不同的集合结构上进行操作。</li><li>3）迭代器的健壮性考虑:遍历的同时更改迭代器所在的集合结构，会导致问题。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">迭代器模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式20：组合模式（Composite）</title>
      <link href="/post/7bc400cd.html"/>
      <url>/post/7bc400cd.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“数据结构“模式"><a href="#“数据结构“模式" class="headerlink" title="“数据结构“模式"></a>“数据结构“模式</h2><p>常常有一些组件在内部具有特定的数据结构，如果让客户程序依赖这些特定的数据结构，将极大地破坏组件的复用，这时候，将这些特定数据结构封装在内部，在外部提供统一的接口，来实现与特定数据结构无关的访问，是一种行之有效的解决方案。</p><span id="more"></span><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>Composite</li><li>Iterator</li><li>Chain of Resposibility</li></ul><h1 id="Composite模式"><a href="#Composite模式" class="headerlink" title="Composite模式"></a>Composite模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件在某些情况下，客户代码过多地依赖于对象容器复杂的内部实现结构，对象容器内部实现结构（而非抽象接口)的变化将引起客户代码的频繁变化，带来了代码的维护性、扩展性等弊端。</li><li>2）如何将“客户代码与复杂的对象容器结构”解耦?让对象容器自己来实现自身的复杂结构,从而使得客户代码就像处理简单对象一样来处理复杂的对象容器?</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>将对象组合成树形结构以表示“部分-整体”的层次结构。Composite使得用户对单个对象和组合对象的使用具有一致性（稳定)。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071704463967.jpg"><img src="http://image.camcad.cn/2021/07/2021071704463967.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Composite模式采用树形结构来实现普遍存在的对象容器，从而将“一对多”的关系转化为”一对一“的关系，使得客户代码可以一致地(复用)处理对象和对象容器，无需关心处理的是单个的对象，还是组合的对象容器。</li><li>2）将“客户代码与复杂的对象容器结构”解耦是Composite的核心思想，解耦之后，客户代码将与纯粹的抽象接口——而非对象容器的内部实现结构——发生依赖，从而更能“应对变化”。</li><li>3）Composite模式在具体实现中，可以让父对象中的子对象反向追溯;如果父对象有频繁的遍历需求，可使用缓存技巧来改善效率。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">组合模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight c++"><figcaption><span>main_composite.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;src/composite.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ConcreteCompany *root = <span class="keyword">new</span> <span class="built_in">ConcreteCompany</span>(<span class="string">&quot;北京总公司&quot;</span>);</span><br><span class="line">    <span class="function">std::shared_ptr&lt;Company&gt; <span class="title">hr</span><span class="params">(<span class="keyword">new</span> HRDepartment(<span class="string">&quot;总公司人力资源部&quot;</span>))</span></span>;</span><br><span class="line">    <span class="function">std::shared_ptr&lt;Company&gt; <span class="title">fd</span><span class="params">(<span class="keyword">new</span> FinanceDepartment(<span class="string">&quot;总公司财务部&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    root-&gt;<span class="built_in">add</span>(hr);</span><br><span class="line">    root-&gt;<span class="built_in">add</span>(fd);</span><br><span class="line"></span><br><span class="line">    <span class="function">std::shared_ptr&lt;ConcreteCompany&gt; <span class="title">comp</span><span class="params">(<span class="keyword">new</span> ConcreteCompany(<span class="string">&quot;上海华东分公司&quot;</span>))</span></span>;</span><br><span class="line">    hr.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">HRDepartment</span>(<span class="string">&quot;华东分公司人力资源部&quot;</span>));</span><br><span class="line">    fd.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">FinanceDepartment</span>(<span class="string">&quot;华东分公司财务部&quot;</span>));</span><br><span class="line">    comp-&gt;<span class="built_in">add</span>(hr);</span><br><span class="line">    comp-&gt;<span class="built_in">add</span>(fd);</span><br><span class="line">    root-&gt;<span class="built_in">add</span>(comp);</span><br><span class="line"></span><br><span class="line">    <span class="function">std::shared_ptr&lt;ConcreteCompany&gt; <span class="title">comp1</span><span class="params">(<span class="keyword">new</span> ConcreteCompany(<span class="string">&quot;南京办事处&quot;</span>))</span></span>;</span><br><span class="line">    hr.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">HRDepartment</span>(<span class="string">&quot;南京办事处人力资源部&quot;</span>));</span><br><span class="line">    fd.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">FinanceDepartment</span>(<span class="string">&quot;南京办事处财务部&quot;</span>));</span><br><span class="line">    comp1-&gt;<span class="built_in">add</span>(hr);</span><br><span class="line">    comp1-&gt;<span class="built_in">add</span>(fd);</span><br><span class="line">    comp-&gt;<span class="built_in">add</span>(comp1);</span><br><span class="line"></span><br><span class="line">    <span class="function">std::shared_ptr&lt;ConcreteCompany&gt; <span class="title">comp2</span><span class="params">(<span class="keyword">new</span> ConcreteCompany(<span class="string">&quot;华南办事处&quot;</span>))</span></span>;</span><br><span class="line">    hr.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">HRDepartment</span>(<span class="string">&quot;华南办事处人力资源部&quot;</span>));</span><br><span class="line">    fd.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">FinanceDepartment</span>(<span class="string">&quot;华南办事处财务部&quot;</span>));</span><br><span class="line">    comp2-&gt;<span class="built_in">add</span>(hr);</span><br><span class="line">    comp2-&gt;<span class="built_in">add</span>(fd);</span><br><span class="line">    comp-&gt;<span class="built_in">add</span>(comp2);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\n结构图&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    root-&gt;<span class="built_in">display</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\n职责&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    root-&gt;<span class="built_in">lineOfDuty</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>composite.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _TEMPLATE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _TEMPLATE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__ \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__ \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                              \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__ \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class company;</span></span></span><br><span class="line"><span class="string"><span class="meta">class ConcreteCompany;</span></span></span><br><span class="line"><span class="string"><span class="meta">class HRDepartment;</span></span></span><br><span class="line"><span class="string"><span class="meta">class FinanceDepartment;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Company</span></span></span><br><span class="line"><span class="string"><span class="meta">&#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">protected:</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Company() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  Company(std::string name)</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = name;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void add(std::shared_ptr&lt;Company&gt; c) = 0;    // 增加</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void remove(std::shared_ptr&lt;Company&gt; c) = 0; // 移除</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void display(int nDepth) = 0;                // 显示</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void lineOfDuty() = 0;                       // 履行职责</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~Company() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 树枝节点</span></span></span><br><span class="line"><span class="string"><span class="meta">class ConcreteCompany : public Company</span></span></span><br><span class="line"><span class="string"><span class="meta">&#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::list&lt;std::shared_ptr&lt;Company&gt;&gt; m_children;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  ConcreteCompany() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  ConcreteCompany(std::string name)</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = name;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 增加</span></span></span><br><span class="line"><span class="string"><span class="meta">  void add(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_children.push_back(std::move(c));</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 移除</span></span></span><br><span class="line"><span class="string"><span class="meta">  void remove(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_children.remove(c);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 显示</span></span></span><br><span class="line"><span class="string"><span class="meta">  void display(int nDepth) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    std::string sVlaue = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (auto i = 0; i &lt; nDepth; i++)</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      sVlaue += &quot;</span>-<span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    sVlaue += this-&gt;m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; sVlaue &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    for (const auto &amp;v : this-&gt;m_children)</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      if (v != nullptr)</span></span></span><br><span class="line"><span class="string"><span class="meta">      &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        v-&gt;display(nDepth + 2);</span></span></span><br><span class="line"><span class="string"><span class="meta">      &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 履行职责</span></span></span><br><span class="line"><span class="string"><span class="meta">  void lineOfDuty() override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (const auto &amp;v : this-&gt;m_children)</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      if (v != nullptr)</span></span></span><br><span class="line"><span class="string"><span class="meta">      &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        v-&gt;lineOfDuty();</span></span></span><br><span class="line"><span class="string"><span class="meta">      &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 人力资源部</span></span></span><br><span class="line"><span class="string"><span class="meta">class HRDepartment : public Company</span></span></span><br><span class="line"><span class="string"><span class="meta">&#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  HRDepartment(std::string name)</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = name;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 增加</span></span></span><br><span class="line"><span class="string"><span class="meta">  void add(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 移除</span></span></span><br><span class="line"><span class="string"><span class="meta">  void remove(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 显示</span></span></span><br><span class="line"><span class="string"><span class="meta">  void display(int nDepth) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::string sVlaue = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (auto i = 0; i &lt; nDepth; i++)</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      sVlaue += &quot;</span>-<span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    sVlaue += this-&gt;m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; sVlaue &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 履行职责</span></span></span><br><span class="line"><span class="string"><span class="meta">  void lineOfDuty() override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 员工招聘培训管理<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 财务部</span></span></span><br><span class="line"><span class="string"><span class="meta">class FinanceDepartment : public Company</span></span></span><br><span class="line"><span class="string"><span class="meta">&#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  FinanceDepartment(std::string name)</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = name;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 增加</span></span></span><br><span class="line"><span class="string"><span class="meta">  void add(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 移除</span></span></span><br><span class="line"><span class="string"><span class="meta">  void remove(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 显示</span></span></span><br><span class="line"><span class="string"><span class="meta">  void display(int nDepth) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::string sVlaue = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (auto i = 0; i &lt; nDepth; i++)</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      sVlaue += &quot;</span>-<span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    sVlaue += this-&gt;m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; sVlaue &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 履行职责</span></span></span><br><span class="line"><span class="string"><span class="meta">  void lineOfDuty() override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 公司财务收支管理<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _TEMPLATE_H_</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;list&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Component</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void process() = 0;</span><br><span class="line">    virtual ~Component()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//树节点</span><br><span class="line">class Composite : public Component&#123;</span><br><span class="line"></span><br><span class="line">    string name;</span><br><span class="line">    list&lt;Component*&gt; elements;</span><br><span class="line">public:</span><br><span class="line">    Composite(const string &amp; s) : name(s) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    void add(Component* element) &#123;</span><br><span class="line">        elements.push_back(element);</span><br><span class="line">    &#125;</span><br><span class="line">    void remove(Component* element)&#123;</span><br><span class="line">        elements.remove(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void process()&#123;</span><br><span class="line"></span><br><span class="line">        //1. process current node</span><br><span class="line"></span><br><span class="line">        //2. process leaf nodes</span><br><span class="line">        for (auto &amp;e : elements)</span><br><span class="line">            e-&gt;process(); //多态调用</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//叶子节点</span><br><span class="line">class Leaf : public Component&#123;</span><br><span class="line">    string name;</span><br><span class="line">public:</span><br><span class="line">    Leaf(string s) : name(s) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    void process()&#123;</span><br><span class="line">        //process current node</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void Invoke(Component &amp; c)&#123;</span><br><span class="line">    //...</span><br><span class="line">    c.process();</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Composite root(&quot;root&quot;);</span><br><span class="line">    Composite treeNode1(&quot;treeNode1&quot;);</span><br><span class="line">    Composite treeNode2(&quot;treeNode2&quot;);</span><br><span class="line">    Composite treeNode3(&quot;treeNode3&quot;);</span><br><span class="line">    Composite treeNode4(&quot;treeNode4&quot;);</span><br><span class="line">    Leaf leat1(&quot;left1&quot;);</span><br><span class="line">    Leaf leat2(&quot;left2&quot;);</span><br><span class="line"></span><br><span class="line">    root.add(&amp;treeNode1);</span><br><span class="line">    treeNode1.add(&amp;treeNode2);</span><br><span class="line">    treeNode2.add(&amp;leaf1);</span><br><span class="line"></span><br><span class="line">    root.add(&amp;treeNode3);</span><br><span class="line">    treeNode3.add(&amp;treeNode4);</span><br><span class="line">    treeNode4.add(&amp;leaf2);</span><br><span class="line"></span><br><span class="line">    Invoke(root);</span><br><span class="line">    Invoke(leaf2);</span><br><span class="line">    Invoke(treeNode3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式19：备忘录（Memento）</title>
      <link href="/post/2b1e6c0c.html"/>
      <url>/post/2b1e6c0c.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“状态变化”模式"><a href="#“状态变化”模式" class="headerlink" title="“状态变化”模式"></a>“状态变化”模式</h2><p>在组件构建过程中，某些对象的状态经常面临变化，如何对这些变化进行有效的管理?同时又维持高层模块的稳定?“状态变化”模式为这一问题提供了一种解决方案。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）State</li><li>2）Memento</li></ul><h1 id="Memento备忘录"><a href="#Memento备忘录" class="headerlink" title="Memento备忘录"></a>Memento备忘录</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，某些对象的状态在转换过程中，可能由于某种需要，要求程序能够回溯到对象之前处于某个点时的状态。如果使用一些公有接口来让其他对象得到对象的状态，便会暴露对象的细节实现。</li><li>2）如何实现对象状态的良好保存与恢复?但同时又不会因此而破坏对象本身的封装性。<span id="more"></span></li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可以将该对象恢复到原先保存的状态。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071615182280.jpg"><img src="http://image.camcad.cn/2021/07/2021071615182280.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）备忘录(Memento）存储原发器(Originator)对象的内部状态，在需要时恢复原发器状态。</li><li>2）Memento模式的核心是信息隐藏，即Originator需要向外接隐藏信息，保持其封装性。但同时又需要将状态保持到外界（Memento）。</li><li>3）由于现代语言运行时（如C#、Java等）都具有相当的对象序列化支持，因此往往采用效率较高、又较容易正确实现的序列化方案来实现Memento模式。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">备忘录模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"><h2 id="备忘录-DEMO"><a href="#备忘录-DEMO" class="headerlink" title="备忘录_DEMO"></a>备忘录_DEMO</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class Memento</span><br><span class="line">&#123;</span><br><span class="line">    string state;</span><br><span class="line">    //..</span><br><span class="line">public:</span><br><span class="line">    Memento(const string &amp; s) : state(s) &#123;&#125;</span><br><span class="line">    string getState() const &#123; return state; &#125;</span><br><span class="line">    void setState(const string &amp; s) &#123; state = s; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Originator</span><br><span class="line">&#123;</span><br><span class="line">    string state;</span><br><span class="line">    //....</span><br><span class="line">public:</span><br><span class="line">    Originator() &#123;&#125;</span><br><span class="line">    Memento createMomento() &#123;</span><br><span class="line">        Memento m(state);</span><br><span class="line">        return m;</span><br><span class="line">    &#125;</span><br><span class="line">    void setMomento(const Memento &amp; m) &#123;</span><br><span class="line">        state = m.getState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Originator orginator;</span><br><span class="line"></span><br><span class="line">    //捕获对象状态，存储到备忘录</span><br><span class="line">    Memento mem = orginator.createMomento();</span><br><span class="line"></span><br><span class="line">    //... 改变orginator状态</span><br><span class="line"></span><br><span class="line">    //从备忘录中恢复</span><br><span class="line">    orginator.setMomento(memento);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式18：状态模式（State）</title>
      <link href="/post/1c464225.html"/>
      <url>/post/1c464225.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“状态变化”模式"><a href="#“状态变化”模式" class="headerlink" title="“状态变化”模式"></a>“状态变化”模式</h2><p>在组件构建过程中，某些对象的状态经常面临变化，如何对这些变化进行有效的管理?同时又维持高层模块的稳定?“状态变化”模式为这一问题提供了一种解决方案。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）State</li><li>2）Memento<span id="more"></span></li></ul><h1 id="State状态模式"><a href="#State状态模式" class="headerlink" title="State状态模式"></a>State状态模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，某些对象的状态如果改变，其行为也会随之而发生变化，比如文档处于只读状态，其支持的行为和读写状态支持的行为就可能完全不同。</li><li>2）如何在运行时根据对象的状态来透明地更改对象的行为?而不会为对象操作和状态转化之间引入紧耦合?</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>允许一个对象在其内部状态改变时改变它的行为。从而使对象看起来似乎修改了其行为。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071515360928.jpg"><img src="http://image.camcad.cn/2021/07/2021071515360928.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）State模式将所有与一个特定状态相关的行为都放入一个State的子类对象中，在对象状态切换时，切换相应的对象，但同时维持State的接口，这样实现了具体操作与状态转换之间的解耦。</li><li>2）为不同的状态引入不同的对象使得状态转换变得更加明确，而且可以保证不会出现状态不一致的情况，因为转换是原子性的——即要么彻底转换过来，要么不转换。</li><li>3）如果State对象没有实例变量，那么各个上下文可以共享同一个State对象，从而节省对象开销。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">状态模式</a></li><li class="tab"><a href="#tab-2">进阶模式</a></li><li class="tab"><a href="#tab-3">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight c++"><figcaption><span>main_state.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;src/state.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Work emergencyProjects;</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">9</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">10</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">12</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">13</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">14</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">17</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">19</span>);</span><br><span class="line">  <span class="comment">//  emergencyProjects.setTaskFinish(true);</span></span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">22</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>state.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _STATE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _STATE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class State;</span></span></span><br><span class="line"><span class="string"><span class="meta">class Work;</span></span></span><br><span class="line"><span class="string"><span class="meta">class ForenoonState;</span></span></span><br><span class="line"><span class="string"><span class="meta">class NoonState;</span></span></span><br><span class="line"><span class="string"><span class="meta">class AfternonnState;</span></span></span><br><span class="line"><span class="string"><span class="meta">class EveningState;</span></span></span><br><span class="line"><span class="string"><span class="meta">class SleepingState;</span></span></span><br><span class="line"><span class="string"><span class="meta">class RestState;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void writeProgram(Work *w) = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~State() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Work &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  double m_hour;</span></span></span><br><span class="line"><span class="string"><span class="meta">  bool m_finish;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;State&gt; m_current;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void init() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_finish = false;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_hour = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  Work();</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void setHour(double h) &#123; this-&gt;m_hour = h; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  double getHour() &#123; return this-&gt;m_hour; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void setTaskFinish(bool finish) &#123; this-&gt;m_finish = finish; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  bool getTaskFinish() &#123; return this-&gt;m_finish; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void setState(std::unique_ptr&lt;State&gt; s) &#123; this-&gt;m_current = std::move(s); &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram() &#123; this-&gt;m_current-&gt;writeProgram(this); &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 上午工作状态</span></span></span><br><span class="line"><span class="string"><span class="meta">class ForenoonState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 中午工作状态</span></span></span><br><span class="line"><span class="string"><span class="meta">class NoonState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 下午工作状态</span></span></span><br><span class="line"><span class="string"><span class="meta">class AfternoonState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 加班工作状态</span></span></span><br><span class="line"><span class="string"><span class="meta">class EveningState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 睡觉</span></span></span><br><span class="line"><span class="string"><span class="meta">class SleepingState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 下班</span></span></span><br><span class="line"><span class="string"><span class="meta">class RestState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void ForenoonState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  if (w-&gt;getHour() &lt; 12) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour()</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; &quot;</span>点 上午工作，精神百倍<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125; else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;setState(std::unique_ptr&lt;State&gt;(new NoonState()));</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;writeProgram();</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void NoonState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  if (w-&gt;getHour() &lt; 13) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour()</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; &quot;</span>点 饿了,午饭；犯困,午休<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125; else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;setState(std::unique_ptr&lt;State&gt;(new AfternoonState()));</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;writeProgram();</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void AfternoonState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  if (w-&gt;getHour() &lt; 17) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour()</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; &quot;</span>点 下午状态还不错，继续努力<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125; else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;setState(std::unique_ptr&lt;State&gt;(new EveningState()));</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;writeProgram();</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void EveningState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  if (w-&gt;getTaskFinish()) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;setState(std::unique_ptr&lt;State&gt;(new RestState()));</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;writeProgram();</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125; else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (w-&gt;getHour() &lt; 21) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour()</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;&lt; &quot;</span>点 加班哦,疲累之极<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125; else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      w-&gt;setState(std::unique_ptr&lt;State&gt;(new SleepingState));</span></span></span><br><span class="line"><span class="string"><span class="meta">      w-&gt;writeProgram();</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void SleepingState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour() &lt;&lt; &quot;</span>点 不行了,睡着了<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void RestState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour() &lt;&lt; &quot;</span>点 下班回家了<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">Work::Work() &#123; this-&gt;m_current.reset(new ForenoonState()); &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _STATE_H_</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkState</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    NetworkState* pNext;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Operation1</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Operation2</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Operation3</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">NetworkState</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenState</span> :<span class="keyword">public</span> NetworkState&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> NetworkState* m_instance;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> NetworkState* <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_instance == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            m_instance = <span class="keyword">new</span> <span class="built_in">OpenState</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m_instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//**********</span></span><br><span class="line">        pNext = CloseState::<span class="built_in">getInstance</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//..........</span></span><br><span class="line">        pNext = ConnectState::<span class="built_in">getInstance</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//$$$$$$$$$$</span></span><br><span class="line">        pNext = OpenState::<span class="built_in">getInstance</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CloseState</span>:<span class="keyword">public</span> NetworkState&#123; &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkProcessor</span>&#123;</span><br><span class="line"></span><br><span class="line">    NetworkState* pState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NetworkProcessor</span>(NetworkState* pState)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;pState = pState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        pState-&gt;<span class="built_in">Operation1</span>();</span><br><span class="line">        pState = pState-&gt;pNext;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        pState-&gt;<span class="built_in">Operation2</span>();</span><br><span class="line">        pState = pState-&gt;pNext;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        pState-&gt;<span class="built_in">Operation3</span>();</span><br><span class="line">        pState = pState-&gt;pNext;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">NetworkState</span></span><br><span class="line">&#123;</span><br><span class="line">    Network_Open,</span><br><span class="line">    Network_Close,</span><br><span class="line">    Network_Connect,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkProcessor</span>&#123;</span><br><span class="line"></span><br><span class="line">    NetworkState state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state == Network_Open)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//**********</span></span><br><span class="line">            state = Network_Close;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == Network_Close)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//..........</span></span><br><span class="line">            state = Network_Connect;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == Network_Connect)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//$$$$$$$$$$</span></span><br><span class="line">            state = Network_Open;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">Operation2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (state == Network_Open)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//**********</span></span><br><span class="line">            state = Network_Connect;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == Network_Close)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//.....</span></span><br><span class="line">            state = Network_Open;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == Network_Connect)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//$$$$$$$$$$</span></span><br><span class="line">            state = Network_Close;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">Operation3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式17：中介者（Mediator）</title>
      <link href="/post/d8b901a7.html"/>
      <url>/post/d8b901a7.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“接口隔离”模式"><a href="#“接口隔离”模式" class="headerlink" title="“接口隔离”模式"></a>“接口隔离”模式</h2><p>在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Facade</li><li>2）Proxy</li><li>3）Adapter</li><li>4）Mediator</li></ul><h1 id="Mediator中介者"><a href="#Mediator中介者" class="headerlink" title="Mediator中介者"></a>Mediator中介者</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，经常会出现多个对象互相关联交互的情况，对象之间常常会维持一种复杂的引用关系，如果遇到一些需要的更改，这种直接的引用关系将面临不断的变化。</li><li>2）在这种情况下，我们可使用一个“中介对象”来管理对象间的关联关系，避免相互交互的对象之间的紧耦合引用关系，从而更好地抵御变化。<span id="more"></span></li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>用一个中介对象来封装（封装变化）一系列的对象交互。中介者使各对象不需要显式的相互引用（编译时依赖-&gt;运行时依赖），从而使其耦合松散（管理变化），而且可以独立地改变它们之间的交互。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071514594439.jpg"><img src="http://image.camcad.cn/2021/07/2021071514594439.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）将多个对象间复杂的关联关系解耦，Mediator模式将多个对象间的控制逻辑进行集中管理，变“多个对象互相关联”为“多个对象和一个中介者关联”，简化了系统的维护,抵御了可能的变化。</li><li>2）随着控制逻辑的复杂化，Mediator具体对象的实现可能相当复杂。这时候可以对Mediator对象进行分解处理。</li><li>3）Facade模式是解耦系统间(单向）的对象关联关系;Mediator模式是解耦系统内各个对象之间(双向)的关联关系。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">中介模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式16：适配器（Adapter）</title>
      <link href="/post/a3de17af.html"/>
      <url>/post/a3de17af.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“接口隔离”模式"><a href="#“接口隔离”模式" class="headerlink" title="“接口隔离”模式"></a>“接口隔离”模式</h2><p>在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。</p><span id="more"></span><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Facade</li><li>2）Proxy</li><li>3）Adapter</li><li>4）Mediator</li></ul><h1 id="Adapter适配器"><a href="#Adapter适配器" class="headerlink" title="Adapter适配器"></a>Adapter适配器</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件系统中，由于应用环境的变化，常常需要将一些现存的对象”放在新的环境中应用，但是新环境要求的接口是这些现存对象所不满足的。</li><li>2）如何应对这种“迁移的变化”?如何既能利用现有对象的良好实现，同时又能满足新的应用环境所要求的接口?</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>将一个类的接口转换成客户希望的另一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071313322691.jpg"><img src="http://image.camcad.cn/2021/07/2021071313322691.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Adapter模式主要应用于“希望复用一些现存的类，但是接口又与复用环境要求不一致的情况”，在遗留代码复用、类库迁移等方面非常有用。</li><li>2）GoF 23定义了两种Adapter模式的实现结构∶对象适配器和类适配器。但类适配器采用“多继承”的实现方式，一般不推荐使用。对象适配器采用“对象组合”的方式，更符合松耦合精神。</li><li>3）Adapter模式可以实现的非常灵活，不必拘泥于Gof23中定义的两种结构。例如，完全可以将Adapter模式中的“现存对象”作为新的接口方法参数，来达到适配的目的。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">适配器模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight c++"><figcaption><span>main_adapter.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;src/adapter.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::cout &lt;&lt; FILELINE &lt;&lt; <span class="string">&quot;ubuntu系统,vscode结合cmake、gdb自动化生成脚本示例&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="function">std::unique_ptr&lt;Player&gt; <span class="title">a</span><span class="params">(<span class="keyword">new</span> Forwards(<span class="string">&quot;张三&quot;</span>))</span></span>;</span><br><span class="line">  a-&gt;<span class="built_in">attack</span>();</span><br><span class="line"></span><br><span class="line">  <span class="function">std::unique_ptr&lt;Player&gt; <span class="title">b</span><span class="params">(<span class="keyword">new</span> Guards(<span class="string">&quot;李四&quot;</span>))</span></span>;</span><br><span class="line">  b-&gt;<span class="built_in">attack</span>();</span><br><span class="line">  a-&gt;<span class="built_in">defense</span>();</span><br><span class="line"></span><br><span class="line">  <span class="function">std::unique_ptr&lt;Player&gt; <span class="title">c</span><span class="params">(<span class="keyword">new</span> Translator(<span class="string">&quot;姚明&quot;</span>))</span></span>;</span><br><span class="line">  c-&gt;<span class="built_in">attack</span>();</span><br><span class="line">  b-&gt;<span class="built_in">defense</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>adapter.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _ADAPTER_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _ADAPTER_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 球员</span></span></span><br><span class="line"><span class="string"><span class="meta">class Player &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">protected:</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  // 进攻</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void attack() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 防守</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void defense() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~Player() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 前锋</span></span></span><br><span class="line"><span class="string"><span class="meta">class Forwards : public Player &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Forwards(std::string name) &#123; this-&gt;m_name = name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 进攻</span></span></span><br><span class="line"><span class="string"><span class="meta">  void attack() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>前锋 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 进攻<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 防守</span></span></span><br><span class="line"><span class="string"><span class="meta">  void defense() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>前锋 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 防守<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 后卫</span></span></span><br><span class="line"><span class="string"><span class="meta">class Guards : public Player &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Guards(std::string name) &#123; this-&gt;m_name = name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 进攻</span></span></span><br><span class="line"><span class="string"><span class="meta">  void attack() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>后卫 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 进攻<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 防守</span></span></span><br><span class="line"><span class="string"><span class="meta">  void defense() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>后卫 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 防守<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 外籍中锋</span></span></span><br><span class="line"><span class="string"><span class="meta">class ForeignCenter &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void setName(std::string name) &#123; this-&gt;m_name = name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void attack() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>外籍中锋 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 进攻<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void defend() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>外籍中锋 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 防守<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 翻译者</span></span></span><br><span class="line"><span class="string"><span class="meta">class Translator : public Player &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;ForeignCenter&gt; m_foreignCenter;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Translator(std::string name) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_foreignCenter.reset(new ForeignCenter());</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_foreignCenter-&gt;setName(name);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 进攻</span></span></span><br><span class="line"><span class="string"><span class="meta">  void attack() override &#123; this-&gt;m_foreignCenter-&gt;attack(); &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 防守</span></span></span><br><span class="line"><span class="string"><span class="meta">  void defense() override &#123; this-&gt;m_foreignCenter-&gt;defend(); &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _ADAPTER_H_</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">//目标接口（新接口）</span><br><span class="line">class ITarget&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void process()=0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//遗留接口（老接口）</span><br><span class="line">class IAdaptee&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void foo(int data)=0;</span><br><span class="line">    virtual int bar()=0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//遗留类型</span><br><span class="line">class OldClass: public IAdaptee&#123;</span><br><span class="line">    //....</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//对象适配器</span><br><span class="line">class Adapter: public ITarget&#123; //继承</span><br><span class="line">protected:</span><br><span class="line">    IAdaptee* pAdaptee;//组合</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    Adapter(IAdaptee* pAdaptee)&#123;</span><br><span class="line">        this-&gt;pAdaptee=pAdaptee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual void process()&#123;</span><br><span class="line">        int data=pAdaptee-&gt;bar();</span><br><span class="line">        pAdaptee-&gt;foo(data);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//类适配器</span><br><span class="line">class Adapter: public ITarget,</span><br><span class="line">               protected OldClass&#123; //多继承</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    IAdaptee* pAdaptee=new OldClass();</span><br><span class="line"></span><br><span class="line">    ITarget* pTarget=new Adapter(pAdaptee);</span><br><span class="line">    pTarget-&gt;process();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class stack&#123;</span><br><span class="line">    deqeue container;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class queue&#123;</span><br><span class="line">    deqeue container;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式15：代理模式（Proxy）</title>
      <link href="/post/c80aa8ba.html"/>
      <url>/post/c80aa8ba.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“接口隔离”模式"><a href="#“接口隔离”模式" class="headerlink" title="“接口隔离”模式"></a>“接口隔离”模式</h2><p>在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Facade</li><li>2）Proxy</li><li>3）Adapter</li><li>4）Mediator<span id="more"></span></li></ul><h1 id="Proxy代理模式"><a href="#Proxy代理模式" class="headerlink" title="Proxy代理模式"></a>Proxy代理模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在面向对象系统中，有些对象由于某种原因（比如对象创建的开销很大，或者某些操作需要安全控制，或者需要进程外的访问等），直接访问会给使用者、或者系统结构带来很多麻烦。</li><li>2）如何在不失去透明操作对象的同时来管理&#x2F;控制这些对象特有的复杂性?增加一层间接层是软件开发中常见的解决方式。</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>为其他对象提供一种代理以控制（隔离，使用接口）对这个对象的访问。——《设计模式》Gof</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071312330560.jpg"><img src="http://image.camcad.cn/2021/07/2021071312330560.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）“增加一层间接层”是软件系统中对许多复杂问题的一种常见解决方法。在面向对象系统中，直接使用某些对象会带来很多问题，作为间接层的proxy对象便是解决这一问题的常用手段。</li><li>2）具体proxy设计模式的实现方法、实现粒度都相差很大，有些可能对单个对象做细粒度的控制，如copy-on-write技术，有些可能对组件模块提供抽象代理层,在架构层次对对象做proxy。</li><li>3）Proxy并不一定要求保持接口完整的一致性，只要能够实现间接控制，有时候损及一些透明性是可以接受的。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">代理模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight c++"><figcaption><span>main_proxy.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./src/proxy.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  std::shared_ptr&lt;Schoolgirl&gt; sg = std::<span class="built_in">make_shared</span>&lt;Schoolgirl&gt;(<span class="string">&quot;li li&quot;</span>);</span><br><span class="line">  std::shared_ptr&lt;Pursuit&gt; pur = std::<span class="built_in">make_shared</span>&lt;Pursuit&gt;(sg);</span><br><span class="line">  std::shared_ptr&lt;GiveGift&gt; gg = std::<span class="built_in">make_shared</span>&lt;Proxy&gt;(pur);</span><br><span class="line"></span><br><span class="line">  gg-&gt;<span class="built_in">giveDolls</span>();</span><br><span class="line">  gg-&gt;<span class="built_in">giveFlowers</span>();</span><br><span class="line">  gg-&gt;<span class="built_in">giveChocolate</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>proxy.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _PROXY_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _PROXY_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Schoolgirl &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Schoolgirl() &#123; this-&gt;m_name = &quot;</span><span class="string">&quot;; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  Schoolgirl(std::string name) &#123; this-&gt;m_name = name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string getName() &#123; return this-&gt;m_name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class GiveGift &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void giveDolls() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void giveFlowers() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void giveChocolate() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~GiveGift() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Pursuit : public GiveGift &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::shared_ptr&lt;Schoolgirl&gt; m_schoolgirl;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Pursuit() &#123; this-&gt;m_schoolgirl = nullptr; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  Pursuit(std::shared_ptr&lt;Schoolgirl&gt; schoolgirl) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_schoolgirl = schoolgirl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveDolls() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_schoolgirl != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_schoolgirl-&gt;getName() &lt;&lt; &quot;</span>: give dolls<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveFlowers() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_schoolgirl != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_schoolgirl-&gt;getName() &lt;&lt; &quot;</span>: give flowers<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveChocolate() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_schoolgirl != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_schoolgirl-&gt;getName()</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;&lt; &quot;</span>: give chocolate<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Proxy : public GiveGift &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::shared_ptr&lt;Pursuit&gt; m_pursuit;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Proxy() &#123; this-&gt;m_pursuit = nullptr; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  Proxy(std::shared_ptr&lt;Pursuit&gt; pursuit) &#123; this-&gt;m_pursuit = pursuit; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveDolls() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_pursuit != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      this-&gt;m_pursuit-&gt;giveDolls();</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveFlowers() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_pursuit != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      this-&gt;m_pursuit-&gt;giveFlowers();</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveChocolate() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_pursuit != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      this-&gt;m_pursuit-&gt;giveChocolate();</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // __PROXY_H_</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><h4 id="client-cpp"><a href="#client-cpp" class="headerlink" title="client.cpp"></a>client.cpp</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class ISubject&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void process();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class RealSubject: public ISubject&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void process()&#123;</span><br><span class="line">        //....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ClientApp&#123;</span><br><span class="line"></span><br><span class="line">    ISubject* subject;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    ClientApp()&#123;</span><br><span class="line">        subject=new RealSubject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void DoTask()&#123;</span><br><span class="line">        //...</span><br><span class="line">        subject-&gt;process();</span><br><span class="line"></span><br><span class="line">        //....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="proxy-cpp"><a href="#proxy-cpp" class="headerlink" title="proxy.cpp"></a>proxy.cpp</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class ISubject&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void process();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//Proxy的设计</span><br><span class="line">class SubjectProxy: public ISubject&#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    virtual void process()&#123;</span><br><span class="line">        //对RealSubject的一种间接访问</span><br><span class="line">        //....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ClientApp&#123;</span><br><span class="line"></span><br><span class="line">    ISubject* subject;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    ClientApp()&#123;</span><br><span class="line">        subject=new SubjectProxy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void DoTask()&#123;</span><br><span class="line">        //...</span><br><span class="line">        subject-&gt;process();</span><br><span class="line"></span><br><span class="line">        //....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式14：门面模式（Facade）</title>
      <link href="/post/6600c949.html"/>
      <url>/post/6600c949.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“接口隔离”模式"><a href="#“接口隔离”模式" class="headerlink" title="“接口隔离”模式"></a>“接口隔离”模式</h2><p>在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Facade</li><li>2）Proxy</li><li>3）Adapter</li><li>4）Mediator<span id="more"></span></li></ul><h1 id="Facade门面模式"><a href="#Facade门面模式" class="headerlink" title="Facade门面模式"></a>Facade门面模式</h1><h2 id="系统间耦合的复杂度"><a href="#系统间耦合的复杂度" class="headerlink" title="系统间耦合的复杂度"></a>系统间耦合的复杂度</h2><p><a href="http://image.camcad.cn/2021/07/2021071213401496.jpg"><img src="http://image.camcad.cn/2021/07/2021071213401496.jpg"></a></p><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）上述A方案的问题在于组件的客户和组件中各种复杂的子系统有了过多的耦合，随着外部客户程序和各子系统的演化，这种过多的耦 合面临很多变化的挑战。</li><li>2）如何简化外部客户程序和系统间的交互接口？如何将外部客户程序的演化和内部子系统的变化之间的依赖相互解耦？</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>为子系统中的一组接口提供一个一致（稳定）的界面Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用（复用）。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/202107121346375.jpg"><img src="http://image.camcad.cn/2021/07/202107121346375-1024x388.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）从客户程序的角度来看，Facade模式简化了整个组件系统的接口，对于组件内部与外部客户程序来说，达到了一种“解耦”的效果——内部子系统的任何变化不会影响到Facade接口的变化。</li><li>2）Facade设计模式更注重从架构的层次去看整个系统，而不是单个类的层次。Facade很多时候更是一种架构设计模式。</li><li>3）Facade设计模式并非一个集装箱，可以任意地放进任何多个对象。Facade模式中组件的内部应该是“相互耦合关系比较大的一系列组件”，而不是一个简单的功能集合。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight c++"><figcaption><span>main_facade.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;src/facade.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::unique_ptr&lt;Facade&gt; <span class="title">f</span><span class="params">(<span class="keyword">new</span> Facade())</span></span>;</span><br><span class="line">    f-&gt;<span class="built_in">methodA</span>();</span><br><span class="line">    f-&gt;<span class="built_in">methodB</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>facade.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _FACADE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _FACADE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class SubSystemOne &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodOne() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>Subsystem method one<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class SubSystemTwo &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodTwo() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>Subsystem method two<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class SubSystemThree &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodThree() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>Subsystem method Three<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class SubSystemFour &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodFour() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>Subsystem method Four<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Facade &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;SubSystemOne&gt; one;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;SubSystemTwo&gt; two;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;SubSystemThree&gt; three;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;SubSystemFour&gt; four;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodA() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; &quot;</span>=== methodA ===<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;one-&gt;methodOne();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;two-&gt;methodTwo();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;four-&gt;methodFour();</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; &quot;</span>\n<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodB() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; &quot;</span>=== methodB ===<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;one-&gt;methodOne();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;three-&gt;methodThree();</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; &quot;</span>\n<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  Facade() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;init();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;one.reset(new SubSystemOne());</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;two.reset(new SubSystemTwo());</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;three.reset(new SubSystemThree());</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;four.reset(new SubSystemFour());</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">private:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void init() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;one = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;two = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;three = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;four = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _FACADE_H_</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式13：享元模式（Flyweight）</title>
      <link href="/post/d3dd74d6.html"/>
      <url>/post/d3dd74d6.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="”对象性能“模式"><a href="#”对象性能“模式" class="headerlink" title="”对象性能“模式"></a>”对象性能“模式</h1><p>面向对象很好地解决了 抽象” 的问题，但是必不可免地要付出一定的代价。 对千通常情况来讲，面向对象的成本大都可以忽略不计。 但是某些情况，面向对象所带来的成本必须谨慎处理。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Singleton</li><li>2）Flyweight</li></ul><h1 id="Flyweight-享元模式"><a href="#Flyweight-享元模式" class="headerlink" title="Flyweight 享元模式"></a>Flyweight 享元模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件系统采用纯粹对象方案的问题在千大量细粒度的对象会很快充斥在系统中，从而带来很高的运行时代价——主要指内存需求方面的代价。</li><li>2）如何在避免大量细粒度对象问题的同时，让外部客户程序仍然能够透明地使用面向对象的方式来进行操作？<span id="more"></span></li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>运用共享技术有效地支持大量细粒度的对象。——《设计模式》Gof</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071212393618.jpg"><img src="http://image.camcad.cn/2021/07/2021071212393618.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）面向对象很好地解决了抽象性的问题，但是作为一个运行在机器中程序实体，我们需要考虑对象的代价问题。Flyweight主要解决面向对象的代价问题，一般不触及面向对象的抽象性问题。</li><li>2）Flyweightw采用对象共享的做法来降低系统中对象的个数，从而降低细粒对象给系统带来的内存压力。在具体实现方面，要注意对象状态的处理。</li><li>3）对象的数量太大从而导致对象内存开销加大——什么样的数量算大？这需要我们仔细的根据具体应用情况进行评估，而不能凭空臆断。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">享元模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"><h2 id="享元模式-DEMO"><a href="#享元模式-DEMO" class="headerlink" title="享元模式_DEMO"></a>享元模式_DEMO</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class Font &#123;</span><br><span class="line">private:</span><br><span class="line"></span><br><span class="line">    //unique object key</span><br><span class="line">    string key;</span><br><span class="line"></span><br><span class="line">    //object state</span><br><span class="line">    //....</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    Font(const string&amp; key)&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class FontFactory&#123;</span><br><span class="line">private:</span><br><span class="line">    map&lt;string,Font* &gt; fontPool;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    Font* GetFont(const string&amp; key)&#123;</span><br><span class="line"></span><br><span class="line">        map&lt;string,Font*&gt;::iterator item=fontPool.find(key);</span><br><span class="line"></span><br><span class="line">        if(item!=footPool.end())&#123;</span><br><span class="line">            return fontPool[key];</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            Font* font = new Font(key);</span><br><span class="line">            fontPool[key]= font;</span><br><span class="line">            return font;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void clear()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式12：单例模式（Singleton）</title>
      <link href="/post/f0c1b62d.html"/>
      <url>/post/f0c1b62d.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="”对象性能“模式"><a href="#”对象性能“模式" class="headerlink" title="”对象性能“模式"></a>”对象性能“模式</h1><p>面向对象很好地解决了 抽象” 的问题，但是必不可免地要付出一定的代价。 对千通常情况来讲，面向对象的成本大都可以忽略不计。 但是某些情况，面向对象所带来的成本必须谨慎处理。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Singleton</li><li>2）Flyweight</li></ul><h1 id="Singleton单例模式"><a href="#Singleton单例模式" class="headerlink" title="Singleton单例模式"></a>Singleton单例模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件系统中，经常有这样一些特殊的类，必须保证它们在系统中只存在一个实例，才能确保它们的逻辑正确性、以及良好的效率。</li><li>2）如何绕过常规的构造器，提供一种机制来保证一个类只有一个实例？</li><li>3）这应该是类设计者的责任，而不是使用者的责任。<span id="more"></span></li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>保证一个类仅有一个实例，并提供一个该实例的全局访问点。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071014473996.jpg"><img src="http://image.camcad.cn/2021/07/2021071014473996.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Singleton模式中的实例构造器可以设置为protected以允许子类派生。</li><li>2）Singleton模式一般不要支持拷贝构造函数和Clone接口，因为这有可能导致多个对象实例，与Singleton模式的初衷违背。</li><li>3）如何实现多线程环境下安全的Singleton?注意对双检查锁的正确实现。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">单例模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"><h2 id="单例模式（常规代码）"><a href="#单例模式（常规代码）" class="headerlink" title="单例模式（常规代码）"></a>单例模式（常规代码）</h2><p><code>注意：双重检查，在多线程执行的时候，有可能会开辟一处原生内存空间，存在一定风险</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;mutex&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">std::mutex g_resourceMutex;     // 互斥量</span><br><span class="line">class Emmet</span><br><span class="line">&#123;</span><br><span class="line">    static Emmet* m_instance;   // 静态成员变量</span><br><span class="line">public:</span><br><span class="line">    static Emmet* GetInstance();</span><br><span class="line">    void func() &#123; cout &lt;&lt; &quot;测试&quot; &lt;&lt; endl; &#125;</span><br><span class="line">private:</span><br><span class="line">    Emmet() &#123;&#125;</span><br><span class="line">    Emmet(const Emmet&amp; other) &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 释放Emmet对象内存</span><br><span class="line">class MyFree</span><br><span class="line">    &#123;</span><br><span class="line">    public:~MyFree()</span><br><span class="line">        &#123;</span><br><span class="line">            if (Emmet::m_instance != NULL)</span><br><span class="line">            &#123;</span><br><span class="line">                delete Emmet::m_instance;</span><br><span class="line">                Emmet::m_instance = NULL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">Emmet* Emmet::m_instance = NULL;    // 静态变量初始化</span><br><span class="line"></span><br><span class="line">Emmet* Emmet::GetInstance()</span><br><span class="line">&#123;</span><br><span class="line">    if (m_instance == NULL)         // 双重锁定（双重检查）</span><br><span class="line">    &#123;</span><br><span class="line">        std::unique_lock&lt;std::mutex&gt; mymutex(g_resourceMutex);    // RAII智能自动锁</span><br><span class="line">        if (m_instance == NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            m_instance = new Emmet();   </span><br><span class="line">            static MyFree F;            // 释放Emmet对象内存</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return m_instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Emmet* e1 = Emmet::GetInstance();</span><br><span class="line">    e1-&gt;func();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例模式（call-once）"><a href="#单例模式（call-once）" class="headerlink" title="单例模式（call_once）"></a>单例模式（call_once）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;mutex&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">std::once_flag g_flag;          // 系统定义标记</span><br><span class="line"></span><br><span class="line">class Emmet</span><br><span class="line">&#123;</span><br><span class="line">    static Emmet* m_instance;   // 静态成员变量</span><br><span class="line"></span><br><span class="line">    static void CreateInstance()</span><br><span class="line">    &#123;</span><br><span class="line">        m_instance = new Emmet();</span><br><span class="line">        static MyFree F;            // 释放Emmet对象内存</span><br><span class="line">    &#125;</span><br><span class="line">public:</span><br><span class="line">    static Emmet* GetInstance();</span><br><span class="line">    void func() &#123; cout &lt;&lt; &quot;测试&quot; &lt;&lt; endl; &#125;</span><br><span class="line">private:</span><br><span class="line">    Emmet() &#123;&#125;</span><br><span class="line">    Emmet(const Emmet&amp; other) &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 释放Emmet对象内存</span><br><span class="line">class MyFree</span><br><span class="line">    &#123;</span><br><span class="line">    public:~MyFree()</span><br><span class="line">        &#123;</span><br><span class="line">            if (Emmet::m_instance != NULL)</span><br><span class="line">            &#123;</span><br><span class="line">                delete Emmet::m_instance;</span><br><span class="line">                Emmet::m_instance = NULL;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">Emmet* Emmet::m_instance = NULL;    // 静态变量初始化</span><br><span class="line"></span><br><span class="line">Emmet* Emmet::GetInstance()</span><br><span class="line">&#123;</span><br><span class="line">    std::call_once(g_flag, CreateInstance);</span><br><span class="line"></span><br><span class="line">    return m_instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Emmet* e1 = Emmet::GetInstance();</span><br><span class="line">    e1-&gt;func();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例模式-DEMO"><a href="#单例模式-DEMO" class="headerlink" title="单例模式_DEMO"></a>单例模式_DEMO</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">class Singleton&#123;</span><br><span class="line">private:</span><br><span class="line">    Singleton();</span><br><span class="line">    Singleton(const Singleton&amp; other);</span><br><span class="line">public:</span><br><span class="line">    static Singleton* getInstance();</span><br><span class="line">    static Singleton* m_instance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::m_instance=nullptr;</span><br><span class="line"></span><br><span class="line">//线程非安全版本</span><br><span class="line">Singleton* Singleton::getInstance() &#123;</span><br><span class="line">    if (m_instance == nullptr) &#123;</span><br><span class="line">        m_instance = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    return m_instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//线程安全版本，但锁的代价过高</span><br><span class="line">Singleton* Singleton::getInstance() &#123;</span><br><span class="line">    Lock lock;</span><br><span class="line">    if (m_instance == nullptr) &#123;</span><br><span class="line">        m_instance = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    return m_instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//双检查锁，但由于内存读写reorder不安全</span><br><span class="line">Singleton* Singleton::getInstance() &#123;</span><br><span class="line"></span><br><span class="line">    if(m_instance==nullptr)&#123;</span><br><span class="line">        Lock lock;</span><br><span class="line">        if (m_instance == nullptr) &#123;</span><br><span class="line">            m_instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return m_instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//C++ 11版本之后的跨平台实现 (volatile)</span><br><span class="line">std::atomic&lt;Singleton*&gt; Singleton::m_instance;</span><br><span class="line">std::mutex Singleton::m_mutex;</span><br><span class="line"></span><br><span class="line">Singleton* Singleton::getInstance() &#123;</span><br><span class="line">    Singleton* tmp = m_instance.load(std::memory_order_relaxed);</span><br><span class="line">    std::atomic_thread_fence(std::memory_order_acquire);//获取内存fence</span><br><span class="line">    if (tmp == nullptr) &#123;</span><br><span class="line">        std::lock_guard&lt;std::mutex&gt; lock(m_mutex);</span><br><span class="line">        tmp = m_instance.load(std::memory_order_relaxed);</span><br><span class="line">        if (tmp == nullptr) &#123;</span><br><span class="line">            tmp = new Singleton;</span><br><span class="line">            std::atomic_thread_fence(std::memory_order_release);//释放内存fence</span><br><span class="line">            m_instance.store(tmp, std::memory_order_relaxed);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式11：构建器（Builder）</title>
      <link href="/post/82fc4ef.html"/>
      <url>/post/82fc4ef.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="“对象创建”模式"><a href="#“对象创建”模式" class="headerlink" title="“对象创建”模式"></a>“对象创建”模式</h1><p>通过“对象创建” 模式绕开new，来避免对象创建（new）过程中所导致的紧耦合（依赖具体类），从而支持对象创建的稳定。它是接口抽象之后的第一步工作。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Factory Method</li><li>2）Abstract Factory</li><li>3）Prototype</li><li>4）Builder<span id="more"></span></li></ul><h1 id="Builder构建器"><a href="#Builder构建器" class="headerlink" title="Builder构建器"></a>Builder构建器</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件系统中，有时候面临着“一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</li><li>2）如何应对这种变化？如何提供一种“封装机制”来隔离出“复杂对象的各个部分”的变化，从而保持系统中的“稳定构建算法”不随着需求改变而改变？</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>将一个复杂对象的构建与其表示相分离，使得同样的构建过程(稳定)可以创建不同的表示(变化)。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021070914561945.jpg"><img src="http://image.camcad.cn/2021/07/2021070914561945.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Builder 模式主要用于“分步骤构建一个复杂的对象”。在这其中 “分步骤”是一个稳定的算法，而复杂对象的各个部分则经常变化。</li><li>2）变化点在哪里，封装哪里—— Builder模式主要在于应对“复杂对象各个部分”的频繁需求变动。其缺点在于难以应对“分步骤构建算法”的需求变动。</li><li>3）在Builder模式中，要注意不同语言中构造器内调用虚函数的差别（C++ vs. C#) 。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">构建器模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">House</span>&#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HouseBuilder</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">House* <span class="title">GetResult</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pHouse;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">HouseBuilder</span>()&#123;&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    House* pHouse;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BuildPart1</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BuildPart2</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BuildPart3</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BuildPart4</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BuildPart5</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StoneHouse</span>: <span class="keyword">public</span> House&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StoneHouseBuilder</span>: <span class="keyword">public</span> HouseBuilder&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BuildPart1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//pHouse-&gt;Part1 = ...;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BuildPart2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BuildPart3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BuildPart4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">BuildPart5</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HouseDirector</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    HouseBuilder* pHouseBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">HouseDirector</span>(HouseBuilder* pHouseBuilder)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;pHouseBuilder=pHouseBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">House* <span class="title">Construct</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        pHouseBuilder-&gt;<span class="built_in">BuildPart1</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">            pHouseBuilder-&gt;<span class="built_in">BuildPart2</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">bool</span> flag=pHouseBuilder-&gt;<span class="built_in">BuildPart3</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            pHouseBuilder-&gt;<span class="built_in">BuildPart4</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pHouseBuilder-&gt;<span class="built_in">BuildPart5</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pHouseBuilder-&gt;<span class="built_in">GetResult</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式10：原型模式（Prototype）</title>
      <link href="/post/663bd6c2.html"/>
      <url>/post/663bd6c2.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="“对象创建”模式"><a href="#“对象创建”模式" class="headerlink" title="“对象创建”模式"></a>“对象创建”模式</h1><p>通过“对象创建” 模式绕开new，来避免对象创建（new）过程中所导致的紧耦合（依赖具体类），从而支持对象创建的稳定。它是接口抽象之后的第一步工作。</p><span id="more"></span><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Factory Method</li><li>2）Abstract Factory</li><li>3）Prototype</li><li>4）Builder</li></ul><h1 id="Prototype原型模式"><a href="#Prototype原型模式" class="headerlink" title="Prototype原型模式"></a>Prototype原型模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件系统中，经常面临着“某些结构复杂的对象”的创建工作，由于需要的变化，这些对象经常面临着剧烈的变化，但是它们却拥有比较稳定一致的接口。</li><li>2）如何应对这种变化？如何向“客户程序”（使用这些对象的程序）“隔离出”这些易变对象“，从而使得”依赖这些易变对象的客户程序“不随着需求改变而改变。</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>使用原型实例指定创建对象的种类，然后通过拷贝这些原型来创建新的对象。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021070814140816.jpg"><img src="http://image.camcad.cn/2021/07/2021070814140816.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Prototype模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些 “易变类：拥有”稳定的接口“。</li><li>2）Prototype模式对于”如何创建易变类的实体对象”采用“原型克隆”的方法来做，它使得我们可以非常灵活地动态创建“拥有某些稳定接口”的新对象——所需工作仅仅是注册一个新类的对象（即原型），然后在任何需要的地方Clone。</li><li>3）Prototype模式中的Clone方法可以利用某些框架中的序列化来实现深拷贝。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">原型模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight c++"><figcaption><span>main_prototype.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./src/prototype.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">std::unique_ptr&lt;Resume&gt; <span class="title">tmp</span><span class="params">(<span class="keyword">new</span> Resume(<span class="string">&quot;emmet&quot;</span>))</span></span>;</span><br><span class="line">  tmp-&gt;<span class="built_in">setPersonalInfo</span>(<span class="string">&quot;man&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">  std::unique_ptr&lt;Resume&gt; a = <span class="literal">nullptr</span>;</span><br><span class="line">  std::unique_ptr&lt;Resume&gt; b = <span class="literal">nullptr</span>;</span><br><span class="line">  std::unique_ptr&lt;Resume&gt; c = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">  a = tmp-&gt;<span class="built_in">clone</span>();</span><br><span class="line">  b = tmp-&gt;<span class="built_in">clone</span>();</span><br><span class="line">  c = tmp-&gt;<span class="built_in">clone</span>();</span><br><span class="line"></span><br><span class="line">  a-&gt;<span class="built_in">setWorkExperience</span>(<span class="string">&quot;2016-2017&quot;</span>, <span class="string">&quot;huaihua city&quot;</span>);</span><br><span class="line"></span><br><span class="line">  b-&gt;<span class="built_in">setPersonalInfo</span>(<span class="string">&quot;woman&quot;</span>, <span class="number">19</span>);</span><br><span class="line">  b-&gt;<span class="built_in">setWorkExperience</span>(<span class="string">&quot;2017-2018&quot;</span>, <span class="string">&quot;beijing&quot;</span>);</span><br><span class="line"></span><br><span class="line">  c-&gt;<span class="built_in">setPersonalInfo</span>(<span class="string">&quot;man&quot;</span>, <span class="number">20</span>);</span><br><span class="line">  c-&gt;<span class="built_in">setWorkExperience</span>(<span class="string">&quot;2018-2019&quot;</span>, <span class="string">&quot;guang zhou&quot;</span>);</span><br><span class="line"></span><br><span class="line">  a-&gt;<span class="built_in">display</span>();</span><br><span class="line">  b-&gt;<span class="built_in">display</span>();</span><br><span class="line">  c-&gt;<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>prototype.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _PROTOTYPE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _PROTOTYPE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 工作经历</span></span></span><br><span class="line"><span class="string"><span class="meta">class WorkExperience &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_workDate;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_company;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void setWorkDate(std::string workDate) &#123; this-&gt;m_workDate = workDate; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void setCompany(std::string company) &#123; this-&gt;m_company = company; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string getWorkDate() &#123; return this-&gt;m_workDate; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string getCompany() &#123; return this-&gt;m_company; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  WorkExperience() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_workDate = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_company = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 简历</span></span></span><br><span class="line"><span class="string"><span class="meta">class Resume &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  WorkExperience m_work;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_sex;</span></span></span><br><span class="line"><span class="string"><span class="meta">  int *m_age;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Resume(std::string name) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = name;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_sex = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_age = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  Resume(const Resume &amp;r) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_work = r.m_work;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = r.m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_sex = r.m_sex;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_age = new int(*r.m_age);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void setPersonalInfo(std::string sex, int age) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_sex = sex;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_age = new int(age);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void setWorkExperience(std::string workDate, std::string company) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_work.setWorkDate(workDate);</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_work.setCompany(company);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void display() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>name: <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span>  <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; &quot;</span>sex: <span class="string">&quot; &lt;&lt; this-&gt;m_sex &lt;&lt; &quot;</span>  <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; &quot;</span>age: <span class="string">&quot; &lt;&lt; *this-&gt;m_age &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>work date: <span class="string">&quot; &lt;&lt; this-&gt;m_work.getWorkDate() &lt;&lt; &quot;</span>  <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; &quot;</span>company: <span class="string">&quot; &lt;&lt; this-&gt;m_work.getCompany() &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;Resume&gt; clone() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::unique_ptr&lt;Resume&gt; ret = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    ret.reset(new Resume(*this));</span></span></span><br><span class="line"><span class="string"><span class="meta">    return ret;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~Resume() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_age != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      delete this-&gt;m_age;</span></span></span><br><span class="line"><span class="string"><span class="meta">      this-&gt;m_age = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _PROTOTYPE_H_</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><h3 id="Client-cpp"><a href="#Client-cpp" class="headerlink" title="Client.cpp"></a>Client.cpp</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class MainForm : public Form</span><br><span class="line">&#123;</span><br><span class="line">    ISplitter*  prototype;//原型对象</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    MainForm(ISplitter*  prototype)&#123;</span><br><span class="line">        this-&gt;prototype=prototype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Button1_Click()&#123;</span><br><span class="line"></span><br><span class="line">        ISplitter * splitter=</span><br><span class="line">            prototype-&gt;clone(); //克隆原型</span><br><span class="line"></span><br><span class="line">        splitter-&gt;split();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Prototype-cpp"><a href="#Prototype-cpp" class="headerlink" title="Prototype.cpp"></a>Prototype.cpp</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//抽象类</span><br><span class="line">class ISplitter&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void split()=0;</span><br><span class="line">    virtual ISplitter* clone()=0; //通过克隆自己来创建对象</span><br><span class="line"></span><br><span class="line">    virtual ~ISplitter()&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="ConcretePrototype-cpp"><a href="#ConcretePrototype-cpp" class="headerlink" title="ConcretePrototype.cpp"></a>ConcretePrototype.cpp</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//具体类</span><br><span class="line">class BinarySplitter : public ISplitter&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual ISplitter* clone()&#123;</span><br><span class="line">        return new BinarySplitter(*this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class TxtSplitter: public ISplitter&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual ISplitter* clone()&#123;</span><br><span class="line">        return new TxtSplitter(*this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class PictureSplitter: public ISplitter&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual ISplitter* clone()&#123;</span><br><span class="line">        return new PictureSplitter(*this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class VideoSplitter: public ISplitter&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual ISplitter* clone()&#123;</span><br><span class="line">        return new VideoSplitter(*this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式09：抽象工厂（Abstract Factory）</title>
      <link href="/post/8f86a457.html"/>
      <url>/post/8f86a457.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="“对象创建”模式"><a href="#“对象创建”模式" class="headerlink" title="“对象创建”模式"></a>“对象创建”模式</h1><p>通过“对象创建” 模式绕开new，来避免对象创建（new）过程中所导致的紧耦合（依赖具体类），从而支持对象创建的稳定。它是接口抽象之后的第一步工作。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Factory Method</li><li>2）Abstract Factory</li><li>3）Prototype</li><li>4）Builder</li></ul><h1 id="Abstract-Factory抽象工厂"><a href="#Abstract-Factory抽象工厂" class="headerlink" title="Abstract Factory抽象工厂"></a>Abstract Factory抽象工厂</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件系统中，经常面临着“一系列相互依赖的对象”的创建工作；同时，由于需求的变化，往往存在更多系列对象的创建工作。</li><li>2）如何应对这种变化？如何绕过常规的对象创建方法(new)，提供一种“封装机制”来避免客户程序和这种“多系列具体对象创建工作” 的紧耦合？<span id="more"></span></li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>提供一个接口，让该接口负责创建一系列“相关或者相互依赖的对象”，无需指定它们具体的类。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021070712535391.jpg"><img src="http://image.camcad.cn/2021/07/2021070712535391.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）如果没有应对“多系列对象构建”的需求变化，则没有必要使用Abstract Factory模式，这时候使用简单的工厂完全可以。</li><li>2）“系列对象”指的是在某一特定系列下的对象之间有相互依赖、或作用的关系。不同系列的对象之间不能相互依赖。</li><li>3）Abstract Factory模式主要在于应对“新系列”的需求变动。其缺点在于难以应对“新对象”的需求变动。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">抽象模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"><h3 id="EmployeeDAO1-cpp"><a href="#EmployeeDAO1-cpp" class="headerlink" title="EmployeeDAO1.cpp"></a>EmployeeDAO1.cpp</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class EmployeeDAO&#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    vector&lt;EmployeeDO&gt; GetEmployees()&#123;</span><br><span class="line">        SqlConnection* connection =</span><br><span class="line">            new SqlConnection();</span><br><span class="line">        connection-&gt;ConnectionString = &quot;...&quot;;</span><br><span class="line"></span><br><span class="line">        SqlCommand* command =</span><br><span class="line">            new SqlCommand();</span><br><span class="line">        command-&gt;CommandText=&quot;...&quot;;</span><br><span class="line">        command-&gt;SetConnection(connection);</span><br><span class="line"></span><br><span class="line">        SqlDataReader* reader = command-&gt;ExecuteReader();</span><br><span class="line">        while (reader-&gt;Read())&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="EmployeeDAO2-cpp"><a href="#EmployeeDAO2-cpp" class="headerlink" title="EmployeeDAO2.cpp"></a>EmployeeDAO2.cpp</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">//数据库访问有关的基类</span><br><span class="line">class IDBConnection&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">class IDBConnectionFactory&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual IDBConnection* CreateDBConnection()=0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class IDBCommand&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">class IDBCommandFactory&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual IDBCommand* CreateDBCommand()=0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class IDataReader&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">class IDataReaderFactory&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual IDataReader* CreateDataReader()=0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//支持SQL Server</span><br><span class="line">class SqlConnection: public IDBConnection&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">class SqlConnectionFactory:public IDBConnectionFactory&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class SqlCommand: public IDBCommand&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">class SqlCommandFactory:public IDBCommandFactory&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class SqlDataReader: public IDataReader&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">class SqlDataReaderFactory:public IDataReaderFactory&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//支持Oracle</span><br><span class="line">class OracleConnection: public IDBConnection&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class OracleCommand: public IDBCommand&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class OracleDataReader: public IDataReader&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class EmployeeDAO&#123;</span><br><span class="line">    IDBConnectionFactory* dbConnectionFactory;</span><br><span class="line">    IDBCommandFactory* dbCommandFactory;</span><br><span class="line">    IDataReaderFactory* dataReaderFactory;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    vector&lt;EmployeeDO&gt; GetEmployees()&#123;</span><br><span class="line">        IDBConnection* connection =</span><br><span class="line">            dbConnectionFactory-&gt;CreateDBConnection();</span><br><span class="line">        connection-&gt;ConnectionString(&quot;...&quot;);</span><br><span class="line"></span><br><span class="line">        IDBCommand* command =</span><br><span class="line">            dbCommandFactory-&gt;CreateDBCommand();</span><br><span class="line">        command-&gt;CommandText(&quot;...&quot;);</span><br><span class="line">        command-&gt;SetConnection(connection); //关联性</span><br><span class="line"></span><br><span class="line">        IDBDataReader* reader = command-&gt;ExecuteReader(); //关联性</span><br><span class="line">        while (reader-&gt;Read())&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="EmployeeDAO3-cpp"><a href="#EmployeeDAO3-cpp" class="headerlink" title="EmployeeDAO3.cpp"></a>EmployeeDAO3.cpp</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">//数据库访问有关的基类</span><br><span class="line">class IDBConnection&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class IDBCommand&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class IDataReader&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class IDBFactory&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual IDBConnection* CreateDBConnection()=0;</span><br><span class="line">    virtual IDBCommand* CreateDBCommand()=0;</span><br><span class="line">    virtual IDataReader* CreateDataReader()=0;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//支持SQL Server</span><br><span class="line">class SqlConnection: public IDBConnection&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">class SqlCommand: public IDBCommand&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">class SqlDataReader: public IDataReader&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class SqlDBFactory:public IDBFactory&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual IDBConnection* CreateDBConnection()=0;</span><br><span class="line">    virtual IDBCommand* CreateDBCommand()=0;</span><br><span class="line">    virtual IDataReader* CreateDataReader()=0;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//支持Oracle</span><br><span class="line">class OracleConnection: public IDBConnection&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class OracleCommand: public IDBCommand&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class OracleDataReader: public IDataReader&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class EmployeeDAO&#123;</span><br><span class="line">    IDBFactory* dbFactory;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    vector&lt;EmployeeDO&gt; GetEmployees()&#123;</span><br><span class="line">        IDBConnection* connection =</span><br><span class="line">            dbFactory-&gt;CreateDBConnection();</span><br><span class="line">        connection-&gt;ConnectionString(&quot;...&quot;);</span><br><span class="line"></span><br><span class="line">        IDBCommand* command =</span><br><span class="line">            dbFactory-&gt;CreateDBCommand();</span><br><span class="line">        command-&gt;CommandText(&quot;...&quot;);</span><br><span class="line">        command-&gt;SetConnection(connection); //关联性</span><br><span class="line"></span><br><span class="line">        IDBDataReader* reader = command-&gt;ExecuteReader(); //关联性</span><br><span class="line">        while (reader-&gt;Read())&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式08：工厂方法（Factory Method）</title>
      <link href="/post/d39d84e.html"/>
      <url>/post/d39d84e.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="“对象创建”模式"><a href="#“对象创建”模式" class="headerlink" title="“对象创建”模式"></a>“对象创建”模式</h1><p>通过“对象创建” 模式绕开new，来避免对象创建（new）过程中所导致的紧耦合（依赖具体类），从而支持对象创建的稳定。它是接口抽象之后的第一步工作。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Factory Method</li><li>2）Abstract Factory</li><li>3）Prototype</li><li>4）Builder<span id="more"></span></li></ul><h1 id="Factory-Method工厂方法"><a href="#Factory-Method工厂方法" class="headerlink" title="Factory Method工厂方法"></a>Factory Method工厂方法</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件系统中，经常面临着创建对象的工作；由于需求的变化，需要创建的对象的具体类型经常变化。</li><li>2）如何应对这种变化？如何绕过常规的对象创建方法(new)，提供一种“封装机制”来避免客户程序和这种“具体对象创建工作”的紧耦合？</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。 Factory Method使得一个类的实例化延迟（目的：解耦，手段：虚函数）到子类。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021070614221082.jpg"><img src="http://image.camcad.cn/2021/07/2021070614221082.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Factory Method模式用于隔离类对象的使用者和具体类型之间的耦合关系。面对一个经常变化的具体类型，紧耦合关系(new)会导致软件的脆弱。</li><li>2）Factory Method模式通过面向对象的手法，将所要创建的具体对象工作延迟到子类，从而实现一种扩展（而非更改）的策略，较好地解决了这种紧耦合关系。</li><li>3）Factory Method模式解决“单个对象”的需求变化。缺点在于要求创建方法&#x2F;参数相同。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">工厂方法模式</a></li><li class="tab"><a href="#tab-2">进阶模式</a></li><li class="tab"><a href="#tab-3">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight c++"><figcaption><span>main_factoryMethod.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./src/factory_method.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  std::shared_ptr&lt;IFactory&gt; uf = <span class="literal">nullptr</span>;</span><br><span class="line">  std::shared_ptr&lt;ILeiFeng&gt; lf = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">  uf = std::<span class="built_in">make_shared</span>&lt;UndergraduateFactory&gt;();</span><br><span class="line">  lf = uf-&gt;<span class="built_in">createLeiFeng</span>();</span><br><span class="line">  lf-&gt;<span class="built_in">sweep</span>();</span><br><span class="line">  lf-&gt;<span class="built_in">wash</span>();</span><br><span class="line">  lf-&gt;<span class="built_in">buyRice</span>();</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  uf = std::<span class="built_in">make_shared</span>&lt;VolunteerFactory&gt;();</span><br><span class="line">  lf = uf-&gt;<span class="built_in">createLeiFeng</span>();</span><br><span class="line">  lf-&gt;<span class="built_in">sweep</span>();</span><br><span class="line">  lf-&gt;<span class="built_in">wash</span>();</span><br><span class="line">  lf-&gt;<span class="built_in">buyRice</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>factory_method.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _FACTORY_METHOD_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _FACTORY_METHOD_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class ILeiFeng &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void sweep() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void wash() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void buyRice() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~ILeiFeng() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class IFactory &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual std::shared_ptr&lt;ILeiFeng&gt; createLeiFeng() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~IFactory()&#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Undergraduate : public ILeiFeng &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Undergraduate(std::string name) &#123; this-&gt;m_name = name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void sweep() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span>: undergraduate sweep<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void wash() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span>: undergraduate wash<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void buyRice() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span>: undergraduate buyRice<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Volunteer : public ILeiFeng &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Volunteer(std::string name) &#123; this-&gt;m_name = name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void sweep() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span>: Volunteer sweep<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void wash() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span>: Volunteer wash<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void buyRice() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span>: Volunteer buyRice<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class UndergraduateFactory : public IFactory &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::shared_ptr&lt;ILeiFeng&gt; createLeiFeng() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    return std::make_shared&lt;Undergraduate&gt;(&quot;</span>student<span class="string">&quot;);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class VolunteerFactory : public IFactory &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::shared_ptr&lt;ILeiFeng&gt; createLeiFeng() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    return std::make_shared&lt;Volunteer&gt;(&quot;</span>volunteer<span class="string">&quot;);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _FACTORY_METHOD_H_</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainForm</span> : <span class="keyword">public</span> Form</span><br><span class="line">&#123;</span><br><span class="line">    SplitterFactory*  factory;<span class="comment">//工厂</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MainForm</span>(SplitterFactory*  factory)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;factory=factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Button1_Click</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ISplitter * splitter=</span><br><span class="line">            factory-&gt;<span class="built_in">CreateSplitter</span>(); <span class="comment">//多态new</span></span><br><span class="line"></span><br><span class="line">        splitter-&gt;<span class="built_in">split</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ISplitter</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">split</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">ISplitter</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SplitterFactory</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">SplitterFactory</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySplitter</span> : <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TxtSplitter</span>: <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PictureSplitter</span>: <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoSplitter</span>: <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySplitterFactory</span>: <span class="keyword">public</span> SplitterFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">BinarySplitter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TxtSplitterFactory</span>: <span class="keyword">public</span> SplitterFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TxtSplitter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PictureSplitterFactory</span>: <span class="keyword">public</span> SplitterFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">PictureSplitter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoSplitterFactory</span>: <span class="keyword">public</span> SplitterFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">VideoSplitter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainForm</span> : <span class="keyword">public</span> Form</span><br><span class="line">&#123;</span><br><span class="line">    TextBox* txtFilePath;</span><br><span class="line">    TextBox* txtFileNumber;</span><br><span class="line">    ProgressBar* progressBar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Button1_Click</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ISplitter * splitter=</span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">BinarySplitter</span>();<span class="comment">//依赖具体类</span></span><br><span class="line"></span><br><span class="line">        splitter-&gt;<span class="built_in">split</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ISplitter</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">split</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">ISplitter</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySplitter</span> : <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TxtSplitter</span>: <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PictureSplitter</span>: <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoSplitter</span>: <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式07：桥模式（Bridge）</title>
      <link href="/post/b0354483.html"/>
      <url>/post/b0354483.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="“单一职责”模式："><a href="#“单一职责”模式：" class="headerlink" title="“单一职责”模式："></a>“单一职责”模式：</h1><p>在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码，这时候的关键是划清责任。</p><h3 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h3><ul><li>1）Decorator</li><li>2）Bridge</li></ul><h1 id="Bridge桥模式"><a href="#Bridge桥模式" class="headerlink" title="Bridge桥模式"></a>Bridge桥模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）由于某些类型的固有的实现逻辑，使得它们具有两个变化的维度，乃至多个纬度的变化。</li><li>2）如何应对这种“多维度的变化”？如何利用面向对象技术来使得类型可以轻松地沿着两个乃至多个方向变化，而不引入额外的复杂度？<span id="more"></span></li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>将抽象部分(业务功能)与实现部分(平台实现)分离，使它们都可以独立地变化。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021070613234688.jpg"><img src="http://image.camcad.cn/2021/07/2021070613234688.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Bridge模式使用“对象间的组合关系”解耦了抽象和实现之间固有的绑定关系，使得抽象和实现可以沿着各自的维度来变化。所谓抽象和实现沿着各自纬度的变化，即“子类化”它们。</li><li>2）Bridge模式有时候类似于多继承方案，但是多继承方案往往违背单一职责原则（即一个类只有一个变化的原因），复用性比较差。 Bridge模式是比多继承方案更好的解决方法。</li><li>3）Bridge模式的应用一般在“两个非常强的变化维度”，有时一个类也有多于两个的变化维度，这时可以使用Bridge的扩展模式</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">桥模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">class Messager&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void Login(string username, string password)=0;</span><br><span class="line">    virtual void SendMessage(string message)=0;</span><br><span class="line">    virtual void SendPicture(Image image)=0;</span><br><span class="line"></span><br><span class="line">    virtual void PlaySound()=0;</span><br><span class="line">    virtual void DrawShape()=0;</span><br><span class="line">    virtual void WriteText()=0;</span><br><span class="line">    virtual void Connect()=0;</span><br><span class="line"></span><br><span class="line">    virtual ~Messager()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//平台实现</span><br><span class="line"></span><br><span class="line">class PCMessagerBase : public Messager&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    virtual void PlaySound()&#123;</span><br><span class="line">        //**********</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void DrawShape()&#123;</span><br><span class="line">        //**********</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void WriteText()&#123;</span><br><span class="line">        //**********</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void Connect()&#123;</span><br><span class="line">        //**********</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class MobileMessagerBase : public Messager&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    virtual void PlaySound()&#123;</span><br><span class="line">        //==========</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void DrawShape()&#123;</span><br><span class="line">        //==========</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void WriteText()&#123;</span><br><span class="line">        //==========</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void Connect()&#123;</span><br><span class="line">        //==========</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//业务抽象</span><br><span class="line"></span><br><span class="line">class PCMessagerLite : public PCMessagerBase &#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    virtual void Login(string username, string password)&#123;</span><br><span class="line"></span><br><span class="line">        PCMessagerBase::Connect();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void SendMessage(string message)&#123;</span><br><span class="line"></span><br><span class="line">        PCMessagerBase::WriteText();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void SendPicture(Image image)&#123;</span><br><span class="line"></span><br><span class="line">        PCMessagerBase::DrawShape();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class PCMessagerPerfect : public PCMessagerBase &#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    virtual void Login(string username, string password)&#123;</span><br><span class="line"></span><br><span class="line">        PCMessagerBase::PlaySound();</span><br><span class="line">        //********</span><br><span class="line">        PCMessagerBase::Connect();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void SendMessage(string message)&#123;</span><br><span class="line"></span><br><span class="line">        PCMessagerBase::PlaySound();</span><br><span class="line">        //********</span><br><span class="line">        PCMessagerBase::WriteText();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void SendPicture(Image image)&#123;</span><br><span class="line"></span><br><span class="line">        PCMessagerBase::PlaySound();</span><br><span class="line">        //********</span><br><span class="line">        PCMessagerBase::DrawShape();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class MobileMessagerLite : public MobileMessagerBase &#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    virtual void Login(string username, string password)&#123;</span><br><span class="line"></span><br><span class="line">        MobileMessagerBase::Connect();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void SendMessage(string message)&#123;</span><br><span class="line"></span><br><span class="line">        MobileMessagerBase::WriteText();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void SendPicture(Image image)&#123;</span><br><span class="line"></span><br><span class="line">        MobileMessagerBase::DrawShape();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class MobileMessagerPerfect : public MobileMessagerBase &#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    virtual void Login(string username, string password)&#123;</span><br><span class="line"></span><br><span class="line">        MobileMessagerBase::PlaySound();</span><br><span class="line">        //********</span><br><span class="line">        MobileMessagerBase::Connect();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void SendMessage(string message)&#123;</span><br><span class="line"></span><br><span class="line">        MobileMessagerBase::PlaySound();</span><br><span class="line">        //********</span><br><span class="line">        MobileMessagerBase::WriteText();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void SendPicture(Image image)&#123;</span><br><span class="line"></span><br><span class="line">        MobileMessagerBase::PlaySound();</span><br><span class="line">        //********</span><br><span class="line">        MobileMessagerBase::DrawShape();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void Process()&#123;</span><br><span class="line">        //编译时装配</span><br><span class="line">        Messager *m =</span><br><span class="line">            new MobileMessagerPerfect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="桥模式-DEMO"><a href="#桥模式-DEMO" class="headerlink" title="桥模式_DEMO"></a>桥模式_DEMO</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">class Messager&#123;</span><br><span class="line">protected:</span><br><span class="line">     MessagerImp* messagerImp;//...</span><br><span class="line">public:</span><br><span class="line">    virtual void Login(string username, string password)=0;</span><br><span class="line">    virtual void SendMessage(string message)=0;</span><br><span class="line">    virtual void SendPicture(Image image)=0;</span><br><span class="line"></span><br><span class="line">    virtual ~Messager()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class MessagerImp&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void PlaySound()=0;</span><br><span class="line">    virtual void DrawShape()=0;</span><br><span class="line">    virtual void WriteText()=0;</span><br><span class="line">    virtual void Connect()=0;</span><br><span class="line"></span><br><span class="line">    virtual MessagerImp()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//平台实现 n</span><br><span class="line">class PCMessagerImp : public MessagerImp&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    virtual void PlaySound()&#123;</span><br><span class="line">        //**********</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void DrawShape()&#123;</span><br><span class="line">        //**********</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void WriteText()&#123;</span><br><span class="line">        //**********</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void Connect()&#123;</span><br><span class="line">        //**********</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class MobileMessagerImp : public MessagerImp&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    virtual void PlaySound()&#123;</span><br><span class="line">        //==========</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void DrawShape()&#123;</span><br><span class="line">        //==========</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void WriteText()&#123;</span><br><span class="line">        //==========</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void Connect()&#123;</span><br><span class="line">        //==========</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//业务抽象 m</span><br><span class="line"></span><br><span class="line">//类的数目：1+n+m</span><br><span class="line"></span><br><span class="line">class MessagerLite :public Messager &#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    virtual void Login(string username, string password)&#123;</span><br><span class="line"></span><br><span class="line">        messagerImp-&gt;Connect();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void SendMessage(string message)&#123;</span><br><span class="line"></span><br><span class="line">        messagerImp-&gt;WriteText();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void SendPicture(Image image)&#123;</span><br><span class="line"></span><br><span class="line">        messagerImp-&gt;DrawShape();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class MessagerPerfect  :public Messager &#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    virtual void Login(string username, string password)&#123;</span><br><span class="line"></span><br><span class="line">        messagerImp-&gt;PlaySound();</span><br><span class="line">        //********</span><br><span class="line">        messagerImp-&gt;Connect();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void SendMessage(string message)&#123;</span><br><span class="line"></span><br><span class="line">        messagerImp-&gt;PlaySound();</span><br><span class="line">        //********</span><br><span class="line">        messagerImp-&gt;WriteText();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">    virtual void SendPicture(Image image)&#123;</span><br><span class="line"></span><br><span class="line">        messagerImp-&gt;PlaySound();</span><br><span class="line">        //********</span><br><span class="line">        messagerImp-&gt;DrawShape();</span><br><span class="line">        //........</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void Process()&#123;</span><br><span class="line">    //运行时装配</span><br><span class="line">    MessagerImp* mImp=new PCMessagerImp();</span><br><span class="line">    Messager *m =new Messager(mImp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式06：装饰模式（Decorator）</title>
      <link href="/post/1da0e9fd.html"/>
      <url>/post/1da0e9fd.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="“单一职责”模式："><a href="#“单一职责”模式：" class="headerlink" title="“单一职责”模式："></a>“单一职责”模式：</h1><p>在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码，这时候的关键是划清责任。</p><h3 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h3><ul><li>1）Decorator</li><li>2）Bridge<span id="more"></span></li></ul><h1 id="Decorator装饰模式"><a href="#Decorator装饰模式" class="headerlink" title="Decorator装饰模式"></a>Decorator装饰模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在某些情况下我们可能会“过度地使用继承来扩展对象的功能”，由于继承为类型引入的静态特质，使得这种扩展方式缺乏灵活性；并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀。</li><li>2）如何使“对象功能的扩展”能够根据需要来动态地实现？同时避免“扩展功能的增多”带来的子类膨胀问题？从而使得任何“功能扩展变化”所导致的影响将为最低？</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>动态（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（继承）更为灵活（消除重复代码 &amp; 减少子类个数）。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021070414100964.jpg"><img src="http://image.camcad.cn/2021/07/2021070414100964.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）通过采用组合而非继承的手法， Decorator模式实现了在运行时动态扩展对象功能的能力，而且可以根据需要扩展多个功能。避免了使用继承带来的“灵活性差”和“多子类衍生问题”。</li><li>2）Decorator类在接口上表现为is-a Component的继承关系，即Decorator类继承了Component类所具有的接口。但在实现上又表现为has-a Component的组合关系，即Decorator类又使用了另外一个Component类。</li><li>3）Decorator模式的目的并非解决“多子类衍生的多继承”问题， Decorator模式应用的要点在于解决“主体类在多个方向上的扩展功能”——是为“装饰”的含义。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">装饰模式</a></li><li class="tab"><a href="#tab-2">进阶模式</a></li><li class="tab"><a href="#tab-3">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><h3 id="main-decorator-cpp"><a href="#main-decorator-cpp" class="headerlink" title="main_decorator.cpp"></a><code>main_decorator.cpp</code></h3><figure class="highlight c++"><figcaption><span>main_decorator.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./src/decorator.cpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  ConcreteComponent *cc = <span class="keyword">new</span> <span class="built_in">ConcreteComponent</span>();</span><br><span class="line"></span><br><span class="line">  ConcreteDecoratorA *ca = <span class="keyword">new</span> <span class="built_in">ConcreteDecoratorA</span>();</span><br><span class="line"></span><br><span class="line">  ConcreteDecoratorB *cb = <span class="keyword">new</span> <span class="built_in">ConcreteDecoratorB</span>();</span><br><span class="line"></span><br><span class="line">  ca-&gt;<span class="built_in">setComponent</span>(cc);</span><br><span class="line"></span><br><span class="line">  cb-&gt;<span class="built_in">setComponent</span>(ca);</span><br><span class="line"></span><br><span class="line">  cb-&gt;<span class="built_in">operation</span>();</span><br><span class="line"></span><br><span class="line">  cb-&gt;<span class="built_in">destroy</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="decorator-cpp"><a href="#decorator-cpp" class="headerlink" title="decorator.cpp"></a><code>decorator.cpp</code></h3><figure class="highlight c++"><figcaption><span>decorator.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _DECORATOR_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _DECORATOR_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE <span class="string">&quot;file: &quot;</span> <span class="string">&lt;&lt; __EMMETFILE__ &lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Component &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void operation() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~Component() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void destroy() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    auto *tmp = this;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (tmp != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      delete tmp;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class ConcreteComponent : public Component &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void operation() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>concreteComponent operation<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Decorator : public Component &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">protected:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Component *m_component;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Decorator() &#123; this-&gt;m_component = nullptr; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~Decorator() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void operation() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_component != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      this-&gt;m_component-&gt;operation();</span></span></span><br><span class="line"><span class="string"><span class="meta">      this-&gt;m_component-&gt;destroy();</span></span></span><br><span class="line"><span class="string"><span class="meta">      this-&gt;m_component = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void setComponent(Component *component) &#123; this-&gt;m_component = component; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class ConcreteDecoratorA : public Decorator &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void operation() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_component-&gt;operation();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_component-&gt;destroy();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_component = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>concreteDecoratorA operation<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;addedBehavior();</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">private:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void addedBehavior() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>private: addedBehavior<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class ConcreteDecoratorB : public Decorator &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void operation() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_component-&gt;operation();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_component-&gt;destroy();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_component = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>concreteDecoratorB operation<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _DECORATOR_H_</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stream</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>：</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Stream</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileStream</span>: <span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写文件流</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkStream</span> :<span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写网络流</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MemoryStream</span> :<span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写内存流</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CryptoStream</span>: <span class="keyword">public</span> Stream &#123;</span><br><span class="line"></span><br><span class="line">    Stream* stream;<span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CryptoStream</span>(Stream* stm):<span class="built_in">stream</span>(stm)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream-&gt;<span class="built_in">Read</span>(number);<span class="comment">//读文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream::<span class="built_in">Seek</span>(position);<span class="comment">//定位文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream::<span class="built_in">Write</span>(data);<span class="comment">//写文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BufferedStream</span> : <span class="keyword">public</span> Stream&#123;</span><br><span class="line"></span><br><span class="line">    Stream* stream;<span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BufferedStream</span>(Stream* stm):<span class="built_in">stream</span>(stm)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Process</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//运行时装配</span></span><br><span class="line">    FileStream* s1=<span class="keyword">new</span> <span class="built_in">FileStream</span>();</span><br><span class="line">    CryptoStream* s2=<span class="keyword">new</span> <span class="built_in">CryptoStream</span>(s1);</span><br><span class="line"></span><br><span class="line">    BufferedStream* s3=<span class="keyword">new</span> <span class="built_in">BufferedStream</span>(s1);</span><br><span class="line"></span><br><span class="line">    BufferedStream* s4=<span class="keyword">new</span> <span class="built_in">BufferedStream</span>(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="装饰模式（优化）-DEMO"><a href="#装饰模式（优化）-DEMO" class="headerlink" title="装饰模式（优化）_DEMO"></a>装饰模式（优化）_DEMO</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stream</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>：</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Stream</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileStream</span>: <span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写文件流</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkStream</span> :<span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写网络流</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MemoryStream</span> :<span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写内存流</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展操作</span></span><br><span class="line"></span><br><span class="line">DecoratorStream: <span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Stream* stream;<span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">DecoratorStream</span>(Stream * stm):<span class="built_in">stream</span>(stm)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CryptoStream</span>: <span class="keyword">public</span> DecoratorStream &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CryptoStream</span>(Stream* stm):<span class="built_in">DecoratorStream</span>(stm)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream-&gt;<span class="built_in">Read</span>(number);<span class="comment">//读文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream::<span class="built_in">Seek</span>(position);<span class="comment">//定位文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream::<span class="built_in">Write</span>(data);<span class="comment">//写文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BufferedStream</span> : <span class="keyword">public</span> DecoratorStream&#123;</span><br><span class="line"></span><br><span class="line">    Stream* stream;<span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BufferedStream</span>(Stream* stm):<span class="built_in">DecoratorStream</span>(stm)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Process</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//运行时装配</span></span><br><span class="line">    FileStream* s1=<span class="keyword">new</span> <span class="built_in">FileStream</span>();</span><br><span class="line"></span><br><span class="line">    CryptoStream* s2=<span class="keyword">new</span> <span class="built_in">CryptoStream</span>(s1);</span><br><span class="line"></span><br><span class="line">    BufferedStream* s3=<span class="keyword">new</span> <span class="built_in">BufferedStream</span>(s1);</span><br><span class="line"></span><br><span class="line">    BufferedStream* s4=<span class="keyword">new</span> <span class="built_in">BufferedStream</span>(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stream</span>&#123;</span><br><span class="line"><span class="keyword">public</span>：</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Stream</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileStream</span>: <span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkStream</span> :<span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MemoryStream</span> :<span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CryptoFileStream</span> :<span class="keyword">public</span> FileStream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Read</span>(number);<span class="comment">//读文件流</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Seek</span>(position);<span class="comment">//定位文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Write</span>(data);<span class="comment">//写文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CryptoNetworkStream</span> : :<span class="keyword">public</span> NetworkStream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        NetworkStream::<span class="built_in">Read</span>(number);<span class="comment">//读网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        NetworkStream::<span class="built_in">Seek</span>(position);<span class="comment">//定位网络流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        NetworkStream::<span class="built_in">Write</span>(data);<span class="comment">//写网络流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CryptoMemoryStream</span> : <span class="keyword">public</span> MemoryStream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        MemoryStream::<span class="built_in">Read</span>(number);<span class="comment">//读内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        MemoryStream::<span class="built_in">Seek</span>(position);<span class="comment">//定位内存流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        MemoryStream::<span class="built_in">Write</span>(data);<span class="comment">//写内存流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BufferedFileStream</span> : <span class="keyword">public</span> FileStream&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BufferedNetworkStream</span> : <span class="keyword">public</span> NetworkStream&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BufferedMemoryStream</span> : <span class="keyword">public</span> MemoryStream&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CryptoBufferedFileStream</span> :<span class="keyword">public</span> FileStream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        <span class="comment">//额外的缓冲操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Read</span>(number);<span class="comment">//读文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        <span class="comment">//额外的缓冲操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Seek</span>(position);<span class="comment">//定位文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        <span class="comment">//额外的缓冲操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        <span class="comment">//额外的缓冲操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Write</span>(data);<span class="comment">//写文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        <span class="comment">//额外的缓冲操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Process</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//编译时装配</span></span><br><span class="line">    CryptoFileStream *fs1 = <span class="keyword">new</span> <span class="built_in">CryptoFileStream</span>();</span><br><span class="line"></span><br><span class="line">    BufferedFileStream *fs2 = <span class="keyword">new</span> <span class="built_in">BufferedFileStream</span>();</span><br><span class="line"></span><br><span class="line">    CryptoBufferedFileStream *fs3 =<span class="keyword">new</span> <span class="built_in">CryptoBufferedFileStream</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式05：观察者模式（Observer / Event）</title>
      <link href="/post/4919115d.html"/>
      <url>/post/4919115d.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="Observer-观察者模式"><a href="#Observer-观察者模式" class="headerlink" title="Observer 观察者模式"></a>Observer 观察者模式</h1><h2 id="“组件协作”模式"><a href="#“组件协作”模式" class="headerlink" title="“组件协作”模式"></a>“组件协作”模式</h2><ul><li><p>1）现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。</p></li><li><p>2）典型模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Template Method</span><br><span class="line">Strategy</span><br><span class="line">Observer / Event</span><br></pre></td></tr></table></figure></li></ul><span id="more"></span><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，我们需要为某些对象建立一种“通知依赖关系” ——一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知。如果这样的依赖关系过于紧密，将使软件不能很好地抵御变化。</li><li>2）使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系。从而实现软件体系结构的松耦合。</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>定义对象间的一种一对多（变化）的依赖关系，以便当一个对象(Subject)的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/06/2021062915011927.jpg"><img src="http://image.camcad.cn/2021/06/2021062915011927-1024x383.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）使用面向对象的抽象，Observer模式使得我们可以独立地改变目标与观察者，从而使二者之间的依赖关系达致松耦合。</li><li>2）目标发送通知时，无需指定观察者，通知（可以携带通知信息作为参数）会自动传播。</li><li>3）观察者自己决定是否需要订阅通知，目标对象对此一无所知。</li><li>4）Observer模式是基于事件的UI框架中非常常用的设计模式，也是MVC模式的一个重要组成部分。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">观察者模式</a></li><li class="tab"><a href="#tab-2">进阶模式</a></li><li class="tab"><a href="#tab-3">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><h3 id="main-observer-cpp"><a href="#main-observer-cpp" class="headerlink" title="main_observer.cpp"></a><code>main_observer.cpp</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;src/observer.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;\n--------boss separator----------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 胡汉</span></span><br><span class="line">  <span class="function">std::shared_ptr&lt;Boss&gt; <span class="title">boss</span><span class="params">(<span class="keyword">new</span> Boss())</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 看投票的同事</span></span><br><span class="line">  <span class="function">std::shared_ptr&lt;TVObserver&gt; <span class="title">colleague1</span><span class="params">(<span class="keyword">new</span> TVObserver(<span class="string">&quot;li li&quot;</span>, boss))</span></span>;</span><br><span class="line">  <span class="function">std::shared_ptr&lt;StockObserver&gt; <span class="title">colleague2</span><span class="params">(<span class="keyword">new</span> StockObserver(<span class="string">&quot;hu hu&quot;</span>, boss))</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 增加同事</span></span><br><span class="line">  boss-&gt;<span class="built_in">attach</span>(colleague1);</span><br><span class="line">  boss-&gt;<span class="built_in">attach</span>(colleague2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 老板回来</span></span><br><span class="line">  boss-&gt;<span class="built_in">setState</span>(<span class="string">&quot;I Hu Han is back again.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发出通知</span></span><br><span class="line">  boss-&gt;<span class="built_in">notify</span>();</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;\n--------detach separator----------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除同事</span></span><br><span class="line">  boss-&gt;<span class="built_in">detach</span>(colleague1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发出通知</span></span><br><span class="line">  boss-&gt;<span class="built_in">notify</span>();</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;\n\n--------secretary separator----------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 前台秘书</span></span><br><span class="line">  <span class="function">std::shared_ptr&lt;Secretary&gt; <span class="title">secretary</span><span class="params">(<span class="keyword">new</span> Secretary())</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">std::shared_ptr&lt;StockObserver&gt; <span class="title">colleague3</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="keyword">new</span> StockObserver(<span class="string">&quot;huang min&quot;</span>, secretary))</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">std::shared_ptr&lt;TVObserver&gt; <span class="title">colleague4</span><span class="params">(<span class="keyword">new</span> TVObserver(<span class="string">&quot;emmet&quot;</span>, secretary))</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 增加同事</span></span><br><span class="line">  secretary-&gt;<span class="built_in">attach</span>(colleague3);</span><br><span class="line">  secretary-&gt;<span class="built_in">attach</span>(colleague4);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 领导回来了</span></span><br><span class="line">  secretary-&gt;<span class="built_in">setState</span>(<span class="string">&quot;The leader is back.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发出通知</span></span><br><span class="line">  secretary-&gt;<span class="built_in">notify</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="observer-cpp"><a href="#observer-cpp" class="headerlink" title="observer.cpp"></a><code>observer.cpp</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _OBSERVER_A_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _OBSERVER_A_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 通知者接口</span></span></span><br><span class="line"><span class="string"><span class="meta">class Subject;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 抽象观察者</span></span></span><br><span class="line"><span class="string"><span class="meta">class Observer &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">protected:</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::shared_ptr&lt;Subject&gt; m_subject;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Observer() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_subject = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void update() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~Observer() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 通知者接口</span></span></span><br><span class="line"><span class="string"><span class="meta">class Subject &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::list&lt;std::shared_ptr&lt;Observer&gt;&gt; m_observers;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">protected:</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_state;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Subject() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_state = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_observers.clear();</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 增加</span></span></span><br><span class="line"><span class="string"><span class="meta">  void attach(std::shared_ptr&lt;Observer&gt; observer) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_observers.push_back(std::move(observer));</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 减少</span></span></span><br><span class="line"><span class="string"><span class="meta">  void detach(std::shared_ptr&lt;Observer&gt; observer) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_observers.remove(observer);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 通知</span></span></span><br><span class="line"><span class="string"><span class="meta">  void notify() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (const auto &amp;o : this-&gt;m_observers) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      if (o != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        o-&gt;update();</span></span></span><br><span class="line"><span class="string"><span class="meta">      &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void setState(std::string state) = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string getState() &#123; return this-&gt;m_state; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~Subject() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 老板</span></span></span><br><span class="line"><span class="string"><span class="meta">class Boss : public Subject &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  // 状态</span></span></span><br><span class="line"><span class="string"><span class="meta">  void setState(std::string state) override &#123; this-&gt;m_state = state; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 前台秘书</span></span></span><br><span class="line"><span class="string"><span class="meta">class Secretary : public Subject &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  // 状态</span></span></span><br><span class="line"><span class="string"><span class="meta">  void setState(std::string state) override &#123; this-&gt;m_state = state; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 看股票的同事</span></span></span><br><span class="line"><span class="string"><span class="meta">class StockObserver : public Observer &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  StockObserver(std::string name, std::shared_ptr&lt;Subject&gt; sub) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = name;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_subject.swap(sub);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void update() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_subject-&gt;getState() &lt;&lt; &quot;</span>  \<span class="string">&quot;&quot;</span></span></span><br><span class="line">              &lt;&lt; <span class="keyword">this</span>-&gt;m_name &lt;&lt; <span class="string">&quot;\&quot;  &quot;</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot;Close the stock market and keep working.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 看TV的同事</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TVObserver</span> : <span class="keyword">public</span> Observer &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">TVObserver</span>(std::string name, std::shared_ptr&lt;Subject&gt; sub) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_subject.<span class="built_in">swap</span>(sub);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; FILELINE &lt;&lt; <span class="keyword">this</span>-&gt;m_subject-&gt;<span class="built_in">getState</span>() &lt;&lt; <span class="string">&quot;  \&quot;&quot;</span></span><br><span class="line">              &lt;&lt; <span class="keyword">this</span>-&gt;m_name &lt;&lt; <span class="string">&quot;\&quot;  &quot;</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot;Turn off the TV and continue working.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _OBSERVER_A_H_</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><h4 id="文件一"><a href="#文件一" class="headerlink" title="文件一"></a>文件一</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class MainForm : public Form, public IProgress</span><br><span class="line">&#123;</span><br><span class="line">    TextBox* txtFilePath;</span><br><span class="line">    TextBox* txtFileNumber;</span><br><span class="line"></span><br><span class="line">    ProgressBar* progressBar;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    void Button1_Click()&#123;</span><br><span class="line"></span><br><span class="line">        string filePath = txtFilePath-&gt;getText();</span><br><span class="line">        int number = atoi(txtFileNumber-&gt;getText().c_str());</span><br><span class="line"></span><br><span class="line">        ConsoleNotifier cn;</span><br><span class="line"></span><br><span class="line">        FileSplitter splitter(filePath, number);</span><br><span class="line"></span><br><span class="line">        splitter.addIProgress(this); //订阅通知</span><br><span class="line">        splitter.addIProgress(&amp;cn)； //订阅通知</span><br><span class="line"></span><br><span class="line">        splitter.split();</span><br><span class="line"></span><br><span class="line">        splitter.removeIProgress(this);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual void DoProgress(float value)&#123;</span><br><span class="line">        progressBar-&gt;setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ConsoleNotifier : public IProgress &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void DoProgress(float value)&#123;</span><br><span class="line">        cout &lt;&lt; &quot;.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="文件二"><a href="#文件二" class="headerlink" title="文件二"></a>文件二</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">class IProgress&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void DoProgress(float value)=0;</span><br><span class="line">    virtual ~IProgress()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class FileSplitter</span><br><span class="line">&#123;</span><br><span class="line">    string m_filePath;</span><br><span class="line">    int m_fileNumber;</span><br><span class="line"></span><br><span class="line">    List&lt;IProgress*&gt;  m_iprogressList; // 抽象通知机制，支持多个观察者</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    FileSplitter(const string&amp; filePath, int fileNumber) :</span><br><span class="line">        m_filePath(filePath), </span><br><span class="line">        m_fileNumber(fileNumber)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void split()&#123;</span><br><span class="line"></span><br><span class="line">        //1.读取大文件</span><br><span class="line"></span><br><span class="line">        //2.分批次向小文件中写入</span><br><span class="line">        for (int i = 0; i &lt; m_fileNumber; i++)&#123;</span><br><span class="line">            //...</span><br><span class="line"></span><br><span class="line">            float progressValue = m_fileNumber;</span><br><span class="line">            progressValue = (i + 1) / progressValue;</span><br><span class="line">            onProgress(progressValue);//发送通知</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void addIProgress(IProgress* iprogress)&#123;</span><br><span class="line">        m_iprogressList.push_back(iprogress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void removeIProgress(IProgress* iprogress)&#123;</span><br><span class="line">        m_iprogressList.remove(iprogress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">protected:</span><br><span class="line">    virtual void onProgress(float value)&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;IProgress*&gt;::iterator itor=m_iprogressList.begin();</span><br><span class="line"></span><br><span class="line">        while (itor != m_iprogressList.end() )</span><br><span class="line">            (*itor)-&gt;DoProgress(value); //更新进度条</span><br><span class="line">            itor++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><h4 id="文件一"><a href="#文件一" class="headerlink" title="文件一"></a>文件一</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class MainForm : public Form</span><br><span class="line">&#123;</span><br><span class="line">    TextBox* txtFilePath;</span><br><span class="line">    TextBox* txtFileNumber;</span><br><span class="line">    ProgressBar* progressBar;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    void Button1_Click()&#123;</span><br><span class="line"></span><br><span class="line">        string filePath = txtFilePath-&gt;getText();</span><br><span class="line">        int number = atoi(txtFileNumber-&gt;getText().c_str());</span><br><span class="line"></span><br><span class="line">        FileSplitter splitter(filePath, number, progressBar);</span><br><span class="line"></span><br><span class="line">        splitter.split();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="文件二"><a href="#文件二" class="headerlink" title="文件二"></a>文件二</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class FileSplitter</span><br><span class="line">&#123;</span><br><span class="line">    string m_filePath;</span><br><span class="line">    int m_fileNumber;</span><br><span class="line">    ProgressBar* m_progressBar;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    FileSplitter(const string&amp; filePath, int fileNumber, ProgressBar* progressBar) :</span><br><span class="line">        m_filePath(filePath), </span><br><span class="line">        m_fileNumber(fileNumber),</span><br><span class="line">        m_progressBar(progressBar)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void split()&#123;</span><br><span class="line"></span><br><span class="line">        //1.读取大文件</span><br><span class="line"></span><br><span class="line">        //2.分批次向小文件中写入</span><br><span class="line">        for (int i = 0; i &lt; m_fileNumber; i++)&#123;</span><br><span class="line">            //...</span><br><span class="line">            float progressValue = m_fileNumber;</span><br><span class="line">            progressValue = (i + 1) / progressValue;</span><br><span class="line">            m_progressBar-&gt;setValue(progressValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式04：策略模式（Strategy）</title>
      <link href="/post/fecc2092.html"/>
      <url>/post/fecc2092.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="一、“组件协作”模式"><a href="#一、“组件协作”模式" class="headerlink" title="一、“组件协作”模式"></a>一、“组件协作”模式</h1><h4 id="现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。"><a href="#现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。" class="headerlink" title="现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。"></a>现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。</h4><h4 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h4><ul><li>1）Template Method</li><li>2）Strategy</li><li>3）Observer &#x2F; Event</li></ul><span id="more"></span><h1 id="二、Strategy-策略模式"><a href="#二、Strategy-策略模式" class="headerlink" title="二、Strategy 策略模式"></a>二、Strategy 策略模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，某些对象使用的算法可能多种多样，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂；而且有时候支持不使用的算法也是一个性能负担。</li><li>2）如何在运行时根据需要透明地更改对象的算法？将算法与对象本身解耦，从而避免上述问题？</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><ul><li>1）定义一系列算法，把它们一个个封装起来，并且使它们可互相替换（变化）。该模式使得算法可独立于使用它的客户程序(稳定)而变化（扩展，子类化）。——《设计模式》GoF</li></ul><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/06/202106271301403.jpg"><img src="http://image.camcad.cn/2021/06/202106271301403-1024x308.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Strategy及其子类为组件提供了一系列可重用的算法，从而可以使得类型在运行时方便地根据需要在各个算法之间进行切换。</li><li>2）Strategy模式提供了用条件判断语句以外的另一种选择，消除条件判断语句，就是在解耦合。含有许多条件判断语句的代码通常都需要Strategy模式。</li><li>3）如果Strategy对象没有实例变量，那么各个上下文可以共享同一个Strategy对象，从而节省对象开销。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">策略模式</a></li><li class="tab"><a href="#tab-2">进阶模式</a></li><li class="tab"><a href="#tab-3">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><h3 id="main-strategy-cpp"><a href="#main-strategy-cpp" class="headerlink" title="main_strategy.cpp"></a><code>main_strategy.cpp</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./src/strategy.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> pay = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> type;</span><br><span class="line"></span><br><span class="line">  type = SelectedItemType::Normal;</span><br><span class="line">  <span class="function">CashContext <span class="title">cc</span><span class="params">(type)</span></span>;</span><br><span class="line">  pay = cc.<span class="built_in">getResult</span>(<span class="number">500</span>);</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;type: &quot;</span> &lt;&lt; type &lt;&lt; <span class="string">&quot;  pay: &quot;</span> &lt;&lt; pay &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  type = SelectedItemType::Rebate;</span><br><span class="line">  cc.<span class="built_in">setType</span>(type);</span><br><span class="line">  pay = cc.<span class="built_in">getResult</span>(<span class="number">500</span>);</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;type: &quot;</span> &lt;&lt; type &lt;&lt; <span class="string">&quot;  pay: &quot;</span> &lt;&lt; pay &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  type = SelectedItemType::Return;</span><br><span class="line">  cc.<span class="built_in">setType</span>(type);</span><br><span class="line">  pay = cc.<span class="built_in">getResult</span>(<span class="number">500</span>);</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;type: &quot;</span> &lt;&lt; type &lt;&lt; <span class="string">&quot;  pay: &quot;</span> &lt;&lt; pay &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strategy-cpp"><a href="#strategy-cpp" class="headerlink" title="strategy.cpp"></a><code>strategy.cpp</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _STRATEGY_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _STRATEGY_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CashSuper</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">acceptCash</span><span class="params">(<span class="type">const</span> <span class="type">double</span> money)</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">CashSuper</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CashSuper *tmp = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (tmp != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">SelectedItemType</span> &#123; Normal = <span class="number">0</span>, Rebate, Return &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CashNormal</span> : <span class="keyword">public</span> CashSuper &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">acceptCash</span><span class="params">(<span class="type">const</span> <span class="type">double</span> money)</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> money; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CashRebate</span> : <span class="keyword">public</span> CashSuper &#123;</span><br><span class="line">  <span class="type">double</span> m_moneyRebate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">CashRebate</span>(<span class="type">const</span> <span class="type">double</span> moneyRebate) &#123; <span class="keyword">this</span>-&gt;m_moneyRebate = moneyRebate; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">acceptCash</span><span class="params">(<span class="type">const</span> <span class="type">double</span> money)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (money * <span class="keyword">this</span>-&gt;m_moneyRebate);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CashReturn</span> : <span class="keyword">public</span> CashSuper &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> m_moneyCondition;</span><br><span class="line">  <span class="type">double</span> m_moneyRebate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">CashReturn</span>(<span class="type">const</span> <span class="type">double</span> moneyCondition, <span class="type">const</span> <span class="type">double</span> moneyRebate) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_moneyCondition = moneyCondition;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_moneyRebate = moneyRebate;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">acceptCash</span><span class="params">(<span class="type">const</span> <span class="type">double</span> money)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> result = money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (money &gt;= <span class="keyword">this</span>-&gt;m_moneyCondition) &#123;</span><br><span class="line">      result =</span><br><span class="line">          money - ::<span class="built_in">floor</span>(money / <span class="keyword">this</span>-&gt;m_moneyCondition) * <span class="keyword">this</span>-&gt;m_moneyRebate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CashContext</span> &#123;</span><br><span class="line">  CashSuper *m_CashSuper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">CashContext</span>(<span class="type">int</span> type) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_CashSuper = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setType</span>(type);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setType</span><span class="params">(<span class="type">int</span> type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_CashSuper != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_CashSuper;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m_CashSuper = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> SelectedItemType::Normal: &#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m_CashSuper = <span class="keyword">new</span> <span class="built_in">CashNormal</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> SelectedItemType::Rebate: &#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m_CashSuper = <span class="keyword">new</span> <span class="built_in">CashRebate</span>(<span class="number">0.95</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> SelectedItemType::Return: &#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m_CashSuper = <span class="keyword">new</span> <span class="built_in">CashReturn</span>(<span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span>: &#123;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;This instance is not yet implemented!&quot;</span></span><br><span class="line">                &lt;&lt; <span class="string">&quot; --&gt; \&quot;&quot;</span> &lt;&lt; type &lt;&lt; <span class="string">&quot;\&quot;&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">getResult</span><span class="params">(<span class="type">const</span> <span class="type">double</span> money)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> result = <span class="number">0</span>;</span><br><span class="line">    result = <span class="keyword">this</span>-&gt;m_CashSuper-&gt;<span class="built_in">acceptCash</span>(money);</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_CashSuper-&gt;<span class="built_in">destroy</span>();</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_CashSuper = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//  _STRATEGY_H_</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><h3 id="策略模式-DEMO"><a href="#策略模式-DEMO" class="headerlink" title="策略模式_DEMO"></a>策略模式_DEMO</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TaxStrategy</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Calculate</span><span class="params">(<span class="type">const</span> Context&amp; context)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">TaxStrategy</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CNTax</span> : <span class="keyword">public</span> TaxStrategy&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Calculate</span><span class="params">(<span class="type">const</span> Context&amp; context)</span></span>&#123;</span><br><span class="line">        <span class="comment">//***********</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">USTax</span> : <span class="keyword">public</span> TaxStrategy&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Calculate</span><span class="params">(<span class="type">const</span> Context&amp; context)</span></span>&#123;</span><br><span class="line">        <span class="comment">//***********</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DETax</span> : <span class="keyword">public</span> TaxStrategy&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Calculate</span><span class="params">(<span class="type">const</span> Context&amp; context)</span></span>&#123;</span><br><span class="line">        <span class="comment">//***********</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展</span></span><br><span class="line"><span class="comment">//*********************************</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FRTax</span> : <span class="keyword">public</span> TaxStrategy&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Calculate</span><span class="params">(<span class="type">const</span> Context&amp; context)</span></span>&#123;</span><br><span class="line">        <span class="comment">//.........</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SalesOrder</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TaxStrategy* strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SalesOrder</span>(StrategyFactory* strategyFactory)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;strategy = strategyFactory-&gt;<span class="built_in">NewStrategy</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">SalesOrder</span>()&#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">double</span> <span class="title">CalculateTax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="function">Context <span class="title">context</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> val = </span><br><span class="line">            strategy-&gt;<span class="built_in">Calculate</span>(context); <span class="comment">//多态调用</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><h3 id="普通模式-DEMO"><a href="#普通模式-DEMO" class="headerlink" title="普通模式_DEMO"></a>普通模式_DEMO</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">TaxBase</span> &#123;</span><br><span class="line">    CN_Tax,</span><br><span class="line">    US_Tax,</span><br><span class="line">    DE_Tax,</span><br><span class="line">    FR_Tax       <span class="comment">//更改</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SalesOrder</span>&#123;</span><br><span class="line">    TaxBase tax;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">CalculateTax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tax == CN_Tax)&#123;</span><br><span class="line">            <span class="comment">//CN***********</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tax == US_Tax)&#123;</span><br><span class="line">            <span class="comment">//US***********</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tax == DE_Tax)&#123;</span><br><span class="line">            <span class="comment">//DE***********</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tax == FR_Tax)&#123;  <span class="comment">//更改</span></span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式03：模板方法（Template Method）</title>
      <link href="/post/1850cb09.html"/>
      <url>/post/1850cb09.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="GOF-23模式分类"><a href="#GOF-23模式分类" class="headerlink" title="GOF-23模式分类"></a>GOF-23模式分类</h1><h3 id="从目的来看"><a href="#从目的来看" class="headerlink" title="从目的来看"></a>从目的来看</h3><ul><li>1）创建型（Creational）模式：将对象的部分创建工作延迟到子类或者其他对象，从而应对需求变化为对象创建时具体类型实现引来的冲击。</li><li>2）结构型（Structural）模式：通过类继承或者对象组合获得更灵活的结构，从而应对需求变化为对象的结构带来的冲击。</li><li>3）行为型（Behavioral）模式：通过类继承或者对象组合来划分类与对象间的职责，从而应对需求变化为多个交互的对象带来的冲击。<span id="more"></span></li></ul><h3 id="从范围来看"><a href="#从范围来看" class="headerlink" title="从范围来看"></a>从范围来看</h3><ul><li>1）类模式处理类与子类的静态关系。</li><li>2）对象模式处理对象间的动态关系。</li></ul><h2 id="从封装变化角度对模式分类"><a href="#从封装变化角度对模式分类" class="headerlink" title="从封装变化角度对模式分类"></a>从封装变化角度对模式分类</h2><h3 id="组件协作"><a href="#组件协作" class="headerlink" title="组件协作"></a>组件协作</h3><ul><li>1）Template Method</li><li>2）Observer &#x2F; Event</li><li>3）Strategy</li></ul><h3 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h3><ul><li>1）Decorator</li><li>2）Bridge</li></ul><h3 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h3><ul><li>1）Factory Method</li><li>2）Abstract Factory</li><li>3）Prototype</li><li>4）Builder</li></ul><h3 id="对象性能"><a href="#对象性能" class="headerlink" title="对象性能"></a>对象性能</h3><ul><li>1）Singleton</li><li>2）Flyweight</li></ul><h3 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h3><ul><li>1）Façade</li><li>2）Proxy</li><li>3）Mediator</li><li>4）Adapter</li></ul><h3 id="状态变化"><a href="#状态变化" class="headerlink" title="状态变化"></a>状态变化</h3><ul><li>1）Memento</li><li>2）State</li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li>1）Composite</li><li>2）Iterator</li><li>3）Chain of Resposibility</li></ul><h3 id="行为变化"><a href="#行为变化" class="headerlink" title="行为变化"></a>行为变化</h3><ul><li>1）Command</li><li>2）Visitor</li></ul><h3 id="领域问题"><a href="#领域问题" class="headerlink" title="领域问题"></a>领域问题</h3><ul><li>1）Interpreter</li></ul><h2 id="重构获得模式-Refactoring-to-Patterns"><a href="#重构获得模式-Refactoring-to-Patterns" class="headerlink" title="重构获得模式 Refactoring to Patterns"></a>重构获得模式 Refactoring to Patterns</h2><h3 id="1）面向对象设计模式是“好的面向对象设计”，所谓“好的面向对象设计”指是那些可以满足-“应对变化，提高复用”的设计-。"><a href="#1）面向对象设计模式是“好的面向对象设计”，所谓“好的面向对象设计”指是那些可以满足-“应对变化，提高复用”的设计-。" class="headerlink" title="1）面向对象设计模式是“好的面向对象设计”，所谓“好的面向对象设计”指是那些可以满足 “应对变化，提高复用”的设计 。"></a>1）面向对象设计模式是“好的面向对象设计”，所谓“好的面向对象设计”指是那些可以满足 “应对变化，提高复用”的设计 。</h3><h3 id="2）现代软件设计的特征是“需求的频繁变化”。设计模式的要点是-“寻找变化点，然后在变化点处应用设计模式，从而来更好地应对需求的变化”-“什么时候、什么地点应用设计模式”比“理解设计模式结构本身”更为重要。"><a href="#2）现代软件设计的特征是“需求的频繁变化”。设计模式的要点是-“寻找变化点，然后在变化点处应用设计模式，从而来更好地应对需求的变化”-“什么时候、什么地点应用设计模式”比“理解设计模式结构本身”更为重要。" class="headerlink" title="2）现代软件设计的特征是“需求的频繁变化”。设计模式的要点是 “寻找变化点，然后在变化点处应用设计模式，从而来更好地应对需求的变化”.“什么时候、什么地点应用设计模式”比“理解设计模式结构本身”更为重要。"></a>2）现代软件设计的特征是“需求的频繁变化”。设计模式的要点是 “寻找变化点，然后在变化点处应用设计模式，从而来更好地应对需求的变化”.“什么时候、什么地点应用设计模式”比“理解设计模式结构本身”更为重要。</h3><h3 id="3）设计模式的应用不宜先入为主，一上来就使用设计模式是对设计模式的最大误用。没有一步到位的设计模式。敏捷软件开发实践提倡的“Refactoring-to-Patterns”是目前普遍公认的最好的使用设计模式的方法。"><a href="#3）设计模式的应用不宜先入为主，一上来就使用设计模式是对设计模式的最大误用。没有一步到位的设计模式。敏捷软件开发实践提倡的“Refactoring-to-Patterns”是目前普遍公认的最好的使用设计模式的方法。" class="headerlink" title="3）设计模式的应用不宜先入为主，一上来就使用设计模式是对设计模式的最大误用。没有一步到位的设计模式。敏捷软件开发实践提倡的“Refactoring to Patterns”是目前普遍公认的最好的使用设计模式的方法。"></a>3）设计模式的应用不宜先入为主，一上来就使用设计模式是对设计模式的最大误用。没有一步到位的设计模式。敏捷软件开发实践提倡的“Refactoring to Patterns”是目前普遍公认的最好的使用设计模式的方法。</h3><h2 id="重构关键技法"><a href="#重构关键技法" class="headerlink" title="重构关键技法"></a>重构关键技法</h2><ul><li>1）静态–&gt;动态</li><li>2）早绑定–&gt;晚绑定</li><li>3）继承–&gt;组合</li><li>4）编译时依赖–&gt;运行时依赖</li><li>5）紧耦合–&gt;松耦合</li></ul><h2 id="“组件协作”模式"><a href="#“组件协作”模式" class="headerlink" title="“组件协作”模式"></a>“组件协作”模式</h2><h3 id="现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。"><a href="#现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。" class="headerlink" title="现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。"></a>现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。</h3><h3 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h3><ul><li>1）Template Method</li><li>2）Observer &#x2F; Event</li><li>3）Strategy</li></ul><h1 id="Template-Method-模式"><a href="#Template-Method-模式" class="headerlink" title="Template Method 模式"></a>Template Method 模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因（比如框架与应用之间的关系）而无法和任务的整体结构同时实现。</li><li>2）如何在确定稳定操作结构的前提下，来灵活应对各个子步骤的变化或者晚期实现需求？</li></ul><h2 id="结构化软件设计流程"><a href="#结构化软件设计流程" class="headerlink" title="结构化软件设计流程"></a>结构化软件设计流程</h2><p><a href="http://image.camcad.cn/2021/06/202106241408419.jpg"><img src="http://image.camcad.cn/2021/06/202106241408419-1024x530.jpg"></a></p><h2 id="面向对象软件设计流程"><a href="#面向对象软件设计流程" class="headerlink" title="面向对象软件设计流程"></a>面向对象软件设计流程</h2><p><a href="http://image.camcad.cn/2021/06/2021062414093955.jpg"><img src="http://image.camcad.cn/2021/06/2021062414093955-1024x528.jpg"></a></p><h2 id="早绑定与晚绑定"><a href="#早绑定与晚绑定" class="headerlink" title="早绑定与晚绑定"></a>早绑定与晚绑定</h2><p><a href="http://image.camcad.cn/2021/06/2021062414144750.jpg"><img src="http://image.camcad.cn/2021/06/2021062414144750-1024x480.jpg"></a></p><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>定义一个操作中的算法的骨架 (稳定)，而将一些步骤延迟(变化)到子类中。Template Method使得子类可以不改变(复用)一个算法的结构即可重定义(override 重写)该算法的某些特定步骤。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/06/2021062414164999.jpg"><img src="http://image.camcad.cn/2021/06/2021062414164999.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Template Method模式是一种非常基础性的设计模式，在面向对象系统中有着大量的应用。它用最简洁的机制（虚函数的多态性）为很多应用程序框架提供了灵活的扩展点，是代码复用方面的基本实现结构。</li><li>2）除了可以灵活应对子步骤的变化外，“不要调用我，让我来调用你”的反向控制结构是Template Method的典型应用。</li><li>3）在具体实现方面，被Template Method调用的虚方法可以具有实现，也可以没有任何实现（抽象方法、纯虚方法），但一般推荐将它们设置为protected方法。</li></ul><h2 id="结构化软件设计流程—lib-cpp"><a href="#结构化软件设计流程—lib-cpp" class="headerlink" title="结构化软件设计流程—lib.cpp"></a>结构化软件设计流程—lib.cpp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//程序库开发人员</span><br><span class="line">class Library&#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    void Step1()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Step3()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Step5()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="结构化软件设计流程—app-cpp"><a href="#结构化软件设计流程—app-cpp" class="headerlink" title="结构化软件设计流程—app.cpp"></a>结构化软件设计流程—app.cpp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//应用程序开发人员</span><br><span class="line">class Application&#123;</span><br><span class="line">public:</span><br><span class="line">    bool Step2()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Step4()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Library lib();</span><br><span class="line">    Application app();</span><br><span class="line"></span><br><span class="line">    lib.Step1();</span><br><span class="line"></span><br><span class="line">    if (app.Step2())&#123;</span><br><span class="line">        lib.Step3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; 4; i++)&#123;</span><br><span class="line">        app.Step4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lib.Step5();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象软件设计流程—lib-cpp"><a href="#面向对象软件设计流程—lib-cpp" class="headerlink" title="面向对象软件设计流程—lib.cpp"></a>面向对象软件设计流程—lib.cpp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//程序库开发人员</span><br><span class="line">class Library&#123;</span><br><span class="line">public:</span><br><span class="line">    //稳定 template method</span><br><span class="line">    void Run()&#123;</span><br><span class="line"></span><br><span class="line">        Step1();</span><br><span class="line"></span><br><span class="line">        if (Step2()) &#123; //支持变化 ==&gt; 虚函数的多态调用</span><br><span class="line">            Step3(); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; 4; i++)&#123;</span><br><span class="line">            Step4(); //支持变化 ==&gt; 虚函数的多态调用</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Step5();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    virtual ~Library()&#123; &#125;</span><br><span class="line"></span><br><span class="line">protected:</span><br><span class="line"></span><br><span class="line">    void Step1() &#123; //稳定</span><br><span class="line">        //.....</span><br><span class="line">    &#125;</span><br><span class="line">    void Step3() &#123;//稳定</span><br><span class="line">        //.....</span><br><span class="line">    &#125;</span><br><span class="line">    void Step5() &#123; //稳定</span><br><span class="line">        //.....</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual bool Step2() = 0;//变化</span><br><span class="line">    virtual void Step4() =0; //变化</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="面向对象软件设计流程—app-cpp"><a href="#面向对象软件设计流程—app-cpp" class="headerlink" title="面向对象软件设计流程—app.cpp"></a>面向对象软件设计流程—app.cpp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//应用程序开发人员</span><br><span class="line">class Application : public Library &#123;</span><br><span class="line">protected:</span><br><span class="line">    virtual bool Step2()&#123;</span><br><span class="line">        //... 子类重写实现</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual void Step4() &#123;</span><br><span class="line">        //... 子类重写实现</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">    &#123;</span><br><span class="line">        Library* pLib=new Application();</span><br><span class="line">        lib-&gt;Run();</span><br><span class="line"></span><br><span class="line">        delete pLib;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式02：面向对象设计原则</title>
      <link href="/post/a61819da.html"/>
      <url>/post/a61819da.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="为什么要面向对象设计-有什么好处"><a href="#为什么要面向对象设计-有什么好处" class="headerlink" title="为什么要面向对象设计,有什么好处?"></a>为什么要面向对象设计,有什么好处?</h2><ul><li>1）为什么？——变化是复用的天敌！</li><li>2）面向对象设计最大的优势在于<code>抵御变化</code>。<span id="more"></span></li></ul><h2 id="重新认识面向对象"><a href="#重新认识面向对象" class="headerlink" title="重新认识面向对象"></a>重新认识面向对象</h2><h3 id="理解隔离变化"><a href="#理解隔离变化" class="headerlink" title="理解隔离变化"></a>理解隔离变化</h3><ul><li>1）从宏观层面来看，面向对象的构建方式更能适应软件的变化，能将变化所带来的影响减为最小。</li></ul><h3 id="各司其职"><a href="#各司其职" class="headerlink" title="各司其职"></a>各司其职</h3><ul><li>1）从微观层面来看，面向对象的方式更强调各个类的“责任”。</li><li>2）由于需求变化导致的新增类型不应该影响原来类型的实现——是所谓各负其责。</li></ul><h3 id="对象是什么？"><a href="#对象是什么？" class="headerlink" title="对象是什么？"></a>对象是什么？</h3><ul><li>1）从语言实现层面来看，对象封装了代码和数据。</li><li>2）从规格层面讲，对象是一系列可被使用的公共接口。</li><li>3）从概念层面讲，对象是某种拥有责任的抽象。</li></ul><h2 id="面向对象设计八大原则"><a href="#面向对象设计八大原则" class="headerlink" title="面向对象设计八大原则"></a>面向对象设计八大原则</h2><h3 id="依赖倒置原则（DIP）"><a href="#依赖倒置原则（DIP）" class="headerlink" title="依赖倒置原则（DIP）"></a>依赖倒置原则（DIP）</h3><ul><li>1）高层模块(稳定)不应该依赖于低层模块(变化)，二者都应该依赖于抽象(稳定) 。</li><li>2）抽象(稳定)不应该依赖于实现细节(变化) ，实现细节应该依赖于抽象(稳定)。</li></ul><h3 id="开放封闭原则（ocp）"><a href="#开放封闭原则（ocp）" class="headerlink" title="开放封闭原则（ocp）"></a>开放封闭原则（ocp）</h3><ul><li>1）对扩展开放，对更改封闭。</li><li>2）类模块应该是可扩展的，但是不可修改。</li></ul><h3 id="单一职责原则（SRP）"><a href="#单一职责原则（SRP）" class="headerlink" title="单一职责原则（SRP）"></a>单一职责原则（SRP）</h3><ul><li>1）一个类应该仅有一个引起它变化的原因。</li><li>2）变化的方向隐含着类的责任。</li></ul><h3 id="Liskov替换原则（LSP）"><a href="#Liskov替换原则（LSP）" class="headerlink" title="Liskov替换原则（LSP）"></a>Liskov替换原则（LSP）</h3><ul><li>1）子类必须能够替换它们的基类(IS-A)。</li><li>2）继承表达类型抽象。</li></ul><h3 id="接口隔离原则（ISP）"><a href="#接口隔离原则（ISP）" class="headerlink" title="接口隔离原则（ISP）"></a>接口隔离原则（ISP）</h3><ul><li>1）不应该强迫客户程序依赖它们不用的方法。</li><li>2）接口应该小而完备。</li></ul><h3 id="优先使用对象组合，而不是类继承"><a href="#优先使用对象组合，而不是类继承" class="headerlink" title="优先使用对象组合，而不是类继承"></a>优先使用对象组合，而不是类继承</h3><ul><li>1）类继承通常为“白箱复用”，对象组合通常为“黑箱复用”。</li><li>2）继承在某种程度上破坏了封装性，子类父类耦合度高。</li><li>3）而对象组合则只要求被组合的对象具有良好定义的接口，耦合度低。</li></ul><h3 id="封装变化点"><a href="#封装变化点" class="headerlink" title="封装变化点"></a>封装变化点</h3><ul><li>1）使用封装来创建对象之间的分界层，让设计者可以在分界层的一侧进行修改，而不会对另一侧产生不良的影响，从而实现层次间的松耦合。</li></ul><h3 id="针对接口编程，而不是针对实现编程而编程"><a href="#针对接口编程，而不是针对实现编程而编程" class="headerlink" title="针对接口编程，而不是针对实现编程而编程"></a>针对接口编程，而不是针对实现编程而编程</h3><ul><li>1）不将变量类型声明为某个特定的具体类，而是声明为某个接口。</li><li>2）客户程序无需获知对象的具体类型，只需要知道对象所具有的接口。</li><li>3）减少系统中各部分的依赖关系，从而实现“高内聚、松耦合” 的类型设计方案。</li></ul><h2 id="面向接口设计"><a href="#面向接口设计" class="headerlink" title="面向接口设计"></a>面向接口设计</h2><p><code>接口标准化</code>-–所有强盛的产业，必定有其相关的标准化约定。</p><h3 id="以史为鉴（一）"><a href="#以史为鉴（一）" class="headerlink" title="以史为鉴（一）"></a>以史为鉴（一）</h3><p>秦为什么能够统一六国？——据史书记载和考古发现,秦的兵器不论东西南北,出土地点都有统一的标准,包括剑,戈,弩, 甚至弩机,弩体,箭头都是一样的. 而其他六国则不是。</p><h3 id="以史为鉴（二）"><a href="#以史为鉴（二）" class="headerlink" title="以史为鉴（二）"></a>以史为鉴（二）</h3><p>毕升的活字印刷为什么成为四大发明，推动了人类文明的前进？——毕升之前的雕版印刷将字刻死在木板或石板上，每次印刷不同文章，要刻不同的版。而毕升发明的活字印刷首先在板上刻好字格,然后再刻单独的字模。印刷时，将活的字模“按需索取”放在字格中，不同的排列方法产生不同的文章，而不必重新刻版。</p><h2 id="将设计原则提升为设计经验"><a href="#将设计原则提升为设计经验" class="headerlink" title="将设计原则提升为设计经验"></a>将设计原则提升为设计经验</h2><ul><li>1）设计习语 Design Idioms——Design Idioms 描述与特定编程语言相关的低层模式，技巧，惯用法。</li><li>2）设计模式 Design Patterns——Design Patterns主要描述的是“类与相互通信的对象之间的组织关系，包括它们的角色、职责、协作方式等方面。</li><li>3）架构模式 Architectural Patterns——Architectural Patterns描述系统中与基本结构组织关系密切的高层模式，包括子系统划分，职责，以及如何组织它们之间关系的规则。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++设计模式01：设计模式简介</title>
      <link href="/post/bc751e30.html"/>
      <url>/post/bc751e30.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h2><p>“每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动”。——Christopher Alexander</p><span id="more"></span><h2 id="GOF设计模式"><a href="#GOF设计模式" class="headerlink" title="GOF设计模式"></a>GOF设计模式</h2><ul><li>历史性著作《设计模式：可复用面向对象软件的基础》一书中描述了23种经典面向对象设计模式，创立了模式在软件设计中的地位。</li><li>由于《设计模式》一书确定了设计模式的地位，通常所说的设计模式隐含地表示“面向对象设计模式”。但这并不意味“设计模式” 就等于“面向对象设计模式”。</li></ul><h2 id="从面向对象谈起"><a href="#从面向对象谈起" class="headerlink" title="从面向对象谈起"></a>从面向对象谈起</h2><p><a href="http://image.camcad.cn/2021/06/2021062213542579.jpg"><img src="http://image.camcad.cn/2021/06/2021062213542579-1024x271.jpg"></a></p><h3 id="1、底层思维：向下，如何把握机器底层从微观理解对象构造。"><a href="#1、底层思维：向下，如何把握机器底层从微观理解对象构造。" class="headerlink" title="1、底层思维：向下，如何把握机器底层从微观理解对象构造。"></a>1、底层思维：向下，如何把握机器底层从微观理解对象构造。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语言构造</span><br><span class="line">编译转换</span><br><span class="line">内存模型</span><br><span class="line">运行时机制</span><br></pre></td></tr></table></figure><h3 id="2、抽象思维：向上，如何将我们的周围世界抽象为程序代码。"><a href="#2、抽象思维：向上，如何将我们的周围世界抽象为程序代码。" class="headerlink" title="2、抽象思维：向上，如何将我们的周围世界抽象为程序代码。"></a>2、抽象思维：向上，如何将我们的周围世界抽象为程序代码。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">面向对象</span><br><span class="line">组件封装</span><br><span class="line">设计模式</span><br><span class="line">架构模式</span><br></pre></td></tr></table></figure><h2 id="深入理解面向对象"><a href="#深入理解面向对象" class="headerlink" title="深入理解面向对象"></a>深入理解面向对象</h2><h3 id="1、向下—深入理解三大面向对象机制"><a href="#1、向下—深入理解三大面向对象机制" class="headerlink" title="1、向下—深入理解三大面向对象机制"></a>1、向下—深入理解三大面向对象机制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">封装---隐藏内部实现</span><br><span class="line">继承---复用现有代码</span><br><span class="line">多态---改写对象行为</span><br></pre></td></tr></table></figure><h3 id="2、向上—深刻把握面向对象机制所带来的抽象意义，理解如何使用这些机制来表达现实世界，掌握什么是“好的面向对象设计”。"><a href="#2、向上—深刻把握面向对象机制所带来的抽象意义，理解如何使用这些机制来表达现实世界，掌握什么是“好的面向对象设计”。" class="headerlink" title="2、向上—深刻把握面向对象机制所带来的抽象意义，理解如何使用这些机制来表达现实世界，掌握什么是“好的面向对象设计”。"></a>2、向上—深刻把握面向对象机制所带来的抽象意义，理解如何使用这些机制来表达现实世界，掌握什么是“好的面向对象设计”。</h3><h2 id="软件设计固有的复杂性"><a href="#软件设计固有的复杂性" class="headerlink" title="软件设计固有的复杂性"></a>软件设计固有的复杂性</h2><p>建筑商从来不会去想给一栋已建好的100层高的楼房底下再新修一个小地下室——这样做花费极大而且注定要失败。然而令人惊奇的是，软件系统的用户在要求作出类似改变时却不会仔细考虑，而且他们认为这只是需要简单编程的事。 ——Object-Oriented Analysis and Design with Applications</p><h2 id="变化—软件设计复杂的根本原因"><a href="#变化—软件设计复杂的根本原因" class="headerlink" title="变化—软件设计复杂的根本原因"></a>变化—软件设计复杂的根本原因</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">客户需求的变化</span><br><span class="line">技术平台的变化</span><br><span class="line">开发团队的变化</span><br><span class="line">市场环境的变化</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="如何解决复杂性？"><a href="#如何解决复杂性？" class="headerlink" title="如何解决复杂性？"></a>如何解决复杂性？</h2><h3 id="分解—人们面对复杂性有一个常见的做法：即分而治之，将大问题分解为多个小问题，将复杂问题分解为多个简单问题。"><a href="#分解—人们面对复杂性有一个常见的做法：即分而治之，将大问题分解为多个小问题，将复杂问题分解为多个简单问题。" class="headerlink" title="分解—人们面对复杂性有一个常见的做法：即分而治之，将大问题分解为多个小问题，将复杂问题分解为多个简单问题。"></a>分解—人们面对复杂性有一个常见的做法：即分而治之，将大问题分解为多个小问题，将复杂问题分解为多个简单问题。</h3><h3 id="抽象—更高层次来讲，人们处理复杂性有一个通用的技术，即抽象。由于不能掌握全部的复杂对象，我们选择忽视它的非本质细节，而去处理泛化和理想化了的对象模型。"><a href="#抽象—更高层次来讲，人们处理复杂性有一个通用的技术，即抽象。由于不能掌握全部的复杂对象，我们选择忽视它的非本质细节，而去处理泛化和理想化了的对象模型。" class="headerlink" title="抽象—更高层次来讲，人们处理复杂性有一个通用的技术，即抽象。由于不能掌握全部的复杂对象，我们选择忽视它的非本质细节，而去处理泛化和理想化了的对象模型。"></a>抽象—更高层次来讲，人们处理复杂性有一个通用的技术，即抽象。由于不能掌握全部的复杂对象，我们选择忽视它的非本质细节，而去处理泛化和理想化了的对象模型。</h3><hr><h3 id="分解DEMO—头文件"><a href="#分解DEMO—头文件" class="headerlink" title="分解DEMO—头文件"></a>分解DEMO—头文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class Point&#123;</span><br><span class="line">public:</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Line&#123;</span><br><span class="line">public:</span><br><span class="line">    Point start;</span><br><span class="line">    Point end;</span><br><span class="line"></span><br><span class="line">    Line(const Point&amp; start, const Point&amp; end)&#123;</span><br><span class="line">        this-&gt;start = start;</span><br><span class="line">        this-&gt;end = end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Rect&#123;</span><br><span class="line">public:</span><br><span class="line">    Point leftUp;</span><br><span class="line">    int width;</span><br><span class="line">    int height;</span><br><span class="line"></span><br><span class="line">    Rect(const Point&amp; leftUp, int width, int height)&#123;</span><br><span class="line">        this-&gt;leftUp = leftUp;</span><br><span class="line">        this-&gt;width = width;</span><br><span class="line">        this-&gt;height = height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//增加</span><br><span class="line">class Circle&#123;</span><br><span class="line">// ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="分解DEMO—源文件"><a href="#分解DEMO—源文件" class="headerlink" title="分解DEMO—源文件"></a>分解DEMO—源文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">class MainForm : public Form &#123;</span><br><span class="line">private:</span><br><span class="line">    Point p1;</span><br><span class="line">    Point p2;</span><br><span class="line"></span><br><span class="line">    vector&lt;Line&gt; lineVector;</span><br><span class="line">    vector&lt;Rect&gt; rectVector;</span><br><span class="line">    //改变</span><br><span class="line">    vector&lt;Circle&gt; circleVector;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    MainForm()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">protected:</span><br><span class="line"></span><br><span class="line">    virtual void OnMouseDown(const MouseEventArgs&amp; e);</span><br><span class="line">    virtual void OnMouseUp(const MouseEventArgs&amp; e);</span><br><span class="line">    virtual void OnPaint(const PaintEventArgs&amp; e);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void MainForm::OnMouseDown(const MouseEventArgs&amp; e)&#123;</span><br><span class="line">    p1.x = e.X;</span><br><span class="line">    p1.y = e.Y;</span><br><span class="line"></span><br><span class="line">    //...</span><br><span class="line">    Form::OnMouseDown(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainForm::OnMouseUp(const MouseEventArgs&amp; e)&#123;</span><br><span class="line">    p2.x = e.X;</span><br><span class="line">    p2.y = e.Y;</span><br><span class="line"></span><br><span class="line">    if (rdoLine.Checked)&#123;</span><br><span class="line">        Line line(p1, p2);</span><br><span class="line">        lineVector.push_back(line);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (rdoRect.Checked)&#123;</span><br><span class="line">        int width = abs(p2.x - p1.x);</span><br><span class="line">        int height = abs(p2.y - p1.y);</span><br><span class="line">        Rect rect(p1, width, height);</span><br><span class="line">        rectVector.push_back(rect);</span><br><span class="line">    &#125;</span><br><span class="line">    //改变</span><br><span class="line">    else if (...)&#123;</span><br><span class="line">        //...</span><br><span class="line">        circleVector.push_back(circle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //...</span><br><span class="line">    this-&gt;Refresh();</span><br><span class="line"></span><br><span class="line">    Form::OnMouseUp(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainForm::OnPaint(const PaintEventArgs&amp; e)&#123;</span><br><span class="line"></span><br><span class="line">    //针对直线</span><br><span class="line">    for (int i = 0; i &lt; lineVector.size(); i++)&#123;</span><br><span class="line">        e.Graphics.DrawLine(Pens.Red,</span><br><span class="line">            lineVector[i].start.x, </span><br><span class="line">            lineVector[i].start.y,</span><br><span class="line">            lineVector[i].end.x,</span><br><span class="line">            lineVector[i].end.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //针对矩形</span><br><span class="line">    for (int i = 0; i &lt; rectVector.size(); i++)&#123;</span><br><span class="line">        e.Graphics.DrawRectangle(Pens.Red,</span><br><span class="line">            rectVector[i].leftUp,</span><br><span class="line">            rectVector[i].width,</span><br><span class="line">            rectVector[i].height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //改变</span><br><span class="line">    //针对圆形</span><br><span class="line">    for (int i = 0; i &lt; circleVector.size(); i++)&#123;</span><br><span class="line">        e.Graphics.DrawCircle(Pens.Red,</span><br><span class="line">            circleVector[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //...</span><br><span class="line">    Form::OnPaint(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="抽象DEMO—头文件"><a href="#抽象DEMO—头文件" class="headerlink" title="抽象DEMO—头文件"></a>抽象DEMO—头文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">class Shape&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void Draw(const Graphics&amp; g)=0;</span><br><span class="line">    virtual ~Shape() &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Point&#123;</span><br><span class="line">public:</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Line: public Shape&#123;</span><br><span class="line">public:</span><br><span class="line">    Point start;</span><br><span class="line">    Point end;</span><br><span class="line"></span><br><span class="line">    Line(const Point&amp; start, const Point&amp; end)&#123;</span><br><span class="line">        this-&gt;start = start;</span><br><span class="line">        this-&gt;end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //实现自己的Draw，负责画自己</span><br><span class="line">    virtual void Draw(const Graphics&amp; g)&#123;</span><br><span class="line">        g.DrawLine(Pens.Red, </span><br><span class="line">            start.x, start.y,end.x, end.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Rect: public Shape&#123;</span><br><span class="line">public:</span><br><span class="line">    Point leftUp;</span><br><span class="line">    int width;</span><br><span class="line">    int height;</span><br><span class="line"></span><br><span class="line">    Rect(const Point&amp; leftUp, int width, int height)&#123;</span><br><span class="line">        this-&gt;leftUp = leftUp;</span><br><span class="line">        this-&gt;width = width;</span><br><span class="line">        this-&gt;height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //实现自己的Draw，负责画自己</span><br><span class="line">    virtual void Draw(const Graphics&amp; g)&#123;</span><br><span class="line">        g.DrawRectangle(Pens.Red,</span><br><span class="line">            leftUp,width,height);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//增加</span><br><span class="line">class Circle : public Shape&#123;</span><br><span class="line">public:</span><br><span class="line">    //实现自己的Draw，负责画自己</span><br><span class="line">    virtual void Draw(const Graphics&amp; g)&#123;</span><br><span class="line">        g.DrawCircle(Pens.Red,</span><br><span class="line">            ...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="抽象DEMO—源文件"><a href="#抽象DEMO—源文件" class="headerlink" title="抽象DEMO—源文件"></a>抽象DEMO—源文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">class MainForm : public Form &#123;</span><br><span class="line">private:</span><br><span class="line">    Point p1;</span><br><span class="line">    Point p2;</span><br><span class="line"></span><br><span class="line">    //针对所有形状</span><br><span class="line">    vector&lt;Shape*&gt; shapeVector;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    MainForm()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">protected:</span><br><span class="line"></span><br><span class="line">    virtual void OnMouseDown(const MouseEventArgs&amp; e);</span><br><span class="line">    virtual void OnMouseUp(const MouseEventArgs&amp; e);</span><br><span class="line">    virtual void OnPaint(const PaintEventArgs&amp; e);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void MainForm::OnMouseDown(const MouseEventArgs&amp; e)&#123;</span><br><span class="line">    p1.x = e.X;</span><br><span class="line">    p1.y = e.Y;</span><br><span class="line"></span><br><span class="line">    //...</span><br><span class="line">    Form::OnMouseDown(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainForm::OnMouseUp(const MouseEventArgs&amp; e)&#123;</span><br><span class="line">    p2.x = e.X;</span><br><span class="line">    p2.y = e.Y;</span><br><span class="line"></span><br><span class="line">    if (rdoLine.Checked)&#123;</span><br><span class="line">        shapeVector.push_back(new Line(p1,p2));</span><br><span class="line">    &#125;</span><br><span class="line">    else if (rdoRect.Checked)&#123;</span><br><span class="line">        int width = abs(p2.x - p1.x);</span><br><span class="line">        int height = abs(p2.y - p1.y);</span><br><span class="line">        shapeVector.push_back(new Rect(p1, width, height));</span><br><span class="line">    &#125;</span><br><span class="line">    //改变</span><br><span class="line">    else if (...)&#123;</span><br><span class="line">        //...</span><br><span class="line">        shapeVector.push_back(circle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //...</span><br><span class="line">    this-&gt;Refresh();</span><br><span class="line"></span><br><span class="line">    Form::OnMouseUp(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainForm::OnPaint(const PaintEventArgs&amp; e)&#123;</span><br><span class="line"></span><br><span class="line">    //针对所有形状</span><br><span class="line">    for (int i = 0; i &lt; shapeVector.size(); i++)&#123;</span><br><span class="line"></span><br><span class="line">        shapeVector[i]-&gt;Draw(e.Graphics); //多态调用，各负其责</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //...</span><br><span class="line">    Form::OnPaint(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结：什么是好的软件设计？-–复用"><a href="#总结：什么是好的软件设计？-–复用" class="headerlink" title="总结：什么是好的软件设计？-–复用"></a>总结：<code>什么是好的软件设计？</code>-–复用</h2>]]></content>
      
      
      <categories>
          
          <category> C++设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++设计模式 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程</title>
      <link href="/post/13756432.html"/>
      <url>/post/13756432.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-提高编程"><a href="#C-提高编程" class="headerlink" title="C++提高编程"></a>C++提高编程</h1><p>本阶段主要针对 C++<code>泛型编程</code>和<code>STL</code>技术做详细讲解，探讨 C++更深层的使用。</p><h4 id="第一章：模板"><a href="#第一章：模板" class="headerlink" title="第一章：模板"></a>第一章：模板</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">001</td><td align="left"><a href="https://notes.camcad.cn/post/e472be6d.html">C++提高编程01：模板（模板的概念）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=167">04:56</a></td></tr><tr><td align="center">002</td><td align="left"><a href="https://notes.camcad.cn/post/30168b8d.html">C++提高编程02：模板（函数模板-函数模板的语法）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=168">16:41</a></td></tr><tr><td align="center">003</td><td align="left"><a href="https://notes.camcad.cn/post/760e6263.html">C++提高编程03：模板（函数模板-函数模板注意事项）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=169">09:45</a></td></tr><tr><td align="center">004</td><td align="left"><a href="https://notes.camcad.cn/post/78da7e04.html">C++提高编程04：模板（函数模板-函数模板案例）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=170">12:13</a></td></tr><tr><td align="center">005</td><td align="left"><a href="https://notes.camcad.cn/post/b4e4aa78.html">C++提高编程05：模板（函数模板-普通函数与函数模板的区别）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=171">09:19</a></td></tr><tr><td align="center">006</td><td align="left"><a href="https://notes.camcad.cn/post/27f24ea2.html">C++提高编程06：模板（函数模板-普通函数与函数模板调用规则）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=172">11:59</a></td></tr><tr><td align="center">007</td><td align="left"><a href="https://notes.camcad.cn/post/1e329533.html">C++提高编程07：模板（函数模板-模板的局限性）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=173">12:33</a></td></tr><tr><td align="center">008</td><td align="left"><a href="https://notes.camcad.cn/post/64b85e0c.html">C++提高编程08：模板（类模板-类模板的语法）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=174">06:47</a></td></tr><tr><td align="center">009</td><td align="left"><a href="https://notes.camcad.cn/post/77590297.html">C++提高编程09：模板（类模板- 类模板与函数模板区别）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=175">07:49</a></td></tr><tr><td align="center">010</td><td align="left"><a href="https://notes.camcad.cn/post/c6fb3775.html">C++提高编程10：模板（类模板-类模板中成员函数创建时机）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=176">08:00</a></td></tr><tr><td align="center">011</td><td align="left"><a href="https://notes.camcad.cn/post/b9754251.html">C++提高编程11：模板（类模板-类模板对象做函数参数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=177">13:40</a></td></tr><tr><td align="center">012</td><td align="left"><a href="https://notes.camcad.cn/post/24f7c9.html">C++提高编程12：模板（类模板-类模板与继承）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=178">09:59</a></td></tr><tr><td align="center">013</td><td align="left"><a href="https://notes.camcad.cn/post/bbca2a77.html">C++提高编程13：模板（类模板-类模板成员函数类外实现）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=179">08:28</a></td></tr><tr><td align="center">014</td><td align="left"><a href="https://notes.camcad.cn/post/a5263ddf.html">C++提高编程14：模板（类模板-类模板分文件编写）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=180">13:18</a></td></tr><tr><td align="center">015</td><td align="left"><a href="https://notes.camcad.cn/post/809a0b8.html">C++提高编程15：模板（类模板-类模板与友元）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=181">12:56</a></td></tr><tr><td align="center">016</td><td align="left"><a href="https://notes.camcad.cn/post/a1b304bb.html">C++提高编程16：模板（类模板-类模板案例）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=182">06:37</a></td></tr></tbody></table><h4 id="第二章：C-STL-常用容器"><a href="#第二章：C-STL-常用容器" class="headerlink" title="第二章：C++ STL 常用容器"></a>第二章：C++ STL 常用容器</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">017</td><td align="left"><a href="https://notes.camcad.cn/post/51a145f9.html">C++提高编程17：STL初识（STL的诞生，STL基本概念，STL六大组件，STL中容器、算法、迭代器）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=185">17:43</a></td></tr><tr><td align="center">018</td><td align="left"><a href="https://notes.camcad.cn/post/9ad20f91.html">C++提高编程18：STL初识（容器算法迭代器初识）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=186">14:11</a></td></tr><tr><td align="center">019</td><td align="left"><a href="https://notes.camcad.cn/post/41dab95a.html">C++提高编程19：STL常用容器（string容器-string基本概念）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=189">06:48</a></td></tr><tr><td align="center">020</td><td align="left"><a href="https://notes.camcad.cn/post/4cf03f75.html">C++提高编程20：STL常用容器（string容器-string构造函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=189">00:00</a></td></tr><tr><td align="center">021</td><td align="left"><a href="https://notes.camcad.cn/post/1e20fd3e.html">C++提高编程21：STL常用容器（string容器-string赋值操作）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=190">07:15</a></td></tr><tr><td align="center">022</td><td align="left"><a href="https://notes.camcad.cn/post/688b2f27.html">C++提高编程22：STL常用容器（string容器-string字符串拼接）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=191">11:04</a></td></tr><tr><td align="center">023</td><td align="left"><a href="https://notes.camcad.cn/post/708754f6.html">C++提高编程23：STL常用容器（string容器-string查找和替换）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=192">10:56</a></td></tr><tr><td align="center">024</td><td align="left"><a href="https://notes.camcad.cn/post/35ac6e08.html">C++提高编程24：STL常用容器（string容器- string字符串比较）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=193">05:12</a></td></tr><tr><td align="center">025</td><td align="left"><a href="https://notes.camcad.cn/post/f8fa3b7d.html">C++提高编程25：STL常用容器（string容器- string字符存取）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=194">05:32</a></td></tr><tr><td align="center">026</td><td align="left"><a href="https://notes.camcad.cn/post/fda2c593.html">C++提高编程26：STL常用容器（string容器- string插入和删除）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=195">04:26</a></td></tr><tr><td align="center">027</td><td align="left"><a href="https://notes.camcad.cn/post/4addf364.html">C++提高编程27：STL常用容器（string容器- string子串）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=196">07:19</a></td></tr><tr><td align="center">028</td><td align="left"><a href="https://notes.camcad.cn/post/874b2290.html">C++提高编程28：STL常用容器（vector容器- vector基本概念）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=197">12:06</a></td></tr><tr><td align="center">029</td><td align="left"><a href="https://notes.camcad.cn/post/4a098d18.html">C++提高编程29：STL常用容器（vector容器- vector构造函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=197">00:00</a></td></tr><tr><td align="center">030</td><td align="left"><a href="https://notes.camcad.cn/post/92771253.html">C++提高编程30：STL常用容器（vector容器- vector赋值操作）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=198">05:48</a></td></tr><tr><td align="center">031</td><td align="left"><a href="https://notes.camcad.cn/post/e82d8690.html">C++提高编程31：STL常用容器（vector容器- vector容量和大小）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=199">09:26</a></td></tr><tr><td align="center">032</td><td align="left"><a href="https://notes.camcad.cn/post/e8abcb67.html">C++提高编程32：STL常用容器（vector容器- vector插入和删除）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=200">08:30</a></td></tr><tr><td align="center">033</td><td align="left"><a href="https://notes.camcad.cn/post/7528e38.html">C++提高编程33：STL常用容器（vector容器- vector数据存取）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=201">04:48</a></td></tr><tr><td align="center">034</td><td align="left"><a href="https://notes.camcad.cn/post/ae7f0af0.html">C++提高编程34：STL常用容器（vector容器- vector互换容器）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=202">12:39</a></td></tr><tr><td align="center">035</td><td align="left"><a href="https://notes.camcad.cn/post/d3b74cd4.html">C++提高编程35：STL常用容器（vector容器- vector预留空间）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=203">06:54</a></td></tr><tr><td align="center">036</td><td align="left"><a href="https://notes.camcad.cn/post/2d258b96.html">C++提高编程36：STL常用容器（deque容器-deque容器基本概念）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=204">11:44</a></td></tr><tr><td align="center">037</td><td align="left"><a href="https://notes.camcad.cn/post/3ddb7e7f.html">C++提高编程37：STL常用容器（deque容器-deque构造函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=204">00:00</a></td></tr><tr><td align="center">038</td><td align="left"><a href="https://notes.camcad.cn/post/7bcbbe51.html">C++提高编程38：STL常用容器（deque容器-deque赋值操作）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=205">04:30</a></td></tr><tr><td align="center">039</td><td align="left"><a href="https://notes.camcad.cn/post/ffb738d8.html">C++提高编程39：STL常用容器（deque容器-deque大小操作）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=206">07:09</a></td></tr><tr><td align="center">040</td><td align="left"><a href="https://notes.camcad.cn/post/8feeb365.html">C++提高编程40：STL常用容器（deque容器-deque插入和删除）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=207">13:07</a></td></tr><tr><td align="center">041</td><td align="left"><a href="https://notes.camcad.cn/post/2593a9e0.html">C++提高编程41：STL常用容器（deque容器-deque数据存取）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=208">04:25</a></td></tr><tr><td align="center">042</td><td align="left"><a href="https://notes.camcad.cn/post/f71fb165.html">C++提高编程42：STL常用容器（deque容器-deque排序）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=209">06:53</a></td></tr><tr><td align="center">043</td><td align="left"><a href="https://notes.camcad.cn/post/39e2ef53.html">C++提高编程43：STL常用容器（案例-评委打分）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=210">23:34</a></td></tr><tr><td align="center">044</td><td align="left"><a href="https://notes.camcad.cn/post/55b24c9e.html">C++提高编程44：STL常用容器（stack容器-stack基本概念）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=211">07:08</a></td></tr><tr><td align="center">045</td><td align="left"><a href="https://notes.camcad.cn/post/40b5411f.html">C++提高编程45：STL常用容器（stack容器-stack常用接口）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=212">06:49</a></td></tr><tr><td align="center">046</td><td align="left"><a href="https://notes.camcad.cn/post/8813420.html">C++提高编程46：STL常用容器（queue容器-queue基本概念）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=213">06:41</a></td></tr><tr><td align="center">047</td><td align="left"><a href="https://notes.camcad.cn/post/1d8639a1.html">C++提高编程47：STL常用容器（queue容器-queue常用接口）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=214">08:21</a></td></tr><tr><td align="center">048</td><td align="left"><a href="https://notes.camcad.cn/post/61296b91.html">C++提高编程48：STL常用容器（list容器-list基本概念）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=215">15:02</a></td></tr><tr><td align="center">049</td><td align="left"><a href="https://notes.camcad.cn/post/dd0dea70.html">C++提高编程49：STL常用容器（list容器-list构造函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=216">05:30</a></td></tr><tr><td align="center">050</td><td align="left"><a href="https://notes.camcad.cn/post/95bac996.html">C++提高编程50：STL常用容器（list容器-list赋值和交换）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=217">06:46</a></td></tr><tr><td align="center">051</td><td align="left"><a href="https://notes.camcad.cn/post/91cc4878.html">C++提高编程51：STL常用容器（list容器-list大小操作）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=218">05:24</a></td></tr><tr><td align="center">052</td><td align="left"><a href="https://notes.camcad.cn/post/2aa283e5.html">C++提高编程52：STL常用容器（list容器-list插入和删除）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=219">11:44</a></td></tr><tr><td align="center">053</td><td align="left"><a href="https://notes.camcad.cn/post/7b56759a.html">C++提高编程53：STL常用容器（list容器-list数据存取）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=220">08:28</a></td></tr><tr><td align="center">054</td><td align="left"><a href="https://notes.camcad.cn/post/c17ab38c.html">C++提高编程54：STL常用容器（list容器-list反转和排序）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=221">12:18</a></td></tr><tr><td align="center">055</td><td align="left"><a href="https://notes.camcad.cn/post/d0f75ff3.html">C++提高编程55：STL常用容器（list容器-排序案例）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=222">12:39</a></td></tr><tr><td align="center">056</td><td align="left"><a href="https://notes.camcad.cn/post/b4fb037.html">C++提高编程56：STL常用容器（set&#x2F;multiset容器-set基本概念&#x2F;set构造和赋值）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=223">08:07</a></td></tr><tr><td align="center">057</td><td align="left"><a href="https://notes.camcad.cn/post/2e2675d0.html">C++提高编程57：STL常用容器（set&#x2F;multiset容器-set大小和交换）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=224">06:24</a></td></tr><tr><td align="center">058</td><td align="left"><a href="https://notes.camcad.cn/post/13341423.html">C++提高编程58：STL常用容器（set&#x2F;multiset容器-set插入和删除）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=225">05:52</a></td></tr><tr><td align="center">059</td><td align="left"><a href="https://notes.camcad.cn/post/42c5dc37.html">C++提高编程59：STL常用容器（set&#x2F;multiset容器-set查找和统计）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=226">06:25</a></td></tr><tr><td align="center">060</td><td align="left"><a href="https://notes.camcad.cn/post/2f1836d.html">C++提高编程60：STL常用容器（set&#x2F;multiset容器-set和multiset区别）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=227">08:33</a></td></tr><tr><td align="center">061</td><td align="left"><a href="https://notes.camcad.cn/post/e2e78da9.html">C++提高编程61：STL常用容器（set&#x2F;multiset容器-pair对组创建）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=228">04:15</a></td></tr><tr><td align="center">062</td><td align="left"><a href="https://notes.camcad.cn/post/2a5b6f84.html">C++提高编程62：STL常用容器（set&#x2F;multiset容器-set容器排序）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=229">08:14</a></td></tr><tr><td align="center">063</td><td align="left"><a href="https://notes.camcad.cn/post/752fb09b.html">C++提高编程63：STL常用容器（map&#x2F;multimap容器-map基本概念&#x2F;map构造和赋值）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=231">10:07</a></td></tr><tr><td align="center">064</td><td align="left"><a href="https://notes.camcad.cn/post/99f475b2.html">C++提高编程64：STL常用容器（map&#x2F;multimap容器-map大小和交换）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=232">07:28</a></td></tr><tr><td align="center">065</td><td align="left"><a href="https://notes.camcad.cn/post/16d449a4.html">C++提高编程65：STL常用容器（map&#x2F;multimap容器-map插入和删除）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=233">11:18</a></td></tr><tr><td align="center">066</td><td align="left"><a href="https://notes.camcad.cn/post/f0634711.html">C++提高编程66：STL常用容器（map&#x2F;multimap容器-map查找和统计）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=234">06:58</a></td></tr><tr><td align="center">067</td><td align="left"><a href="https://notes.camcad.cn/post/4fea10f2.html">C++提高编程67：STL常用容器（map&#x2F;multimap容器-map容器排序）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=235">07:15</a></td></tr><tr><td align="center">068</td><td align="left"><a href="https://notes.camcad.cn/post/b4f414d.html">C++提高编程68：STL常用容器（案例-员工分组）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=236">21:58</a></td></tr><tr><td align="center">069</td><td align="left"><a href="https://notes.camcad.cn/post/b9db3b6b.html">C++提高编程69：STL函数对象（函数对象）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=237">11:06</a></td></tr><tr><td align="center">070</td><td align="left"><a href="https://notes.camcad.cn/post/f42f72e5.html">C++提高编程70：STL函数对象（谓词）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=238">08:28</a></td></tr><tr><td align="center">071</td><td align="left"><a href="https://notes.camcad.cn/post/d7fa12cb.html">C++提高编程71：STL函数对象（内建函数对象-内建函数对象意义&#x2F;算术仿函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=240">06:26</a></td></tr><tr><td align="center">072</td><td align="left"><a href="https://notes.camcad.cn/post/234337fe.html">C++提高编程72：STL函数对象（内建函数对象-关系仿函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=241">07:08</a></td></tr><tr><td align="center">073</td><td align="left"><a href="https://notes.camcad.cn/post/bb18a6d3.html">C++提高编程73：STL函数对象（内建函数对象-逻辑仿函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=242">07:37</a></td></tr><tr><td align="center">074</td><td align="left"><a href="https://notes.camcad.cn/post/437af6a8.html">C++提高编程74：STL常用算法（常用遍历算法-for_each）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=243">06:30</a></td></tr><tr><td align="center">075</td><td align="left"><a href="https://notes.camcad.cn/post/39184424.html">C++提高编程75：STL常用算法（常用遍历算法-transform）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=244">06:16</a></td></tr><tr><td align="center">076</td><td align="left"><a href="https://notes.camcad.cn/post/4e4670d3.html">C++提高编程76：STL常用算法（常用查找算法）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=245">12:26</a></td></tr><tr><td align="center">077</td><td align="left"><a href="https://notes.camcad.cn/post/c9c5a6ae.html">C++提高编程77：STL常用算法（常用排序算法）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=251">05:31</a></td></tr><tr><td align="center">078</td><td align="left"><a href="https://notes.camcad.cn/post/b764b3e7.html">C++提高编程78：STL常用算法（常用拷贝和替换算法）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=255">04:56</a></td></tr><tr><td align="center">079</td><td align="left"><a href="https://notes.camcad.cn/post/56601927.html">C++提高编程79：STL常用算法（常用算术生成算法）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=259">05:18</a></td></tr><tr><td align="center">080</td><td align="left"><a href="https://notes.camcad.cn/post/dfef9d8b.html">C++提高编程80：STL常用算法（常用集合算法）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=259">10:26</a></td></tr><tr><td align="center">081</td><td align="left"><a href="https://notes.camcad.cn/post/adbe7ef1.html">C++提高编程81：演讲比赛流程管理系统</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=264">08:36</a></td></tr><tr><td align="center">082</td><td align="left"><a href="https://notes.camcad.cn/post/17c061d0.html">C++提高编程82：演讲比赛流程管理系统-头文件&#x2F;源文件</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=264">00:00</a></td></tr><tr><td align="center">083</td><td align="left"><a href="https://notes.camcad.cn//post/d0efdeb2.html">C++面向对象（案列）：机房预约系统(头文件&#x2F;源文件)</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=282">08:03</a></td></tr><tr><td align="center">084</td><td align="left"><a href="https://notes.camcad.cn/post/b0cae4ad.html">C++面向对象（案列）：机房预约系统(头文件&#x2F;源文件)</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=282">00:00</a></td></tr></tbody></table><h3 id="视频转载-bilibili博主《黑马程序员》"><a href="#视频转载-bilibili博主《黑马程序员》" class="headerlink" title="视频转载 bilibili博主《黑马程序员》"></a>视频转载 bilibili博主《<a href="https://space.bilibili.com/37974444?spm_id_from=333.788.b_765f7570696e666f.2">黑马程序员</a>》</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++面向对象（案列）：机房预约系统(头文件/源文件)</title>
      <link href="/post/b0cae4ad.html"/>
      <url>/post/b0cae4ad.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="机房预约系统"><a href="#机房预约系统" class="headerlink" title="机房预约系统"></a>机房预约系统</h1><h2 id="机房预约系统-cpp（源文件）"><a href="#机房预约系统-cpp（源文件）" class="headerlink" title="机房预约系统.cpp（源文件）"></a>机房预约系统.cpp（源文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once;</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&quot;globalFile.h&quot;</span></span><br><span class="line"><span class="meta">#include&quot;Identity.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;fstream&gt;</span></span><br><span class="line"><span class="meta">#include&quot;student.h&quot;</span></span><br><span class="line"><span class="meta">#include&quot;teacher.h&quot;</span></span><br><span class="line"><span class="meta">#include&quot;manager.h&quot;</span></span><br><span class="line"><span class="meta">#include&quot;student.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//登陆功能  参数1：操作的文件名，参数2：类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loginIn</span>(<span class="params"><span class="built_in">string</span> fileName, <span class="built_in">int</span> type</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管理员 子菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">managerMenu</span>(<span class="params">Identity * &amp;p</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生代表 子菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">studentMenu</span>(<span class="params">Identity * &amp;p</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//老师代表 子菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">teacherMenu</span>(<span class="params">Identity * &amp;p</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;     <span class="comment">//用于接收用户的选择</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;====================  欢迎来到《蚂蚁》预约系统  ====================&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的身份：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t           1.学生代表           \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t           2.教    师           \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t           3.管 理 员           \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t           0.退    出           \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;输入您的选择：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;        <span class="comment">//接收用户选择</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">select</span>)     <span class="comment">//根据用户选择 实现不同接口的功能</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:     <span class="comment">//学生代表</span></span><br><span class="line">            loginIn(STUDENT_FILE, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:     <span class="comment">//教    师</span></span><br><span class="line">            loginIn(TEACHER_FILE, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:     <span class="comment">//管 理 员</span></span><br><span class="line">            loginIn(ADMIN_FILE, <span class="number">3</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:     <span class="comment">//退出系统</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;欢迎下次使用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="literal">default</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//登录功能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loginIn</span>(<span class="params"><span class="built_in">string</span> fileName, <span class="built_in">int</span> type</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开文件-读操作</span></span><br><span class="line">    ifs.open(fileName, ios::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件不存在！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        ifs.close();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学号/编号</span></span><br><span class="line">    <span class="built_in">int</span> id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密码</span></span><br><span class="line">    <span class="built_in">string</span> pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>)      <span class="comment">//学生登录</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入学号：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) <span class="comment">//职工登录</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入职工编号：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入用户名：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入密码：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基类创建</span></span><br><span class="line">    Identity *person = NULL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//学生登录验证</span></span><br><span class="line">        <span class="built_in">int</span> fId = <span class="number">0</span>;    <span class="comment">//文件 学号</span></span><br><span class="line">        <span class="built_in">string</span> fName;   <span class="comment">//文件 用户名</span></span><br><span class="line">        <span class="built_in">string</span> fPwd;    <span class="comment">//文件 密码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//与用户输入的信息做对比</span></span><br><span class="line">            <span class="keyword">if</span> (fId == id &amp;&amp; fName == name &amp;&amp; fPwd == pwd)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;学生验证登录成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">                system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">                person = <span class="keyword">new</span> Student(id, name, pwd);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//进入学生身份的子菜单</span></span><br><span class="line">                studentMenu(person);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//教师登录验证</span></span><br><span class="line">        <span class="built_in">int</span> fId = <span class="number">0</span>;    <span class="comment">//文件 编号</span></span><br><span class="line">        <span class="built_in">string</span> fName;   <span class="comment">//文件 用户名</span></span><br><span class="line">        <span class="built_in">string</span> fPwd;    <span class="comment">//文件 密码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//与用户输入的信息做对比</span></span><br><span class="line">            <span class="keyword">if</span> (fId == id &amp;&amp; fName == name &amp;&amp; fPwd == pwd)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;教师验证登录成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">                system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">                person = <span class="keyword">new</span> Teacher(id, name, pwd);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//进入老师身份的子菜单</span></span><br><span class="line">                teacherMenu(person);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//管理员登录验证</span></span><br><span class="line">        <span class="built_in">string</span> fName;   <span class="comment">//文件 用户名</span></span><br><span class="line">        <span class="built_in">string</span> fPwd;    <span class="comment">//文件 密码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//与用户输入的信息做对比</span></span><br><span class="line">            <span class="keyword">if</span> (fName == name &amp;&amp; fPwd == pwd)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;管理员验证登录成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">                system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">                person = <span class="keyword">new</span> Manager(name, pwd);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//进入管理员身份的子菜单</span></span><br><span class="line">                managerMenu(person);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;验证登录失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管理员 子菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">managerMenu</span>(<span class="params">Identity * &amp;p</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//调用 管理员 子菜单</span></span><br><span class="line">        p-&gt;openMenu();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将父类指针 转为子类指针，调用子类里其他接口</span></span><br><span class="line">        Manager *ma = (Manager*)p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收用户选项</span></span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">1</span>)        <span class="comment">//添加账号</span></span><br><span class="line">        &#123;</span><br><span class="line">            ma-&gt;addPerson();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">2</span>)   <span class="comment">//查看账号</span></span><br><span class="line">        &#123;</span><br><span class="line">            ma-&gt;showPerson();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">3</span>)   <span class="comment">//查看机房</span></span><br><span class="line">        &#123;</span><br><span class="line">            ma-&gt;showComputer();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">4</span>)   <span class="comment">//清空预约</span></span><br><span class="line">        &#123;</span><br><span class="line">            ma-&gt;cleanFile();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">0</span>)   <span class="comment">//注销登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            delete p;       <span class="comment">//释放堆区对象</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;注销登录成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生代表 子菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">studentMenu</span>(<span class="params">Identity * &amp;p</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//调用 学生代表 子菜单</span></span><br><span class="line">        p-&gt;openMenu();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将父类指针 转为子类指针，调用子类里其他接口</span></span><br><span class="line">        Student *stu = (Student*)p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收用户选项</span></span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">1</span>)        <span class="comment">//申请预约</span></span><br><span class="line">        &#123;</span><br><span class="line">            stu-&gt;applyOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">2</span>)   <span class="comment">//查看我的预约</span></span><br><span class="line">        &#123;</span><br><span class="line">            stu-&gt;showMyOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">3</span>)   <span class="comment">//查看所有预约</span></span><br><span class="line">        &#123;</span><br><span class="line">            stu-&gt;showAllOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">4</span>)   <span class="comment">//取消预约</span></span><br><span class="line">        &#123;</span><br><span class="line">            stu-&gt;cancelOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">0</span>)   <span class="comment">//注销登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            delete p;       <span class="comment">//释放堆区对象</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;注销登录成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//老师 子菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">teacherMenu</span>(<span class="params">Identity * &amp;p</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//调用 老师 子菜单</span></span><br><span class="line">        p-&gt;openMenu();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将父类指针 转为子类指针，调用子类里其他接口</span></span><br><span class="line">        Teacher *tea = (Teacher*)p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收用户选项</span></span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="computerRoom-h（头文件）"><a href="#computerRoom-h（头文件）" class="headerlink" title="computerRoom.h（头文件）"></a>computerRoom.h（头文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//机房类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">computerRoom</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//机房编号</span></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="globalFile-h（头文件）"><a href="#globalFile-h（头文件）" class="headerlink" title="globalFile.h（头文件）"></a>globalFile.h（头文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管理员文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADMIN_FILE &quot;admin.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//学生文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STUDENT_FILE &quot;student.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//教师文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEACHER_FILE &quot;teacher.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//机房信息文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COMPUTER_FILE &quot;computerRoom.txt&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Identity-h（头文件）"><a href="#Identity-h（头文件）" class="headerlink" title="Identity.h（头文件）"></a>Identity.h（头文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once    //防止头文件重复定义</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//身份抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Identity</span>      <span class="comment">//同一特性类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作菜单 纯虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">openMenu</span>()</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名称</span></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="orderFile-h（头文件）"><a href="#orderFile-h（头文件）" class="headerlink" title="orderFile.h（头文件）"></a>orderFile.h（头文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&quot;globalFile.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;map&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&lt;fstream&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">orderFile</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    orderFile();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新预约记录</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initMap</span>(<span class="params"><span class="built_in">string</span> str</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//临时容器</span></span><br><span class="line">    map&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;m_tempMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录的容器 key---记录的条数 value---具体要求记录的键值对信息</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, map&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; m_OrderData;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="orderFile-cpp（源文件）"><a href="#orderFile-cpp（源文件）" class="headerlink" title="orderFile.cpp（源文件）"></a>orderFile.cpp（源文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &quot;orderFile.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">orderFile::orderFile()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_OrderData.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//预约记录个数</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文件中的数据 </span></span><br><span class="line">    <span class="built_in">string</span> date;        <span class="comment">//时间</span></span><br><span class="line">    <span class="built_in">string</span> interval;    <span class="comment">//时间段</span></span><br><span class="line">    <span class="built_in">string</span> stuId;       <span class="comment">//学生学号</span></span><br><span class="line">    <span class="built_in">string</span> stuName;     <span class="comment">//学生姓名</span></span><br><span class="line">    <span class="built_in">string</span> roomId;      <span class="comment">//机房编号</span></span><br><span class="line">    <span class="built_in">string</span> status;      <span class="comment">//预约状态</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    <span class="function">ifstream <span class="title">ifs</span>(<span class="params">ORDER_FILE, ios::<span class="keyword">in</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取内容</span></span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; date &amp;&amp; ifs &gt;&gt; interval &amp;&amp; ifs &gt;&gt; stuId &amp;&amp; ifs &gt;&gt;</span><br><span class="line">        stuName &amp;&amp; ifs &gt;&gt; roomId &amp;&amp; ifs &gt;&gt; status)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化临时容器</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_tempMap.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数据放入到临时容器中</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(date);     <span class="comment">//时间</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(interval); <span class="comment">//时间段</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(stuId);        <span class="comment">//学生学号</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(stuName);      <span class="comment">//学生姓名</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(roomId);       <span class="comment">//机房编号</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(status);       <span class="comment">//预约状态</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数据放入到容器中</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_OrderData.insert(make_pair(<span class="keyword">this</span>-&gt;m_Size, <span class="keyword">this</span>-&gt;m_tempMap));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//预约记录个数</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新预约记录</span></span><br><span class="line"><span class="keyword">void</span> orderFile::updateOrder()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;     <span class="comment">//预约记录0条，直接return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    <span class="function">ofstream <span class="title">ofs</span>(<span class="params">ORDER_FILE, ios::<span class="keyword">out</span>  ios::trunc</span>)</span>;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;date:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;date&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;interval:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;interval&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;stuId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;stuId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;stuName:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;stuName&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;roomId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;roomId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;status:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;status&quot;</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="keyword">void</span> orderFile::initMap(<span class="built_in">string</span> str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> tempKey;     <span class="comment">//临时Key值</span></span><br><span class="line">    <span class="built_in">string</span> tempValue;   <span class="comment">//临时Value值</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> start = <span class="number">0</span>;              <span class="comment">//起始位置</span></span><br><span class="line">    <span class="built_in">int</span> pos = str.find(<span class="string">&quot;:&quot;</span>);  <span class="comment">//返回&quot;:&quot;的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//不等于 -1 执行</span></span><br><span class="line">    <span class="keyword">if</span> (pos != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tempKey = str.substr(start, pos);</span><br><span class="line">        tempValue = str.substr(pos + <span class="number">1</span>, str.size() - pos - <span class="number">1</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="manager-h（头文件）"><a href="#manager-h（头文件）" class="headerlink" title="manager.h（头文件）"></a>manager.h（头文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&quot;Identity.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&quot;globalFile.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;fstream&gt;</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&quot;student.h&quot;</span></span><br><span class="line"><span class="meta">#include&quot;teacher.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#include&quot;computerRoom.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Manager</span> :<span class="title">public</span> <span class="title">Identity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//默认构造</span></span><br><span class="line">    Manager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造 参数：姓名，密码</span></span><br><span class="line">    Manager(<span class="built_in">string</span> name, <span class="built_in">string</span> pwd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作菜单</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">openMenu</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加帐号</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addPerson</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看帐号</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPerson</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看机房</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showComputer</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cleanFile</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initVector</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学生容器</span></span><br><span class="line">    vector&lt;Student&gt;vStu;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//教师容器</span></span><br><span class="line">    vector&lt;Teacher&gt;vTea;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查重复 参数：（传入id,传入类型）返回值：（true代表有重复，false代表没有重复）</span></span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">checkRepeat</span>(<span class="params"><span class="built_in">int</span> id, <span class="built_in">int</span> type</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//机房容器</span></span><br><span class="line">    vector&lt;computerRoom&gt;vCom;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="manager-cpp（源文件）"><a href="#manager-cpp（源文件）" class="headerlink" title="manager.cpp（源文件）"></a>manager.cpp（源文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&quot;manager.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Manager::Manager()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造 参数：用户名称，用户密码</span></span><br><span class="line">Manager::Manager(<span class="built_in">string</span> name, <span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;initVector();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作菜单</span></span><br><span class="line"><span class="keyword">void</span> Manager::openMenu()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;欢迎管理员：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; 登录&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           1.添加账号           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           2.查看账号           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           3.查看机房           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           4.清空预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           0.注销登录           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加帐号</span></span><br><span class="line"><span class="keyword">void</span> Manager::addPerson()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;     <span class="comment">//接收用户的选择</span></span><br><span class="line">    <span class="built_in">string</span> fileName;    <span class="comment">//文件名称</span></span><br><span class="line">    <span class="built_in">string</span> tip;         <span class="comment">//提示需要输入的ip号</span></span><br><span class="line">    <span class="built_in">string</span> errorTip;    <span class="comment">//重复错误提示</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入添加账号类型：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1.添加学生&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2.添加教师&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fileName = STUDENT_FILE;</span><br><span class="line">            tip = <span class="string">&quot;请输入学号：&quot;</span>;</span><br><span class="line">            errorTip = <span class="string">&quot;学号重复，请重新输入！\n&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fileName = TEACHER_FILE;</span><br><span class="line">            tip = <span class="string">&quot;请输入职工编号：&quot;</span>;</span><br><span class="line">            errorTip = <span class="string">&quot;职工编号重复，请重新输入！\n&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);  </span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);        <span class="comment">//清屏</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>-&gt;openMenu();    <span class="comment">//调用 管理员 子菜单</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    ofstream ofs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开文件-写内容</span></span><br><span class="line">    ofs.open(fileName, ios::<span class="keyword">out</span>  ios::app);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取用户的输入</span></span><br><span class="line">    <span class="built_in">int</span> id;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; tip;  <span class="comment">//学号或职工编号</span></span><br><span class="line">        cin &gt;&gt; id;</span><br><span class="line">        <span class="built_in">bool</span> ret = <span class="keyword">this</span>-&gt;checkRepeat(id, <span class="keyword">select</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ret)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; errorTip;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入用户名：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入密码：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向文件添加数据</span></span><br><span class="line">    ofs &lt;&lt; id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; pwd &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ofs.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;initVector();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;添加成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">myPrintClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学生 仿函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span>()(<span class="params">Student &amp;s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;学号：&quot;</span> &lt;&lt; s.m_Id &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; s.m_Name &lt;&lt; <span class="string">&quot;\t密码：&quot;</span> &lt;&lt; s.m_Pwd &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//教师 仿函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span>()(<span class="params">Teacher &amp;t</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;职工编号：&quot;</span> &lt;&lt; t.m_EmpId &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; t.m_Name &lt;&lt; <span class="string">&quot;\t密码：&quot;</span> &lt;&lt; t.m_Pwd &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//机房 仿函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span>()(<span class="params">computerRoom &amp;c</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;机房编号：&quot;</span> &lt;&lt; c.m_Name &lt;&lt; <span class="string">&quot;\t机房最大容量：&quot;</span> &lt;&lt; c.m_Maximum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看帐号</span></span><br><span class="line"><span class="keyword">void</span> Manager::showPerson()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//接收用户的输入</span></span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1、查看所有学生&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2、查看所有教师&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//遍历学生容器 所有元素</span></span><br><span class="line">            for_each(vStu.begin(), vStu.end(), myPrintClass());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//遍历教师容器 所有元素</span></span><br><span class="line">            for_each(vTea.begin(), vTea.end(), myPrintClass());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用 管理员 子菜单</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;openMenu();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看机房</span></span><br><span class="line"><span class="keyword">void</span> Manager::showComputer()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;机房信息如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历机房容器 所有元素</span></span><br><span class="line">    for_each(vCom.begin(), vCom.end(), myPrintClass());</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空预约</span></span><br><span class="line"><span class="keyword">void</span> Manager::cleanFile()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建流文件（如果文件存在先删除，再创建)</span></span><br><span class="line">    <span class="function">ofstream <span class="title">ofs</span>(<span class="params">ORDER_FILE, ios::trunc</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ofs.close();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;清空成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="keyword">void</span> Manager::initVector()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;vStu.clear();</span><br><span class="line">    <span class="keyword">this</span>-&gt;vTea.clear();</span><br><span class="line">    <span class="keyword">this</span>-&gt;vCom.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取学生文件中信息</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line">    ifs.open(STUDENT_FILE, ios::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//char ch;</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/判断文件是否存在</span></span><br><span class="line">    <span class="comment">//if (!ifs.is_open())</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; &quot;学生 文件读取失败！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//  ifs.close();</span></span><br><span class="line">    <span class="comment">//  return;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/判断文件是否为空</span></span><br><span class="line">    <span class="comment">//ifs &gt;&gt; ch;</span></span><br><span class="line">    <span class="comment">//if (ifs.eof())</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; &quot;学生 文件为空！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//  ifs.close();</span></span><br><span class="line">    <span class="comment">//  return;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//ifs.putback(ch);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读内容</span></span><br><span class="line">    Student s;</span><br><span class="line">    <span class="comment">//将数据放入到容器中</span></span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; s.m_Id &amp;&amp; ifs &gt;&gt; s.m_Name &amp;&amp; ifs &gt;&gt; s.m_Pwd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;vStu.push_back(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;学生数量为：&quot; &lt;&lt; this-&gt;vStu.size() &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取教师文件中信息</span></span><br><span class="line">    ifs.open(TEACHER_FILE, ios::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/判断文件是否存在</span></span><br><span class="line">    <span class="comment">//if (!ifs.is_open())</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; &quot;教师 文件读取失败！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//  ifs.close();</span></span><br><span class="line">    <span class="comment">//  return;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/判断文件是否为空</span></span><br><span class="line">    <span class="comment">//ifs &gt;&gt; ch;</span></span><br><span class="line">    <span class="comment">//if (ifs.eof())</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; &quot;教师 文件为空！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//  ifs.close();</span></span><br><span class="line">    <span class="comment">//  return;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//ifs.putback(ch);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读内容</span></span><br><span class="line">    Teacher t;</span><br><span class="line">    <span class="comment">//将数据放入到容器中</span></span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; t.m_EmpId &amp;&amp; ifs &gt;&gt; t.m_Name &amp;&amp; ifs &gt;&gt; t.m_Pwd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;vTea.push_back(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;教师数量为：&quot; &lt;&lt; this-&gt;vTea.size() &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取机房文件中信息</span></span><br><span class="line">    ifs.open(COMPUTER_FILE, ios::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/判断文件是否存在</span></span><br><span class="line">    <span class="comment">//if (!ifs.is_open())</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; &quot;机房 文件读取失败！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//  ifs.close();</span></span><br><span class="line">    <span class="comment">//  return;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/判断文件是否为空</span></span><br><span class="line">    <span class="comment">//ifs &gt;&gt; ch;</span></span><br><span class="line">    <span class="comment">//if (ifs.eof())</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; &quot;机房 文件为空！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//  ifs.close();</span></span><br><span class="line">    <span class="comment">//  return;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//ifs.putback(ch);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读内容</span></span><br><span class="line">    computerRoom c;</span><br><span class="line">    <span class="comment">//将数据放入到容器中</span></span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; c.m_Name &amp;&amp; ifs &gt;&gt; c.m_Maximum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;vCom.push_back(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;机房数量为：&quot; &lt;&lt; this-&gt;vCom.size() &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="student-h（头文件）"><a href="#student-h（头文件）" class="headerlink" title="student.h（头文件）"></a>student.h（头文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&quot;Identity.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&quot;computerRoom.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;fstream&gt;</span></span><br><span class="line"><span class="meta">#include&quot;globalFile.h&quot;</span></span><br><span class="line"><span class="meta">#include&quot;orderFile.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Student</span> :<span class="title">public</span> <span class="title">Identity</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认构造</span></span><br><span class="line">    Student();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造  参数：学号、姓名、密码</span></span><br><span class="line">    Student(<span class="built_in">int</span> id, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作菜单</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">openMenu</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申请预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">applyOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看自身的预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showMyOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看所有预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showAllOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取消预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~Student();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学号</span></span><br><span class="line">    <span class="built_in">int</span> m_Id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//容器初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initVector</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//机房容器</span></span><br><span class="line">    vector&lt;computerRoom&gt;vCom;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="student-cpp（源文件）"><a href="#student-cpp（源文件）" class="headerlink" title="student.cpp（源文件）"></a>student.cpp（源文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&quot;student.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Student::Student()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Student::Student(<span class="built_in">int</span> id, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化属性</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//容器初始化</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;initVector();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作菜单</span></span><br><span class="line"><span class="keyword">void</span> Student::openMenu()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;欢迎学生代表：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; 登录&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           1.申请预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           2.我的预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           3.所有预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           4.取消预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           0.注销登录           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="keyword">void</span> Student::applyOrder()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> date = <span class="number">0</span>;           <span class="comment">//周一~周五</span></span><br><span class="line">    <span class="built_in">int</span> interval = <span class="number">0</span>;       <span class="comment">//上午、下午</span></span><br><span class="line">    <span class="built_in">int</span> roomId = <span class="number">0</span>;         <span class="comment">//机房容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;机房开放的时间为周一至周五！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入申请预约的时间：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1、周一&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2、周二&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;3、周三&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;4、周四&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;5、周五&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; date;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> &lt;= date &amp;&amp; date &lt;= <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用 学生 子菜单</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;openMenu();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入申请预约的时间段：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1、上午&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2、下午&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; interval;</span><br><span class="line">        <span class="keyword">if</span> (interval &gt;= <span class="number">1</span> &amp;&amp; interval &lt;= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择机房：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; vCom.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="keyword">this</span>-&gt;vCom[i].m_Name &lt;&lt; <span class="string">&quot;机房 容量：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;vCom[i].m_Maximum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; roomId;</span><br><span class="line">        <span class="keyword">if</span> (roomId &gt;= <span class="number">1</span> &amp;&amp; roomId &lt;= <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    <span class="function">ofstream <span class="title">ofs</span>(<span class="params">ORDER_FILE, ios::<span class="keyword">out</span>  ios::app</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入数据</span></span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;date:&quot;</span> &lt;&lt; date &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;interval:&quot;</span> &lt;&lt; interval &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;stuId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;stuName:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;roomId:&quot;</span> &lt;&lt; roomId &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;status:&quot;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;      <span class="comment">//1：审核中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ofs.close();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;预约成功，审核中&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看自身的预约</span></span><br><span class="line"><span class="keyword">void</span> Student::showMyOrder()</span><br><span class="line">&#123;</span><br><span class="line">    orderFile ord;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ord.m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ord.m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//string 转 int</span></span><br><span class="line">        <span class="comment">//string 利用 .c_str() 转 const char *</span></span><br><span class="line">        <span class="comment">//利用 atoi(const char *) 转 int</span></span><br><span class="line">        <span class="keyword">if</span> (atoi(ord.m_OrderData[i][<span class="string">&quot;stuId&quot;</span>].c_str()) == <span class="keyword">this</span>-&gt;m_Id)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;预约日期：周&quot;</span> &lt;&lt; ord.m_OrderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;   时段：&quot;</span> &lt;&lt; (ord.m_OrderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;   机房编号：&quot;</span> &lt;&lt; ord.m_OrderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1审核中 2已预约 0取消预约 -1预约失败</span></span><br><span class="line">            <span class="built_in">string</span> status = <span class="string">&quot;   状态：&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (ord.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ord.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                status += <span class="string">&quot;已预约&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ord.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;0&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                status += <span class="string">&quot;预约失败&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="keyword">void</span> Student::showAllOrder()</span><br><span class="line">&#123;</span><br><span class="line">    orderFile of;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;、&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;预约日期：周&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t时段：&quot;</span> &lt;&lt; (of.m_OrderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t学号：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t机房编号：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> status = <span class="string">&quot;\t状态：&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;已预约&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;0&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;预约失败&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="keyword">void</span> Student::cancelOrder()</span><br><span class="line">&#123;</span><br><span class="line">    orderFile of;</span><br><span class="line">    <span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v;     <span class="comment">//存放在最大容器中的下标编号</span></span><br><span class="line">    <span class="built_in">int</span> index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先判断自身学号</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Id == atoi(of.m_OrderData[i][<span class="string">&quot;stuId&quot;</span>].c_str()))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//再筛选状态 审核中或预约成功</span></span><br><span class="line">            <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>  of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//放入到容器中</span></span><br><span class="line">                v.push_back(i);</span><br><span class="line"></span><br><span class="line">                cout &lt;&lt; index &lt;&lt; <span class="string">&quot;、&quot;</span>;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;预约日期：周&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;\t时段：&quot;</span> &lt;&lt; (of.m_OrderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;\t机房：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">                <span class="built_in">string</span> status = <span class="string">&quot; \t状态：&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    status += <span class="string">&quot;已预约&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; status &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//记录下标加1</span></span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v.size() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有审核中或已预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;审核中或预约成功的记录可以取消，请输入取消的记录：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入取消预约状态的序号，0 表示返回&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">select</span> &lt;= v.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                of.m_OrderData[v[<span class="keyword">select</span> - <span class="number">1</span>]][<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                of.updateOrder();</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;已取消预约！&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">Student::~Student()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器初始化</span></span><br><span class="line"><span class="keyword">void</span> Student::initVector()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;vCom.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line">    ifs.open(COMPUTER_FILE, ios::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建临时接收类</span></span><br><span class="line">    computerRoom com;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; com.m_Name &amp;&amp; ifs &gt;&gt; com.m_Maximum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将读取的信息放入到 容器中</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;vCom.push_back(com);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="teacher-h（头文件）"><a href="#teacher-h（头文件）" class="headerlink" title="teacher.h（头文件）"></a>teacher.h（头文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&quot;Identity.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&quot;orderFile.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Teacher</span> :<span class="title">public</span> <span class="title">Identity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认构造</span></span><br><span class="line">    Teacher();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造 参数：职工编号、姓名、密码</span></span><br><span class="line">    Teacher(<span class="built_in">int</span> empid, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单界面</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">openMenu</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看所有预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showAllOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//审核预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">validOrder</span>()</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="teacher-cpp（源文件）"><a href="#teacher-cpp（源文件）" class="headerlink" title="teacher.cpp（源文件）"></a>teacher.cpp（源文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&quot;teacher.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Teacher::Teacher()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造 参数：职工编号、姓名、密码</span></span><br><span class="line">Teacher::Teacher(<span class="built_in">int</span> empid, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_EmpId = empid;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="keyword">void</span> Teacher::openMenu()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;欢迎教师：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; 登录&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           1.所有预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           2.审核预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           0.注销登录           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="keyword">void</span> Teacher::showAllOrder()</span><br><span class="line">&#123;</span><br><span class="line">    orderFile of;</span><br><span class="line">    <span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;、&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;预约日期：周&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t时段：&quot;</span> &lt;&lt; (of.m_OrderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t学号&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t姓名&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t机房&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> status = <span class="string">&quot; \t状态：&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;已预约&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;0&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;取消预约&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;预约失败&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//审核预约</span></span><br><span class="line"><span class="keyword">void</span> Teacher::validOrder()</span><br><span class="line">&#123;</span><br><span class="line">    orderFile of;</span><br><span class="line">    <span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v;</span><br><span class="line">    v.clear();</span><br><span class="line">    <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            v.push_back(i);</span><br><span class="line">            cout &lt;&lt; ++index &lt;&lt; <span class="string">&quot;、&quot;</span>;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;预约日期：周&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;\t时段：&quot;</span> &lt;&lt; (of.m_OrderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;\t学号：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;\t机房：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> status = <span class="string">&quot; \t状态：&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v.size() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有审核中的记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++面向对象（案列）：机房预约系统</title>
      <link href="/post/d0efdeb2.html"/>
      <url>/post/d0efdeb2.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="机房预约系统"><a href="#机房预约系统" class="headerlink" title="机房预约系统"></a>机房预约系统</h1><h2 id="1、机房预约系统需求"><a href="#1、机房预约系统需求" class="headerlink" title="1、机房预约系统需求"></a>1、机房预约系统需求</h2><h3 id="1-1-系统简介"><a href="#1-1-系统简介" class="headerlink" title="1.1 系统简介"></a>1.1 系统简介</h3><p>学校现有几个规格不同的机房，由于使用时经常出现“撞车”现象，现开发一套机房预约系统，解决这一问题。<br><img src="http://image.camcad.cn/2020/07/2020070907260630.jpg"></p><h3 id="1-2-身份简介"><a href="#1-2-身份简介" class="headerlink" title="1.2 身份简介"></a>1.2 身份简介</h3><h4 id="分别有三种身份使用该程序："><a href="#分别有三种身份使用该程序：" class="headerlink" title="分别有三种身份使用该程序："></a>分别有三种身份使用该程序：</h4><ul><li><strong>学生代表：</strong>申请使用机房</li><li><strong>教师：</strong>审校学生的预约申请</li><li><strong>管理员：</strong>给学生、教师创建帐号</li></ul><h3 id="1-3-机房简介"><a href="#1-3-机房简介" class="headerlink" title="1.3 机房简介"></a>1.3 机房简介</h3><h4 id="机房总共有3间："><a href="#机房总共有3间：" class="headerlink" title="机房总共有3间："></a>机房总共有3间：</h4><ul><li>1号机房—最大容量20人</li><li>2号机房—最大容量50人</li><li>3号机房—最大容量100人</li></ul><h3 id="1-4-申请简介"><a href="#1-4-申请简介" class="headerlink" title="1.4 申请简介"></a>1.4 申请简介</h3><ul><li>申请的订单每周由管理员负责清空</li><li>学生可以预约未来一周内的机房使用，预约的日期为周一至周五，预约时需要选择预约时段（上午、下午）</li><li>教师来审核预约，依据实际情况审核预约通过或者不通过</li></ul><h3 id="1-5-系统具体需求"><a href="#1-5-系统具体需求" class="headerlink" title="1.5 系统具体需求"></a>1.5 系统具体需求</h3><h4 id="首先进入登录界面，可选登录身份有："><a href="#首先进入登录界面，可选登录身份有：" class="headerlink" title="首先进入登录界面，可选登录身份有："></a>首先进入登录界面，可选登录身份有：</h4><ul><li>学生代表（Student）</li><li>老师（Teacher）</li><li>管理员（Manager）</li><li>退出（Exit）</li></ul><h4 id="每个身份都需要进行验证后，进入子菜单"><a href="#每个身份都需要进行验证后，进入子菜单" class="headerlink" title="每个身份都需要进行验证后，进入子菜单"></a>每个身份都需要进行验证后，进入子菜单</h4><ul><li>学生需要输入：学号、姓名、登录密码</li><li>老师需要输入：职工号、姓名、登录密码</li><li>管理员需要输入：管理员姓名、登录密码</li></ul><h4 id="学生具体功能"><a href="#学生具体功能" class="headerlink" title="学生具体功能"></a>学生具体功能</h4><ul><li>申请预约（applyOrder）—预约机房</li><li>查看自身的预约（showMyOrder）—查看自己的预约状态</li><li>查看所有预约（showAllOrder）—查看全部预约信息以及预约状态</li><li>取消预约（cancelOrder）—取消自身的预约，预约成功或审核中的预约均可取消</li><li>注销登录（）—退出登录</li></ul><h4 id="教师具体功能"><a href="#教师具体功能" class="headerlink" title="教师具体功能"></a>教师具体功能</h4><ul><li>查看所有预约（showAllOrder）—查看全部预约信息以及预约状态</li><li>审核预约（validOrder）—对学生的预约进行审核</li><li>注销登录（）—退出登录</li></ul><h4 id="管理员具体功能"><a href="#管理员具体功能" class="headerlink" title="管理员具体功能"></a>管理员具体功能</h4><ul><li>添加帐号（addPerson）—添加学生或教师的帐号，需要检测学生编号或教师职工号是否重复</li><li>查看帐号（showPerson）—可以选择查看学生或教师的全部信息</li><li>查看机房（showComputer）—查看所有机房的信息</li><li>清空预约（cleanFile）—清空所有预约记录</li><li>注销登录（）—退出登录<br><a href="http://image.camcad.cn/2020/07/2020070907475320.png"><img src="http://image.camcad.cn/2020/07/2020070907475320-1024x500.png"></a></li></ul><h2 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h2><p><strong>创建新项目步骤如下：</strong></p><ul><li>创建新项目</li><li>添加文件</li></ul><h3 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h3><ul><li>打开VS后，点击创建新项目，创建新的C++项目</li></ul><p>如图：<br><img src="http://image.camcad.cn/2020/07/2020070908040855-1024x762.jpg"></p><ul><li>填写项目名称以及选取项目路径，点击确定生成项目。<br><img src="http://image.camcad.cn/2020/07/2020070908091879-1024x747.jpg"></li></ul><h3 id="2-2-添加文件"><a href="#2-2-添加文件" class="headerlink" title="2.2 添加文件"></a>2.2 添加文件</h3><ul><li><p>右键源文件，进行添加文件操作<br><img src="http://image.camcad.cn/2020/07/2020070908124761-1024x762.jpg"></p></li><li><p>填写文件名称，点击添加<br><img src="http://image.camcad.cn/2020/07/2020070908160680-1024x744.jpg"></p></li><li><p>生成文件成功，效果如下图：<br><img src="http://image.camcad.cn/2020/07/20200709081759100-1024x762.jpg"></p></li></ul><h2 id="3、创建主菜单"><a href="#3、创建主菜单" class="headerlink" title="3、创建主菜单"></a>3、创建主菜单</h2><p><strong>功能描述：</strong></p><ul><li>设计主菜单，与用户进行交互</li></ul><h3 id="3-1-菜单实现"><a href="#3-1-菜单实现" class="headerlink" title="3.1 菜单实现"></a>3.1 菜单实现</h3><ul><li>在主函数main中添加菜单提示，代码如下：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;====================  欢迎来到《蚂蚁》预约系统  ====================&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的身份：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t           1.学生代表           \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t           2.教    师           \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t           3.管 理 员           \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t           0.退    出           \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;输入您的选择：&quot;</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如图：<br><img src="http://image.camcad.cn/2020/07/2020070909085733-1024x550.jpg"></p><h3 id="3-2-搭建接口"><a href="#3-2-搭建接口" class="headerlink" title="3.2 搭建接口"></a>3.2 搭建接口</h3><ul><li>接受用户的选择，搭建接口</li><li>在main中添加如下代码：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;     <span class="comment">//用于接收用户的选择</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;====================  欢迎来到《蚂蚁》预约系统  ====================&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的身份：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t           1.学生代表           \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t           2.教    师           \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t           3.管 理 员           \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t           0.退    出           \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;输入您的选择：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;        <span class="comment">//接收用户选择</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">select</span>)     <span class="comment">//根据用户选择 实现不同接口的功能</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:     <span class="comment">//学生代表</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:     <span class="comment">//教    师</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:     <span class="comment">//管 理 员</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:     <span class="comment">//退出系统</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="literal">default</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，输入0、1、2、3、会重新回到界面，输入其他提示输入有误，清屏后重新选择 效果如图：<br><img src="http://image.camcad.cn/2020/07/2020070909141133-1024x546.jpg"> </p><p>至此，界面搭建完毕</p><h2 id="4、退出功能实现"><a href="#4、退出功能实现" class="headerlink" title="4、退出功能实现"></a>4、退出功能实现</h2><h3 id="4-1-退出功能实现"><a href="#4-1-退出功能实现" class="headerlink" title="4.1 退出功能实现"></a>4.1 退出功能实现</h3><p>在main函数分支0选项中，添加退出程序的代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;欢迎下次使用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><img src="http://image.camcad.cn/2020/07/2020070909220564.jpg"></p><h3 id="4-2-测试退出功能"><a href="#4-2-测试退出功能" class="headerlink" title="4.2 测试退出功能"></a>4.2 测试退出功能</h3><p>运行程序，效果如图：<br><img src="http://image.camcad.cn/2020/07/2020070909235514-1024x557.jpg"> </p><p>至此，退出程序功能实现。</p><h2 id="5、创建身份类"><a href="#5、创建身份类" class="headerlink" title="5、创建身份类"></a>5、创建身份类</h2><h3 id="5-1-身份的基类"><a href="#5-1-身份的基类" class="headerlink" title="5.1 身份的基类"></a>5.1 身份的基类</h3><ul><li>在整个系统中，有三种身份，分别为：学生代表、老师以及管理员</li><li>三种身份有其共性也有其特性，因此我们可以将三种身份抽象出一个身份基类<code>Identity</code></li><li>在头文件下创建<code>identity.h</code>文件</li></ul><p>identity.h中添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once    //防止头文件重复定义</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//身份抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Identity</span>      <span class="comment">//同一特性类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作菜单 纯虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">openMenu</span>()</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名称</span></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录密码</span></span><br><span class="line">    <span class="built_in">string</span> m_Pwd;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>效果如图：<br><img src="http://image.camcad.cn/2020/07/202007090944129-1024x594.jpg"></p><h3 id="5-2-学生类"><a href="#5-2-学生类" class="headerlink" title="5.2 学生类"></a>5.2 学生类</h3><h4 id="5-2-1-功能分析"><a href="#5-2-1-功能分析" class="headerlink" title="5.2.1 功能分析"></a>5.2.1 功能分析</h4><h4 id="学生类主要功能是可以通过类中成员函数，实现预约操作"><a href="#学生类主要功能是可以通过类中成员函数，实现预约操作" class="headerlink" title="学生类主要功能是可以通过类中成员函数，实现预约操作"></a>学生类主要功能是可以通过类中成员函数，实现预约操作</h4><h4 id="学生类中主要功能有："><a href="#学生类中主要功能有：" class="headerlink" title="学生类中主要功能有："></a>学生类中主要功能有：</h4><ul><li>1.显示学生操作的菜单界面</li><li>2.申请预约</li><li>3.查看自身预约</li><li>4.查看所有预约</li><li>5.取消预约</li></ul><h4 id="5-2-2-类的创建"><a href="#5-2-2-类的创建" class="headerlink" title="5.2.2 类的创建"></a>5.2.2 类的创建</h4><ul><li>在头文件以及源文件下创建<code>student.h</code>和<code>student.cpp</code>文件 student.h中添加如下代码：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&quot;Identity.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Student</span> :<span class="title">public</span> <span class="title">Identity</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认构造</span></span><br><span class="line">    Student();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造  参数：学号、姓名、密码</span></span><br><span class="line">    Student(<span class="built_in">int</span> id, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作菜单</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">openMenu</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申请预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">applyOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看自身的预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showMyOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看所有预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showAllOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取消预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~Student();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学号</span></span><br><span class="line">    <span class="built_in">int</span> m_Id;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>student.cpp中添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&quot;student.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Student::Student()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造  参数：学号、姓名、密码</span></span><br><span class="line">Student::Student(<span class="built_in">int</span> id, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作菜单</span></span><br><span class="line"><span class="keyword">void</span> Student::openMenu()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="keyword">void</span> Student::applyOrder()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看自身的预约</span></span><br><span class="line"><span class="keyword">void</span> Student::showMyOrder()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="keyword">void</span> Student::showAllOrder()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="keyword">void</span> Student::cancelOrder()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">Student::~Student()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-教师类"><a href="#5-3-教师类" class="headerlink" title="5.3 教师类"></a>5.3 教师类</h3><h4 id="5-3-1-功能分析"><a href="#5-3-1-功能分析" class="headerlink" title="5.3.1 功能分析"></a>5.3.1 功能分析</h4><h4 id="教师类主要功能是查看学生的预约，并进行审核"><a href="#教师类主要功能是查看学生的预约，并进行审核" class="headerlink" title="教师类主要功能是查看学生的预约，并进行审核"></a>教师类主要功能是查看学生的预约，并进行审核</h4><h4 id="教师类中主要功能有："><a href="#教师类中主要功能有：" class="headerlink" title="教师类中主要功能有："></a>教师类中主要功能有：</h4><ul><li>1.显示教师操作的菜单界面</li><li>2.查看所有预约</li><li>3.审核预约</li></ul><h4 id="5-3-2-类的创建"><a href="#5-3-2-类的创建" class="headerlink" title="5.3.2 类的创建"></a>5.3.2 类的创建</h4><ul><li>在头文件以及源文件下创建<code>teacher.h</code>和<code>teacher.cpp</code>文件</li></ul><p>teacher.h中添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&quot;Identity.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Teacher</span> :<span class="title">public</span> <span class="title">Identity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认构造</span></span><br><span class="line">    Teacher();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造 参数：职工编号、姓名、密码</span></span><br><span class="line">    Teacher(<span class="built_in">int</span> empid, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单界面</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">openMenu</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看所有预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showAllOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//审核预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">validOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//职工编号</span></span><br><span class="line">    <span class="built_in">int</span> m_EmpId;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>teacher.cpp是添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&quot;teacher.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Teacher::Teacher()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造 参数：职工编号、姓名、密码</span></span><br><span class="line">Teacher::Teacher(<span class="built_in">int</span> empid, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="keyword">void</span> Teacher::openMenu()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="keyword">void</span> Teacher::showAllOrder()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//审核预约</span></span><br><span class="line"><span class="keyword">void</span> Teacher::validOrder()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-管理员类"><a href="#5-4-管理员类" class="headerlink" title="5.4 管理员类"></a>5.4 管理员类</h3><h4 id="5-4-1-功能分析"><a href="#5-4-1-功能分析" class="headerlink" title="5.4.1 功能分析"></a>5.4.1 功能分析</h4><h4 id="管理员主要功能是对学生和老师账号管理，查看机房信息以及清空预约记录"><a href="#管理员主要功能是对学生和老师账号管理，查看机房信息以及清空预约记录" class="headerlink" title="管理员主要功能是对学生和老师账号管理，查看机房信息以及清空预约记录"></a>管理员主要功能是对学生和老师账号管理，查看机房信息以及清空预约记录</h4><h4 id="管理员类中主要功能有："><a href="#管理员类中主要功能有：" class="headerlink" title="管理员类中主要功能有："></a>管理员类中主要功能有：</h4><ul><li>1.显示管理员操作的菜单界面</li><li>2.添加账号</li><li>3.查看账号</li><li>4.查看机房信息</li><li>5.清空预约记录</li></ul><h4 id="5-4-2-类的创建"><a href="#5-4-2-类的创建" class="headerlink" title="5.4.2 类的创建"></a>5.4.2 类的创建</h4><ul><li>在头文件以及源文件下创建<code>manager.h</code>和<code>manager.cpp</code>文件</li></ul><p>manager.h中添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&quot;Identity.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Manager</span> :<span class="title">public</span> <span class="title">Identity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//默认构造</span></span><br><span class="line">    Manager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造 参数：姓名，密码</span></span><br><span class="line">    Manager(<span class="built_in">string</span> name, <span class="built_in">string</span> pwd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作菜单</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">openMenu</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加帐号</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addPerson</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看帐号</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPerson</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看机房</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showComputer</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cleanFile</span>()</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>manager.cpp中添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&quot;manager.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Manager::Manager()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造 参数：用户名称，用户密码</span></span><br><span class="line">Manager::Manager(<span class="built_in">string</span> name, <span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作菜单</span></span><br><span class="line"><span class="keyword">void</span> Manager::openMenu()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加帐号</span></span><br><span class="line"><span class="keyword">void</span> Manager::addPerson()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看帐号</span></span><br><span class="line"><span class="keyword">void</span> Manager::showPerson()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看机房</span></span><br><span class="line"><span class="keyword">void</span> Manager::showComputer()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空预约</span></span><br><span class="line"><span class="keyword">void</span> Manager::cleanFile()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，所有身份类创建完毕，效果如图：<br><img src="http://image.camcad.cn/2020/07/2020070911574188.jpg"></p><h2 id="6、登录模块"><a href="#6、登录模块" class="headerlink" title="6、登录模块"></a>6、登录模块</h2><h3 id="6-1-全局文件添加"><a href="#6-1-全局文件添加" class="headerlink" title="6.1 全局文件添加"></a>6.1 全局文件添加</h3><p><strong>功能描述：</strong></p><ul><li>不同的身份可能会用到不同的文件操作，我们可以将所有的文件名定义到一个全局的文件中</li><li>在头文件中添加<code>globalFile.h</code>文件</li><li>并添加如下代码：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管理员文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADMIN_FILE &quot;admin.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//学生文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STUDENT_FILE &quot;student.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//教师文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEACHER_FILE &quot;teacher.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//机房信息文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COMPUTER_FILE &quot;computerRoom.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//订单文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ORDER_FILE &quot;order.txt&quot;</span></span><br></pre></td></tr></table></figure><p>并且在同级目录下，创建这几个文件<br><img src="http://image.camcad.cn/2020/07/2020071002450157-1024x633.jpg"></p><h3 id="6-2-登录函数封装"><a href="#6-2-登录函数封装" class="headerlink" title="6.2 登录函数封装"></a>6.2 登录函数封装</h3><p><strong>功能描述：</strong></p><ul><li>根据用户的选择，进入不同的身份登录</li><li>在 机房预约系统 的.cpp文件中添加全局函数<code>void loginIn(string fileName, int type);</code></li></ul><p><strong>参数：</strong></p><ul><li>fileName—操作的文件名</li><li>type—登录的身份（1代表学生，2代表教师，3代表管理员）</li></ul><p>loginIn中添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once;</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&quot;globalFile.h&quot;</span></span><br><span class="line"><span class="meta">#include&quot;Identity.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;fstream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//登陆功能  参数1：操作的文件名，参数2：类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loginIn</span>(<span class="params"><span class="built_in">string</span> fileName, <span class="built_in">int</span> type</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//登录功能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loginIn</span>(<span class="params"><span class="built_in">string</span> fileName, <span class="built_in">int</span> type</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开文件-读操作</span></span><br><span class="line">    ifs.open(fileName, ios::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件不存在！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        ifs.close();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学号/编号</span></span><br><span class="line">    <span class="built_in">int</span> id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密码</span></span><br><span class="line">    <span class="built_in">string</span> pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>)      <span class="comment">//学生登录</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入学号：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) <span class="comment">//职工登录</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入职工编号：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入用户名：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入密码：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基类创建</span></span><br><span class="line">    Identity *person = NULL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//学生登录验证</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//教师登录验证</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//管理员登录验证</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;验证登录失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在main函数的不同分支中，填入不同的登录接口<br><img src="http://image.camcad.cn/2020/07/2020071004011384.jpg"></li></ul><h3 id="6-3-学生登录实现"><a href="#6-3-学生登录实现" class="headerlink" title="6.3 学生登录实现"></a>6.3 学生登录实现</h3><p>在student.txt文件中添加两条学生信息，用于测试 添加信息：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1001</span> 张三 <span class="number">123</span></span><br><span class="line"><span class="number">1002</span> 李四 <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>第一列 代表 <strong>学号</strong></li><li>第二列 代表 <strong>学生姓名</strong></li><li>第三列 代表 <strong>密码</strong></li></ul><p>效果图：<br><img src="http://image.camcad.cn/2020/07/2020071004503448.jpg"></p><ul><li>在loginIn函数的学生分支中加入如下代码，验证学生身份</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生登录验证</span></span><br><span class="line">        <span class="built_in">int</span> fId = <span class="number">0</span>;    <span class="comment">//文件 学号/编号</span></span><br><span class="line">        <span class="built_in">string</span> fName;   <span class="comment">//文件 用户名</span></span><br><span class="line">        <span class="built_in">string</span> fPwd;    <span class="comment">//文件 密码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//与用户输入的信息做对比</span></span><br><span class="line">            <span class="keyword">if</span> (fId == id &amp;&amp; fName == name &amp;&amp; fPwd == pwd)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;学生验证登录成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">                system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">                person = <span class="keyword">new</span> Student(id, name, pwd);</span><br><span class="line">                <span class="comment">//进入学生身份的子菜单</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>添加代码效果图<br><img src="http://image.camcad.cn/2020/07/2020071004462530.jpg"> </p><p>测试，效果如下：<br><img src="http://image.camcad.cn/2020/07/2020071004474780-1024x767.jpg"></p><h3 id="6-4-教师登录实现"><a href="#6-4-教师登录实现" class="headerlink" title="6.4 教师登录实现"></a>6.4 教师登录实现</h3><p>在teacher.txt文件中添加一条教师信息，用于测试 添加信息：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2001</span> 老赵 <span class="number">321</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>第一列 代表 <strong>职工编号</strong></li><li>第二列 代表 <strong>教师姓名</strong></li><li>第三列 代表 <strong>密码</strong></li></ul><p>效果图：<br><img src="http://image.camcad.cn/2020/07/2020071005034540.jpg"></p><ul><li>在loginIn函数的教师分支中加入如下代码，验证教师身份</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//教师登录验证</span></span><br><span class="line">        <span class="built_in">int</span> fId = <span class="number">0</span>;    <span class="comment">//文件 编号</span></span><br><span class="line">        <span class="built_in">string</span> fName;   <span class="comment">//文件 用户名</span></span><br><span class="line">        <span class="built_in">string</span> fPwd;    <span class="comment">//文件 密码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//与用户输入的信息做对比</span></span><br><span class="line">            <span class="keyword">if</span> (fId == id &amp;&amp; fName == name &amp;&amp; fPwd == pwd)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;教师验证登录成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">                system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">                person = <span class="keyword">new</span> Teacher(id, name, pwd);</span><br><span class="line">                <span class="comment">//进入老师身份的子菜单</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>添加代码效果图<br><img src="http://image.camcad.cn/2020/07/2020071005060249.jpg"></p><p>测试，效果如下：<br><img src="http://image.camcad.cn/2020/07/2020071005071572-1024x754.jpg"></p><h3 id="6-5-管理员登录实现"><a href="#6-5-管理员登录实现" class="headerlink" title="6.5 管理员登录实现"></a>6.5 管理员登录实现</h3><p>在admin.txt文件中添加一条管理员信息，用于测试 添加信息：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin <span class="number">951753</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>第一列 代表 <strong>管理员姓名</strong></li><li>第二列 代表 <strong>密码</strong></li></ul><p>效果图：<br><img src="http://image.camcad.cn/2020/07/2020071005123926.jpg"></p><ul><li>在loginIn函数的管理员分支中加入如下代码，验证管理员身份</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//管理员登录验证</span></span><br><span class="line">        <span class="built_in">string</span> fName;   <span class="comment">//文件 用户名</span></span><br><span class="line">        <span class="built_in">string</span> fPwd;    <span class="comment">//文件 密码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//与用户输入的信息做对比</span></span><br><span class="line">            <span class="keyword">if</span> (fName == name &amp;&amp; fPwd == pwd)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;管理员验证登录成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">                system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">                person = <span class="keyword">new</span> Manager(name, pwd);</span><br><span class="line">                <span class="comment">//进入管理员身份的子菜单</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>添加代码效果图<br><img src="http://image.camcad.cn/2020/07/202007100514255.jpg"></p><p>测试，效果如下：<br><img src="http://image.camcad.cn/2020/07/2020071005153179-1024x697.jpg"> </p><p>至此，所有身份的登录功能全部实现！</p><h2 id="7、管理员模块"><a href="#7、管理员模块" class="headerlink" title="7、管理员模块"></a>7、管理员模块</h2><h3 id="7-1-管理员登录和注销"><a href="#7-1-管理员登录和注销" class="headerlink" title="7.1 管理员登录和注销"></a>7.1 管理员登录和注销</h3><h4 id="7-1-1-构造函数"><a href="#7-1-1-构造函数" class="headerlink" title="7.1.1 构造函数"></a>7.1.1 构造函数</h4><ul><li>在Manager类的有参构造函数中，初始化管理员信息，代码如下：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有参构造 参数：用户名称，用户密码</span></span><br><span class="line">Manager::Manager(<span class="built_in">string</span> name, <span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-2-管理子菜单"><a href="#7-1-2-管理子菜单" class="headerlink" title="7.1.2 管理子菜单"></a>7.1.2 管理子菜单</h4><h4 id="在-机房预约系统-cpp-中，当用户登录的是管理员，添加管理员菜单接口"><a href="#在-机房预约系统-cpp-中，当用户登录的是管理员，添加管理员菜单接口" class="headerlink" title="在 机房预约系统.cpp 中，当用户登录的是管理员，添加管理员菜单接口"></a>在 机房预约系统.cpp 中，当用户登录的是管理员，添加管理员菜单接口</h4><h4 id="将不同的分支提供出来"><a href="#将不同的分支提供出来" class="headerlink" title="将不同的分支提供出来"></a>将不同的分支提供出来</h4><ul><li>1.添加账号</li><li>2.查看账号</li><li>3.查看机房</li><li>4.清空预约</li><li>0.注销登录</li><li>实现注销功能</li></ul><p>在 机房预约系统.cpp 中添加全局函数<code>void managerMenu(Identity * &amp;p);</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//管理员 子菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">managerMenu</span>(<span class="params">Identity * &amp;p</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//调用 管理员 子菜单</span></span><br><span class="line">        p-&gt;openMenu();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将父类指针 转为子类指针，调用子类里其他接口</span></span><br><span class="line">        Manager *ma = (Manager*)p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收用户选项</span></span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">1</span>)        <span class="comment">//添加账号</span></span><br><span class="line">        &#123;</span><br><span class="line">            ma-&gt;addPerson();</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;添加账号&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">2</span>)   <span class="comment">//查看账号</span></span><br><span class="line">        &#123;</span><br><span class="line">            ma-&gt;showPerson();</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;查看账号&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">3</span>)   <span class="comment">//查看机房</span></span><br><span class="line">        &#123;</span><br><span class="line">            ma-&gt;showComputer();</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;查看机房&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">4</span>)   <span class="comment">//清空预约</span></span><br><span class="line">        &#123;</span><br><span class="line">            ma-&gt;cleanFile();</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;清空预约&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">0</span>)   <span class="comment">//注销登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            delete p;       <span class="comment">//释放堆区对象</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;注销登录成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-3-菜单功能实现"><a href="#7-1-3-菜单功能实现" class="headerlink" title="7.1.3 菜单功能实现"></a>7.1.3 菜单功能实现</h4><p>在manager.cpp中实现成员<code>void manager::openMenu()</code>代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//操作菜单</span></span><br><span class="line"><span class="keyword">void</span> Manager::openMenu()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;欢迎管理员：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; 登录&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           1.添加账号           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           2.查看账号           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           3.查看机房           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           4.清空预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           0.注销登录           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-1-4-接口对接"><a href="#7-1-4-接口对接" class="headerlink" title="7.1.4 接口对接"></a>7.1.4 接口对接</h4><ul><li>管理员成功登录后，调用管理员子菜单界面</li><li>在管理员登录验证分支，添加代码：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入管理员身份的子菜单</span></span><br><span class="line">managerMenu(person);</span><br></pre></td></tr></table></figure><p>添加效果如下：<br><img src="http://image.camcad.cn/2020/07/2020071008460118.jpg"> </p><p>测试对接，效果如图：<br><img src="http://image.camcad.cn/2020/07/2020071005153179-1024x697.jpg"> </p><p>登录成功：<br><img src="http://image.camcad.cn/2020/07/2020071008484234-1024x522.jpg"> </p><p>注销登录：<br><img src="http://image.camcad.cn/2020/07/2020071008495484.jpg"> </p><p>至此，管理员身份可以成功登录以及注销。</p><h3 id="7-2-添加账号"><a href="#7-2-添加账号" class="headerlink" title="7.2 添加账号"></a>7.2 添加账号</h3><p><strong>功能描述：</strong></p><ul><li>给学生或教师添加新的账号</li></ul><p><strong>功能要求：</strong></p><ul><li>添加时学生学号不能重复、教师职工号不能重复</li></ul><h4 id="7-2-1-添加功能实现"><a href="#7-2-1-添加功能实现" class="headerlink" title="7.2.1 添加功能实现"></a>7.2.1 添加功能实现</h4><p>在manager.cpp的<code>addperson</code>成员函数中，实现添加新账号功能，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加帐号</span></span><br><span class="line"><span class="keyword">void</span> Manager::addPerson()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;     <span class="comment">//接收用户的选择</span></span><br><span class="line">    <span class="built_in">string</span> fileName;    <span class="comment">//文件名称</span></span><br><span class="line">    <span class="built_in">string</span> tip;         <span class="comment">//提示需要输入的ip号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入添加账号类型：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1.添加学生&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2.添加教师&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fileName = STUDENT_FILE;</span><br><span class="line">            tip = <span class="string">&quot;请输入学号：&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fileName = TEACHER_FILE;</span><br><span class="line">            tip = <span class="string">&quot;请输入职工编号：&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);  </span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);        <span class="comment">//清屏</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>-&gt;openMenu();    <span class="comment">//调用 管理员 子菜单</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    ofstream ofs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开文件-写内容</span></span><br><span class="line">    ofs.open(fileName, ios::<span class="keyword">out</span>  ios::app);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取用户的输入</span></span><br><span class="line">    <span class="built_in">int</span> id;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> pwd;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; tip;  <span class="comment">//学号或职工编号</span></span><br><span class="line">    cin &gt;&gt; id;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入用户名：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入密码：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向文件添加数据</span></span><br><span class="line">    ofs &lt;&lt; id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; pwd &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ofs.close();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;添加成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试添加学生：<br><img src="http://image.camcad.cn/2020/07/2020071010554530-1024x894.jpg"> </p><p>成功在学生文件中添加了一条信息<br><img src="http://image.camcad.cn/2020/07/2020071010570024.jpg"></p><p>测试添加教师：<br><img src="http://image.camcad.cn/2020/07/2020071011001271.jpg"></p><p>成功在教师文件中添加了一条信息<br><img src="http://image.camcad.cn/2020/07/2020071011004771.jpg"></p><h4 id="7-2-2-去重操作"><a href="#7-2-2-去重操作" class="headerlink" title="7.2.2 去重操作"></a>7.2.2 去重操作</h4><p><strong>功能描述：</strong>添加新账号时，如果是重复的学生编号，或是重复的教师职工编号，提示有误</p><h5 id="7-2-2-1-读取信息"><a href="#7-2-2-1-读取信息" class="headerlink" title="7.2.2.1 读取信息"></a>7.2.2.1 读取信息</h5><ul><li>要去除重复的账号，首先要先将学生和教师的账号信息获取到程序中，方可检测</li><li>在manager.h中，添加两个容器，用于存放学生和老师的信息</li><li>添加一个新的成员函数<code>void initVector();</code>初始化容器</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="keyword">void</span> Manager::initVector()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;vStu.clear();</span><br><span class="line">    <span class="keyword">this</span>-&gt;vTea.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取学生文件中信息</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line">    ifs.open(STUDENT_FILE, ios::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//char ch;</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/判断文件是否存在</span></span><br><span class="line">    <span class="comment">//if (!ifs.is_open())</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; &quot;学生 文件读取失败！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//  ifs.close();</span></span><br><span class="line">    <span class="comment">//  return;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/判断文件是否为空</span></span><br><span class="line">    <span class="comment">//ifs &gt;&gt; ch;</span></span><br><span class="line">    <span class="comment">//if (ifs.eof())</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; &quot;学生 文件为空！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//  ifs.close();</span></span><br><span class="line">    <span class="comment">//  return;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//ifs.putback(ch);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读内容</span></span><br><span class="line">    Student s;</span><br><span class="line">    <span class="comment">//将数据放入到容器中</span></span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; s.m_Id &amp;&amp; ifs &gt;&gt; s.m_Name &amp;&amp; ifs &gt;&gt; s.m_Pwd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;vStu.push_back(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;学生数量为：&quot; &lt;&lt; this-&gt;vStu.size() &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取教师文件中信息</span></span><br><span class="line">    ifs.open(TEACHER_FILE, ios::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/判断文件是否存在</span></span><br><span class="line">    <span class="comment">//if (!ifs.is_open())</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; &quot;教师 文件读取失败！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//  ifs.close();</span></span><br><span class="line">    <span class="comment">//  return;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/判断文件是否为空</span></span><br><span class="line">    <span class="comment">//ifs &gt;&gt; ch;</span></span><br><span class="line">    <span class="comment">//if (ifs.eof())</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; &quot;教师 文件为空！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//  ifs.close();</span></span><br><span class="line">    <span class="comment">//  return;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//ifs.putback(ch);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读内容</span></span><br><span class="line">    Teacher t;</span><br><span class="line">    <span class="comment">//将数据放入到容器中</span></span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; t.m_EmpId &amp;&amp; ifs &gt;&gt; t.m_Name &amp;&amp; ifs &gt;&gt; t.m_Pwd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;vTea.push_back(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;教师数量为：&quot; &lt;&lt; this-&gt;vTea.size() &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在有参构造函数中，调用初始化容器函数<code>void initVector();</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有参构造 参数：用户名称，用户密码</span></span><br><span class="line">Manager::Manager(<span class="built_in">string</span> name, <span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;initVector();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试，运行代码可以看到测试代码获取当前学生和教师数量<br><img src="http://image.camcad.cn/2020/07/2020071013203230-1024x617.jpg"></p><h5 id="7-2-2-2-去重函数封装"><a href="#7-2-2-2-去重函数封装" class="headerlink" title="7.2.2.2 去重函数封装"></a>7.2.2.2 去重函数封装</h5><p>在manager.h文件中添加成员函数<code>bool checkRepeat(int id,int type);</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查重复 参数：（传入id,传入类型）返回值：（true代表有重复，false代表没有重复）</span></span><br><span class="line"><span class="function"><span class="built_in">bool</span> <span class="title">checkRepeat</span>(<span class="params"><span class="built_in">int</span> id, <span class="built_in">int</span> type</span>)</span>;</span><br></pre></td></tr></table></figure><p>在manager.cpp文件中实现成员函数<code>bool checkRepeat(int id,int type);</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查重复 参数：（传入id,传入类型）返回值：（true代表有重复，false代表没有重复）</span></span><br><span class="line"><span class="built_in">bool</span> Manager::checkRepeat(<span class="built_in">int</span> id, <span class="built_in">int</span> type)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//学生检查</span></span><br><span class="line">        <span class="keyword">for</span> (vector&lt;Student&gt;::iterator it = vStu.begin(); it != vStu.end(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (it-&gt;m_Id == id)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//老师检查</span></span><br><span class="line">        <span class="keyword">for</span> (vector&lt;Teacher&gt;::iterator it = vTea.begin(); it != vTea.end(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (it-&gt;m_EmpId == id)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-2-2-3-添加去重操作"><a href="#7-2-2-3-添加去重操作" class="headerlink" title="7.2.2.3 添加去重操作"></a>7.2.2.3 添加去重操作</h5><p>在添加学生编号或者教师职工时，检测是否有重复，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加帐号</span></span><br><span class="line"><span class="keyword">void</span> Manager::addPerson()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;     <span class="comment">//接收用户的选择</span></span><br><span class="line">    <span class="built_in">string</span> fileName;    <span class="comment">//文件名称</span></span><br><span class="line">    <span class="built_in">string</span> tip;         <span class="comment">//提示需要输入的ip号</span></span><br><span class="line">    <span class="built_in">string</span> errorTip;    <span class="comment">//重复错误提示</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入添加账号类型：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1.添加学生&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2.添加教师&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fileName = STUDENT_FILE;</span><br><span class="line">            tip = <span class="string">&quot;请输入学号：&quot;</span>;</span><br><span class="line">            errorTip = <span class="string">&quot;学号重复，请重新输入！\n&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fileName = TEACHER_FILE;</span><br><span class="line">            tip = <span class="string">&quot;请输入职工编号：&quot;</span>;</span><br><span class="line">            errorTip = <span class="string">&quot;职工编号重复，请重新输入！\n&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);  </span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);        <span class="comment">//清屏</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>-&gt;openMenu();    <span class="comment">//调用 管理员 子菜单</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    ofstream ofs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开文件-写内容</span></span><br><span class="line">    ofs.open(fileName, ios::<span class="keyword">out</span>  ios::app);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取用户的输入</span></span><br><span class="line">    <span class="built_in">int</span> id;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; tip;  <span class="comment">//学号或职工编号</span></span><br><span class="line">        cin &gt;&gt; id;</span><br><span class="line">        <span class="built_in">bool</span> ret = <span class="keyword">this</span>-&gt;checkRepeat(id, <span class="keyword">select</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ret)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; errorTip;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入用户名：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入密码：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向文件添加数据</span></span><br><span class="line">    ofs &lt;&lt; id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; pwd &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ofs.close();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;添加成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码位置如图：<br><img src="http://image.camcad.cn/2020/07/2020071106495888-481x1024.jpg"> </p><p>检测效果，如下：<br><img src="http://image.camcad.cn/2020/07/202007110652085-1024x829.jpg"></p><h5 id="7-2-2-4-bug解决"><a href="#7-2-2-4-bug解决" class="headerlink" title="7.2.2.4 bug解决"></a>7.2.2.4 bug解决</h5><p>bug描述：</p><ul><li>虽然可以检测重复的账号，但是刚添加的账号由于没有更新到容器中，因此不会做检测</li><li>导致刚加入的账号的学生号或者职工编号，再次添加时依然可以重复</li></ul><p>解决方案：</p><ul><li>每次添加新账号时，重新初始化容器</li></ul><p>在添加完毕后，加入代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initVector</span>()</span>;</span><br></pre></td></tr></table></figure><p>加入位置如图：<br><img src="http://image.camcad.cn/2020/07/2020071110375144.jpg"></p><p>再次测试，刚加入的新账号就不会有重复添加了！</p><h4 id="7-3-1-显示功能实现"><a href="#7-3-1-显示功能实现" class="headerlink" title="7.3.1 显示功能实现"></a>7.3.1 显示功能实现</h4><p>在manager.cpp的<code>showPerson</code>成员函数中，实现显示账号功能，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印输出类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">myPrintClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学生 仿函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span>()(<span class="params">Student &amp;s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;学号：&quot;</span> &lt;&lt; s.m_Id &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; s.m_Name &lt;&lt; <span class="string">&quot;\t密码：&quot;</span> &lt;&lt; s.m_Pwd &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//教师 仿函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span>()(<span class="params">Teacher &amp;t</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;职工编号：&quot;</span> &lt;&lt; t.m_EmpId &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; t.m_Name &lt;&lt; <span class="string">&quot;\t密码：&quot;</span> &lt;&lt; t.m_Pwd &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看帐号</span></span><br><span class="line"><span class="keyword">void</span> Manager::showPerson()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//接收用户的输入</span></span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1、查看所有学生&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2、查看所有教师&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//遍历学生容器 所有元素</span></span><br><span class="line">            for_each(vStu.begin(), vStu.end(), myPrintClass());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//遍历教师容器 所有元素</span></span><br><span class="line">            for_each(vTea.begin(), vTea.end(), myPrintClass());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用 管理员 子菜单</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;openMenu();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-2-测试"><a href="#7-3-2-测试" class="headerlink" title="7.3.2 测试"></a>7.3.2 测试</h3><p>测试查看学生效果<br><img src="http://image.camcad.cn/2020/07/202007110800123.jpg"> </p><p>测试查看教师效果<br><img src="http://image.camcad.cn/2020/07/2020071108023215-1024x725.jpg"> </p><p>至此，显示账号功能实现完毕！</p><h3 id="7-4-查看机房"><a href="#7-4-查看机房" class="headerlink" title="7.4 查看机房"></a>7.4 查看机房</h3><h4 id="7-4-1-添加机房信息"><a href="#7-4-1-添加机房信息" class="headerlink" title="7.4.1 添加机房信息"></a>7.4.1 添加机房信息</h4><p>案例需求中，机房一共有三个，其中1号机房容量20台设备，2号50台，3号100台。 我们可以将信息录入computerRoom.txt中。<br><img src="http://image.camcad.cn/2020/07/2020071109282153-1024x443.jpg"></p><h4 id="7-4-2-机房类创建"><a href="#7-4-2-机房类创建" class="headerlink" title="7.4.2 机房类创建"></a>7.4.2 机房类创建</h4><p>在头文件，创建新的文件<code>computerRoom.h</code> 并添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//机房类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">computerRoom</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//机房编号</span></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//机房最大容量</span></span><br><span class="line">    <span class="built_in">int</span> m_Maximum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="7-4-3-初始化机房信息"><a href="#7-4-3-初始化机房信息" class="headerlink" title="7.4.3 初始化机房信息"></a>7.4.3 初始化机房信息</h4><p>在Manager管理类下，添加机房的容器，用于保存机房信息</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//机房容器</span></span><br><span class="line">vector&lt;computerRoom&gt;vCom;</span><br></pre></td></tr></table></figure><p>在manager.cpp文件下，<code>void initVector();</code>函数中，追加如下代码，初始化机房信息：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="keyword">this</span>-&gt;vCom.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取机房文件中信息</span></span><br><span class="line">ifs.open(COMPUTER_FILE, ios::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span>/判断文件是否存在</span></span><br><span class="line"><span class="comment">//if (!ifs.is_open())</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  cout &lt;&lt; &quot;机房 文件读取失败！&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//  ifs.close();</span></span><br><span class="line"><span class="comment">//  return;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span>/判断文件是否为空</span></span><br><span class="line"><span class="comment">//ifs &gt;&gt; ch;</span></span><br><span class="line"><span class="comment">//if (ifs.eof())</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  cout &lt;&lt; &quot;机房 文件为空！&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//  ifs.close();</span></span><br><span class="line"><span class="comment">//  return;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//ifs.putback(ch);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读内容</span></span><br><span class="line">computerRoom c;</span><br><span class="line"><span class="comment">//将数据放入到容器中</span></span><br><span class="line"><span class="keyword">while</span> (ifs &gt;&gt; c.m_Name &amp;&amp; ifs &gt;&gt; c.m_Maximum)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;vCom.push_back(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;机房数量为：&quot; &lt;&lt; this-&gt;vCom.size() &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line">ifs.close();</span><br></pre></td></tr></table></figure><p>位置如图：<br><a href="http://image.camcad.cn/2020/07/2020071110402642.jpg"><img src="http://image.camcad.cn/2020/07/2020071110402642-353x1024.jpg"></a></p><h4 id="7-4-4-显示机房信息"><a href="#7-4-4-显示机房信息" class="headerlink" title="7.4.4 显示机房信息"></a>7.4.4 显示机房信息</h4><p>在Manager类的showComputer成员函数中添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看机房</span></span><br><span class="line"><span class="keyword">void</span> Manager::showComputer()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;机房信息如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历机房容器 所有元素</span></span><br><span class="line">    for_each(vCom.begin(), vCom.end(), myPrintClass());</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在manager.cpp文件下，<code>class myPrintClass</code>类中，追加如下代码，机房信息 仿函数：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//机房 仿函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span>()(<span class="params">computerRoom &amp;c</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;机房编号：&quot;</span> &lt;&lt; c.m_Name &lt;&lt; <span class="string">&quot;\t机房最大容量：&quot;</span> &lt;&lt; c.m_Maximum &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>位置如图：<br><img src="http://image.camcad.cn/2020/07/2020071109421382-1024x593.jpg"></p><p>测试显示机房信息功能：<br><img src="http://image.camcad.cn/2020/07/2020071109433054-1024x692.jpg"></p><h3 id="7-5-清空预约"><a href="#7-5-清空预约" class="headerlink" title="7.5 清空预约"></a>7.5 清空预约</h3><p>功能描述： 清空生成的<code>order.txt</code>预约文件</p><h4 id="7-5-1-清空功能实现"><a href="#7-5-1-清空功能实现" class="headerlink" title="7.5.1 清空功能实现"></a>7.5.1 清空功能实现</h4><p>在Manager.cpp的cleanFile成员函数中添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清空预约</span></span><br><span class="line"><span class="keyword">void</span> Manager::cleanFile()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建流文件（如果文件存在先删除，再创建)</span></span><br><span class="line">    <span class="function">ofstream <span class="title">ofs</span>(<span class="params">ORDER_FILE, ios::trunc</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ofs.close();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;清空成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试清空，可以随意写入一些信息在order.txt中，然后调用cleanFile清空文件接口，查看是否清空干净。</p><h2 id="8、学生模块"><a href="#8、学生模块" class="headerlink" title="8、学生模块"></a>8、学生模块</h2><h3 id="8-1-学生登录和注销"><a href="#8-1-学生登录和注销" class="headerlink" title="8.1 学生登录和注销"></a>8.1 学生登录和注销</h3><h4 id="8-1-1-构造函数"><a href="#8-1-1-构造函数" class="headerlink" title="8.1.1 构造函数"></a>8.1.1 构造函数</h4><ul><li>在Student类的有参构造函数中，初始化学生信息，代码如下：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Student::Student(<span class="built_in">int</span> id, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化属性</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-2-管理员子菜单"><a href="#8-1-2-管理员子菜单" class="headerlink" title="8.1.2 管理员子菜单"></a>8.1.2 管理员子菜单</h4><h5 id="在-机房预约系统-cpp中，当用户登录的是学生，添加学生菜单接口"><a href="#在-机房预约系统-cpp中，当用户登录的是学生，添加学生菜单接口" class="headerlink" title="在 机房预约系统.cpp中，当用户登录的是学生，添加学生菜单接口"></a>在 机房预约系统.cpp中，当用户登录的是学生，添加学生菜单接口</h5><h5 id="将不同的分支提供出来-1"><a href="#将不同的分支提供出来-1" class="headerlink" title="将不同的分支提供出来"></a>将不同的分支提供出来</h5><ul><li>申请预约</li><li>我的预约</li><li>所有预约</li><li>取消预约</li></ul><h4 id="实现注销功能"><a href="#实现注销功能" class="headerlink" title="实现注销功能"></a>实现注销功能</h4><p>添加全局函数<code>void studentMenu(Identity * &amp;manager);</code>代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生代表 子菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">studentMenu</span>(<span class="params">Identity * &amp;p</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//调用 学生代表 子菜单</span></span><br><span class="line">        p-&gt;openMenu();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将父类指针 转为子类指针，调用子类里其他接口</span></span><br><span class="line">        Student *stu = (Student*)p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收用户选项</span></span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">1</span>)        <span class="comment">//申请预约</span></span><br><span class="line">        &#123;</span><br><span class="line">            stu-&gt;applyOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">2</span>)   <span class="comment">//查看我的预约</span></span><br><span class="line">        &#123;</span><br><span class="line">            stu-&gt;showMyOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">3</span>)   <span class="comment">//查看所有预约</span></span><br><span class="line">        &#123;</span><br><span class="line">            stu-&gt;showAllOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">4</span>)   <span class="comment">//取消预约</span></span><br><span class="line">        &#123;</span><br><span class="line">            stu-&gt;cancelOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">0</span>)   <span class="comment">//注销登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            delete p;       <span class="comment">//释放堆区对象</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;注销登录成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-3-菜单功能实现"><a href="#8-1-3-菜单功能实现" class="headerlink" title="8.1.3 菜单功能实现"></a>8.1.3 菜单功能实现</h4><ul><li>在实现成员函数<code>void student::operMenu();</code>代码如下：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//操作菜单</span></span><br><span class="line"><span class="keyword">void</span> Student::openMenu()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;欢迎学生代表：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; 登录&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           1.申请预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           2.我的预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           3.所有预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           4.取消预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           0.注销登录           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-1-4-接口对接"><a href="#8-1-4-接口对接" class="headerlink" title="8.1.4 接口对接"></a>8.1.4 接口对接</h4><ul><li>学生登录成功后，调用学生子菜单界面</li><li>在学生登录分支中，添加如下代码：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入学生身份的子菜单</span></span><br><span class="line">studentMenu(person);</span><br></pre></td></tr></table></figure><p>添加效果如图：<br><img src="http://image.camcad.cn/2020/07/2020071205503280.jpg"> </p><p>测试对接，效果如图： 登录验证通过:<br><img src="http://image.camcad.cn/2020/07/2020071205525951-1024x775.jpg"> </p><p>学生代表子菜单：<br><img src="http://image.camcad.cn/2020/07/2020071205540786-1024x541.jpg"> </p><p>注销登录：<br><img src="http://image.camcad.cn/2020/07/2020071205550942-1024x604.jpg"></p><h3 id="8-2-申请预约"><a href="#8-2-申请预约" class="headerlink" title="8.2 申请预约"></a>8.2 申请预约</h3><h4 id="8-2-1-获取机房信息"><a href="#8-2-1-获取机房信息" class="headerlink" title="8.2.1 获取机房信息"></a>8.2.1 获取机房信息</h4><ul><li>在申请预约时，学生可以看到机房的信息，因此我们需要让学生获取机房的信息。</li></ul><p>在student.h中添加新的成员函数及容器 如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容器初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initVector</span>()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//机房容器</span></span><br><span class="line">vector&lt;computerRoom&gt;vCom;</span><br></pre></td></tr></table></figure><p>在student.cpp文件中实现成员函数<code>void initVector();</code>代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容器初始化</span></span><br><span class="line"><span class="keyword">void</span> Student::initVector()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;vCom.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line">    ifs.open(COMPUTER_FILE, ios::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建临时接收类</span></span><br><span class="line">    computerRoom com;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; com.m_Name &amp;&amp; ifs &gt;&gt; com.m_Maximum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将读取的信息放入到 容器中</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;vCom.push_back(com);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在学生的有参构造函数中追加如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//容器初始化</span></span><br><span class="line"><span class="keyword">this</span>-&gt;initVector();</span><br></pre></td></tr></table></figure><p>追加位置如图：<br><img src="http://image.camcad.cn/2020/07/2020071304283065.jpg"> </p><p>至此，vCom容器中保存了所有机房的信息</p><h4 id="8-2-2-预约功能实现"><a href="#8-2-2-预约功能实现" class="headerlink" title="8.2.2 预约功能实现"></a>8.2.2 预约功能实现</h4><p>在student.cpp中实现成员函数<code>void Student::applyOrder();</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="keyword">void</span> Student::applyOrder()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> date = <span class="number">0</span>;           <span class="comment">//周一~周五</span></span><br><span class="line">    <span class="built_in">int</span> interval = <span class="number">0</span>;       <span class="comment">//上午、下午</span></span><br><span class="line">    <span class="built_in">int</span> roomId = <span class="number">0</span>;         <span class="comment">//机房容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;机房开放的时间为周一至周五！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入申请预约的时间：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1、周一&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2、周二&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;3、周三&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;4、周四&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;5、周五&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; date;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> &lt;= date &amp;&amp; date &lt;= <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用 学生 子菜单</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;openMenu();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入申请预约的时间段：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1、上午&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2、下午&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; interval;</span><br><span class="line">        <span class="keyword">if</span> (interval &gt;= <span class="number">1</span> &amp;&amp; interval &lt;= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择机房：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; vCom.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="keyword">this</span>-&gt;vCom[i].m_Name &lt;&lt; <span class="string">&quot;机房 容量：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;vCom[i].m_Maximum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; roomId;</span><br><span class="line">        <span class="keyword">if</span> (roomId &gt;= <span class="number">1</span> &amp;&amp; roomId &lt;= <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    <span class="function">ofstream <span class="title">ofs</span>(<span class="params">ORDER_FILE, ios::<span class="keyword">out</span>  ios::app</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入数据</span></span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;date:&quot;</span> &lt;&lt; date &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;interval:&quot;</span> &lt;&lt; interval &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;stuId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;stuName:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;roomId:&quot;</span> &lt;&lt; roomId &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;status:&quot;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;      <span class="comment">//1：审核中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ofs.close();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;预约成功，审核中&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，测试代码：<br><img src="http://image.camcad.cn/2020/07/2020071304331824-1024x969.jpg"> </p><p>在order.txt文件中生成如下内容：<br><img src="http://image.camcad.cn/2020/07/2020071304374378-1024x379.jpg"></p><h3 id="8-3-显示预约"><a href="#8-3-显示预约" class="headerlink" title="8.3 显示预约"></a>8.3 显示预约</h3><h4 id="8-3-1-创建预约类"><a href="#8-3-1-创建预约类" class="headerlink" title="8.3.1 创建预约类"></a>8.3.1 创建预约类</h4><p><strong>功能描述：</strong>显示预约记录时，需要从文件中获取到所有记录，用来显示，创建预约的类来管理记录以及更新 </p><p><strong>原理：</strong><br><img src="http://image.camcad.cn/2020/07/2020071308274933-1024x353.jpg"> </p><p>在头文件以及源文件下分别创建<code>orderFile.h</code>和<code>orderFile.cpp</code>文件 orderFile.h中添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&quot;globalFile.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;map&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&lt;fstream&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">orderFile</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    orderFile();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新预约记录</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initMap</span>(<span class="params"><span class="built_in">string</span> str</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//临时容器</span></span><br><span class="line">    map&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;m_tempMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录的容器 key---记录的条数 value---具体要求记录的键值对信息</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, map&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; m_OrderData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//预约记录条数</span></span><br><span class="line">    <span class="built_in">int</span> m_Size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在orderFile.cpp文件中实现<code>void initMap(string str);</code>初始化容器函数，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="keyword">void</span> orderFile::initMap(<span class="built_in">string</span> str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> tempKey;     <span class="comment">//临时Key值</span></span><br><span class="line">    <span class="built_in">string</span> tempValue;   <span class="comment">//临时Value值</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> start = <span class="number">0</span>;              <span class="comment">//起始位置</span></span><br><span class="line">    <span class="built_in">int</span> pos = str.find(<span class="string">&quot;:&quot;</span>);  <span class="comment">//返回&quot;:&quot;的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//不等于 -1 执行</span></span><br><span class="line">    <span class="keyword">if</span> (pos != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tempKey = str.substr(start, pos);</span><br><span class="line">        tempValue = str.substr(pos + <span class="number">1</span>, str.size() - pos - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将分割的数据 放入到容器中</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_tempMap.insert(make_pair(tempKey, tempValue));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造函数</strong>中获取所有信息，并存放在容器中，添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">orderFile::orderFile()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_OrderData.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//预约记录个数</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文件中的数据 </span></span><br><span class="line">    <span class="built_in">string</span> date;        <span class="comment">//时间</span></span><br><span class="line">    <span class="built_in">string</span> interval;    <span class="comment">//时间段</span></span><br><span class="line">    <span class="built_in">string</span> stuId;       <span class="comment">//学生学号</span></span><br><span class="line">    <span class="built_in">string</span> stuName;     <span class="comment">//学生姓名</span></span><br><span class="line">    <span class="built_in">string</span> roomId;      <span class="comment">//机房编号</span></span><br><span class="line">    <span class="built_in">string</span> status;      <span class="comment">//预约状态</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    <span class="function">ifstream <span class="title">ifs</span>(<span class="params">ORDER_FILE, ios::<span class="keyword">in</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取内容</span></span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; date &amp;&amp; ifs &gt;&gt; interval &amp;&amp; ifs &gt;&gt; stuId &amp;&amp; ifs &gt;&gt;</span><br><span class="line">        stuName &amp;&amp; ifs &gt;&gt; roomId &amp;&amp; ifs &gt;&gt; status)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化临时容器</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_tempMap.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数据放入到临时容器中</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(date);     <span class="comment">//时间</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(interval); <span class="comment">//时间段</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(stuId);        <span class="comment">//学生学号</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(stuName);      <span class="comment">//学生姓名</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(roomId);       <span class="comment">//机房编号</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(status);       <span class="comment">//预约状态</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数据放入到容器中</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_OrderData.insert(make_pair(<span class="keyword">this</span>-&gt;m_Size, <span class="keyword">this</span>-&gt;m_tempMap));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//预约记录个数</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新预约记录的成员函数updateOrder代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新预约记录</span></span><br><span class="line"><span class="keyword">void</span> orderFile::updateOrder()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;     <span class="comment">//预约记录0条，直接return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    <span class="function">ofstream <span class="title">ofs</span>(<span class="params">ORDER_FILE, ios::<span class="keyword">out</span>  ios::trunc</span>)</span>;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;date:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;date&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;interval:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;interval&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;stuId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;stuId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;stuName:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;stuName&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;roomId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;roomId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;status:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;status&quot;</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ofs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-2-显示自身预约"><a href="#8-3-2-显示自身预约" class="headerlink" title="8.3.2 显示自身预约"></a>8.3.2 显示自身预约</h4><p>首先我们先添加几条预约记录，可以用程序添加或者直接修改order.txt文件 order.txt文件内容如下：比如我们有三名同学分别产生 了3条预约记录<br><img src="http://image.camcad.cn/2020/07/2020071314253295-1024x386.jpg"></p><p>在Student类的<code>void Student::showMyOrder();</code>成员函数中，添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看自身的预约</span></span><br><span class="line"><span class="keyword">void</span> Student::showMyOrder()</span><br><span class="line">&#123;</span><br><span class="line">    orderFile ord;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ord.m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; ord.m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//string 转 int</span></span><br><span class="line">        <span class="comment">//string 利用 .c_str() 转 const char *</span></span><br><span class="line">        <span class="comment">//利用 atoi(const char *) 转 int</span></span><br><span class="line">        <span class="keyword">if</span> (atoi(ord.m_OrderData[i][<span class="string">&quot;stuId&quot;</span>].c_str()) == <span class="keyword">this</span>-&gt;m_Id)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;预约日期：周&quot;</span> &lt;&lt; ord.m_OrderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;   时段：&quot;</span> &lt;&lt; (ord.m_OrderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;   机房：&quot;</span> &lt;&lt; ord.m_OrderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1审核中 2已预约 0取消预约 -1预约失败</span></span><br><span class="line">            <span class="built_in">string</span> status = <span class="string">&quot;   状态：&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (ord.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ord.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                status += <span class="string">&quot;已预约&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ord.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;0&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                status += <span class="string">&quot;预约失败&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试效果如图：<br><img src="http://image.camcad.cn/2020/07/202007131427211-1024x676.jpg"></p><h4 id="8-3-3-显示所有预约"><a href="#8-3-3-显示所有预约" class="headerlink" title="8.3.3 显示所有预约"></a>8.3.3 显示所有预约</h4><p>在Student类<code>void Student::showAllOrder();</code>成员函数，添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="keyword">void</span> Student::showAllOrder()</span><br><span class="line">&#123;</span><br><span class="line">    orderFile of;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;、&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;预约日期：周&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t时段：&quot;</span> &lt;&lt; (of.m_OrderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t学号：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t机房编号：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> status = <span class="string">&quot;\t状态：&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;已预约&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;0&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;预约失败&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试效果如图：<br><img src="http://image.camcad.cn/2020/07/2020071315091221-1024x464.jpg"></p><h3 id="8-4-取消预约"><a href="#8-4-取消预约" class="headerlink" title="8.4 取消预约"></a>8.4 取消预约</h3><p>在Student类的<code>void Student::cancelOrder();</code>成员函数中，添加如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="keyword">void</span> Student::cancelOrder()</span><br><span class="line">&#123;</span><br><span class="line">    orderFile of;</span><br><span class="line">    <span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v;     <span class="comment">//存放在最大容器中的下标编号</span></span><br><span class="line">    <span class="built_in">int</span> index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先判断自身学号</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Id == atoi(of.m_OrderData[i][<span class="string">&quot;stuId&quot;</span>].c_str()))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//再筛选状态 审核中或预约成功</span></span><br><span class="line">            <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>  of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//放入到容器中</span></span><br><span class="line">                v.push_back(i);</span><br><span class="line"></span><br><span class="line">                cout &lt;&lt; index &lt;&lt; <span class="string">&quot;、&quot;</span>;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;预约日期：周&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;\t时段：&quot;</span> &lt;&lt; (of.m_OrderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;\t机房：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">                <span class="built_in">string</span> status = <span class="string">&quot; \t状态：&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    status += <span class="string">&quot;已预约&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; status &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//记录下标加1</span></span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v.size() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有审核中或已预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;审核中或预约成功的记录可以取消，请输入取消的记录：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入取消预约状态的序号，0 表示返回&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">select</span> &lt;= v.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                of.m_OrderData[v[<span class="keyword">select</span> - <span class="number">1</span>]][<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                of.updateOrder();</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;已取消预约！&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、教师模块"><a href="#9、教师模块" class="headerlink" title="9、教师模块"></a>9、教师模块</h2><h3 id="9-1-教师登录和注销"><a href="#9-1-教师登录和注销" class="headerlink" title="9.1 教师登录和注销"></a>9.1 教师登录和注销</h3><h4 id="9-1-1-构造函数"><a href="#9-1-1-构造函数" class="headerlink" title="9.1.1 构造函数"></a>9.1.1 构造函数</h4><ul><li>在Teacher类的构造函数中，初始化教师信息，代码如下：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有参构造 参数：职工编号、姓名、密码</span></span><br><span class="line">Teacher::Teacher(<span class="built_in">int</span> empid, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_EmpId = empid;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-1-2-教师子菜单"><a href="#9-1-2-教师子菜单" class="headerlink" title="9.1.2 教师子菜单"></a>9.1.2 教师子菜单</h4><h5 id="在机房预约系统-cpp中，当用户登录的是教师，添加教师菜单接口"><a href="#在机房预约系统-cpp中，当用户登录的是教师，添加教师菜单接口" class="headerlink" title="在机房预约系统.cpp中，当用户登录的是教师，添加教师菜单接口"></a>在机房预约系统.cpp中，当用户登录的是教师，添加教师菜单接口</h5><h5 id="将不同的分支提供出来-2"><a href="#将不同的分支提供出来-2" class="headerlink" title="将不同的分支提供出来"></a>将不同的分支提供出来</h5><ul><li>所有预约</li><li>审核预约</li><li>注销登录</li></ul><h5 id="实现注销功能-1"><a href="#实现注销功能-1" class="headerlink" title="实现注销功能"></a>实现注销功能</h5><p>添加全局函数<code>void TeacherMenu(Person * &amp;p);</code>代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//老师 子菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">teacherMenu</span>(<span class="params">Identity * &amp;p</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//调用 老师 子菜单</span></span><br><span class="line">        p-&gt;openMenu();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将父类指针 转为子类指针，调用子类里其他接口</span></span><br><span class="line">        Teacher *tea = (Teacher*)p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收用户选项</span></span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">1</span>)        <span class="comment">//查看所有预约</span></span><br><span class="line">        &#123;</span><br><span class="line">            tea-&gt;showAllOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">2</span>)   <span class="comment">//审核预约</span></span><br><span class="line">        &#123;</span><br><span class="line">            tea-&gt;validOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">0</span>)   <span class="comment">//注销登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            delete p;       <span class="comment">//释放堆区对象</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;注销登录成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-1-3-菜单功能实现"><a href="#9-1-3-菜单功能实现" class="headerlink" title="9.1.3 菜单功能实现"></a>9.1.3 菜单功能实现</h4><ul><li>在实现成员函数<code>void Teacher::operMenu();</code>代码如下：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="keyword">void</span> Teacher::openMenu()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;欢迎教师：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; 登录&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           1.所有预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           2.审核预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           0.注销登录           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-1-4-接口对接"><a href="#9-1-4-接口对接" class="headerlink" title="9.1.4 接口对接"></a>9.1.4 接口对接</h4><ul><li>教师成功登录后，调用教师的子菜单界面</li><li>在教师登录分支中，添加代码：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入老师身份的子菜单</span></span><br><span class="line">teacherMenu(person);</span><br></pre></td></tr></table></figure><p>添加效果如图：<br><img src="http://image.camcad.cn/2020/07/2020071407331765.jpg"> </p><p>测试对接，效果如图： 登录验证通过：<br><img src="http://image.camcad.cn/2020/07/2020071407351663-1024x742.jpg"> </p><p>教师子菜单：<br><img src="http://image.camcad.cn/2020/07/2020071407362592-1024x442.jpg"> </p><p>注销登录：<br><img src="http://image.camcad.cn/2020/07/2020071407373472-1024x477.jpg"></p><h3 id="9-2-查看所有预约"><a href="#9-2-查看所有预约" class="headerlink" title="9.2 查看所有预约"></a>9.2 查看所有预约</h3><h4 id="9-2-1-所有预约功能实现"><a href="#9-2-1-所有预约功能实现" class="headerlink" title="9.2.1 所有预约功能实现"></a>9.2.1 所有预约功能实现</h4><p>该功能与学生身份的查看所有预约功能相似，用于显示所有预约记录 在Teacher.cpp中实现成员函数<code>void Teacher::showAllOrder();</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="keyword">void</span> Teacher::showAllOrder()</span><br><span class="line">&#123;</span><br><span class="line">    orderFile of;</span><br><span class="line">    <span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;、&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;预约日期：周&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t时段：&quot;</span> &lt;&lt; (of.m_OrderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t学号&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t姓名&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t机房&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> status = <span class="string">&quot; \t状态：&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;已预约&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;0&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;取消预约&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;预约失败&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-2-2-测试功能"><a href="#9-2-2-测试功能" class="headerlink" title="9.2.2 测试功能"></a>9.2.2 测试功能</h4><p>运行测试教师身份的查看所有预约功能 测试效果如图：<br><img src="http://image.camcad.cn/2020/07/2020071408063976-1024x431.jpg"></p><h3 id="9-3-审核预约"><a href="#9-3-审核预约" class="headerlink" title="9.3 审核预约"></a>9.3 审核预约</h3><h4 id="9-3-1-审核功能实现"><a href="#9-3-1-审核功能实现" class="headerlink" title="9.3.1 审核功能实现"></a>9.3.1 审核功能实现</h4><p>功能描述：教师审核学生的预约，依据实现情况审核预约 在Teacher.cpp中实现成员函数<code>void Teacher::validOrder();</code> 代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//审核预约</span></span><br><span class="line"><span class="keyword">void</span> Teacher::validOrder()</span><br><span class="line">&#123;</span><br><span class="line">    orderFile of;</span><br><span class="line">    <span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v;</span><br><span class="line">    v.clear();</span><br><span class="line">    <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            v.push_back(i);</span><br><span class="line">            cout &lt;&lt; ++index &lt;&lt; <span class="string">&quot;、&quot;</span>;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;预约日期：周&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;\t时段：&quot;</span> &lt;&lt; (of.m_OrderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;\t学号：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;\t机房：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> status = <span class="string">&quot; \t状态：&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v.size() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有审核中的记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;审核中或预约成功的记录可以取消，请输入取消的记录：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入取消预约状态的序号，0 表示返回&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>; <span class="comment">//接收用户选择的预约记录</span></span><br><span class="line">    <span class="built_in">int</span> ret = <span class="number">0</span>;    <span class="comment">//接收预约结果记录</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">select</span> &lt;= v.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;请输入审核结果：&quot;</span> &lt;&lt; endl;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;1、通过&quot;</span> &lt;&lt; endl;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;-1、不通过&quot;</span> &lt;&lt; endl;</span><br><span class="line">                cin &gt;&gt; ret;</span><br><span class="line">                <span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    of.m_OrderData[v[<span class="keyword">select</span> - <span class="number">1</span>]][<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    of.m_OrderData[v[<span class="keyword">select</span> - <span class="number">1</span>]][<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">                &#125;</span><br><span class="line">                of.updateOrder();</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;审核完毕！&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-3-2-测试审核预约"><a href="#9-3-2-测试审核预约" class="headerlink" title="9.3.2 测试审核预约"></a>9.3.2 测试审核预约</h4><p>测试-审核通过<br><img src="http://image.camcad.cn/2020/07/2020071415561137-1024x549.jpg"></p><p>审核通过情况<br> <img src="http://image.camcad.cn/2020/07/2020071415580573-1024x400.jpg"></p><p>测试-审核不通过<br><img src="http://image.camcad.cn/2020/07/2020071415593928-1024x523.jpg"> </p><p>审核未通达情况<br><img src="http://image.camcad.cn/2020/07/2020071416013393-1024x397.jpg"> </p><p>学生身份下查看记录<br><img src="http://image.camcad.cn/2020/07/202007141603083-1024x639.jpg"> </p><p>审核预约成功！</p><p>至此本案例制作完毕！<code>ˆ-ˆ ˆ-ˆ</code></p>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程82：演讲比赛流程管理系统-头文件/源文件</title>
      <link href="/post/17c061d0.html"/>
      <url>/post/17c061d0.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="基于STL-演讲比赛流程管理系统"><a href="#基于STL-演讲比赛流程管理系统" class="headerlink" title="基于STL-演讲比赛流程管理系统"></a>基于STL-演讲比赛流程管理系统</h1><h2 id="头文件（speaker-h）"><a href="#头文件（speaker-h）" class="headerlink" title="头文件（speaker.h）"></a>头文件（speaker.h）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="头文件（speechManager-h）"><a href="#头文件（speechManager-h）" class="headerlink" title="头文件（speechManager.h）"></a>头文件（speechManager.h）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">#include&quot;speaker.h&quot;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;deque&gt;</span><br><span class="line">#include&lt;functional&gt;</span><br><span class="line">#include&lt;numeric&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;fstream&gt;</span><br><span class="line"></span><br><span class="line">#define FILENAME &quot;speech.csv&quot; //文件名称</span><br><span class="line"></span><br><span class="line">//演讲管理类</span><br><span class="line">class speechManager</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    //构造函数</span><br><span class="line">    speechManager();</span><br><span class="line"></span><br><span class="line">    //展示菜单</span><br><span class="line">    void show_Menu();</span><br><span class="line"></span><br><span class="line">    //退出功能</span><br><span class="line">    void exitSystem();</span><br><span class="line"></span><br><span class="line">    //析构函数</span><br><span class="line">    ~speechManager();</span><br><span class="line"></span><br><span class="line">    //比赛选手 容器 12人</span><br><span class="line">    vector&lt;int&gt;v1;</span><br><span class="line"></span><br><span class="line">    //第一轮晋级容器 6人</span><br><span class="line">    vector&lt;int&gt;v2;</span><br><span class="line"></span><br><span class="line">    //胜利前三名容器 3人</span><br><span class="line">    vector&lt;int&gt;vVictory;</span><br><span class="line"></span><br><span class="line">    //存放编号 以及对应的具体选手 容器</span><br><span class="line">    map&lt;int, Speaker&gt;m_Speaker;</span><br><span class="line"></span><br><span class="line">    //记录比赛轮数</span><br><span class="line">    int m_Index;</span><br><span class="line"></span><br><span class="line">    //初始化属性</span><br><span class="line">    void initSpeech();</span><br><span class="line"></span><br><span class="line">    //初始化创建12名选手</span><br><span class="line">    void createSpeaker();</span><br><span class="line"></span><br><span class="line">    //开始比赛-比赛流程控制</span><br><span class="line">    void startSpeech();</span><br><span class="line"></span><br><span class="line">    //抽签</span><br><span class="line">    void speechDraw();</span><br><span class="line"></span><br><span class="line">    //开始比赛</span><br><span class="line">    void speechContest();</span><br><span class="line"></span><br><span class="line">    //显示得分</span><br><span class="line">    void showScore();</span><br><span class="line"></span><br><span class="line">    //保存分数</span><br><span class="line">    void saveRecord();</span><br><span class="line"></span><br><span class="line">    //读取记录</span><br><span class="line">    void loadRecord();</span><br><span class="line"></span><br><span class="line">    //文件为空的标志</span><br><span class="line">    bool fileIsEmpty;</span><br><span class="line"></span><br><span class="line">    //往届记录</span><br><span class="line">    map&lt;int, vector&lt;string&gt;&gt;m_Record;</span><br><span class="line"></span><br><span class="line">    //显示往届得分</span><br><span class="line">    void showRecord();</span><br><span class="line"></span><br><span class="line">    //清空记录</span><br><span class="line">    void clearRecord();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="源文件（speechManager-cpp）"><a href="#源文件（speechManager-cpp）" class="headerlink" title="源文件（speechManager.cpp）"></a>源文件（speechManager.cpp）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&quot;speechManager.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">speechManager::speechManager()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化容器和属性</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;initSpeech();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化创建12名选手</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;createSpeaker();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取记录</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;loadRecord();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//展示菜单</span></span><br><span class="line"><span class="keyword">void</span> speechManager::show_Menu()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;************************************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*************** 欢迎参加演讲比赛 ***************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*************** 1、开始演讲比赛  ***************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*************** 2、查看往届记录  ***************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*************** 3、清空比赛记录  ***************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;*************** 0、退出比赛程序  ***************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;************************************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//退出功能</span></span><br><span class="line"><span class="keyword">void</span> speechManager::exitSystem()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;欢迎下次使用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">void</span> speechManager::initSpeech()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//容器都置空</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;v1.clear();</span><br><span class="line">    <span class="keyword">this</span>-&gt;v2.clear();</span><br><span class="line">    <span class="keyword">this</span>-&gt;vVictory.clear();</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Speaker.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化比赛轮数</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化记录容器</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Record.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化创建12名选手</span></span><br><span class="line"><span class="keyword">void</span> speechManager::createSpeaker()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> nameSeed = <span class="string">&quot;ABCDEFJHIJKL&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; nameSeed.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//姓名</span></span><br><span class="line">        <span class="built_in">string</span> name = <span class="string">&quot;选手&quot;</span>;</span><br><span class="line">        name += nameSeed[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//选手属性</span></span><br><span class="line">        Speaker sp;</span><br><span class="line">        sp.m_Name = name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分数</span></span><br><span class="line">        <span class="keyword">for</span> (size_t j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            sp.m_Score[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//12名选手编号</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;v1.push_back(i + <span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//选手编号 以及对应的选手 存放到map容器中</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Speaker.insert(make_pair(i + <span class="number">10001</span>, sp));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始比赛</span></span><br><span class="line"><span class="keyword">void</span> speechManager::startSpeech()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//第一轮开始比赛</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、抽签</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;speechDraw();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、比赛</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;speechContest();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、显示晋级结果</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;showScore();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二轮开始比赛</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Index++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、抽签</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;speechDraw();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、比赛</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;speechContest();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、显示晋级结果</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;showScore();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、保存分数</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;saveRecord();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重置比赛，获取记录</span></span><br><span class="line">        <span class="comment">//初始化容器和属性</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;initSpeech();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化创建12名选手</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;createSpeaker();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取记录</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;loadRecord();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;本届比赛已结束!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽签</span></span><br><span class="line"><span class="keyword">void</span> speechManager::speechDraw()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;第&lt;&lt; &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot; &gt;&gt;轮比赛选手正在抽签&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;抽签后演讲顺序如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        random_shuffle(v1.begin(), v1.end());</span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it = v1.begin(); it != v1.end(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        random_shuffle(v2.begin(), v2.end());</span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it = v2.begin(); it != v2.end(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始比赛</span></span><br><span class="line"><span class="keyword">void</span> speechManager::speechContest()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮比赛开始-----------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备临时容器，存放小组成绩</span></span><br><span class="line">    multimap&lt;<span class="built_in">double</span>, <span class="built_in">int</span>, greater&lt;<span class="built_in">double</span>&gt;&gt;gourpScore;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录人员个数 6人一组</span></span><br><span class="line">    <span class="built_in">int</span> num = <span class="number">0</span>;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//比赛选手容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v_Src;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v_Src = v1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        v_Src = v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it = v_Src.begin(); it != v_Src.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//循环一次+1</span></span><br><span class="line">        num++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//评委打分</span></span><br><span class="line">        deque&lt;<span class="built_in">double</span>&gt;d;</span><br><span class="line">        <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//随机数</span></span><br><span class="line">            <span class="built_in">double</span> score = (rand() % <span class="number">401</span> + <span class="number">600</span>) / <span class="number">10.0f</span>;    <span class="comment">//起始值600，终止1000</span></span><br><span class="line"></span><br><span class="line">            d.push_back(score);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//排序 降序</span></span><br><span class="line">        sort(d.begin(), d.end(), greater&lt;<span class="built_in">double</span>&gt;());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//去除最高分</span></span><br><span class="line">        d.pop_front();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//去除最底分</span></span><br><span class="line">        d.pop_back();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//求出总和</span></span><br><span class="line">        <span class="built_in">double</span> sum = accumulate(d.begin(), d.end(), <span class="number">0.0f</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//求出平均分</span></span><br><span class="line">        <span class="built_in">double</span> average = sum / (<span class="built_in">double</span>)d.size();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;编号：&quot; &lt;&lt; *it &lt;&lt; &quot; 姓名&quot; &lt;&lt; this-&gt;m_Speaker[*it].m_Name &lt;&lt; &quot; 平均分：&quot; &lt;&lt; average &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将平均分放入到map容器里</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="keyword">this</span>-&gt;m_Index - <span class="number">1</span>] = average;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将平均分数据 存放到临时小组容器中</span></span><br><span class="line">        gourpScore.insert(make_pair(average, *it));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每6人取出前3名</span></span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">6</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; num / <span class="number">6</span> &lt;&lt; <span class="string">&quot;小组比赛名次：&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span> (multimap&lt;<span class="built_in">double</span>, <span class="built_in">int</span>, greater&lt;<span class="built_in">double</span>&gt;&gt;::iterator it = gourpScore.begin(); it != gourpScore.end(); it++)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;编号：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[it-&gt;second].m_Name </span><br><span class="line">                    &lt;&lt; <span class="string">&quot;\t成绩：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[it-&gt;second].m_Score[<span class="keyword">this</span>-&gt;m_Index - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取出前3名</span></span><br><span class="line">            <span class="built_in">int</span> count = <span class="number">0</span>;  <span class="comment">//计数</span></span><br><span class="line">            <span class="keyword">for</span> (multimap&lt;<span class="built_in">double</span>, <span class="built_in">int</span>, greater&lt;<span class="built_in">double</span>&gt;&gt;::iterator it = gourpScore.begin(); it != gourpScore.end() &amp;&amp; count &lt; <span class="number">3</span>; it++, count++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>-&gt;v2.push_back(((*it).second));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>-&gt;vVictory.push_back((*it).second);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//清空临时容器</span></span><br><span class="line">            gourpScore.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮比赛完毕-----------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示得分</span></span><br><span class="line"><span class="keyword">void</span> speechManager::showScore()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮晋级选手-----------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v = <span class="keyword">this</span>-&gt;v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        v = <span class="keyword">this</span>-&gt;vVictory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;编号：&quot;</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Name </span><br><span class="line">            &lt;&lt; <span class="string">&quot;\t成绩：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="keyword">this</span>-&gt;m_Index - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  </span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);    <span class="comment">//清屏</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;show_Menu();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存分数</span></span><br><span class="line"><span class="keyword">void</span> speechManager::saveRecord()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    ofstream ofs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建文本--写文件</span></span><br><span class="line">    ofs.open(FILENAME, ios::<span class="keyword">out</span>  ios::app);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入内容</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it = vVictory.begin(); it != vVictory.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        ofs &lt;&lt; *it &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ofs &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ofs.close();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;数据已经保存&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更改文件不为空的状态</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取记录</span></span><br><span class="line"><span class="keyword">void</span> speechManager::loadRecord()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文本-读文件</span></span><br><span class="line">    ifs.open(FILENAME, ios::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件不存在！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">        ifs.clear();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件是否为空</span></span><br><span class="line">    <span class="built_in">char</span> ch;</span><br><span class="line">    ifs &gt;&gt; ch;</span><br><span class="line">    <span class="keyword">if</span> (ifs.eof())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">        ifs.clear();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件存在并且有数据</span></span><br><span class="line">    ifs.putback(ch);    <span class="comment">//将上面读取的单个字符再放回</span></span><br><span class="line">    <span class="built_in">string</span> data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下标</span></span><br><span class="line">    <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//临时存储</span></span><br><span class="line">        vector&lt;<span class="built_in">string</span>&gt;v;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> pos = <span class="number">-1</span>;   <span class="comment">//查到“,”位置的变量</span></span><br><span class="line">        <span class="built_in">int</span> start = <span class="number">0</span>;  <span class="comment">//起始位置</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos = data.find(<span class="string">&quot;,&quot;</span>, start);  <span class="comment">//从0开始查找 &#x27;，&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> (pos == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;      <span class="comment">//找不到 break返回</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> temp = data.substr(start, pos - start);  <span class="comment">//找到了，进行分割 参数1 起始位置，参数2 截取长度</span></span><br><span class="line">            v.push_back(temp);</span><br><span class="line">            start = pos + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数据放入到容器</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Record.insert(make_pair(index, v));</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">false</span>;</span><br><span class="line">    ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示往届得分</span></span><br><span class="line"><span class="keyword">void</span> speechManager::showRecord()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;fileIsEmpty)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件不存在或为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Record.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;届&quot;</span> &lt;&lt;</span><br><span class="line">                <span class="string">&quot; 冠军编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">0</span>] &lt;&lt; <span class="string">&quot;  得分：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">1</span>] &lt;&lt;</span><br><span class="line">                <span class="string">&quot; \t亚军编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">2</span>] &lt;&lt; <span class="string">&quot;  得分：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">3</span>] &lt;&lt;</span><br><span class="line">                <span class="string">&quot; \t季军编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">4</span>] &lt;&lt; <span class="string">&quot;  得分：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">5</span>] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空容器</span></span><br><span class="line"><span class="keyword">void</span> speechManager::clearRecord()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;清空记录，请选择以下选项：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1.确实&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2.取消&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建流文件</span></span><br><span class="line">        ofstream ofs;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打开文件--写文件</span></span><br><span class="line">        ofs.open(FILENAME, ios::trunc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭文件</span></span><br><span class="line">        ofs.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化容器和属性</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initSpeech();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化创建12名选手</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;createSpeaker();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取记录</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;loadRecord();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;清空完成&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">speechManager::~speechManager()</span><br><span class="line">&#123;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="源文件（演讲比赛流程管理系统-cpp）"><a href="#源文件（演讲比赛流程管理系统-cpp）" class="headerlink" title="源文件（演讲比赛流程管理系统.cpp）"></a>源文件（演讲比赛流程管理系统.cpp）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &quot;speechManager.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&lt;ctime&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//随机数种子</span></span><br><span class="line">    srand((unsigned <span class="built_in">int</span>)time(NULL));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    speechManager sm;</span><br><span class="line">    <span class="built_in">int</span> choice = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sm.show_Menu();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; choice;        <span class="comment">//接受用户的选择</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (choice)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:     <span class="comment">//开始演讲</span></span><br><span class="line">            sm.startSpeech();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:     <span class="comment">//往届记录</span></span><br><span class="line">            sm.showRecord();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:     <span class="comment">//清空记录</span></span><br><span class="line">            sm.clearRecord();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:     <span class="comment">//退出功能</span></span><br><span class="line">            sm.exitSystem();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="literal">default</span>:</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);        <span class="comment">//清屏</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程81：演讲比赛流程管理系统</title>
      <link href="/post/adbe7ef1.html"/>
      <url>/post/adbe7ef1.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="演讲比赛流程管理系统"><a href="#演讲比赛流程管理系统" class="headerlink" title="演讲比赛流程管理系统"></a>演讲比赛流程管理系统</h1><h2 id="1、演讲比赛程序需求"><a href="#1、演讲比赛程序需求" class="headerlink" title="1、演讲比赛程序需求"></a>1、演讲比赛程序需求</h2><p><img src="http://image.camcad.cn/2020/07/202007070119598-1024x631.jpg"></p><h3 id="1-1-比赛规则"><a href="#1-1-比赛规则" class="headerlink" title="1.1 比赛规则"></a>1.1 比赛规则</h3><ul><li>学校举行一场演讲比赛，共有<strong>12个人</strong>参加。<strong>比赛共两轮</strong>，第一轮为淘汰赛，第二轮为决赛。</li><li>每名选手都有对应的<strong>编号</strong>，如10001~10012。</li><li>比赛方式：<strong>分组比赛，每组6个人</strong>。</li><li>第一轮分为两个小组，整体按照选手编号进行<strong>抽签</strong>后顺序演讲。</li><li><strong>十个评委</strong>分别给每名选手打分，去除最高分和最低分，求的平均分为本轮选手的成绩。</li><li>当小组演讲完后，淘汰组内排名最前的三个选手，<strong>前三名晋级</strong>，进入下一轮的比赛。</li><li>第二轮为决赛，<strong>前三名胜出</strong>。</li><li>每轮比赛过后需要<strong>显示晋级选手的信息</strong>。</li></ul><h2 id="2、项目创建"><a href="#2、项目创建" class="headerlink" title="2、项目创建"></a>2、项目创建</h2><p><strong>创建项目步骤如下：</strong></p><ul><li>创建新项目</li><li>添加文件</li></ul><h3 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h3><ul><li>打开VS 后，点击创建新项目，创建新的C++项目。</li></ul><p><strong>如图：</strong><br><img src="http://image.camcad.cn/2020/07/2020070701361844-1024x525.jpg"></p><ul><li>填写项目名称以及选取项目路径，点击确定生成项目。<br><img src="http://image.camcad.cn/2020/07/2020070701405064-1024x786.jpg"></li></ul><h3 id="2-2-添加文件"><a href="#2-2-添加文件" class="headerlink" title="2.2 添加文件"></a>2.2 添加文件</h3><ul><li><p>右键源文件，进行添加文件操作<br><img src="http://image.camcad.cn/2020/07/2020070701444981-1024x510.jpg"></p></li><li><p>填写文件名称，点击添加<br><img src="http://image.camcad.cn/2020/07/2020070701465965-1024x786.jpg"></p></li><li><p>生成文件成功，效果如下图<br><img src="http://image.camcad.cn/2020/07/2020070701494454-1024x512.jpg"></p></li><li><p>至此，项目已创建完毕。</p></li></ul><h2 id="3、创建管理类"><a href="#3、创建管理类" class="headerlink" title="3、创建管理类"></a>3、创建管理类</h2><p><strong>功能描述：</strong></p><ul><li>提供菜单界面与用户交互</li><li>对演讲赛流程进行控制</li><li>与文件的读写交互</li></ul><h3 id="3-1-创建文件"><a href="#3-1-创建文件" class="headerlink" title="3.1 创建文件"></a>3.1 创建文件</h3><ul><li>在头文件和源文件的文件夹下分别 创建speechManager.h和speechManager.cpp文件。<br><img src="http://image.camcad.cn/2020/07/2020070701591658-1024x414.jpg"></li></ul><h3 id="3-2-头文件实现"><a href="#3-2-头文件实现" class="headerlink" title="3.2 头文件实现"></a>3.2 头文件实现</h3><p>在speechManager.h中设计管理类 代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演讲管理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">speechManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    speechManager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~speechManager();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-3-源文件实现"><a href="#3-3-源文件实现" class="headerlink" title="3.3 源文件实现"></a>3.3 源文件实现</h3><p>在speechManager.cpp中将构造和析构函数实现补全 代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&quot;speechManager.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">speechManager::speechManager()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">speechManager::~speechManager()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、菜单功能"><a href="#4、菜单功能" class="headerlink" title="4、菜单功能"></a>4、菜单功能</h2><p>功能描述：与用户的沟通界面</p><h3 id="4-1-添加成员函数"><a href="#4-1-添加成员函数" class="headerlink" title="4.1 添加成员函数"></a>4.1 添加成员函数</h3><p>在管理类speechManager.h中添加成员函数<code>void show_Menu();</code><br><img src="http://image.camcad.cn/2020/07/2020070702413076.jpg"></p><h3 id="4-2-菜单功能实现"><a href="#4-2-菜单功能实现" class="headerlink" title="4.2 菜单功能实现"></a>4.2 菜单功能实现</h3><ul><li><p>在管理类speechManager.cpp中实现<code>show_Menu()</code>函数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//展示菜单</span></span><br><span class="line"><span class="keyword">void</span> speechManager::show_Menu()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;************************************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;*************** 欢迎参加演讲比赛 ***************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;*************** 1、开始演讲比赛  ***************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;*************** 2、查看往届记录  ***************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;*************** 3、清空比赛记录  ***************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;*************** 4、退出比赛程序  ***************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;************************************************&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-测试菜单功能"><a href="#4-3-测试菜单功能" class="headerlink" title="4.3 测试菜单功能"></a>4.3 测试菜单功能</h3><ul><li>在演讲比赛流程管理系统.cpp中测试菜单功能 代码：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &quot;speechManager.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    speechManager sm;</span><br><span class="line">    sm.show_Menu();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行效果如下：<br><img src="http://image.camcad.cn/2020/07/2020070702463329.jpg"></li><li>菜单界面搭建完毕</li></ul><h2 id="5、退出功能"><a href="#5、退出功能" class="headerlink" title="5、退出功能"></a>5、退出功能</h2><p>功能描述：实现退出程序</p><h3 id="5-1-提供功能接口"><a href="#5-1-提供功能接口" class="headerlink" title="5.1 提供功能接口"></a>5.1 提供功能接口</h3><ul><li>在main函数中提供分支选择，提供每个功能接口 代码：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &quot;speechManager.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    speechManager sm;</span><br><span class="line">    <span class="built_in">int</span> choice = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sm.show_Menu();</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; choice;        <span class="comment">//接受用户的选择</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (choice)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:     <span class="comment">//开始演讲</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:     <span class="comment">//往届记录</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:     <span class="comment">//清空记录</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:     <span class="comment">//退出功能</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="literal">default</span>:</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);        <span class="comment">//清屏</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现退出功能"><a href="#实现退出功能" class="headerlink" title="实现退出功能"></a>实现退出功能</h3><p>在speechManager.h中提供退出系统的成员函数<code>void exitSystem();</code><br><img src="http://image.camcad.cn/2020/07/2020070703300962.jpg"></p><p>在speechManager.cpp中提供具体的功能实现。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//退出功能</span></span><br><span class="line"><span class="keyword">void</span> speechManager::exitSystem()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;欢迎下次使用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-测试功能"><a href="#5-3-测试功能" class="headerlink" title="5.3 测试功能"></a>5.3 测试功能</h3><p>在main函数分支0选项中，调用退出程序的接口<br><img src="http://image.camcad.cn/2020/07/2020070703312549.jpg"></p><ul><li>运行测试效果如图：<br><img src="http://image.camcad.cn/2020/07/2020070703325357.jpg"></li></ul><h2 id="6、演讲比赛功能"><a href="#6、演讲比赛功能" class="headerlink" title="6、演讲比赛功能"></a>6、演讲比赛功能</h2><h3 id="6-1-功能分析"><a href="#6-1-功能分析" class="headerlink" title="6.1 功能分析"></a>6.1 功能分析</h3><p><strong>比赛流程分析：</strong> 抽签–&gt;开始演讲比赛–&gt;显示第一轮比赛结果–&gt; 抽签开始演讲比赛–&gt;显示前三名结果–&gt;保存分数</p><h3 id="6-2-创建选手类"><a href="#6-2-创建选手类" class="headerlink" title="6.2 创建选手类"></a>6.2 创建选手类</h3><ul><li>选手类中的属性包含：选手姓名、分数</li><li>头文件中创建speaker.h文件，并添加代码：</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Speaker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> m_Name;      <span class="comment">//姓名</span></span><br><span class="line">    <span class="built_in">double</span> m_Score[<span class="number">2</span>];  <span class="comment">//分数 最多有两轮得分</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="6-3-比赛"><a href="#6-3-比赛" class="headerlink" title="6.3 比赛"></a>6.3 比赛</h3><h4 id="6-3-1-成员属性添加"><a href="#6-3-1-成员属性添加" class="headerlink" title="6.3.1 成员属性添加"></a>6.3.1 成员属性添加</h4><ul><li>在speechManager.h中添加属性</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//比赛选手 容器 12人</span></span><br><span class="line">vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一轮晋级容器 6人</span></span><br><span class="line">vector&lt;<span class="built_in">int</span>&gt;v2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//胜利前三名容器 3人</span></span><br><span class="line">vector&lt;<span class="built_in">int</span>&gt;vVictory;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放编号 以及对应的具体选手 容器</span></span><br><span class="line">map&lt;<span class="built_in">int</span>, Speaker&gt;m_Speaker;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记录比赛轮数</span></span><br><span class="line"><span class="built_in">int</span> m_Index;</span><br></pre></td></tr></table></figure><h4 id="6-3-2-初始化属性"><a href="#6-3-2-初始化属性" class="headerlink" title="6.3.2 初始化属性"></a>6.3.2 初始化属性</h4><ul><li>在speechManager.h中提供开始比赛的成员函数<code>void initSpeech();</code></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initSpeech</span>()</span>;</span><br></pre></td></tr></table></figure><ul><li>在speechManager.cpp中实现<code>void initSpeech();</code></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化属性</span></span><br><span class="line"><span class="keyword">void</span> speechManager::initSpeech()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//容器都置空</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;v1.clear();</span><br><span class="line">    <span class="keyword">this</span>-&gt;v2.clear();</span><br><span class="line">    <span class="keyword">this</span>-&gt;vVictory.clear();</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Speaker.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化比赛轮数</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Index = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>speechManager构造函数中调用<code>void initSpeech();</code></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">speechManager::speechManager()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化容器和属性</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;initSpeech();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-3-创建选手"><a href="#6-3-3-创建选手" class="headerlink" title="6.3.3 创建选手"></a>6.3.3 创建选手</h4><ul><li>在speechManager.h中提供开始比赛的成员函数<code>void createSpeaker();</code></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化创建12名选手</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createSpeaker</span>()</span>;</span><br></pre></td></tr></table></figure><ul><li>在speechManager.cpp中实现<code>void createSpeaker();</code></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化创建12名选手</span></span><br><span class="line"><span class="keyword">void</span> speechManager::createSpeaker()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> nameSeed = <span class="string">&quot;ABCDEFJHIJKL&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; nameSeed.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//姓名</span></span><br><span class="line">        <span class="built_in">string</span> name = <span class="string">&quot;选手&quot;</span>;</span><br><span class="line">        name += nameSeed[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//选手属性</span></span><br><span class="line">        Speaker sp;</span><br><span class="line">        sp.m_Name = name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分数</span></span><br><span class="line">        <span class="keyword">for</span> (size_t j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            sp.m_Score[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//12名选手编号</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;v1.push_back(i + <span class="number">10001</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//选手编号 以及对应的选手 存放到map容器中</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Speaker.insert(make_pair(i + <span class="number">10001</span>, sp));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>speechManager类的构造函数中调用<code>void createSpeaker();</code></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">speechManager::speechManager()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化容器和属性</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;initSpeech();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化创建12名选手</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;createSpeaker();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试在main函数中，可以在创建完管理对象后，使用下列代码测试12名选手初始状态</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">for</span> (map&lt;<span class="built_in">int</span>, Speaker&gt;::iterator it = sm.m_Speaker.begin(); it != sm.m_Speaker.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;选手编号：&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; it-&gt;second.m_Name &lt;&lt; <span class="string">&quot;\t成绩1：&quot;</span> </span><br><span class="line">        &lt;&lt; it-&gt;second.m_Score[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;\t成绩2：&quot;</span> &lt;&lt; it-&gt;second.m_Score[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.camcad.cn/2020/07/2020070709511852-1024x994.jpg"></p><ul><li><p>测试效果如图：<br><img src="http://image.camcad.cn/2020/07/2020070709530874.jpg"></p></li><li><p>测试完毕后，可以将测试代码删除或者注释。</p></li></ul><h4 id="6-3-4-开始比赛成员函数添加"><a href="#6-3-4-开始比赛成员函数添加" class="headerlink" title="6.3.4 开始比赛成员函数添加"></a>6.3.4 开始比赛成员函数添加</h4><ul><li>在speechManager.h中提供开始比赛的成员函数<code>void startSpeech();</code></li><li>该函数功能是主要控制比赛的流程。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始比赛-比赛流程控制</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startSpeech</span>()</span>;</span><br></pre></td></tr></table></figure><ul><li>在speechManager.cpp中将startSpeech的空实现先写入。</li><li>我们可以先将整个比赛的流程写到函数中。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始比赛</span></span><br><span class="line"><span class="keyword">void</span> speechManager::startSpeech()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//第一轮开始比赛</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、抽签</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、比赛</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、显示晋级结果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二轮开始比赛</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、抽签</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、比赛</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、显示晋级结果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、保存分数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-5-抽签"><a href="#6-3-5-抽签" class="headerlink" title="6.3.5 抽签"></a>6.3.5 抽签</h4><p><strong>功能描述：</strong></p><ul><li>正式比赛前，所有选手的比赛顺序需要打乱，我们只需要将存放选手编号的容器打乱次序即可。</li><li>在speechManager.h中提供抽签的成员函数<code>void speechDraw();</code></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽签</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speechDraw</span>()</span>;</span><br></pre></td></tr></table></figure><ul><li><p>在speechManager.cpp中实现成员函数<code>void speechDraw();</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽签</span></span><br><span class="line"><span class="keyword">void</span> speechManager::speechDraw()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第&lt;&lt; &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot; &gt;&gt;轮比赛选手正在抽签&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;抽签后演讲顺序如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    random_shuffle(v1.begin(), v1.end());</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it = v1.begin(); it != v1.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    random_shuffle(v2.begin(), v2.end());</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it = v2.begin(); it != v2.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在startSpeech比赛流程控制的函数中，调用抽签函数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始比赛</span></span><br><span class="line"><span class="keyword">void</span> speechManager::startSpeech()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第一轮开始比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、抽签</span></span><br><span class="line"><span class="keyword">this</span>-&gt;speechDraw();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、显示晋级结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二轮开始比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、抽签</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、比赛</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3、显示晋级结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、保存分数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在main函数中，分支1选项中，调用开始比赛的接口。<br><img src="http://image.camcad.cn/2020/07/2020070804260187.jpg"></p></li><li><p>测试结果如下：<br><img src="http://image.camcad.cn/2020/07/2020070804273853-1024x477.jpg"></p></li></ul><h4 id="6-3-6-开始比赛"><a href="#6-3-6-开始比赛" class="headerlink" title="6.3.6 开始比赛"></a>6.3.6 开始比赛</h4><ul><li><p>在speechManager.h中提供比赛的成员函数<code>void speechContest();</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始比赛</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speechContest</span>()</span>;</span><br></pre></td></tr></table></figure></li><li><p>在speechManager.cpp中实现成员函数<code>void speechContest();</code></p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始比赛</span></span><br><span class="line"><span class="keyword">void</span> speechManager::speechContest()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;---------第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮比赛正式开始--------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备临时容器，存放小组成绩</span></span><br><span class="line">    multimap&lt;<span class="built_in">double</span>, <span class="built_in">int</span>, greater&lt;<span class="built_in">double</span>&gt;&gt;gourpScore;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录人员个数 6人一组</span></span><br><span class="line">    <span class="built_in">int</span> num = <span class="number">0</span>;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//比赛选手容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v_Src;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v_Src = v1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        v_Src = v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it = v_Src.begin(); it != v_Src.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//循环一次+1</span></span><br><span class="line">        num++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//评委打分</span></span><br><span class="line">        deque&lt;<span class="built_in">double</span>&gt;d;</span><br><span class="line">        <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//随机数</span></span><br><span class="line">            <span class="built_in">double</span> score = (rand() % <span class="number">401</span> + <span class="number">600</span>) / <span class="number">10.0f</span>;    <span class="comment">//起始值600，终止1000</span></span><br><span class="line"></span><br><span class="line">            d.push_back(score);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//排序 降序</span></span><br><span class="line">        sort(d.begin(), d.end(), greater&lt;<span class="built_in">double</span>&gt;());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//去除最高分</span></span><br><span class="line">        d.pop_front();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//去除最底分</span></span><br><span class="line">        d.pop_back();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//求出总和</span></span><br><span class="line">        <span class="built_in">double</span> sum = accumulate(d.begin(), d.end(), <span class="number">0.0f</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//求出平均分</span></span><br><span class="line">        <span class="built_in">double</span> average = sum / (<span class="built_in">double</span>)d.size();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;编号：&quot; &lt;&lt; *it &lt;&lt; &quot; 姓名&quot; &lt;&lt; this-&gt;m_Speaker[*it].m_Name &lt;&lt; &quot; 平均分：&quot; &lt;&lt; average &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将平均分放入到map容器里</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="keyword">this</span>-&gt;m_Index - <span class="number">1</span>] = average;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将平均分数据 存放到临时小组容器中</span></span><br><span class="line">        gourpScore.insert(make_pair(average, *it));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每6人取出前3名</span></span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">6</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-----------第&quot;</span> &lt;&lt; num / <span class="number">6</span> &lt;&lt; <span class="string">&quot;小组比赛名次：---------&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span> (multimap&lt;<span class="built_in">double</span>, <span class="built_in">int</span>, greater&lt;<span class="built_in">double</span>&gt;&gt;::iterator it = gourpScore.begin(); it != gourpScore.end(); it++)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;编号：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="string">&quot; 姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[it-&gt;second].m_Name </span><br><span class="line">                    &lt;&lt; <span class="string">&quot; 成绩：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[it-&gt;second].m_Score[<span class="keyword">this</span>-&gt;m_Index - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取出前3名</span></span><br><span class="line">            <span class="built_in">int</span> count = <span class="number">0</span>;  <span class="comment">//计数</span></span><br><span class="line">            <span class="keyword">for</span> (multimap&lt;<span class="built_in">double</span>, <span class="built_in">int</span>, greater&lt;<span class="built_in">double</span>&gt;&gt;::iterator it = gourpScore.begin(); it != gourpScore.end(), count &gt; <span class="number">3</span>; it++, count++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>-&gt;v2.push_back((it-&gt;second));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>-&gt;vVictory.push_back(it-&gt;second);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//清空临时容器</span></span><br><span class="line">            gourpScore.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;-----------第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮比赛完毕---------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在startSpeech比赛流程控制的函数中，调用比赛函数。<br><img src="http://image.camcad.cn/2020/07/2020070804441475.jpg"></p></li><li><p>再次运行代码，测试比赛<br><img src="http://image.camcad.cn/2020/07/2020070804475046-1024x811.jpg"></p></li></ul><h4 id="6-3-7-显示比赛分数"><a href="#6-3-7-显示比赛分数" class="headerlink" title="6.3.7 显示比赛分数"></a>6.3.7 显示比赛分数</h4><ul><li>在speechManager.h中提供显示分数的成员函数<code>void showScore();</code></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示得分</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showScore</span>()</span>;</span><br></pre></td></tr></table></figure><ul><li>在speechManager.cpp中实现成员函数<code>void showScore();</code></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示得分</span></span><br><span class="line"><span class="keyword">void</span> speechManager::showScore()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----------第&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Index &lt;&lt; <span class="string">&quot;轮晋级选手---------&quot;</span> &lt;&lt; endl;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Index == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v = <span class="keyword">this</span>-&gt;v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        v = <span class="keyword">this</span>-&gt;vVictory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;编号：&quot;</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Name </span><br><span class="line">            &lt;&lt; <span class="string">&quot;\t成绩：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="keyword">this</span>-&gt;m_Index - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  </span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);    <span class="comment">//清屏</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;show_Menu();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在startSpeech比赛流程控制的函数中，调用显示比赛分数函数。<br><img src="http://image.camcad.cn/2020/07/2020070807591676.jpg"></p></li><li><p>运行代码，测试效果<br><img src="http://image.camcad.cn/2020/07/2020070808005438-1024x933.jpg"></p></li></ul><h4 id="6-3-8-第二轮比赛"><a href="#6-3-8-第二轮比赛" class="headerlink" title="6.3.8 第二轮比赛"></a>6.3.8 第二轮比赛</h4><p>第二轮比赛流程同第一轮，只是比赛的轮数+1，其余流程不变。</p><ul><li>在startSpeech比赛流程控制的函数中，加入第二轮的流程。<br><img src="http://image.camcad.cn/2020/07/202007080823126.jpg"></li></ul><p>测试，将整个比赛流程都跑通<br><img src="http://image.camcad.cn/2020/07/2020070808245431-1003x1024.jpg"></p><h3 id="6-4-保存分数"><a href="#6-4-保存分数" class="headerlink" title="6.4 保存分数"></a>6.4 保存分数</h3><p><strong>功能描述：</strong><br>将每次演讲比赛的得分记录到文件中。 </p><p><strong>功能实现：</strong></p><ul><li>在speechManager.h中添加保存记录的成员函数：<code>void saveRecord();</code></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FILENAME &quot;speech.csv&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存分数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveRecord</span>()</span>;</span><br></pre></td></tr></table></figure><ul><li>在speechManager.cpp中实现成员函数<code>void saveRecord();</code></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存分数</span></span><br><span class="line"><span class="keyword">void</span> speechManager::saveRecord()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    ofstream ofs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建文本--写文件</span></span><br><span class="line">    ofs.open(FILENAME, ios::<span class="keyword">out</span>  ios::app);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入内容</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it = vVictory.begin(); it != vVictory.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        ofs &lt;&lt; *it &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Speaker[*it].m_Score[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ofs &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ofs.close();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;数据已经保存&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在startSpeech比赛流程控制的函数中，最后调用保存记录分数函数<br><img src="http://image.camcad.cn/2020/07/2020070809034747-817x1024.jpg"></p></li><li><p>测试，整个比赛完毕后记录保存情况<br><img src="http://image.camcad.cn/2020/07/2020070809060085.jpg"></p></li></ul><h2 id="7、查看记录"><a href="#7、查看记录" class="headerlink" title="7、查看记录"></a>7、查看记录</h2><h3 id="7-1-读取记录分数"><a href="#7-1-读取记录分数" class="headerlink" title="7.1 读取记录分数"></a>7.1 读取记录分数</h3><ul><li>在speechManager.h中添加保存记录的成员函数<code>void loadRecord();</code></li><li>添加判断文件是否为空的标志<code>bool fileIsEmpty;</code></li><li>添加往届记录的容器<code>map&lt;int,vector&lt;string&gt;&gt;m_Record;</code></li></ul><p>其中m_Record中的key代表第几届，value记录具体的信息。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取记录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadRecord</span>()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件为空的标志</span></span><br><span class="line"><span class="built_in">bool</span> fileIsEmpty;</span><br><span class="line"></span><br><span class="line"><span class="comment">//往届记录</span></span><br><span class="line">map&lt;<span class="built_in">int</span>, vector&lt;<span class="built_in">string</span>&gt;&gt;m_Record;</span><br></pre></td></tr></table></figure><ul><li>在speechManager.cpp中实现成员函数<code>void loadRecord();</code></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取记录</span></span><br><span class="line"><span class="keyword">void</span> speechManager::loadRecord()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文本-读文件</span></span><br><span class="line">    ifs.open(FILENAME, ios::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件不存在！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">        ifs.clear();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件是否为空</span></span><br><span class="line">    <span class="built_in">char</span> ch;</span><br><span class="line">    ifs &gt;&gt; ch;</span><br><span class="line">    <span class="keyword">if</span> (ifs.eof())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">true</span>;</span><br><span class="line">        ifs.clear();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件存在并且有数据</span></span><br><span class="line">    ifs.putback(ch);    <span class="comment">//将上面读取的单个字符再放回</span></span><br><span class="line">    <span class="built_in">string</span> data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下标</span></span><br><span class="line">    <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (ifs&gt;&gt;data)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//临时存储</span></span><br><span class="line">        vector&lt;<span class="built_in">string</span>&gt;v;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> pos = <span class="number">-1</span>;   <span class="comment">//查到“,”位置的变量</span></span><br><span class="line">        <span class="built_in">int</span> start = <span class="number">0</span>;  <span class="comment">//起始位置</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos = data.find(<span class="string">&quot;,&quot;</span>, start);  <span class="comment">//从0开始查找 &#x27;，&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> (pos == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;      <span class="comment">//找不到 break返回</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> temp = data.substr(start, pos - start);  <span class="comment">//找到了，进行分割 参数1 起始位置，参数2 截取长度</span></span><br><span class="line">            v.push_back(temp);</span><br><span class="line">            start = pos + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数据放入到容器</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Record.insert(make_pair(index, v));</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;fileIsEmpty = <span class="literal">false</span>;</span><br><span class="line">    ifs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在speechManager构造函数中调用获取往届记录函数<br><img src="http://image.camcad.cn/2020/07/2020070811161617.jpg"></li></ul><h3 id="7-2-查看记录功能"><a href="#7-2-查看记录功能" class="headerlink" title="7.2 查看记录功能"></a>7.2 查看记录功能</h3><ul><li><p>在speechManager.h中添加保存的成员函数<code>void showRecord();</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示往届得分</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showRecord</span>()</span>;</span><br></pre></td></tr></table></figure></li><li><p>在speechManager.cpp中实现成员函数<code>void showRecord();</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看得分</span></span><br><span class="line"><span class="keyword">void</span> speechManager::showRecord()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Record.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;届&quot;</span> &lt;&lt;</span><br><span class="line">        <span class="string">&quot; 冠军编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">0</span>] &lt;&lt; <span class="string">&quot;  得分：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">1</span>] &lt;&lt;</span><br><span class="line">        <span class="string">&quot; \t亚军编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">2</span>] &lt;&lt; <span class="string">&quot;  得分：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">3</span>] &lt;&lt;</span><br><span class="line">        <span class="string">&quot; \t季军编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">4</span>] &lt;&lt; <span class="string">&quot;  得分：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Record[i][<span class="number">5</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-3-测试功能"><a href="#7-3-测试功能" class="headerlink" title="7.3 测试功能"></a>7.3 测试功能</h3><p>在main函数分支2 选项是，调用查看记录的接口<br><img src="http://image.camcad.cn/2020/07/2020070811232332.jpg"></p><ul><li>测试，调用查看记录的接口如下<br><img src="http://image.camcad.cn/2020/07/2020070811261571-1024x305.jpg"></li></ul><h3 id="7-4-bug解决"><a href="#7-4-bug解决" class="headerlink" title="7.4 bug解决"></a>7.4 bug解决</h3><p>目前程序中有几处bug未解决： 1.查看往届记录，若文件不存在或者为空，并未提示。 解决方式：在showRecord函数中，开始判断文件状态并加判断。<br><img src="http://image.camcad.cn/2020/07/2020070811322962-1024x546.jpg"></p><p>2.若记录为空或不存在，比完赛后依然提示记录为空 解决方式：saveRecord中更新文件为空的标志<br><img src="http://image.camcad.cn/2020/07/2020070811412234-1024x721.jpg"></p><p>3.比完赛后查不到本届比赛的记录，没有实时更新 解决方式：比赛完毕后，所有数据重置<br><img src="http://image.camcad.cn/2020/07/2020070811443750-613x1024.jpg"> </p><p>4.在初始化时，没有初始化记录容器 解决方式：initSpeech中添加初始化记录容器<br><img src="http://image.camcad.cn/2020/07/2020070811470773.jpg"></p><p>5.每次记录都是一样的 解决方式：在main函数一开始添加随机种子</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//随机数种子</span></span><br><span class="line">srand((unsigned <span class="built_in">int</span>)time(NULL));</span><br></pre></td></tr></table></figure><p>所有bug解决后 测试结果如下：<br><img src="http://image.camcad.cn/2020/07/2020070812025232-1024x319.jpg"></p><h2 id="8、清空记录"><a href="#8、清空记录" class="headerlink" title="8、清空记录"></a>8、清空记录</h2><h3 id="8-1-清空记录功能实现"><a href="#8-1-清空记录功能实现" class="headerlink" title="8.1 清空记录功能实现"></a>8.1 清空记录功能实现</h3><ul><li><p>在speechManager.h中添加保存记录的成员函数<code>void clearRecord();</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清空记录</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clearRecord</span>()</span>;</span><br></pre></td></tr></table></figure></li><li><p>在speechManager.cpp实现成员函数<code>void clearRecord();</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清空容器</span></span><br><span class="line"><span class="keyword">void</span> speechManager::clearRecord()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;清空记录，请选择以下选项：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1.确实&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2.取消&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    ofstream ofs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开文件--写文件</span></span><br><span class="line">    ofs.open(FILENAME, ios::trunc);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ofs.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化容器和属性</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;initSpeech();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化创建12名选手</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;createSpeaker();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取记录</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;loadRecord();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;清空完成&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试清空"><a href="#测试清空" class="headerlink" title="测试清空"></a>测试清空</h3><p>在main函数分支3选项中，调用清空比赛记录的接口<br><img src="http://image.camcad.cn/2020/07/2020070812365613.jpg"> </p><p>speech.csv中记录也为空<br><img src="http://image.camcad.cn/2020/07/2020070812394435-1024x575.jpg"></p></li><li><p>至此本案例结束。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程80：STL常用算法（常用集合算法）</title>
      <link href="/post/dfef9d8b.html"/>
      <url>/post/dfef9d8b.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="5-6-常用集合算法"><a href="#5-6-常用集合算法" class="headerlink" title="5.6 常用集合算法"></a>5.6 常用集合算法</h1><p><strong>学习目标：</strong><br>掌握常用的集合算法 </p><p><strong>算法简介：</strong></p><ul><li><code>set_intersection</code> &#x2F;&#x2F;求两个容器的交集</li><li><code>set_union</code> &#x2F;&#x2F;求两个容器的并集</li><li><code>set_difference</code> &#x2F;&#x2F;求两个容器的差集<br><img src="http://image.camcad.cn/2020/07/2020070609134663-1024x686.jpg"></li></ul><h2 id="5-6-1-set-intersection"><a href="#5-6-1-set-intersection" class="headerlink" title="5.6.1 set_intersection"></a>5.6.1 set_intersection</h2><p><strong>功能描述：</strong><br>求两个容器的交集 </p><p><strong>函数原型：</strong></p><ul><li><p><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code> &#x2F;&#x2F;求两个集合的交集 &#x2F;&#x2F;<strong>注意：两个集合必须是有序序列</strong> &#x2F;&#x2F;beg1 容器1开始迭代器 &#x2F;&#x2F;end1 容器1结束迭代器 &#x2F;&#x2F;beg2 容器2开始迭代器 &#x2F;&#x2F;end2 容器2结束迭代器 &#x2F;&#x2F;dest 目标容器开始迭代器</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v2;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(i);</span><br><span class="line">        v2.push_back(<span class="number">5</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;初始化&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.begin(), v1.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    for_each(v2.begin(), v2.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建目标容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;dest;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开辟空间</span></span><br><span class="line">    <span class="comment">//最特殊情况 大容器包含小容器 开辟空间 取小容器的size即可</span></span><br><span class="line">    dest.resize(min(v1.size(), v2.size()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求两个容器的交集</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;::iterator it = set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), dest.begin());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;求差后&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(dest.begin(), it, myPrint);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070607425795-1024x397.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>求交集的两个集合必须是有序序列。</li><li>目标容器开辟空间需要从<strong>两个容器中取小值</strong>。</li><li>set_intersection 返回值是交集最后一个元素的迭代器位置。</li></ul><h2 id="5-6-2-set-union"><a href="#5-6-2-set-union" class="headerlink" title="5.6.2 set_union"></a>5.6.2 set_union</h2><p><strong>功能描述：</strong><br>求两个集合的并集 </p><p><strong>函数原型：</strong></p><ul><li><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code> &#x2F;&#x2F;求两个集合的并集 &#x2F;&#x2F;<strong>注意：两个集合必须是有序序列</strong> &#x2F;&#x2F;beg1 容器1开始迭代器 &#x2F;&#x2F;end1 容器1结束迭代器 &#x2F;&#x2F;beg2 容器2开始迭代器 &#x2F;&#x2F;end2 容器2结束迭代器 &#x2F;&#x2F;dest 目标容器开始迭代器</li></ul><h3 id="示例代码：-1"><a href="#示例代码：-1" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v2;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(i);</span><br><span class="line">        v2.push_back(<span class="number">5</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;初始化&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.begin(), v1.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    for_each(v2.begin(), v2.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建目标容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;dest;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开辟空间</span></span><br><span class="line">    <span class="comment">//最特殊情况 两个容器没有交集 并集就是两个容器size相加</span></span><br><span class="line">    dest.resize(v1.size() + v2.size());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求两个容器的并集</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;::iterator it = set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), dest.begin());</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;并集后&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(dest.begin(), it, myPrint);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070609021018-1024x337.jpg"></p><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><ul><li>求并集的两个集合必须是有序序列。</li><li>目标容器开辟空间需要<strong>两个容器相加</strong>。</li><li>set_union返回值是并集最后一个元素迭代器位置。</li></ul><h2 id="5-6-3-set-difference"><a href="#5-6-3-set-difference" class="headerlink" title="5.6.3 set_difference"></a>5.6.3 set_difference</h2><p><strong>功能描述：</strong></p><ul><li><p>求两个集合的差集 <strong>函数原型：</strong></p></li><li><p><code>set_difference(iterator beg1, iterator end1,iterator beg2, iterator end2, iterator dest);</code> &#x2F;&#x2F;求两个集合的差集 &#x2F;&#x2F;<strong>注意：两个集合必须是有序序列</strong> &#x2F;&#x2F;beg1 容器1开始迭代器 &#x2F;&#x2F;end1 容器1结束迭代器 &#x2F;&#x2F;beg2 容器2开始迭代器 &#x2F;&#x2F;end2 容器2结束迭代器 &#x2F;&#x2F;drst 目标容器开始迭代器</p><h3 id="示例代码：-2"><a href="#示例代码：-2" class="headerlink" title="示例代码："></a>示例代码：</h3></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v2;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(i);</span><br><span class="line">        v2.push_back(<span class="number">5</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;初始化&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.begin(), v1.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    for_each(v2.begin(), v2.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建目标容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;dest;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开辟空间</span></span><br><span class="line">    <span class="comment">//最特殊情况 两个容器没有差集 取两个容器中大的size作为目标容器开辟的空间</span></span><br><span class="line">    dest.resize(max(v1.size(), v2.size()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求v1和v2的差集</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;::iterator it = set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), dest.begin());</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v1和v2的差集为：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(dest.begin(), it, myPrint);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求v2和v1的差集</span></span><br><span class="line">    it = set_difference(v2.begin(), v2.end(), v1.begin(), v1.end(), dest.begin());</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;v2和v1的差集为：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(dest.begin(), it, myPrint);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-2"><a href="#以上代码编译执行结果如下：-2" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070609301655-1024x447.jpg"></p><h3 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h3><ul><li>求差集的两个集合必须是有序序列。</li><li>目标容器开辟空间需要从<strong>两个容器取较大值</strong>。</li><li>set_difference返回值是差集中最后一个元素迭代器位置。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程79：STL常用算法（常用算术生成算法）</title>
      <link href="/post/56601927.html"/>
      <url>/post/56601927.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="5-5-常用算术生成算法"><a href="#5-5-常用算术生成算法" class="headerlink" title="5.5 常用算术生成算法"></a>5.5 常用算术生成算法</h1><p><strong>学习目标：</strong><br>掌握常用的算术生成算法 </p><p><strong>注意：</strong></p><ul><li>算术生成算法属于小型算法，使用时包含的头文件为<code>#include &lt;numeric&gt;</code></li></ul><p><strong>算法简介：</strong></p><ul><li><code>accumulate</code> &#x2F;&#x2F;计算容器元素累计总和</li><li><code>fill</code> &#x2F;&#x2F;向容器中添加元素</li></ul><h2 id="5-5-1-accumulate"><a href="#5-5-1-accumulate" class="headerlink" title="5.5.1 accumulate"></a>5.5.1 accumulate</h2><p><strong>功能描述：</strong><br>计算区间内 容器元素累计总和 </p><p><strong>函数原型：</strong></p><ul><li><code>accumulate(iterator beg, iterator end, value);</code> &#x2F;&#x2F;计算容器元素累计总和 &#x2F;&#x2F;beg 开始迭代器 &#x2F;&#x2F;end 结束迭代器 &#x2F;&#x2F;value 起始值</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;numeric&gt;</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> length 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt;= length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印显示</span></span><br><span class="line">    for_each(v1.begin(), v1.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算容器元素累计总和</span></span><br><span class="line">    <span class="built_in">int</span> sum = accumulate(v1.begin(), v1.end(), <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;容器元素累计总和：&quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070606335282-1024x290.jpg"></p><h3 id="总结：accumulate使用时头文件注意是numeric，这个算法很实用。"><a href="#总结：accumulate使用时头文件注意是numeric，这个算法很实用。" class="headerlink" title="总结：accumulate使用时头文件注意是numeric，这个算法很实用。"></a>总结：accumulate使用时头文件注意是numeric，这个算法很实用。</h3><h2 id="5-5-2-fill"><a href="#5-5-2-fill" class="headerlink" title="5.5.2 fill"></a>5.5.2 fill</h2><p><strong>功能描述：</strong><br>向容器中填充指定的元素 </p><p><strong>函数原型：</strong></p><ul><li><code>fill(iterator beg, iterator end, value);</code> &#x2F;&#x2F;向容器中填充元素 &#x2F;&#x2F;beg 开始迭代器 &#x2F;&#x2F;end 结束迭代器 &#x2F;&#x2F;value 填充的值</li></ul><h3 id="示例代码：-1"><a href="#示例代码：-1" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;numeric&gt;</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开辟空间</span></span><br><span class="line">    v1.resize(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向容器中填充指定的元素</span></span><br><span class="line">    fill(v1.begin(), v1.end(), <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印显示</span></span><br><span class="line">    for_each(v1.begin(), v1.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070606460034-1024x267.jpg"></p><h3 id="总结：利用fill可以将容器区间内元素填充为指定的值。"><a href="#总结：利用fill可以将容器区间内元素填充为指定的值。" class="headerlink" title="总结：利用fill可以将容器区间内元素填充为指定的值。"></a>总结：利用fill可以将容器区间内元素填充为指定的值。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程78：STL常用算法（常用拷贝和替换算法）</title>
      <link href="/post/b764b3e7.html"/>
      <url>/post/b764b3e7.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="5-4-常用拷贝和替换算法"><a href="#5-4-常用拷贝和替换算法" class="headerlink" title="5.4 常用拷贝和替换算法"></a>5.4 常用拷贝和替换算法</h1><p><strong>学习目标：</strong><br>掌握常用的拷贝和替换算法 </p><p><strong>算法简介：</strong></p><ul><li><code>copy</code> &#x2F;&#x2F;容器内指定范围的元素拷贝到另一容器中</li><li><code>replace</code> &#x2F;&#x2F;将容器内指定范围的旧元素修改为新元素</li><li><code>replace_if</code> &#x2F;&#x2F;容器内指定范围满足条件的元素替换为新元素</li><li><code>swap</code> &#x2F;&#x2F;互换两个容器的元素</li></ul><h2 id="5-4-1-copy"><a href="#5-4-1-copy" class="headerlink" title="5.4.1 copy"></a>5.4.1 copy</h2><p><strong>功能描述：</strong><br>容器内指定范围的元素拷贝到另一容器中。 </p><p><strong>函数原型：</strong></p><ul><li><code>copy(iterator beg, iterator end, iterator dest);</code> &#x2F;&#x2F;按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置。 &#x2F;&#x2F;beg 开始迭代器 &#x2F;&#x2F;end 结束迭代器 &#x2F;&#x2F;dest 目标起始迭代器</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(<span class="number">10</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印显示</span></span><br><span class="line">    for_each(v1.begin(), v1.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建目标容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;dest;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开辟空间</span></span><br><span class="line">    dest.resize(v1.size());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拷贝容器</span></span><br><span class="line">    copy(v1.begin(), v1.end(), dest.begin());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印显示</span></span><br><span class="line">    for_each(dest.begin(), dest.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070604182922-1024x256.jpg"></p><h3 id="总结：利用copy算法在拷贝时，目标容器记得提前开辟空间。"><a href="#总结：利用copy算法在拷贝时，目标容器记得提前开辟空间。" class="headerlink" title="总结：利用copy算法在拷贝时，目标容器记得提前开辟空间。"></a>总结：利用copy算法在拷贝时，目标容器记得提前开辟空间。</h3><h2 id="5-4-2-replace"><a href="#5-4-2-replace" class="headerlink" title="5.4.2 replace"></a>5.4.2 replace</h2><p><strong>功能描述：</strong></p><ul><li>将容器内指定范围的旧元素修改为新元素。</li></ul><p><strong>函数原型：</strong></p><ul><li><code>replace(iterator beg, iterator end, oldvalue, newvalue);</code> &#x2F;&#x2F;将区间内旧元素 替换成新元素 &#x2F;&#x2F;beg 开始迭代器 &#x2F;&#x2F;end 结束迭代器 &#x2F;&#x2F;oldvalue 旧元素 &#x2F;&#x2F;newvalue 新元素</li></ul><h3 id="示例代码：-1"><a href="#示例代码：-1" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    v1.push_back(<span class="number">10</span>);</span><br><span class="line">    v1.push_back(<span class="number">30</span>);</span><br><span class="line">    v1.push_back(<span class="number">20</span>);</span><br><span class="line">    v1.push_back(<span class="number">60</span>);</span><br><span class="line">    v1.push_back(<span class="number">20</span>);</span><br><span class="line">    v1.push_back(<span class="number">40</span>);</span><br><span class="line">    v1.push_back(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;修改前&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.begin(), v1.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//旧元素修改成新元素</span></span><br><span class="line">    replace(v1.begin(), v1.end(), <span class="number">20</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;修改后&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.begin(), v1.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070605164844-1024x362.jpg"></p><h3 id="总结：replace会替换区间内满足条件的元素。"><a href="#总结：replace会替换区间内满足条件的元素。" class="headerlink" title="总结：replace会替换区间内满足条件的元素。"></a>总结：replace会替换区间内满足条件的元素。</h3><h2 id="5-4-3-replace-if"><a href="#5-4-3-replace-if" class="headerlink" title="5.4.3 replace_if"></a>5.4.3 replace_if</h2><p><strong>功能描述：</strong><br>将区间内满足条件的元素，替换成指定元素。 </p><p><strong>函数原型：</strong></p><ul><li><code>replace_if(iterator beg, iterator end, _pred, newvalue);</code> &#x2F;&#x2F;按条件替换元素，满足条件的替换成指定元素 &#x2F;&#x2F;beg 开始迭代器 &#x2F;&#x2F;end 结束迭代器 &#x2F;&#x2F;_pred 谓词 &#x2F;&#x2F;newvalue 替换的新元素</li></ul><h3 id="示例代码：-2"><a href="#示例代码：-2" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印显示</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//谓词</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">value30</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">operator</span>()(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> val &gt; <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    v1.push_back(<span class="number">11</span>);</span><br><span class="line">    v1.push_back(<span class="number">21</span>);</span><br><span class="line">    v1.push_back(<span class="number">12</span>);</span><br><span class="line">    v1.push_back(<span class="number">34</span>);</span><br><span class="line">    v1.push_back(<span class="number">14</span>);</span><br><span class="line">    v1.push_back(<span class="number">32</span>);</span><br><span class="line">    v1.push_back(<span class="number">65</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;替换前&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.begin(), v1.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将区间内满足条件的元素，替换成指定元素</span></span><br><span class="line">    replace_if(v1.begin(), v1.end(), value30(), <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;替换后&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.begin(), v1.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-2"><a href="#以上代码编译执行结果如下：-2" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070605340995-1024x341.jpg"></p><h3 id="总结：replace-if按条件查找，可以利用仿函数灵活筛选满足的条件。"><a href="#总结：replace-if按条件查找，可以利用仿函数灵活筛选满足的条件。" class="headerlink" title="总结：replace_if按条件查找，可以利用仿函数灵活筛选满足的条件。"></a>总结：replace_if按条件查找，可以利用仿函数灵活筛选满足的条件。</h3><h2 id="5-4-4-swap"><a href="#5-4-4-swap" class="headerlink" title="5.4.4 swap"></a>5.4.4 swap</h2><p><strong>功能描述：</strong><br>互换两个容器的元素 </p><p><strong>函数原型：</strong></p><ul><li><code>swap(container c1, container c2);</code> &#x2F;&#x2F;互换两个容器的元素 &#x2F;&#x2F;c1 容器一 &#x2F;&#x2F;c2 容器二</li></ul><h3 id="示例代码：-3"><a href="#示例代码：-3" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印显示</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//v1 容器插入元素</span></span><br><span class="line">    v1.push_back(<span class="number">11</span>);</span><br><span class="line">    v1.push_back(<span class="number">21</span>);</span><br><span class="line">    v1.push_back(<span class="number">12</span>);</span><br><span class="line">    v1.push_back(<span class="number">34</span>);</span><br><span class="line">    v1.push_back(<span class="number">14</span>);</span><br><span class="line">    v1.push_back(<span class="number">32</span>);</span><br><span class="line">    v1.push_back(<span class="number">65</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//v2 容器插入元素</span></span><br><span class="line">    v2.push_back(<span class="number">100</span>);</span><br><span class="line">    v2.push_back(<span class="number">110</span>);</span><br><span class="line">    v2.push_back(<span class="number">230</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;互换之前&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.begin(), v1.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    for_each(v2.begin(), v2.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//互换两个容器的元素</span></span><br><span class="line">    swap(v1, v2);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;互换之后&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.begin(), v1.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    for_each(v2.begin(), v2.end(), myPrint);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-3"><a href="#以上代码编译执行结果如下：-3" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070605554043.jpg"></p><h3 id="总结：swap交换容器时，注意交换的容器要同种类型。"><a href="#总结：swap交换容器时，注意交换的容器要同种类型。" class="headerlink" title="总结：swap交换容器时，注意交换的容器要同种类型。"></a>总结：swap交换容器时，注意交换的容器要同种类型。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程77：STL常用算法（常用排序算法）</title>
      <link href="/post/c9c5a6ae.html"/>
      <url>/post/c9c5a6ae.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="5-3-常用排序算法"><a href="#5-3-常用排序算法" class="headerlink" title="5.3 常用排序算法"></a>5.3 常用排序算法</h1><p><strong>学习目标：</strong><br>掌握常用的排序算法 </p><p><strong>算法简介：</strong></p><ul><li><code>sort</code> &#x2F;&#x2F;对容器内元素进行排序</li><li><code>random_shuffle</code> &#x2F;&#x2F;洗牌 指定范围内的元素随机调整次序</li><li><code>merge</code> &#x2F;&#x2F;容器元素合并，并存储到另一个容器中</li><li><code>reverse</code> &#x2F;&#x2F;反转指定范围的元素</li></ul><h2 id="5-3-1-sort"><a href="#5-3-1-sort" class="headerlink" title="5.3.1 sort"></a>5.3.1 sort</h2><p><strong>功能描述：</strong><br>对容器内元素进行排序。 </p><p><strong>函数原型：</strong></p><ul><li><code>sort(iterator beg, iterator end, _pred);</code> &#x2F;&#x2F;按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置。 &#x2F;&#x2F;beg 开始迭代器 &#x2F;&#x2F;end 结束迭代器 &#x2F;&#x2F;_pred 谓词</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#include&lt;functional&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印显示</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    v1.push_back(<span class="number">11</span>);</span><br><span class="line">    v1.push_back(<span class="number">21</span>);</span><br><span class="line">    v1.push_back(<span class="number">12</span>);</span><br><span class="line">    v1.push_back(<span class="number">24</span>);</span><br><span class="line">    v1.push_back(<span class="number">43</span>);</span><br><span class="line">    v1.push_back(<span class="number">54</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印显示</span></span><br><span class="line">    for_each(v1.begin(), v1.end(), printVector);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序 升序</span></span><br><span class="line">    sort(v1.begin(), v1.end());</span><br><span class="line">    for_each(v1.begin(), v1.end(), printVector);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序 降序</span></span><br><span class="line">    sort(v1.begin(), v1.end(), greater&lt;<span class="built_in">int</span>&gt;());</span><br><span class="line">    for_each(v1.begin(), v1.end(), printVector);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070509471948-1024x315.jpg"></p><h3 id="总结：sort属于开发中最常用的算法之一，需熟练掌握。"><a href="#总结：sort属于开发中最常用的算法之一，需熟练掌握。" class="headerlink" title="总结：sort属于开发中最常用的算法之一，需熟练掌握。"></a>总结：sort属于开发中最常用的算法之一，需熟练掌握。</h3><h2 id="5-3-2-random-shuffle"><a href="#5-3-2-random-shuffle" class="headerlink" title="5.3.2 random_shuffle"></a>5.3.2 random_shuffle</h2><p><strong>功能描述：</strong><br>洗牌 指定范围内的元素随机调整次序 </p><p><strong>函数原型：</strong></p><ul><li><code>random_shuffle(iterator beg, iterator end);</code></li></ul><h3 id="示例代码：-1"><a href="#示例代码：-1" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;functional&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&lt;ctime&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    v1.push_back(<span class="number">10</span>);</span><br><span class="line">    v1.push_back(<span class="number">11</span>);</span><br><span class="line">    v1.push_back(<span class="number">12</span>);</span><br><span class="line">    v1.push_back(<span class="number">13</span>);</span><br><span class="line">    v1.push_back(<span class="number">14</span>);</span><br><span class="line">    v1.push_back(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印显示</span></span><br><span class="line">    for_each(v1.begin(), v1.end(), printVector);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//洗牌 指定范围内的元素随机调整次序</span></span><br><span class="line">    random_shuffle(v1.begin(), v1.end());</span><br><span class="line">    for_each(v1.begin(), v1.end(), printVector);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//随机数 种子</span></span><br><span class="line">    srand((unsigned <span class="built_in">int</span>)time(NULL));</span><br><span class="line"></span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070510125219-1024x314.jpg"></p><h3 id="总结：random-shuffle洗牌算法比较实用，使用时记得加随机数种子。"><a href="#总结：random-shuffle洗牌算法比较实用，使用时记得加随机数种子。" class="headerlink" title="总结：random_shuffle洗牌算法比较实用，使用时记得加随机数种子。"></a>总结：random_shuffle洗牌算法比较实用，使用时记得加随机数种子。</h3><h2 id="5-3-3-merge"><a href="#5-3-3-merge" class="headerlink" title="5.3.3 merge"></a>5.3.3 merge</h2><p><strong>功能描述：</strong><br>两个容器元素合并，并存储到另一个容器中。 </p><p><strong>函数原型：</strong></p><ul><li><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code> &#x2F;&#x2F;容器元素合并，并存储到另一容器中 &#x2F;&#x2F;注意：两个容器必须是<strong>有序的</strong> &#x2F;&#x2F;beg1 容器1开始迭代器 &#x2F;&#x2F;end1 容器1结束迭代器 &#x2F;&#x2F;beg2 容器2开始迭代器 &#x2F;&#x2F;end2 容器2结束迭代器 &#x2F;&#x2F;dest 目标容器开始迭代器</li></ul><h3 id="示例代码：-2"><a href="#示例代码：-2" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#include&lt;functional&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v2;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(i);</span><br><span class="line">        v2.push_back(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建目标容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;dest;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开辟内存</span></span><br><span class="line">    dest.resize(v1.size() + v2.size());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//两个容器元素 合并</span></span><br><span class="line">    merge(v1.begin(), v1.end(), v2.begin(), v2.end(), dest.begin());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印显示</span></span><br><span class="line">    for_each(dest.begin(), dest.end(), printVector);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-2"><a href="#以上代码编译执行结果如下：-2" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070510435986-1024x266.jpg"></p><h3 id="总结：merge合并的两个容器必须是有序序列。"><a href="#总结：merge合并的两个容器必须是有序序列。" class="headerlink" title="总结：merge合并的两个容器必须是有序序列。"></a>总结：merge合并的两个容器必须是有序序列。</h3><h2 id="5-3-4-reverse"><a href="#5-3-4-reverse" class="headerlink" title="5.3.4 reverse"></a>5.3.4 reverse</h2><p><strong>功能描述：</strong><br>将容器内元素进行反转 </p><p><strong>函数原型：</strong></p><ul><li><code>reverse(iterator beg, iterator end);</code> &#x2F;&#x2F;反转指定范围的元素 &#x2F;&#x2F;beg 开始迭代器 &#x2F;&#x2F;end 结束迭代器</li></ul><h3 id="示例代码：-3"><a href="#示例代码：-3" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    v1.push_back(<span class="number">10</span>);</span><br><span class="line">    v1.push_back(<span class="number">30</span>);</span><br><span class="line">    v1.push_back(<span class="number">40</span>);</span><br><span class="line">    v1.push_back(<span class="number">50</span>);</span><br><span class="line">    v1.push_back(<span class="number">70</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;反转前&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v1.begin(), v1.end(), printVector);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;反转后&quot;</span> &lt;&lt; endl;</span><br><span class="line">    reverse(v1.begin(), v1.end());</span><br><span class="line">    for_each(v1.begin(), v1.end(), printVector);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-3"><a href="#以上代码编译执行结果如下：-3" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070510582623.jpg"></p><h3 id="总结：reverse反转区间内元素，面试题可以涉及到。"><a href="#总结：reverse反转区间内元素，面试题可以涉及到。" class="headerlink" title="总结：reverse反转区间内元素，面试题可以涉及到。"></a>总结：reverse反转区间内元素，面试题可以涉及到。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程76：STL常用算法（常用查找算法）</title>
      <link href="/post/4e4670d3.html"/>
      <url>/post/4e4670d3.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="5-2-常用查找算法"><a href="#5-2-常用查找算法" class="headerlink" title="5.2 常用查找算法"></a>5.2 常用查找算法</h1><p><strong>学习目标：</strong><br>掌握常用的查找算法 </p><p><strong>算法简介：</strong></p><ul><li><code>find</code> &#x2F;&#x2F;查找元素</li><li><code>find_if</code> &#x2F;&#x2F;按条件查找元素</li><li><code>adjacent_find</code> &#x2F;&#x2F;查找相邻重复元素</li><li><code>binary_search</code> &#x2F;&#x2F;二分查找法</li><li><code>count</code> &#x2F;&#x2F;统计元素个数</li><li><code>count_if</code> &#x2F;&#x2F;按条件统计元素个数</li></ul><h2 id="5-2-1-find"><a href="#5-2-1-find" class="headerlink" title="5.2.1 find"></a>5.2.1 find</h2><p><strong>功能描述：</strong><br>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()。 </p><p><strong>函数原型：</strong></p><ul><li><code>find(iterator beg, iterator end, value);</code> &#x2F;&#x2F;按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代位置。 &#x2F;&#x2F;beg 开始迭代器 &#x2F;&#x2F;end 结束迭代器 &#x2F;&#x2F;value 查找的元素</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//内置数据类型 查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(<span class="number">10</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;::iterator it = find(v1.begin(), v1.end(), <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">if</span> (it!=v1.end())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;查找 find(v1.begin(), v1.end(), 16) 元素为：&quot;</span>&lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;未找到！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载==</span></span><br><span class="line">    <span class="built_in">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Person &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name&amp;&amp;<span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="built_in">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setValue</span>(<span class="params">vector&lt;Person&gt; &amp;v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> number = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//姓名</span></span><br><span class="line">        <span class="built_in">string</span> m_Name = <span class="string">&quot;员工&quot;</span>;</span><br><span class="line">        m_Name += number[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//年龄</span></span><br><span class="line">        <span class="built_in">int</span> m_Age = rand() % <span class="number">10</span> + <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">Person <span class="title">p</span>(<span class="params">m_Name, m_Age</span>)</span>;</span><br><span class="line">        v.push_back(p);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历打印</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">printPerson</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span>()(<span class="params"><span class="keyword">const</span> Person &amp;p</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot; \t年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义数据类型 查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;Person&gt; v;</span><br><span class="line">    setValue(v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印显示</span></span><br><span class="line">    <span class="comment">//for_each(v.begin(), v.end(), printPerson());</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Person <span class="title">pp</span>(<span class="params"><span class="string">&quot;员工D&quot;</span>, <span class="number">16</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    vector&lt;Person&gt;::iterator it = find(v.begin(), v.end(), pp);</span><br><span class="line">    <span class="keyword">if</span> (it!=v.end())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;查到 姓名：&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; \t查到 年龄：&quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;未找到！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;内置数据类型 查找 &quot;</span> &lt;&lt; endl;</span><br><span class="line">    test01();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;自定义数据类型 查找&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070412101338-1024x297.jpg"></p><h3 id="总结：利用find可以在容器中找指定的元素，返回值是迭代器。"><a href="#总结：利用find可以在容器中找指定的元素，返回值是迭代器。" class="headerlink" title="总结：利用find可以在容器中找指定的元素，返回值是迭代器。"></a>总结：利用find可以在容器中找指定的元素，返回值是迭代器。</h3><h2 id="5-2-2-find-if"><a href="#5-2-2-find-if" class="headerlink" title="5.2.2 find_if"></a>5.2.2 find_if</h2><p><strong>功能描述：</strong><br>按条件查找元素。 </p><p><strong>函数原型：</strong></p><ul><li><code>find_if(iterator beg, iterator end,_pred);</code> &#x2F;&#x2F;按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置。 &#x2F;&#x2F;beg 开始迭代器 &#x2F;&#x2F;end 结束迭代器 &#x2F;&#x2F;_pred 函数或者谓词（返回bool类型的仿函数）</li></ul><p><strong>示例代码：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">internal01</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">operator</span>()(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> val &gt; <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内置数据类型 按条件查找元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按条件查找元素</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;::iterator it = find_if(v1.begin(), v1.end(), internal01());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (it!=v1.end())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;大于7的第一个元素：&quot;</span> &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;未找到元素！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="built_in">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">external01</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">operator</span>()(<span class="params">Person p</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> p.m_Age == <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义数据类型 按条件查找元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建元素</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span>(<span class="params"><span class="string">&quot;张三&quot;</span>, <span class="number">26</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span>(<span class="params"><span class="string">&quot;小二&quot;</span>, <span class="number">18</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span>(<span class="params"><span class="string">&quot;赵六&quot;</span>, <span class="number">23</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span>(<span class="params"><span class="string">&quot;李四&quot;</span>, <span class="number">20</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span>(<span class="params"><span class="string">&quot;王五&quot;</span>, <span class="number">15</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;Person&gt;v2;</span><br><span class="line">    v2.push_back(p1);</span><br><span class="line">    v2.push_back(p2);</span><br><span class="line">    v2.push_back(p3);</span><br><span class="line">    v2.push_back(p4);</span><br><span class="line">    v2.push_back(p5);</span><br><span class="line"></span><br><span class="line">    vector&lt;Person&gt;::iterator it = find_if(v2.begin(), v2.end(), external01());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (it!=v2.end())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;年龄等于20的 姓名为：&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; \t年龄为：&quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;未找到！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;内置数据类型 查找 &quot;</span> &lt;&lt; endl;</span><br><span class="line">    test01();</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;自定义数据类型 查找&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070502053513-1024x304.jpg"></p><h2 id="5-2-3-adjacent-find"><a href="#5-2-3-adjacent-find" class="headerlink" title="5.2.3 adjacent_find"></a>5.2.3 adjacent_find</h2><p><strong>功能描述：</strong></p><ul><li>查找相邻重复元素。</li></ul><p><strong>函数原型：</strong></p><ul><li><code>adjacent_find(iterator beg, iterator end):</code> &#x2F;&#x2F;查找相邻重复元素，返回相邻元素的第一个位置的迭代器。 &#x2F;&#x2F;beg 开始迭代器 &#x2F;&#x2F;end 结束迭代器</li></ul><h3 id="示例代码：-1"><a href="#示例代码：-1" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//内置数据类型 按条件查找元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    v1.push_back(<span class="number">3</span>);</span><br><span class="line">    v1.push_back(<span class="number">4</span>);</span><br><span class="line">    v1.push_back(<span class="number">2</span>);</span><br><span class="line">    v1.push_back(<span class="number">4</span>);</span><br><span class="line">    v1.push_back(<span class="number">3</span>);</span><br><span class="line">    v1.push_back(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找相邻重复元素</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;::iterator it = adjacent_find(v1.begin(), v1.end());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (it!=v1.end())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;相邻重复元素为：&quot;</span> &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;未找到！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-2"><a href="#以上代码编译执行结果如下：-2" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070502270475-1024x236.jpg"></p><h3 id="总结：面试题中如果出现查找相邻重复元素，记得用STL中的adjacent-find算法。"><a href="#总结：面试题中如果出现查找相邻重复元素，记得用STL中的adjacent-find算法。" class="headerlink" title="总结：面试题中如果出现查找相邻重复元素，记得用STL中的adjacent_find算法。"></a>总结：面试题中如果出现查找相邻重复元素，记得用STL中的adjacent_find算法。</h3><h2 id="5-2-4-binary-search"><a href="#5-2-4-binary-search" class="headerlink" title="5.2.4 binary_search"></a>5.2.4 binary_search</h2><p><strong>功能描述：</strong><br>查找指定元素是否存在 </p><p><strong>函数原型：</strong></p><ul><li><p><code>bool binary_search(iterator beg,iterator end,value);</code> &#x2F;&#x2F;查找指定的元素，查到返回true 否则false &#x2F;&#x2F;注意：在<strong>无序序列中不可用</strong> &#x2F;&#x2F;beg 开始迭代器 &#x2F;&#x2F;end 结束迭代器 &#x2F;&#x2F;value 查找的元素</p><h3 id="示例代码：-2"><a href="#示例代码：-2" class="headerlink" title="示例代码："></a>示例代码：</h3></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//v1.push_back(3);      //如果是无序序列，结果未知！</span></span><br><span class="line">    <span class="comment">//注意：容器必须是有序的序列。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找指定元素是否存在</span></span><br><span class="line">    <span class="built_in">bool</span> ret = binary_search(v1.begin(), v1.end(), <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;元素存在！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;元素不存在！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-3"><a href="#以上代码编译执行结果如下：-3" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070502504122-1024x340.jpg"></p><h3 id="总结：二分查找法查找效率很高，值得注意的是查找的容器中元素必须是有序序列。"><a href="#总结：二分查找法查找效率很高，值得注意的是查找的容器中元素必须是有序序列。" class="headerlink" title="总结：二分查找法查找效率很高，值得注意的是查找的容器中元素必须是有序序列。"></a>总结：二分查找法查找效率很高，值得注意的是查找的容器中元素必须是有序序列。</h3><h2 id="5-2-5-count"><a href="#5-2-5-count" class="headerlink" title="5.2.5 count"></a>5.2.5 count</h2><p><strong>功能描述：</strong><br>统计元素个数 </p><p><strong>函数原型：</strong></p><ul><li><code>count(iterator beg, iterator end, value);</code> &#x2F;&#x2F;统计元素出现次数 &#x2F;&#x2F;beg 开始迭代器 &#x2F;&#x2F;end 结束迭代器 &#x2F;&#x2F;value 统计的元素</li></ul><h3 id="示例代码：-3"><a href="#示例代码：-3" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.内置数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    v1.push_back(<span class="number">10</span>);</span><br><span class="line">    v1.push_back(<span class="number">12</span>);</span><br><span class="line">    v1.push_back(<span class="number">21</span>);</span><br><span class="line">    v1.push_back(<span class="number">23</span>);</span><br><span class="line">    v1.push_back(<span class="number">12</span>);</span><br><span class="line">    v1.push_back(<span class="number">21</span>);</span><br><span class="line">    v1.push_back(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//统计元素个数</span></span><br><span class="line">    <span class="built_in">int</span> num = count(v1.begin(), v1.end(), <span class="number">12</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;12 相同元素个数为：&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.自定义数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="built_in">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载==</span></span><br><span class="line">    <span class="built_in">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Person &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建元素</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span>(<span class="params"><span class="string">&quot;刘备&quot;</span>, <span class="number">35</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span>(<span class="params"><span class="string">&quot;关羽&quot;</span>, <span class="number">37</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span>(<span class="params"><span class="string">&quot;张飞&quot;</span>, <span class="number">35</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span>(<span class="params"><span class="string">&quot;赵云&quot;</span>, <span class="number">35</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span>(<span class="params"><span class="string">&quot;曹操&quot;</span>, <span class="number">36</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p6</span>(<span class="params"><span class="string">&quot;黄盖&quot;</span>, <span class="number">65</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;Person&gt;v2;</span><br><span class="line">    v2.push_back(p1);</span><br><span class="line">    v2.push_back(p2);</span><br><span class="line">    v2.push_back(p3);</span><br><span class="line">    v2.push_back(p4);</span><br><span class="line">    v2.push_back(p5);</span><br><span class="line">    v2.push_back(p6);</span><br><span class="line"></span><br><span class="line">    <span class="function">Person <span class="title">pp</span>(<span class="params"><span class="string">&quot;小三&quot;</span>, <span class="number">35</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> num = count(v2.begin(), v2.end(), pp);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;pp 相同元素个数为：&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;内置数据类型&quot;</span> &lt;&lt; endl;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;自定义数据类型&quot;</span> &lt;&lt; endl;</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-4"><a href="#以上代码编译执行结果如下：-4" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070504194364-1024x383.jpg"></p><h3 id="总结：统计自定义数据类型的时候，需要配合重载operator-。"><a href="#总结：统计自定义数据类型的时候，需要配合重载operator-。" class="headerlink" title="总结：统计自定义数据类型的时候，需要配合重载operator==。"></a>总结：统计自定义数据类型的时候，需要配合重载<code>operator==</code>。</h3><h2 id="5-2-6-count-if"><a href="#5-2-6-count-if" class="headerlink" title="5.2.6 count_if"></a>5.2.6 count_if</h2><p><strong>功能描述：</strong><br>按条件统计元素个数 </p><p><strong>函数原型：</strong></p><ul><li><code>count_if(iterator beg, iterator end, _pred);</code> &#x2F;&#x2F;按条件统计元素出现次数 &#x2F;&#x2F;beg 开始迭代器 &#x2F;&#x2F;end 结束迭代器 &#x2F;&#x2F;_pred 谓词</li></ul><h3 id="示例代码：-4"><a href="#示例代码：-4" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Greater12</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">operator</span>()(<span class="params"><span class="keyword">const</span> <span class="built_in">int</span> val</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> val &gt; <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.内置数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    v1.push_back(<span class="number">10</span>);</span><br><span class="line">    v1.push_back(<span class="number">12</span>);</span><br><span class="line">    v1.push_back(<span class="number">21</span>);</span><br><span class="line">    v1.push_back(<span class="number">23</span>);</span><br><span class="line">    v1.push_back(<span class="number">12</span>);</span><br><span class="line">    v1.push_back(<span class="number">21</span>);</span><br><span class="line">    v1.push_back(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//统计元素个数</span></span><br><span class="line">    <span class="built_in">int</span> num = count_if(v1.begin(), v1.end(),Greater12());</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;大于12的元素个数为：&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.自定义数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="built_in">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Greater35</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">operator</span>()(<span class="params"><span class="keyword">const</span> Person &amp;p</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.m_Age&gt;<span class="number">35</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建元素</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span>(<span class="params"><span class="string">&quot;刘备&quot;</span>, <span class="number">70</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span>(<span class="params"><span class="string">&quot;关羽&quot;</span>, <span class="number">37</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span>(<span class="params"><span class="string">&quot;张飞&quot;</span>, <span class="number">35</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span>(<span class="params"><span class="string">&quot;赵云&quot;</span>, <span class="number">35</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span>(<span class="params"><span class="string">&quot;曹操&quot;</span>, <span class="number">36</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p6</span>(<span class="params"><span class="string">&quot;黄盖&quot;</span>, <span class="number">65</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;Person&gt;v2;</span><br><span class="line">    v2.push_back(p1);</span><br><span class="line">    v2.push_back(p2);</span><br><span class="line">    v2.push_back(p3);</span><br><span class="line">    v2.push_back(p4);</span><br><span class="line">    v2.push_back(p5);</span><br><span class="line">    v2.push_back(p6);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> num = count_if(v2.begin(), v2.end(), Greater35());</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;年龄大于35的元素个数为：&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;内置数据类型&quot;</span> &lt;&lt; endl;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;自定义数据类型&quot;</span> &lt;&lt; endl;</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-5"><a href="#以上代码编译执行结果如下：-5" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070504450022-1024x354.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程75：STL常用算法（常用遍历算法-transform）</title>
      <link href="/post/39184424.html"/>
      <url>/post/39184424.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="5-1-2-transform"><a href="#5-1-2-transform" class="headerlink" title="5.1.2 transform"></a>5.1.2 transform</h2><p><strong>功能描述：</strong><br>搬运容器到另一个容器中 </p><p><strong>函数原型：</strong></p><ul><li><code>transform(iterator beg1,iterator end1, iterator beg2 ,_func);</code> &#x2F;&#x2F;beg1源容器开始迭代器 &#x2F;&#x2F;end1源容器结束迭代器 &#x2F;&#x2F;beg2 目标容器开始迭代器 &#x2F;&#x2F;_func 函数或者函数对象</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#include&lt;functional&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印显示</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> vector&lt;<span class="built_in">int</span>&gt; v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::const_iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//仿函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">transForm01</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">operator</span>()(<span class="params"><span class="built_in">int</span> v1</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> v1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">transForm02</span>(<span class="params"><span class="built_in">int</span> v2</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> v2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(<span class="number">10</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    printVector(<span class="string">&quot;v1 初始化&quot;</span>, v1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//搬运容器到另一个容器中</span></span><br><span class="line">    <span class="comment">//方法一</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v2;        <span class="comment">//目标容器</span></span><br><span class="line">    v2.resize(v1.size());   <span class="comment">//目标容器 需要提前开辟空间</span></span><br><span class="line">    transform(v1.begin(), v1.end(), v2.begin(), transForm01());</span><br><span class="line">    printVector(<span class="string">&quot;v2 初始化&quot;</span>, v2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法二</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v3;        <span class="comment">//目标容器</span></span><br><span class="line">    v3.resize(v1.size());   <span class="comment">//目标容器 需要提前开辟空间</span></span><br><span class="line">    transform(v1.begin(), v1.end(), v3.begin(), transForm02);</span><br><span class="line">    printVector(<span class="string">&quot;v3 初始化&quot;</span>, v3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/202007041013116-1024x262.jpg"></p><h3 id="总结：搬运的目标容器必须要提前开辟空间，否则无法正常搬运。"><a href="#总结：搬运的目标容器必须要提前开辟空间，否则无法正常搬运。" class="headerlink" title="总结：搬运的目标容器必须要提前开辟空间，否则无法正常搬运。"></a>总结：搬运的目标容器必须要提前开辟空间，否则无法正常搬运。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程74：STL常用算法（常用遍历算法-for_each）</title>
      <link href="/post/437af6a8.html"/>
      <url>/post/437af6a8.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="STL-常用算法"><a href="#STL-常用算法" class="headerlink" title="STL-常用算法"></a>STL-常用算法</h1><p><strong>概述：</strong></p><ul><li>算法主要是由头文件<code>&lt;algorithm&gt;</code> <code>&lt;functional&gt;</code> <code>&lt;numeric&gt;</code>组成。</li><li><code>&lt;algorithm&gt;</code>是所有STL算法头文件中最大的一个，范围涉及到比较、交换、查找、遍历操作、复制、修改等等。 <code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数。 <code>&lt;functional&gt;</code>定义了一些模板类，用以声明函数对象。</li></ul><h2 id="5-1-常用遍历算法"><a href="#5-1-常用遍历算法" class="headerlink" title="5.1 常用遍历算法"></a>5.1 常用遍历算法</h2><p><strong>学习目标：</strong><br>掌握常用的遍历算法 </p><p><strong>算法简介：</strong></p><ul><li><code>for_each</code> &#x2F;&#x2F;遍历容器</li><li><code>transform</code> &#x2F;&#x2F;搬运容器里的元素到另一个容器中</li></ul><h3 id="5-1-1-for-each"><a href="#5-1-1-for-each" class="headerlink" title="5.1.1 for_each"></a>5.1.1 for_each</h3><p><strong>功能描述：</strong><br>实现遍历容器 </p><p><strong>函数原型：</strong></p><ul><li><code>for_each(iterator beg, iterator end, _func);</code> &#x2F;&#x2F;遍历算法 遍历容器元素 &#x2F;&#x2F;beg 开始迭代器 &#x2F;&#x2F;end 结束迭代器 &#x2F;&#x2F;_func函数或者函数对象</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include &lt;algorithm&gt;  //内置算法头文件</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print01</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//仿函数-函数对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Pring02</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span>()(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(i + <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数</span></span><br><span class="line">    for_each(v1.begin(), v1.end(), print01);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//仿函数-函数对象</span></span><br><span class="line">    for_each(v1.begin(), v1.end(), Pring02());</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070409413940-1024x338.jpg"></p><h3 id="总结：for-each在实际开发中是最常用遍历算法，需要熟练掌握。"><a href="#总结：for-each在实际开发中是最常用遍历算法，需要熟练掌握。" class="headerlink" title="总结：for_each在实际开发中是最常用遍历算法，需要熟练掌握。"></a>总结：for_each在实际开发中是最常用遍历算法，需要熟练掌握。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程73：STL函数对象（内建函数对象-逻辑仿函数）</title>
      <link href="/post/bb18a6d3.html"/>
      <url>/post/bb18a6d3.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="4-3-4-逻辑仿函数"><a href="#4-3-4-逻辑仿函数" class="headerlink" title="4.3.4 逻辑仿函数"></a>4.3.4 逻辑仿函数</h2><p><strong>功能描述：</strong><br>实现逻辑运算 </p><p><strong>函数原型：</strong></p><ul><li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;</code> &#x2F;&#x2F;逻辑与</li><li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;</code> &#x2F;&#x2F;逻辑或</li><li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;</code> &#x2F;&#x2F;逻辑非</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;functional&gt; //内置仿函数头文件</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include &lt;algorithm&gt;  //内置算法头文件</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印显示</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> vector&lt;<span class="built_in">bool</span>&gt; v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">bool</span>&gt;::const_iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;<span class="built_in">bool</span>&gt;v1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾插数据</span></span><br><span class="line">    v1.push_back(<span class="literal">true</span>);</span><br><span class="line">    v1.push_back(<span class="literal">false</span>);</span><br><span class="line">    v1.push_back(<span class="literal">true</span>);</span><br><span class="line">    v1.push_back(<span class="literal">false</span>);</span><br><span class="line">    v1.push_back(<span class="literal">true</span>);</span><br><span class="line">    printVector(<span class="string">&quot;v1 初始化&quot;</span>, v1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用逻辑非 将容器V1 搬运到 容器v2中，并执行取反操作</span></span><br><span class="line">    vector&lt;<span class="built_in">bool</span>&gt;v2;</span><br><span class="line">    v2.resize(v1.size());</span><br><span class="line">    transform(v1.begin(), v1.end(), v2.begin(), logical_not&lt;<span class="built_in">bool</span>&gt;());</span><br><span class="line">    printVector(<span class="string">&quot;v2 初始化&quot;</span>, v2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070408545175-1024x264.jpg"></p><h3 id="总结：逻辑仿函数实际应用较少，了解即可。"><a href="#总结：逻辑仿函数实际应用较少，了解即可。" class="headerlink" title="总结：逻辑仿函数实际应用较少，了解即可。"></a>总结：逻辑仿函数实际应用较少，了解即可。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程72：STL函数对象（内建函数对象-关系仿函数）</title>
      <link href="/post/234337fe.html"/>
      <url>/post/234337fe.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="4-3-3-关系仿函数"><a href="#4-3-3-关系仿函数" class="headerlink" title="4.3.3 关系仿函数"></a>4.3.3 关系仿函数</h2><p><strong>功能描述：</strong><br>实现关系对比 </p><p><strong>仿函数原型：</strong></p><ul><li><code>template&lt;class T&gt; bool equal_to&lt;T&gt;</code> &#x2F;&#x2F;等于</li><li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt;</code> &#x2F;&#x2F;不等于</li><li><code>template&lt;class T&gt; bool greater&lt;T&gt;</code> &#x2F;&#x2F;大于</li><li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;</code> &#x2F;&#x2F;大于等于</li><li><code>template&lt;class T&gt; bool less&lt;T&gt;</code> &#x2F;&#x2F;小于</li><li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;</code> &#x2F;&#x2F;小于等于</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;functional&gt; //内置仿函数头文件</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include &lt;algorithm&gt;  //内置算法头文件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾插数据</span></span><br><span class="line">    v.push_back(<span class="number">15</span>);</span><br><span class="line">    v.push_back(<span class="number">21</span>);</span><br><span class="line">    v.push_back(<span class="number">33</span>);</span><br><span class="line">    v.push_back(<span class="number">45</span>);</span><br><span class="line">    v.push_back(<span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//降序排序</span></span><br><span class="line">    sort(v.begin(), v.end(), greater&lt;<span class="built_in">int</span>&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印显示</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结：关系仿函数中最常用的就是template-lt-class-T-gt-bool-greater-lt-T-gt-大于"><a href="#总结：关系仿函数中最常用的就是template-lt-class-T-gt-bool-greater-lt-T-gt-大于" class="headerlink" title="总结：关系仿函数中最常用的就是template&lt;class T&gt; bool greater&lt;T&gt;大于"></a>总结：关系仿函数中最常用的就是<code>template&lt;class T&gt; bool greater&lt;T&gt;</code>大于</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程71：STL函数对象（内建函数对象-内建函数对象意义/算术仿函数）</title>
      <link href="/post/d7fa12cb.html"/>
      <url>/post/d7fa12cb.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="4-3-内建函数对象"><a href="#4-3-内建函数对象" class="headerlink" title="4.3 内建函数对象"></a>4.3 内建函数对象</h1><h2 id="4-3-1-内建函数对象意义"><a href="#4-3-1-内建函数对象意义" class="headerlink" title="4.3.1 内建函数对象意义"></a>4.3.1 内建函数对象意义</h2><p><strong>概念：</strong><br>STL内建了一些函数对象 </p><p><strong>分类：</strong></p><ul><li>算术仿函数</li><li>关系仿函数</li><li>逻辑仿函数</li></ul><p><strong>用法：</strong></p><ul><li>这些仿函数所产生的对象，用法和一般函数完全相同</li><li>使用内建函数对象，需要引入头文件<code>#include&lt;functional&gt;</code></li></ul><h2 id="4-3-2-算术仿函数"><a href="#4-3-2-算术仿函数" class="headerlink" title="4.3.2 算术仿函数"></a>4.3.2 算术仿函数</h2><p><strong>功能描述：</strong><br>实现四则运算<br>其中negate是一元运算，其他老师二元运算。 </p><p><strong>仿函数原型：</strong></p><ul><li><p><code>template&lt;class T&gt; T plus&lt;T&gt;</code> &#x2F;&#x2F;加法防函数</p></li><li><p><code>template&lt;class T&gt; T minus&lt;T&gt;</code> &#x2F;&#x2F;减法防函数</p></li><li><p><code>template&lt;class T&gt; T multiplies&lt;T&gt;</code> &#x2F;&#x2F;乘法防函数</p></li><li><p><code>template&lt;class T&gt; T divides&lt;T&gt;</code> &#x2F;&#x2F;除法防函数</p></li><li><p><code>template&lt;class T&gt; T modulus&lt;T&gt;</code> &#x2F;&#x2F;取模防函数</p></li><li><p><code>template&lt;class T&gt; T negate&lt;T&gt;</code> &#x2F;&#x2F;取反防函数</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;functional&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//template&lt;class T&gt; T plus&lt;T&gt; //加法防函数</span></span><br><span class="line">    plus&lt;<span class="built_in">int</span>&gt;p;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;加法仿函数：&quot;</span>&lt;&lt; p(<span class="number">10</span>, <span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//template&lt;class T&gt; T minus&lt;T&gt; //减法防函数</span></span><br><span class="line">    minus&lt;<span class="built_in">int</span>&gt;m;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;减法仿函数：&quot;</span> &lt;&lt; m(<span class="number">60</span>, <span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//template&lt;class T&gt; T multiplies&lt;T&gt; //乘法防函数</span></span><br><span class="line">    multiplies&lt;<span class="built_in">int</span>&gt;mul;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;乘法防函数：&quot;</span> &lt;&lt; mul(<span class="number">10</span>, <span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//template&lt;class T&gt; T divides&lt;T&gt; //除法防函数</span></span><br><span class="line">    divides&lt;<span class="built_in">int</span>&gt;d;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;除法防函数：&quot;</span> &lt;&lt; d(<span class="number">10</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//template&lt;class T&gt; T modulus&lt;T&gt; //取模防函数</span></span><br><span class="line">    modulus&lt;<span class="built_in">int</span>&gt;mod;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;取模防函数：&quot;</span> &lt;&lt; mod(<span class="number">10</span>,<span class="number">6</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//template&lt;class T&gt; T negate&lt;T&gt; //取反防函数</span></span><br><span class="line">    negate&lt;<span class="built_in">int</span>&gt;n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;取反防函数：&quot;</span> &lt;&lt; n(<span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070408021927-1024x411.jpg"></p><h3 id="总结：使用内建函数对象时，需要引入头文件-include-lt-functional-gt"><a href="#总结：使用内建函数对象时，需要引入头文件-include-lt-functional-gt" class="headerlink" title="总结：使用内建函数对象时，需要引入头文件 #include&lt;functional&gt;"></a>总结：使用内建函数对象时，需要引入头文件 <code>#include&lt;functional&gt;</code></h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程70：STL函数对象（谓词）</title>
      <link href="/post/f42f72e5.html"/>
      <url>/post/f42f72e5.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="4-2-谓词"><a href="#4-2-谓词" class="headerlink" title="4.2 谓词"></a>4.2 谓词</h1><h2 id="4-2-1-谓词概念"><a href="#4-2-1-谓词概念" class="headerlink" title="4.2.1 谓词概念"></a>4.2.1 谓词概念</h2><p><strong>概念：</strong></p><ul><li>返回bool类型的仿函数称为<strong>谓词</strong>。</li><li>如果operator() 接受一个参数，那么叫做一元谓词。</li><li>如果operator() 接受二个参数，那么叫做二元谓词。</li></ul><h2 id="4-2-2-一元谓词"><a href="#4-2-2-一元谓词" class="headerlink" title="4.2.2 一元谓词"></a>4.2.2 一元谓词</h2><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//仿函数 返回值类型为bool数据类型，称为谓词。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">GreaterFive</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一元谓词</span></span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">operator</span>()(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> val &gt; <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;::iterator it = find_if(v1.begin(), v1.end(), GreaterFive());</span><br><span class="line">    <span class="keyword">if</span> (it ==v1.end())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;未找到&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;找到大于5的数字为：&quot;</span> &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070203314088-1024x234.jpg"></p><h3 id="总结：参数只有一个的谓词，称为一元谓词。"><a href="#总结：参数只有一个的谓词，称为一元谓词。" class="headerlink" title="总结：参数只有一个的谓词，称为一元谓词。"></a>总结：参数只有一个的谓词，称为一元谓词。</h3><h2 id="4-2-3-二元谓词"><a href="#4-2-3-二元谓词" class="headerlink" title="4.2.3 二元谓词"></a>4.2.3 二元谓词</h2><h3 id="示例代码：-1"><a href="#示例代码：-1" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二元谓词</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyCompare</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">bool</span>  <span class="title">operator</span>()(<span class="params"><span class="built_in">int</span> v1, <span class="built_in">int</span> v2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印显示</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> vector&lt;<span class="built_in">int</span>&gt; &amp;v1</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::const_iterator it = v1.begin(); it != v1.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    v1.push_back(<span class="number">21</span>);</span><br><span class="line">    v1.push_back(<span class="number">12</span>);</span><br><span class="line">    v1.push_back(<span class="number">45</span>);</span><br><span class="line">    v1.push_back(<span class="number">42</span>);</span><br><span class="line">    v1.push_back(<span class="number">11</span>);</span><br><span class="line">    printVector(<span class="string">&quot;v1 初始化&quot;</span>, v1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//升序</span></span><br><span class="line">    sort(v1.begin(), v1.end());</span><br><span class="line">    printVector(<span class="string">&quot;v1 升序后&quot;</span>, v1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//降序</span></span><br><span class="line">    sort(v1.begin(), v1.end(),MyCompare());</span><br><span class="line">    printVector(<span class="string">&quot;v1 降序后&quot;</span>, v1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070407325976-1024x365.jpg"></p><h3 id="总结：参数有两个的谓词，称为二元谓词。"><a href="#总结：参数有两个的谓词，称为二元谓词。" class="headerlink" title="总结：参数有两个的谓词，称为二元谓词。"></a>总结：参数有两个的谓词，称为二元谓词。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程69：STL函数对象（函数对象）</title>
      <link href="/post/b9db3b6b.html"/>
      <url>/post/b9db3b6b.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="第四章：STL函数对象"><a href="#第四章：STL函数对象" class="headerlink" title="第四章：STL函数对象"></a>第四章：STL函数对象</h1><h2 id="4-1-函数对象"><a href="#4-1-函数对象" class="headerlink" title="4.1 函数对象"></a>4.1 函数对象</h2><h3 id="4-1-1-函数对象概念"><a href="#4-1-1-函数对象概念" class="headerlink" title="4.1.1 函数对象概念"></a>4.1.1 函数对象概念</h3><p><strong>概念：</strong></p><ul><li>重载<strong>函数调用操作符</strong>的类，其对象常称为<strong>函数对象</strong>。</li><li><strong>函数对象</strong>使用重载 ( ) 时，行为类似函数调用，也叫<strong>仿函数</strong>。</li></ul><p><strong>本质：</strong></p><ul><li><p>函数对象（仿函数）是一个<strong>类</strong>，不是一个函数。</p><h3 id="4-1-2-函数对象使用"><a href="#4-1-2-函数对象使用" class="headerlink" title="4.1.2 函数对象使用"></a>4.1.2 函数对象使用</h3><p><strong>特点：</strong></p></li><li><p>函数对象在使用时，可以像普通函数那样调用，可以有参数，可以有返回值。</p></li><li><p>函数对象超出普通函数的概念，函数对象可以有自己的状态。</p></li><li><p>函数对象可以作为参数传递。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//仿函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyFunc</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    MyFunc()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//仿函数（加法）</span></span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">operator</span>()(<span class="params"><span class="built_in">int</span> v1, <span class="built_in">int</span> v2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> v1 + v2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//仿函数（打印显示）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span>()(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数传递（打印显示）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doPrint</span>(<span class="params">MyFunc &amp;p, <span class="built_in">string</span> str</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    p(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//函数对象在使用时，可以像普通函数那样调用，可以有参数，可以有返回值。</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;函数对象在使用时，可以像普通函数那样调用，可以有参数，可以有返回值：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    MyFunc <span class="keyword">add</span>;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;add(12, 29)：&quot;</span>&lt;&lt; <span class="keyword">add</span>(<span class="number">12</span>, <span class="number">29</span>) &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;    <span class="comment">//41</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数对象超出普通函数的概念，函数对象可以有自己的状态。</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;函数对象超出普通函数的概念，函数对象可以有自己的状态：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    MyFunc p;</span><br><span class="line">    p(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    p(<span class="string">&quot;Hello C++&quot;</span>);</span><br><span class="line">    p(<span class="string">&quot;Hello C&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;仿函数（打印显示）调用次数为：&quot;</span> &lt;&lt; p.count &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数对象可以作为参数传递。</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;函数对象可以作为参数传递：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    MyFunc myPrint;</span><br><span class="line">    doPrint(myPrint, <span class="string">&quot;Heoll C/C++&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070202554644-1024x417.jpg"></p><h3 id="总结：仿函数写法非常灵活，可以作为参数进行传递。"><a href="#总结：仿函数写法非常灵活，可以作为参数进行传递。" class="headerlink" title="总结：仿函数写法非常灵活，可以作为参数进行传递。"></a>总结：仿函数写法非常灵活，可以作为参数进行传递。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程68：STL常用容器（案例-员工分组）</title>
      <link href="/post/b4f414d.html"/>
      <url>/post/b4f414d.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="3-10-案例-员工分组"><a href="#3-10-案例-员工分组" class="headerlink" title="3.10 案例-员工分组"></a>3.10 案例-员工分组</h1><h2 id="3-10-1-案例描述"><a href="#3-10-1-案例描述" class="headerlink" title="3.10.1 案例描述"></a>3.10.1 案例描述</h2><ul><li>公司今天招聘了10个员工（ABCDEFGHIJ）,10名员工进入公司之后，需要指派员工在那个部门工作。</li><li>员工信息有：姓名、工资组成；部门分为 ：策划、美术、研发。</li><li>随机给10名员工分配部门和工资。</li><li>通过multimap进行信息的插入key（部门编号）value（员工）。</li><li>分部门显示员工信息。</li></ul><h2 id="10-2-实现步骤"><a href="#10-2-实现步骤" class="headerlink" title="10.2 实现步骤"></a>10.2 实现步骤</h2><ul><li><p>1.创建10名员工，放到vecror容器中。</p></li><li><p>2.遍历vector容器，取出每个员工，进行随机分组。</p></li><li><p>3.分组后，将员工部门编号作为key，具体员工作为value，放入到multimap容器中。</p></li><li><p>4.分部门显示员工信息</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;map&gt;</span></span><br><span class="line"><span class="meta">#include &lt;ctime&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> plan 0      //策划</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fineArts 1  //美术</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> exploit 2   //研发</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//员工类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Worker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Salary;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建员工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createWorker</span>(<span class="params">vector&lt;Worker&gt; &amp;v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> nameNo = <span class="string">&quot;ABCDEFGHIJ&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建员工</span></span><br><span class="line">        Worker worker;</span><br><span class="line">        worker.m_Name = <span class="string">&quot;员工&quot;</span>;</span><br><span class="line">        worker.m_Name += nameNo[i]; </span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机工资</span></span><br><span class="line">        worker.m_Salary = rand() % <span class="number">5001</span> + <span class="number">6999</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将元素放入到容器中</span></span><br><span class="line">        v.push_back(worker);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setGroup</span>(<span class="params">vector&lt;Worker&gt; &amp;v, multimap&lt;<span class="built_in">int</span>, Worker&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Worker&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//产生随机部门编号</span></span><br><span class="line">        <span class="built_in">int</span> deptId = rand() % <span class="number">3</span>;    <span class="comment">//0 1 2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将员工插入到分组中</span></span><br><span class="line">        m.insert(make_pair(deptId, *it));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分组显示员工信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showWorkerByGourp</span>(<span class="params"> multimap&lt;<span class="built_in">int</span>, Worker&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;策划部门：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    multimap&lt;<span class="built_in">int</span>, Worker&gt;::iterator pos = m.find(plan);</span><br><span class="line">    <span class="built_in">int</span> cosnt = m.count(plan);  <span class="comment">//统计具体人数</span></span><br><span class="line">    <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; pos != m.end() &amp;&amp; index &lt; cosnt; pos++, index++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="string">&quot;\t工资：&quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;美术部门：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    pos = m.find(fineArts);</span><br><span class="line">    cosnt = m.count(fineArts);  <span class="comment">//统计具体人数</span></span><br><span class="line">    index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; pos != m.end() &amp;&amp; index &lt; cosnt; pos++, index++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="string">&quot;\t工资：&quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;研发部门：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    pos = m.find(exploit);</span><br><span class="line">    cosnt = m.count(exploit);   <span class="comment">//统计具体人数</span></span><br><span class="line">    index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; pos != m.end() &amp;&amp; index &lt; cosnt; pos++, index++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="string">&quot;\t工资：&quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//随机数种子</span></span><br><span class="line">    srand((unsigned <span class="built_in">int</span>)time(NULL));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;Worker&gt; vWorker;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建员工</span></span><br><span class="line">    createWorker(vWorker);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置组</span></span><br><span class="line">    multimap&lt;<span class="built_in">int</span>,Worker&gt; mWorker;</span><br><span class="line">    setGroup(vWorker, mWorker);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分组显示员工信息</span></span><br><span class="line">    showWorkerByGourp(mWorker);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程67：STL常用容器（map/multimap容器-map容器排序）</title>
      <link href="/post/4fea10f2.html"/>
      <url>/post/4fea10f2.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-9-6-map容器排序"><a href="#3-9-6-map容器排序" class="headerlink" title="3.9.6 map容器排序"></a>3.9.6 map容器排序</h2><p><strong>学习目标：</strong><br>map容器默认排序规则为按照key值进行 从小到大排序，掌握如何改变排序规则。 </p><p><strong>主要技术点：</strong></p><ul><li>利用仿函数，可以改变排序规则。</li></ul><h2 id="1、示例代码（内置数据类型）"><a href="#1、示例代码（内置数据类型）" class="headerlink" title="1、示例代码（内置数据类型）"></a>1、示例代码（内置数据类型）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;map&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//访函数（降序）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">myCompare</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">operator</span>()(<span class="params"><span class="built_in">int</span> v1, <span class="built_in">int</span> v2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMap</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, myCompare&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, myCompare&gt;::const_iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;键值(key)：&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;\t实值(value)：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, myCompare&gt;m1;</span><br><span class="line">    m1.insert(make_pair(<span class="number">1</span>, <span class="number">22</span>));</span><br><span class="line">    m1.insert(make_pair(<span class="number">4</span>, <span class="number">32</span>));</span><br><span class="line">    m1.insert(make_pair(<span class="number">3</span>, <span class="number">25</span>));</span><br><span class="line">    m1.insert(make_pair(<span class="number">5</span>, <span class="number">11</span>));</span><br><span class="line">    m1.insert(make_pair(<span class="number">2</span>, <span class="number">31</span>));</span><br><span class="line">    printMap(<span class="string">&quot;m1 初始化&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;   </span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070106171534-1024x419.jpg"></p><h2 id="2、示例代码（自定义数据类型）"><a href="#2、示例代码（自定义数据类型）" class="headerlink" title="2、示例代码（自定义数据类型）"></a>2、示例代码（自定义数据类型）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;map&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="built_in">int</span> age, <span class="built_in">int</span> higjt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Hight = higjt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">    <span class="built_in">int</span> m_Hight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访函数（年龄降序--身高升序）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">myCompare01</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">operator</span>()(<span class="params"><span class="keyword">const</span> <span class="built_in">int</span> &amp;v1, <span class="keyword">const</span> <span class="built_in">int</span> &amp;v2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">myCompare02</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">operator</span>()(<span class="params"><span class="keyword">const</span> Person &amp;v1,<span class="keyword">const</span> Person &amp;v2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v1.m_Age==v2.m_Age)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> v1.m_Hight &lt; v2.m_Hight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v1.m_Age &gt; v2.m_Age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMap01</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> map&lt;<span class="built_in">int</span>, Person, myCompare01&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (map&lt;<span class="built_in">int</span>, Person, myCompare01&gt;::const_iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;键值(key)：&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; it-&gt;second.m_Name </span><br><span class="line">            &lt;&lt; <span class="string">&quot;\t年龄：&quot;</span> &lt;&lt; it-&gt;second.m_Age &lt;&lt; <span class="string">&quot;\t身高：&quot;</span> &lt;&lt; it-&gt;second.m_Hight &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMap02</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> map&lt;Person,<span class="built_in">int</span>, myCompare02&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (map&lt;Person, <span class="built_in">int</span>, myCompare02&gt;::const_iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; it-&gt;first.m_Name &lt;&lt; <span class="string">&quot;\t年龄：&quot;</span> &lt;&lt; it-&gt;first.m_Age</span><br><span class="line">            &lt;&lt; <span class="string">&quot;\t身高：&quot;</span> &lt;&lt; it-&gt;first.m_Hight &lt;&lt; <span class="string">&quot;\t键值(key)：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建元素</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span>(<span class="params"><span class="string">&quot;李四&quot;</span>, <span class="number">20</span>, <span class="number">165</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span>(<span class="params"><span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">182</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span>(<span class="params"><span class="string">&quot;赵六&quot;</span>, <span class="number">26</span>, <span class="number">177</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span>(<span class="params"><span class="string">&quot;小二&quot;</span>, <span class="number">23</span>, <span class="number">165</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span>(<span class="params"><span class="string">&quot;小三&quot;</span>, <span class="number">20</span>, <span class="number">171</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p6</span>(<span class="params"><span class="string">&quot;赵云&quot;</span>, <span class="number">20</span>, <span class="number">155</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, Person, myCompare01&gt;m1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入元素</span></span><br><span class="line">    m1.insert(make_pair(<span class="number">1</span>, p1));</span><br><span class="line">    m1.insert(make_pair(<span class="number">5</span>, p2));</span><br><span class="line">    m1.insert(make_pair(<span class="number">6</span>, p6));</span><br><span class="line">    m1.insert(make_pair(<span class="number">4</span>, p4));</span><br><span class="line">    m1.insert(make_pair(<span class="number">2</span>, p3));</span><br><span class="line">    m1.insert(make_pair(<span class="number">3</span>, p5));</span><br><span class="line"></span><br><span class="line">    printMap01(<span class="string">&quot;m1 初始化&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建元素</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span>(<span class="params"><span class="string">&quot;李四&quot;</span>, <span class="number">20</span>, <span class="number">165</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span>(<span class="params"><span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">182</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span>(<span class="params"><span class="string">&quot;赵六&quot;</span>, <span class="number">26</span>, <span class="number">177</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span>(<span class="params"><span class="string">&quot;小二&quot;</span>, <span class="number">23</span>, <span class="number">165</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span>(<span class="params"><span class="string">&quot;小三&quot;</span>, <span class="number">20</span>, <span class="number">171</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p6</span>(<span class="params"><span class="string">&quot;赵云&quot;</span>, <span class="number">20</span>, <span class="number">155</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    map&lt;Person,<span class="built_in">int</span>, myCompare02&gt;m2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入元素</span></span><br><span class="line">    m2.insert(make_pair(p1,<span class="number">1</span>));</span><br><span class="line">    m2.insert(make_pair(p2,<span class="number">5</span>));</span><br><span class="line">    m2.insert(make_pair(p6,<span class="number">6</span>));</span><br><span class="line">    m2.insert(make_pair(p4,<span class="number">4</span>));</span><br><span class="line">    m2.insert(make_pair(p3,<span class="number">2</span>));</span><br><span class="line">    m2.insert(make_pair(p5,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    printMap02(<span class="string">&quot;m2 初始化&quot;</span>, m2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;   </span><br><span class="line">    test01();</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070106585655-1024x510.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>利用访函数可以指定map容器的排序规则</li><li>对于自定义数据类型，map必须要指定排序规则，同set容器。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程66：STL常用容器（map/multimap容器-map查找和统计）</title>
      <link href="/post/f0634711.html"/>
      <url>/post/f0634711.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-9-5-map查找和统计"><a href="#3-9-5-map查找和统计" class="headerlink" title="3.9.5 map查找和统计"></a>3.9.5 map查找和统计</h2><p><strong>功能描述：</strong><br>对map容器进行查找数据以及统计数据 </p><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code> &#x2F;&#x2F;查找key是否存在，若存在，返回该键的元素的迭代器；若不存在，返回map.end();。</li><li><code>count(key);</code> &#x2F;&#x2F;统计key的元素个数</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;map&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMap</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;::const_iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;键值(key)：&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;实值(value)：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//map容器</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;m1;</span><br><span class="line">    m1.insert(make_pair(<span class="number">1</span>, <span class="number">120</span>));</span><br><span class="line">    m1.insert(make_pair(<span class="number">3</span>, <span class="number">110</span>));</span><br><span class="line">    m1.insert(make_pair(<span class="number">2</span>, <span class="number">110</span>));</span><br><span class="line">    m1.insert(make_pair(<span class="number">4</span>, <span class="number">119</span>));</span><br><span class="line">    m1.insert(make_pair(<span class="number">5</span>, <span class="number">103</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//find(key); //查找key是否存在，若存在，返回该键的元素的迭代器；若不存在，返回map.end();。</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;::iterator mit = m1.find(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (mit!=m1.end())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;m1 m1.find(5) 键值(key)：&quot;</span> &lt;&lt; mit-&gt;first &lt;&lt; <span class="string">&quot;\t实值(value)：&quot;</span> &lt;&lt; mit-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;m1 m1.find(5)不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//count(key); //统计key的元素个数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;m1 统计key的元素个数为：&quot;</span> &lt;&lt; m1.count(<span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//multimap容器</span></span><br><span class="line">    multimap&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;m2;</span><br><span class="line">    m2.insert(make_pair(<span class="number">1</span>, <span class="number">120</span>));</span><br><span class="line">    m2.insert(make_pair(<span class="number">3</span>, <span class="number">110</span>));</span><br><span class="line">    m2.insert(make_pair(<span class="number">2</span>, <span class="number">110</span>));</span><br><span class="line">    m2.insert(make_pair(<span class="number">4</span>, <span class="number">119</span>));</span><br><span class="line">    m2.insert(make_pair(<span class="number">2</span>, <span class="number">103</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//find(key); //查找key是否存在，若存在，返回该键的元素的迭代器；若不存在，返回map.end();。</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;::iterator mit = m2.find(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (mit != m2.end())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;m2 m1.find(5) 键值(key)：&quot;</span> &lt;&lt; mit-&gt;first &lt;&lt; <span class="string">&quot;\t实值(value)：&quot;</span> &lt;&lt; mit-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;m2 m2.find(5) 不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//count(key); //统计key的元素个数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;m2 统计key的元素个数为：&quot;</span> &lt;&lt; m2.count(<span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;map容器：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;multimap容器：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070105443961-1024x435.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>查找—find（返回的是迭代器）</li><li>统计—count（对于map，结果为0或者1）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程65：STL常用容器（map/multimap容器-map插入和删除）</title>
      <link href="/post/16d449a4.html"/>
      <url>/post/16d449a4.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-9-4-map插入和删除"><a href="#3-9-4-map插入和删除" class="headerlink" title="3.9.4 map插入和删除"></a>3.9.4 map插入和删除</h2><p><strong>功能描述：</strong><br>map容器进行插入数据和删除数据 </p><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code> &#x2F;&#x2F;在容器中插入元素。</li><li><code>clear();</code> &#x2F;&#x2F;清除所有元素。</li><li><code>erase(pos);</code> &#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg,end);</code> &#x2F;&#x2F;删除区间beg,end的所有元素，返回下一个元素的迭代器。</li><li><code>erase(key);</code> &#x2F;&#x2F;删除容器中值为key的元素</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;map&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMap</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;::const_iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;键值（kay）：&quot;</span> &lt;&lt; (*it).first &lt;&lt; <span class="string">&quot;\t\t实值（value）：&quot;</span> &lt;&lt; (*it).second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;m1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert(elem); //在容器中插入元素。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一种</span></span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">5</span>, <span class="number">11</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种</span></span><br><span class="line">    m1.insert(make_pair(<span class="number">1</span>, <span class="number">41</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三种</span></span><br><span class="line">    m1.insert(map&lt;<span class="built_in">int</span>,<span class="built_in">int</span>&gt;::value_type(<span class="number">4</span>, <span class="number">51</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第四种</span></span><br><span class="line">    m1[<span class="number">2</span>] = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不建议使用索引[]的方式插值，但可以通过索引[]（kay）的方式访问实值（value）</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; m1[2] &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">3</span>, <span class="number">21</span>));</span><br><span class="line">    printMap(<span class="string">&quot;m1 初始化&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(key); //删除容器中值为key的元素</span></span><br><span class="line">    m1.erase(<span class="number">5</span>);</span><br><span class="line">    printMap(<span class="string">&quot;m1 删除容器中值为5（key）的元素&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(pos); //删除pos迭代器所指的元素，返回下一个元素的迭代器。</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;::iterator mit = m1.begin();</span><br><span class="line">    m1.erase(++mit);</span><br><span class="line">    printMap(<span class="string">&quot;m1 删除 mit 迭代器所指的元素&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(beg, end); //删除区间[beg,end]的所有元素，返回下一个元素的迭代器。</span></span><br><span class="line">    m1.erase(++m1.begin(),--m1.end());</span><br><span class="line">    printMap(<span class="string">&quot;m1 删除区间 ++m1.begin(),--m1.end() 的所有元素&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//clear(); //清除所有元素。</span></span><br><span class="line">    m1.clear();</span><br><span class="line">    printMap(<span class="string">&quot;m1 清除所有元素&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070102500314-1024x731.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>不建议使用索引 [ ]的方式插值，但可以通过索引 [ ]（kay）的方式访问实值（value）</li><li>map插入方式很多，记住其一即可</li><li>插入（insert）</li><li>删除（erase）</li><li>清空（clear）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程63：STL常用容器（map/multimap容器-map基本概念/map构造和赋值）</title>
      <link href="/post/752fb09b.html"/>
      <url>/post/752fb09b.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="3-9-map-x2F-multimap容器"><a href="#3-9-map-x2F-multimap容器" class="headerlink" title="3.9 map&#x2F;multimap容器"></a>3.9 map&#x2F;multimap容器</h1><h2 id="3-9-1-map基本概念"><a href="#3-9-1-map基本概念" class="headerlink" title="3.9.1 map基本概念"></a>3.9.1 map基本概念</h2><p><strong>简介：</strong><br>map中所有元素都是pair。</p><ul><li>pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）。</li><li>所有元素都会根据元素的键值自动排序。</li></ul><p><strong>本质：</strong></p><ul><li>map&#x2F;multimap属于<strong>关联式容器</strong>，底层结构是用二叉树实现。</li></ul><p><strong>优点：</strong></p><ul><li>可以根据key值快速找到value值。</li></ul><p><strong>map和multimap区别：</strong></p><ul><li>map不允许容器中有重复key值元素。</li><li>multimap允许容口中有重复key值元素。</li></ul><h2 id="3-9-2-map构造和赋值"><a href="#3-9-2-map构造和赋值" class="headerlink" title="3.9.2 map构造和赋值"></a>3.9.2 map构造和赋值</h2><p><strong>功能描述：</strong> 对map容器进行构造和赋值操作</p><h3 id="函数原型："><a href="#函数原型：" class="headerlink" title="函数原型："></a>函数原型：</h3><p><strong>构造：</strong></p><ul><li><code>map&lt;T1,T2&gt;mp;</code> &#x2F;&#x2F;map默认构造函数</li><li><code>map(const map &amp;mp);</code> &#x2F;&#x2F;拷贝构造函数 <strong>赋值：</strong></li><li><code>map &amp;operator=(const map &amp;mp)</code> &#x2F;&#x2F;重载等号操作符</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;map&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMap</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;::const_iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;键值：&quot;</span> &lt;&lt; (*it).first &lt;&lt; <span class="string">&quot; 实值：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//map&lt;T1, T2&gt;mp; //map 默认构造函数</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;m1;</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">3</span>, <span class="number">50</span>));</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">5</span>, <span class="number">14</span>));</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">2</span>, <span class="number">17</span>));</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">4</span>, <span class="number">10</span>));</span><br><span class="line">    printMap(<span class="string">&quot;m1 初始化&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//map(const map &amp;mp); //拷贝构造函数</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;m2(m1);</span><br><span class="line">    printMap(<span class="string">&quot;m2 初始化&quot;</span>, m2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//map &amp;operator=(const map &amp;mp) //重载等号操作符</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;m3;</span><br><span class="line">    m3 = m1;</span><br><span class="line">    printMap(<span class="string">&quot;m3 初始化&quot;</span>, m3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/202007010142064-1024x696.jpg"></p><h3 id="总结：map中所有元素都是成对出现，插入数据时候要使用对组。"><a href="#总结：map中所有元素都是成对出现，插入数据时候要使用对组。" class="headerlink" title="总结：map中所有元素都是成对出现，插入数据时候要使用对组。"></a>总结：map中所有元素都是成对出现，插入数据时候要使用对组。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程64：STL常用容器（map/multimap容器-map大小和交换）</title>
      <link href="/post/99f475b2.html"/>
      <url>/post/99f475b2.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-9-3-map大小和交换"><a href="#3-9-3-map大小和交换" class="headerlink" title="3.9.3 map大小和交换"></a>3.9.3 map大小和交换</h2><p><strong>功能描述：</strong></p><ul><li>统计map容器大小以及交换map容器。</li></ul><p><strong>函数原型：</strong></p><ul><li><code>size();</code> &#x2F;&#x2F;返回容器元素的数目</li><li><code>empty();</code> &#x2F;&#x2F;判断容器是否为空</li><li><code>swap(mp);</code> &#x2F;&#x2F;交换两个集合容器</li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码:"></a>示例代码:</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;map&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMap</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;::const_iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;键值（kay）：&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;\t\t实值（value）：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;m1;</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">15</span>, <span class="number">220</span>));</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">14</span>, <span class="number">210</span>));</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">13</span>, <span class="number">240</span>));</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">11</span>, <span class="number">250</span>));</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">12</span>, <span class="number">210</span>));</span><br><span class="line">    printMap(<span class="string">&quot;m1 初始化&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//empty(); //判断容器是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (!m1.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;容器不为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//size(); //返回容器元素的数目</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;m1 容器元素的数目为：&quot;</span> &lt;&lt; m1.size() &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//swap(mp); //交换两个集合容器</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;m2;</span><br><span class="line">    m2.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">    m2.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">4</span>, <span class="number">30</span>));</span><br><span class="line">    m2.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">2</span>, <span class="number">60</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换</span></span><br><span class="line">    m2.swap(m1);</span><br><span class="line">    printMap(<span class="string">&quot;m1 交换后&quot;</span>, m1);</span><br><span class="line">    printMap(<span class="string">&quot;m2 交换后&quot;</span>, m2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070102133673-1024x644.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>统计大小（size）</li><li>判断是否为空（empty）</li><li>交换容器（swap）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程62：STL常用容器（set/multiset容器-set容器排序）</title>
      <link href="/post/2a5b6f84.html"/>
      <url>/post/2a5b6f84.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-8-8-set容器排序"><a href="#3-8-8-set容器排序" class="headerlink" title="3.8.8 set容器排序"></a>3.8.8 set容器排序</h2><p><strong>学习目标：</strong><br>set容器默认排序规则从小到大，掌握如何改变排序规则。 </p><p><strong>主要技术点：</strong></p><ul><li>利用仿函数，可以改变排序规则。</li></ul><h3 id="示例代码：set存放内置数据类型"><a href="#示例代码：set存放内置数据类型" class="headerlink" title="示例代码：set存放内置数据类型"></a>示例代码：set存放内置数据类型</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&lt;set&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//仿函数（排序使用）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">myCompaer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">operator</span>()(<span class="params"><span class="built_in">int</span> vla1,<span class="built_in">int</span> vla2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> vla1 &gt; vla2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s1;</span><br><span class="line">    s1.insert(<span class="number">10</span>);</span><br><span class="line">    s1.insert(<span class="number">50</span>);</span><br><span class="line">    s1.insert(<span class="number">20</span>);</span><br><span class="line">    s1.insert(<span class="number">40</span>);</span><br><span class="line">    s1.insert(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 初始化：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::iterator it = s1.begin(); it != s1.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>, myCompaer&gt;s2;</span><br><span class="line">    s2.insert(<span class="number">10</span>);</span><br><span class="line">    s2.insert(<span class="number">50</span>);</span><br><span class="line">    s2.insert(<span class="number">20</span>);</span><br><span class="line">    s2.insert(<span class="number">40</span>);</span><br><span class="line">    s2.insert(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 初始化：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::iterator it = s2.begin(); it != s2.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020063004291539-1024x398.jpg"></p><h3 id="总结：利用仿函数可以指定set容器的排序规则。"><a href="#总结：利用仿函数可以指定set容器的排序规则。" class="headerlink" title="总结：利用仿函数可以指定set容器的排序规则。"></a>总结：利用仿函数可以指定set容器的排序规则。</h3><h2 id="示例二：set存放自定义数据类型"><a href="#示例二：set存放自定义数据类型" class="headerlink" title="示例二：set存放自定义数据类型"></a>示例二：set存放自定义数据类型</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&lt;set&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="built_in">int</span> age, <span class="built_in">int</span> height)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">    <span class="built_in">int</span> m_Height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//仿函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">myCompare</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">operator</span>()(<span class="params"><span class="keyword">const</span> Person &amp;p1, <span class="keyword">const</span> Person &amp;p2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1.m_Age==p2.m_Age)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> p1.m_Height &lt; p2.m_Height;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p1.m_Age &gt; p2.m_Age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建元素</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span>(<span class="params"><span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">165</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span>(<span class="params"><span class="string">&quot;李四&quot;</span>, <span class="number">22</span>, <span class="number">175</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span>(<span class="params"><span class="string">&quot;王五&quot;</span>, <span class="number">32</span>, <span class="number">169</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span>(<span class="params"><span class="string">&quot;赵六&quot;</span>, <span class="number">20</span>, <span class="number">187</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span>(<span class="params"><span class="string">&quot;小三&quot;</span>, <span class="number">18</span>, <span class="number">167</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p6</span>(<span class="params"><span class="string">&quot;小二&quot;</span>, <span class="number">18</span>, <span class="number">175</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    <span class="keyword">set</span>&lt;Person, myCompare&gt;p;</span><br><span class="line">    p.insert(p1);</span><br><span class="line">    p.insert(p2);</span><br><span class="line">    p.insert(p3);</span><br><span class="line">    p.insert(p4);</span><br><span class="line">    p.insert(p5);</span><br><span class="line">    p.insert(p6);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历打印</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">set</span>&lt;Person, myCompare&gt;::iterator it = p.begin(); it != p.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; <span class="string">&quot; 身高：&quot;</span> &lt;&lt; it-&gt;m_Height &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020063006010928-1024x428.jpg"></p><h3 id="总结：对于自定义数据类型，set必须指定排序规则才可以插入数据。"><a href="#总结：对于自定义数据类型，set必须指定排序规则才可以插入数据。" class="headerlink" title="总结：对于自定义数据类型，set必须指定排序规则才可以插入数据。"></a>总结：对于自定义数据类型，set必须指定排序规则才可以插入数据。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程61：STL常用容器（set/multiset容器-pair对组创建）</title>
      <link href="/post/e2e78da9.html"/>
      <url>/post/e2e78da9.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-8-7-pair对组创建"><a href="#3-8-7-pair对组创建" class="headerlink" title="3.8.7 pair对组创建"></a>3.8.7 pair对组创建</h2><p><strong>功能描述：</strong><br>成对出现的数据，利用对组可以返回两个数据 </p><p><strong>两种创建方式：</strong></p><ul><li><code>pair&lt;typr,typr&gt;p(value1,value2);</code></li><li><code>pair&lt;typr,typr&gt;p=make_pair(value1,value2);</code></li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="built_in">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//pair&lt;typr, typr&gt;p(value1, value2);</span></span><br><span class="line">    pair&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;p1 (<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p1.first &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p1.second &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//pair&lt;typr, typr&gt;p = make_pair(value1, value2);</span></span><br><span class="line">    <span class="function">Person <span class="title">p</span>(<span class="params"><span class="string">&quot;李四&quot;</span>, <span class="number">18</span></span>)</span>;</span><br><span class="line">    pair&lt;Person, <span class="built_in">double</span>&gt; p2 = make_pair(p, <span class="number">10.1</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p2.first.m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p2.first.m_Age &lt;&lt; <span class="string">&quot; 身高：&quot;</span> &lt;&lt; p2.second &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020063002591277.jpg"></p><h3 id="总结：两种方式都可以创建对组，记住会使用一种即可。"><a href="#总结：两种方式都可以创建对组，记住会使用一种即可。" class="headerlink" title="总结：两种方式都可以创建对组，记住会使用一种即可。"></a>总结：两种方式都可以创建对组，记住会使用一种即可。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程60：STL常用容器（set/multiset容器-set和multiset区别）</title>
      <link href="/post/2f1836d.html"/>
      <url>/post/2f1836d.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-8-6-set和multiset区别"><a href="#3-8-6-set和multiset区别" class="headerlink" title="3.8.6 set和multiset区别"></a>3.8.6 set和multiset区别</h2><p><strong>学习目标：</strong><br>掌握set和multiset的区别 </p><p><strong>区别：</strong></p><ul><li>set不可以插入重复数据，而multiset可以。</li><li>set插入数据 的同时会返回插入结果，表示插入是否成功。 multiset不会检测数据，因此可以插入重复数据。</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;set&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMultiset</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> multiset&lt;<span class="built_in">int</span>&gt; &amp;s</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (multiset&lt;<span class="built_in">int</span>&gt;::const_iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//set插入相同元素</span></span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s1;</span><br><span class="line">    pair&lt;<span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::iterator, <span class="built_in">bool</span>&gt; ret1 = s1.insert(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret1.second)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;set 第一次插入元素成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;set 第一次插入元素失败&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    pair&lt;<span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::iterator, <span class="built_in">bool</span>&gt; ret2 = s1.insert(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret2.second)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;set 第二次插入相同元素成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;set 第二次插入相同元素失败&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//multiset插入相同元素</span></span><br><span class="line">    multiset&lt;<span class="built_in">int</span>&gt;m;</span><br><span class="line">    m.insert(<span class="number">10</span>);</span><br><span class="line">    m.insert(<span class="number">10</span>);</span><br><span class="line">    printMultiset(<span class="string">&quot;multiset 初始化&quot;</span>, m);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/202006300229452-1024x291.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>如果不允许插入重复数据可以利用set</li><li>如果需要插入重复数据利用multiset</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程59：STL常用容器（set/multiset容器-set查找和统计）</title>
      <link href="/post/42c5dc37.html"/>
      <url>/post/42c5dc37.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-8-5-set查找和统计"><a href="#3-8-5-set查找和统计" class="headerlink" title="3.8.5 set查找和统计"></a>3.8.5 set查找和统计</h2><p><strong>功能描述：</strong><br>对set容器进行查找数据以及统计数据 </p><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code> &#x2F;&#x2F;查找key是否存在，若存在返回该元素的迭代器，若不存在返回set.end();。</li><li><code>count(key);</code> &#x2F;&#x2F;统计key的元素个数</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;set&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSet</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt; &amp;s</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::const_iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s1;</span><br><span class="line">    s1.insert(<span class="number">30</span>);</span><br><span class="line">    s1.insert(<span class="number">50</span>);</span><br><span class="line">    s1.insert(<span class="number">10</span>);</span><br><span class="line">    s1.insert(<span class="number">20</span>);</span><br><span class="line">    s1.insert(<span class="number">40</span>);</span><br><span class="line">    printSet(<span class="string">&quot;s1 初始化&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//find(key); //查找key是否存在，若存在返回该元素的迭代器，若不存在返回set.end();。</span></span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::iterator it = s1.find(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (it !=s1.end())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;s1.find(10) 元素存在!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;s1.find(10) 元素不存在!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//count(key); //统计key的元素个数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;元素 s1.count(40) 的个数为：&quot;</span> &lt;&lt; s1.count(<span class="number">40</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062908350812-1024x323.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>查找—（返回的是迭代器）</li><li>统计—（对于set,结果为0或者1）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程58：STL常用容器（set/multiset容器-set插入和删除）</title>
      <link href="/post/13341423.html"/>
      <url>/post/13341423.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-8-4-set插入和删除"><a href="#3-8-4-set插入和删除" class="headerlink" title="3.8.4 set插入和删除"></a>3.8.4 set插入和删除</h2><p><strong>功能描述：</strong><br>set容器进行插入数据和删除数据 </p><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code> &#x2F;&#x2F;在容器中插入元素</li><li><code>clear();</code> &#x2F;&#x2F;清除所有元素</li><li><code>erase(pos);</code> &#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器</li><li><code>erase(beg,end);</code> &#x2F;&#x2F;删除区间beg,end的所有元素，返回下一个元素的迭代器</li><li><code>erase(elem);</code> &#x2F;&#x2F;删除容器中值为elem的元素</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;set&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSet</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt; &amp;s</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::const_iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//insert(elem); //在容器中插入元素</span></span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s1;</span><br><span class="line">    s1.insert(<span class="number">30</span>);</span><br><span class="line">    s1.insert(<span class="number">50</span>);</span><br><span class="line">    s1.insert(<span class="number">10</span>);</span><br><span class="line">    s1.insert(<span class="number">20</span>);</span><br><span class="line">    s1.insert(<span class="number">40</span>);</span><br><span class="line">    printSet(<span class="string">&quot;s1 初始化&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(pos); //删除pos迭代器所指的元素，返回下一个元素的迭代器</span></span><br><span class="line">    s1.erase(s1.begin());</span><br><span class="line">    printSet(<span class="string">&quot;s1 删除pos迭代器所指的元素&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(elem); //删除容器中值为elem的元素</span></span><br><span class="line">    s1.erase(<span class="number">40</span>);</span><br><span class="line">    printSet(<span class="string">&quot;s1 删除容器中值为elem的元素&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(beg, end); //删除区间[beg,end]的所有元素，返回下一个元素的迭代器</span></span><br><span class="line">    s1.erase(++s1.begin(), --s1.end());</span><br><span class="line">    printSet(<span class="string">&quot;s1 删除区间[beg,end]的所有元素&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//clear(); //清除所有元素</span></span><br><span class="line">    s1.clear();</span><br><span class="line">    printSet(<span class="string">&quot;s1 清除所有元素&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062907353595-1024x358.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>插入（insert）</li><li>删除（erase）</li><li>清空（clear）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程57：STL常用容器（set/multiset容器-set大小和交换）</title>
      <link href="/post/2e2675d0.html"/>
      <url>/post/2e2675d0.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-8-3-set大小和交换"><a href="#3-8-3-set大小和交换" class="headerlink" title="3.8.3 set大小和交换"></a>3.8.3 set大小和交换</h2><p><strong>功能描述：</strong></p><ul><li>统计set容器大小以及交换set容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>size( );</code> &#x2F;&#x2F;返回容器中元素的数目</li><li><code>empty( );</code> &#x2F;&#x2F;判断容器是否为空</li><li><code>swap( );</code> &#x2F;&#x2F;交换两个集合容器</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;set&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSet</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt; &amp;s</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::const_iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s1;</span><br><span class="line">    s1.insert(<span class="number">30</span>);</span><br><span class="line">    s1.insert(<span class="number">40</span>);</span><br><span class="line">    s1.insert(<span class="number">50</span>);</span><br><span class="line">    s1.insert(<span class="number">10</span>);</span><br><span class="line">    s1.insert(<span class="number">20</span>);</span><br><span class="line">    printSet(<span class="string">&quot;s1 初始化&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//empty(); //判断容器是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (!s1.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;容器不为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//size(); //返回容器中元素的数目</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;容器元素个数：&quot;</span> &lt;&lt; s1.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//swap(); //交换两个集合容器</span></span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s2;</span><br><span class="line">    s2.insert(<span class="number">5</span>);</span><br><span class="line">    s2.insert(<span class="number">9</span>);</span><br><span class="line">    s2.insert(<span class="number">3</span>);</span><br><span class="line">    s2.insert(<span class="number">8</span>);</span><br><span class="line">    printSet(<span class="string">&quot;s2 初始化&quot;</span>, s2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//互换</span></span><br><span class="line">    s2.swap(s1);</span><br><span class="line">    printSet(<span class="string">&quot;s2.swap(s1) s1互换后&quot;</span>, s1);</span><br><span class="line">    printSet(<span class="string">&quot;s2.swap(s1) s2互换后&quot;</span>, s2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062906581786-1024x378.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>统计大小（size）</li><li>判断是否为空（empty）</li><li>交换容器（swap）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程56：STL常用容器（set/multiset容器-set基本概念/set构造和赋值）</title>
      <link href="/post/b4fb037.html"/>
      <url>/post/b4fb037.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="3-8-set-x2F-multiset容器"><a href="#3-8-set-x2F-multiset容器" class="headerlink" title="3.8 set&#x2F;multiset容器"></a>3.8 set&#x2F;multiset容器</h1><h2 id="3-8-1-set基本概念"><a href="#3-8-1-set基本概念" class="headerlink" title="3.8.1 set基本概念"></a>3.8.1 set基本概念</h2><p><strong>简介：</strong><br>所有元素都会在插入时自动被排序 </p><p><strong>本质：</strong></p><ul><li>set&#x2F;multiset属于关联式容器，底层结构是用二<strong>叉树</strong>实现。</li></ul><p><strong>set和multiset区别：</strong></p><ul><li>set不允许容器中有重复的元素</li><li>multiset允许容器中有重复的元素</li></ul><h2 id="3-8-2-set构造和赋值"><a href="#3-8-2-set构造和赋值" class="headerlink" title="3.8.2 set构造和赋值"></a>3.8.2 set构造和赋值</h2><p>功能描述：创建set容器以及赋值 </p><p><strong>构造：</strong></p><ul><li><code>set&lt;T&gt; st;</code> &#x2F;&#x2F;默认构造函数</li><li><code>set(const set &amp;st);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><p><strong>赋值：</strong></p><ul><li><code>set &amp;operator=（const set &amp;st);</code> &#x2F;&#x2F;重载等号操作符</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;set&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSet</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str,<span class="keyword">const</span> <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt; &amp;s</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::const_iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s1;</span><br><span class="line">    s1.insert(<span class="number">10</span>);</span><br><span class="line">    s1.insert(<span class="number">30</span>);</span><br><span class="line">    s1.insert(<span class="number">20</span>);</span><br><span class="line">    s1.insert(<span class="number">50</span>);</span><br><span class="line">    s1.insert(<span class="number">20</span>);  <span class="comment">//set容器不允许插入重复值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历容器</span></span><br><span class="line">    <span class="comment">//set容器特点，所有元素插入时候自动被排序</span></span><br><span class="line">    printSet(<span class="string">&quot;s1 初始化&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拷贝构造</span></span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s2(s1);</span><br><span class="line">    printSet(<span class="string">&quot;s2 初始化&quot;</span>, s2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s3;</span><br><span class="line">    s3 = s2;</span><br><span class="line">    printSet(<span class="string">&quot;s3 初始化&quot;</span>, s3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/202006290630433-1024x391.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>set容器插入数据时用insert</li><li>set容器插入数据的数据会自动排序</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程55：STL常用容器（list容器-排序案例）</title>
      <link href="/post/d0f75ff3.html"/>
      <url>/post/d0f75ff3.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-7-8排序案例"><a href="#3-7-8排序案例" class="headerlink" title="3.7.8排序案例"></a>3.7.8排序案例</h2><p><strong>案例描述：</strong>将Preson自定义数据类型进行排序，Person中属性有姓名、年龄、身高。 </p><p><strong>排序规则：</strong>按照年龄进行升序，如果年龄相同按照身高进行降序。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;list&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//人 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="built_in">int</span> age, <span class="built_in">int</span> height)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">    <span class="built_in">int</span> m_Height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> list&lt;Person&gt; &amp;p</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (list&lt;Person&gt;::const_iterator it = p.begin(); it != p.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; <span class="string">&quot; 身高：&quot;</span> &lt;&lt; it-&gt;m_Height &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序规则</span></span><br><span class="line"><span class="function"><span class="built_in">bool</span> <span class="title">comparePerson</span>(<span class="params">Person p1, Person p2</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//按照年龄 升序</span></span><br><span class="line">    <span class="keyword">if</span> (p1.m_Age == p2.m_Age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//年龄相同 按照身高降序</span></span><br><span class="line">        <span class="keyword">return</span> p1.m_Height &gt; p2.m_Height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> p1.m_Age &lt; p2.m_Age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建元素</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span>(<span class="params"><span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">165</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span>(<span class="params"><span class="string">&quot;李四&quot;</span>, <span class="number">20</span>, <span class="number">169</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span>(<span class="params"><span class="string">&quot;王五&quot;</span>, <span class="number">25</span>, <span class="number">170</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span>(<span class="params"><span class="string">&quot;赵六&quot;</span>, <span class="number">23</span>, <span class="number">168</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span>(<span class="params"><span class="string">&quot;小二&quot;</span>, <span class="number">20</span>, <span class="number">172</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p6</span>(<span class="params"><span class="string">&quot;小三&quot;</span>, <span class="number">20</span>, <span class="number">167</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    list&lt;Person&gt;L;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入数据</span></span><br><span class="line">    L.push_back(p1);</span><br><span class="line">    L.push_back(p2);</span><br><span class="line">    L.push_back(p3);</span><br><span class="line">    L.push_back(p4);</span><br><span class="line">    L.push_back(p5);</span><br><span class="line">    L.push_back(p6);</span><br><span class="line"></span><br><span class="line">    printList(<span class="string">&quot;p 初始化&quot;</span>, L);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序后</span></span><br><span class="line">    L.sort(comparePerson);</span><br><span class="line">    printList(<span class="string">&quot;p 排序后&quot;</span>, L);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062903271184-1024x540.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序。</li><li>高级排序只是在排序规则上再进行一次逻辑规则制定，并不复杂。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程54：STL常用容器（list容器-list反转和排序）</title>
      <link href="/post/c17ab38c.html"/>
      <url>/post/c17ab38c.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-7-7-list反转和排序"><a href="#3-7-7-list反转和排序" class="headerlink" title="3.7.7 list反转和排序"></a>3.7.7 list反转和排序</h2><p><strong>功能描述：</strong><br>将容器中的元素反转，以及将容器中的数据进行排序。 </p><p><strong>函数原型：</strong></p><ul><li><code>reverse( );</code> &#x2F;&#x2F;反转链表</li><li><code>sort( );</code> &#x2F;&#x2F;链表排序</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;list&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> list&lt;<span class="built_in">int</span>&gt; &amp;l</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (list&lt;<span class="built_in">int</span>&gt;::const_iterator it = l.begin(); it != l.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//降序函数定义</span></span><br><span class="line"><span class="function"><span class="built_in">bool</span> <span class="title">sortCompare</span>(<span class="params"><span class="built_in">int</span> val1, <span class="built_in">int</span> val2</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//降序：第一个数 大于 第二个数</span></span><br><span class="line">    <span class="keyword">return</span> val1 &gt; val2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//reverse( ); //反转链表</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L1;</span><br><span class="line">    L1.push_back(<span class="number">20</span>);</span><br><span class="line">    L1.push_back(<span class="number">50</span>);</span><br><span class="line">    L1.push_back(<span class="number">60</span>);</span><br><span class="line">    L1.push_back(<span class="number">30</span>);</span><br><span class="line">    printList(<span class="string">&quot;反转前&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反转</span></span><br><span class="line">    L1.reverse();</span><br><span class="line">    printList(<span class="string">&quot;反转后&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有不支持随机访问的迭代器容器，不可以用标准算法</span></span><br><span class="line">    <span class="comment">//不支持随机访问迭代器的容器，内部会提供对应的一些算法</span></span><br><span class="line">    <span class="comment">//sort(L1.begin(), L1.end());       //错误</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//sort( ); //链表排序</span></span><br><span class="line">    printList(<span class="string">&quot;排序前&quot;</span>, L1);</span><br><span class="line">    L1.sort();</span><br><span class="line">    printList(<span class="string">&quot;排序后 从小到大 升序&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    L1.sort(sortCompare);</span><br><span class="line">    printList(<span class="string">&quot;排序后 从大到小 降序&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/202006290229562-1024x421.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>反转（reverse）</li><li>排序 升序（sort( )）</li><li>排序 降序（sort( 成员函数 )）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程53：STL常用容器（list容器-list数据存取）</title>
      <link href="/post/7b56759a.html"/>
      <url>/post/7b56759a.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><p><strong>功能描述：</strong><br>对list容器中数据进行存取 </p><p><strong>函数原型：</strong></p><ul><li><code>front( );</code> &#x2F;&#x2F;返回第一个元素</li><li><code>back( );</code> &#x2F;&#x2F;返回最后一个元素</li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码:"></a>示例代码:</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;list&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> list&lt;<span class="built_in">int</span>&gt; &amp;l</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (list&lt;<span class="built_in">int</span>&gt;::const_iterator it = l.begin(); it != l.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L1;</span><br><span class="line">    L1.push_back(<span class="number">110</span>);</span><br><span class="line">    L1.push_back(<span class="number">120</span>);</span><br><span class="line">    L1.push_back(<span class="number">119</span>);</span><br><span class="line">    L1.push_back(<span class="number">66</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//L1[0]     //不可以用[]访问list容器中的元素</span></span><br><span class="line">    <span class="comment">//L1.at(2)  //不可以用at方式访问list容器中的元素</span></span><br><span class="line">    <span class="comment">//原因：list是本质链表，不是用连接性空间存储数据，迭代器也是不支持随机访问的</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;list 第一个元素为：&quot;</span> &lt;&lt; L1.front() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;list 最后一个元素为：&quot;</span> &lt;&lt; L1.back() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证迭代器是否支持随机访问</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;::iterator it = L1.begin();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否支持双向访问</span></span><br><span class="line">    it++;</span><br><span class="line">    it--;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否支持随机访问</span></span><br><span class="line">    <span class="comment">//it += 2;      //不支持随机访问</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/20200629010639100-1024x431.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>list容器中不可以通过[]或at方式访问数据</li><li>返回第一个元素（front）</li><li>返回最后一个元素（back）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程52：STL常用容器（list容器-list插入和删除）</title>
      <link href="/post/2aa283e5.html"/>
      <url>/post/2aa283e5.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-7-5-list插入和删除"><a href="#3-7-5-list插入和删除" class="headerlink" title="3.7.5 list插入和删除"></a>3.7.5 list插入和删除</h2><p><strong>功能描述：</strong><br>对list容器进行数据的插入和删除 </p><p><strong>函数原型：</strong></p><ul><li><p><code>push_back(elem);</code> &#x2F;&#x2F;在容器尾部加入一个元素。</p></li><li><p><code>pop_back( );</code> &#x2F;&#x2F;删除容器中最后一个元素。</p></li><li><p><code>push_front(elem);</code> &#x2F;&#x2F;在容器开头插入一个元素。</p></li><li><p><code>pop_front( );</code> &#x2F;&#x2F;从容器开头移除第一个元素。</p></li><li><p><code>insert( pos,elem);</code> &#x2F;&#x2F;在pos位置插入elem元素的拷贝，返回新数据的位置。</p></li><li><p><code>insert(pos,n,elem);</code> &#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。</p></li><li><p><code>insert(pos,beg,end);</code> &#x2F;&#x2F;在pos位置插入beg,end区间的数据，无返回值。</p></li><li><p><code>clear( );</code> &#x2F;&#x2F;移除容器的所有数据</p></li><li><p><code>erase(beg,end);</code> &#x2F;&#x2F;删除beg,end区间的数据，返回下一个数据的位置。</p></li><li><p><code>erase(pos);</code> &#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。</p></li><li><p><code>remove(elem);</code> &#x2F;&#x2F;删除容器中所有与elem值匹配的元素。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;list&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> list&lt;<span class="built_in">int</span>&gt; &amp;lit</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (list&lt;<span class="built_in">int</span>&gt;::const_iterator it = lit.begin(); it != lit.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//push_back(elem); //在容器尾部加入一个元素。</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L1;</span><br><span class="line">    L1.push_back(<span class="number">10</span>);</span><br><span class="line">    L1.push_back(<span class="number">20</span>);</span><br><span class="line">    L1.push_back(<span class="number">30</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 尾插&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//push_front(elem); //在容器开头插入一个元素。</span></span><br><span class="line">    L1.push_front(<span class="number">110</span>);</span><br><span class="line">    L1.push_front(<span class="number">120</span>);</span><br><span class="line">    L1.push_front(<span class="number">119</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 头插&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//pop_back(); //删除容器中最后一个元素。</span></span><br><span class="line">    L1.pop_back();</span><br><span class="line">    printList(<span class="string">&quot;L1 移除最后一个元素&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//pop_front(); //从容器开头移除第一个元素。</span></span><br><span class="line">    L1.pop_front();</span><br><span class="line">    printList(<span class="string">&quot;L1 移除第一个元素&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert(pos, elem); //在 pos 位置插入 elem 元素的拷贝，返回新数据的位置。</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;::iterator it = L1.begin();</span><br><span class="line">    L1.insert(++(++it), <span class="number">66</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 在 ++(++it) 位置插入 66 元素的拷贝&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert(pos, n, elem); //在 pos 位置插入 n 个 elem 数据，无返回值。</span></span><br><span class="line">    L1.insert(L1.end(),<span class="number">2</span>, <span class="number">502</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 在 L1.end() 位置插入 2 个 502 数据&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert(pos, beg, end); //在 pos 位置插入[beg,end]区间的数据，无返回值。</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L2;</span><br><span class="line">    L2.insert(L2.begin(),L1.begin(), L1.end());</span><br><span class="line">    printList(<span class="string">&quot;L2 在 L2.begin() 位置插入 L1.begin(), L1.end() 区间的数据&quot;</span>, L2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(pos); //删除 pos 位置的数据，返回下一个数据的位置。</span></span><br><span class="line">    L1.erase(L1.begin());</span><br><span class="line">    printList(<span class="string">&quot;L1 删除 L1.begin() 位置的数据&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//remove(elem); //删除容器中所有与 elem 值匹配的元素。</span></span><br><span class="line">    L1.<span class="keyword">remove</span>(<span class="number">502</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 删除容器中所有与 502 值匹配的元素&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(beg, end); //删除[beg,end]区间的数据，返回下一个数据的位置。</span></span><br><span class="line">    L1.erase(--it, L1.end());</span><br><span class="line">    printList(<span class="string">&quot;L1 删除 it, L1.end() 区间的数据&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//clear(); //移除容器的所有数据</span></span><br><span class="line">    L2.clear();</span><br><span class="line">    printList(<span class="string">&quot;L2 移除容器的所有数据&quot;</span>, L2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062810293855-1024x370.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>尾插（push_back）</li><li>尾删（pop_back）</li><li>头插（push_front）</li><li>头删（pop_front）</li><li>插入（insert）</li><li>删除（erase）</li><li>移除（remove）</li><li>清空（clear）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程51：STL常用容器（list容器-list大小操作）</title>
      <link href="/post/91cc4878.html"/>
      <url>/post/91cc4878.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-7-4-list大小操作"><a href="#3-7-4-list大小操作" class="headerlink" title="3.7.4 list大小操作"></a>3.7.4 list大小操作</h2><p><strong>功能描述：</strong><br>对list容器的大小进行操作 </p><p><strong>函数原型：</strong></p><ul><li><code>size( );</code> &#x2F;&#x2F;返回容器中元素的个数</li><li><code>empty( );</code> &#x2F;&#x2F;判断容器是否为空</li><li><code>resize(num);</code> &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值填充新位置。 &#x2F;&#x2F;如果容器变短，则未尾超出容器长度的元素被删除。</li><li><code>resize(num,elem);</code> &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。 &#x2F;&#x2F;如果容器变短，则未尾超出容器长度的元素被删除。</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;list&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> list&lt;<span class="built_in">int</span>&gt; &amp;lit</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (list&lt;<span class="built_in">int</span>&gt;::const_iterator it = lit.begin(); it != lit.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        L1.push_back(<span class="number">20</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    printList(<span class="string">&quot;L1 初始化&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//size( ); //返回容器中元素的个数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;L1 容器中元素的个数：&quot;</span> &lt;&lt; L1.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//empty( ); //判断容器是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (!L1.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;容器不为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//resize(num); //重新指定容器的长度为 num，若容器变长，则以默认值填充新位置。</span></span><br><span class="line">    L1.resize(<span class="number">7</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 重新指定容器的长度7&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果容器变短，则未尾超出容器长度的元素被删除。</span></span><br><span class="line">    L1.resize(<span class="number">5</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 重新指定容器的长度5&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//resize(num,elem); //重新指定容器的长度为 num，若容器变长，则以 elem 值填充新位置。</span></span><br><span class="line">    L1.resize(<span class="number">8</span>,<span class="number">119</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 重新指定容器的长度8&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果容器变短，则未尾超出容器长度的元素被删除。</span></span><br><span class="line">    L1.resize(<span class="number">4</span>, <span class="number">119</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 重新指定容器的长度4&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062809101979-1024x376.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>判断是否为空（empty）</li><li>返回元素个数（size）</li><li>重新指定个数（resize）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程50：STL常用容器（list容器-list赋值和交换）</title>
      <link href="/post/95bac996.html"/>
      <url>/post/95bac996.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-7-3-list赋值和交换"><a href="#3-7-3-list赋值和交换" class="headerlink" title="3.7.3 list赋值和交换"></a>3.7.3 list赋值和交换</h2><p><strong>功能描述：</strong><br>给list容器进行赋值，以及交换list容器。 </p><p><strong>函数原型：</strong></p><ul><li><code>assign(beg,end);</code> &#x2F;&#x2F;将beg,end区间中的数据拷贝赋值给本身</li><li><code>assign(n,elem);</code> &#x2F;&#x2F;将n个elem拷贝赋值给本身</li><li><code>list &amp;operator=(const list &amp;lit);</code> &#x2F;&#x2F;重载等号操作符</li><li><code>swap(lit);</code> &#x2F;&#x2F;将lit与本身的元素互换</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;list&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> list&lt;<span class="built_in">int</span>&gt; &amp;l</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (list&lt;<span class="built_in">int</span>&gt;::const_iterator it = l.begin(); it != l.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        L1.push_back(<span class="number">10</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    printList(<span class="string">&quot;L1初始化&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//assign(beg,end); //将[beg,end]区间中的数据拷贝赋值给本身</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L2;</span><br><span class="line">    L2.assign(L1.begin(), L1.end());</span><br><span class="line">    printList(<span class="string">&quot;L2初始化&quot;</span>, L2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//assign(n,elem); //将 n 个 elem 拷贝赋值给本身</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L3;</span><br><span class="line">    L3.assign(<span class="number">8</span>, <span class="number">101</span>);</span><br><span class="line">    printList(<span class="string">&quot;L3初始化&quot;</span>, L3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list &amp;operator=(const list &amp;lit); //重载等号操作符</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L4;</span><br><span class="line">    L4 = L1;</span><br><span class="line">    printList(<span class="string">&quot;L4初始化&quot;</span>, L4);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//swap(lit); //将 lit 与本身的元素互换</span></span><br><span class="line">    L2.swap(L3);</span><br><span class="line">    printList(<span class="string">&quot;L2互换后 初始化&quot;</span>, L2);</span><br><span class="line">    printList(<span class="string">&quot;L3互换后 初始化&quot;</span>, L3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/202006280812082-1024x335.jpg"></p><h3 id="总结：list赋值和交换操作能够灵活运用即可。"><a href="#总结：list赋值和交换操作能够灵活运用即可。" class="headerlink" title="总结：list赋值和交换操作能够灵活运用即可。"></a>总结：list赋值和交换操作能够灵活运用即可。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程49：STL常用容器（list容器-list构造函数）</title>
      <link href="/post/dd0dea70.html"/>
      <url>/post/dd0dea70.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-7-2-list构造函数"><a href="#3-7-2-list构造函数" class="headerlink" title="3.7.2 list构造函数"></a>3.7.2 list构造函数</h2><p><strong>功能描述：</strong><br>创建list容器 </p><p><strong>函数原型：</strong></p><ul><li><code>list&lt;T&gt;lit;</code> &#x2F;&#x2F;list采用模板类实现，对象的默认构造形式。</li><li><code>list(beg,end);</code> &#x2F;&#x2F;构造函数将beg,end区间中的元素拷贝给本身。</li><li><code>list(n,elem);</code> &#x2F;&#x2F;构造函数将n个elem拷贝给本身。</li><li><code>list(const list &amp;lit);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;list&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> list&lt;<span class="built_in">int</span>&gt; &amp;l</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (list&lt;<span class="built_in">int</span>&gt;::const_iterator it = l.begin(); it != l.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list&lt;T&gt;lit; //list采用模板类实现，对象的默认构造形式。</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt; L1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        L1.push_back(<span class="number">10</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    printList(<span class="string">&quot;L1 初始化&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list(beg, end); //构造函数将[beg,end]区间中的元素拷贝给本身。</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L2(L1.begin(), L1.end());</span><br><span class="line">    printList(<span class="string">&quot;L2 初始化&quot;</span>, L2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list(n,elem); //构造函数将n个elem拷贝给本身。</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L3(<span class="number">8</span>, <span class="number">110</span>);</span><br><span class="line">    printList(<span class="string">&quot;L3 初始化&quot;</span>, L3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list(const list &amp;lit); //拷贝构造函数</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L4(L1);</span><br><span class="line">    printList(<span class="string">&quot;L4 初始化&quot;</span>, L4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结：list构造方式同其他几个STL常用容器，熟练掌握即可。"><a href="#总结：list构造方式同其他几个STL常用容器，熟练掌握即可。" class="headerlink" title="总结：list构造方式同其他几个STL常用容器，熟练掌握即可。"></a>总结：list构造方式同其他几个STL常用容器，熟练掌握即可。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程48：STL常用容器（list容器-list基本概念）</title>
      <link href="/post/61296b91.html"/>
      <url>/post/61296b91.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="3-7-list容器"><a href="#3-7-list容器" class="headerlink" title="3.7 list容器"></a>3.7 list容器</h1><h2 id="3-7-1-list基本容器"><a href="#3-7-1-list基本容器" class="headerlink" title="3.7.1 list基本容器"></a>3.7.1 list基本容器</h2><p><strong>功能：</strong>将数据进行链式存储 <strong>链表</strong>（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的。</p><p>链表的组成：链表由一系列<strong>结点</strong>组成。</p><p>结点的组成：一个是存储数据元素的<strong>数据域</strong>，另一个是存储下一个结点地址的<strong>指针域</strong>。</p><p>STL中的链表是一个双向循环链表：<br><img src="http://image.camcad.cn/2020/06/2020062807024439.jpg"><br>由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于<strong>双向迭代器</strong>。</p><p><strong>list的优点：</strong></p><ul><li>采用动态存储分配，不会造成内存浪费和溢出</li><li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素。</li><li>list有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这丰vector是不成立的。</li></ul><p><strong>list的缺点：</strong></p><ul><li>链表灵活，但是空间（指针域）和时间（遍历）额外耗费较大。</li></ul><h3 id="总结：STL中list和vector是两个最常用被使用的容器，各有优缺点。"><a href="#总结：STL中list和vector是两个最常用被使用的容器，各有优缺点。" class="headerlink" title="总结：STL中list和vector是两个最常用被使用的容器，各有优缺点。"></a>总结：STL中list和vector是两个最常用被使用的容器，各有优缺点。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程47：STL常用容器（queue容器-queue常用接口）</title>
      <link href="/post/1d8639a1.html"/>
      <url>/post/1d8639a1.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-6-2-queue常用接口"><a href="#3-6-2-queue常用接口" class="headerlink" title="3.6.2 queue常用接口"></a>3.6.2 queue常用接口</h2><p>功能描述：栈容器常用的对外接口</p><p><strong>构造函数：</strong></p><ul><li><code>queue&lt;T&gt; que;</code> &#x2F;&#x2F;queue采用模板类实现，queue对象的默认构造形式</li><li><code>queue(const queue &amp;que);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><p><strong>赋值操作：</strong></p><ul><li><code>queue &amp;operator=(const queue &amp;que);</code> &#x2F;&#x2F;重载等号操作符</li></ul><p><strong>数据存取：</strong></p><ul><li><code>push(elem);</code> &#x2F;&#x2F;往队尾添加元素</li><li><code>pop( );</code> &#x2F;&#x2F;从队头移除第一个元素</li><li><code>back( );</code> &#x2F;&#x2F;返回最后一个元素</li><li><code>front( );</code> &#x2F;&#x2F;返回第一个元素</li></ul><p><strong>大小操作：</strong></p><ul><li><code>enoty( );</code> &#x2F;&#x2F;判断堆栈是否为空</li><li><code>size( );</code> &#x2F;&#x2F;返回栈的大小</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;queue&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    queue&lt;<span class="built_in">int</span>&gt;q;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//往队尾添加元素</span></span><br><span class="line">    q.push(<span class="number">120</span>);</span><br><span class="line">    q.push(<span class="number">110</span>);</span><br><span class="line">    q.push(<span class="number">119</span>);</span><br><span class="line">    q.push(<span class="number">112</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回最后一个元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;q 返回最后一个元素：&quot;</span> &lt;&lt; q.back() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回第一个元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;q 返回第一个元素：&quot;</span> &lt;&lt; q.front() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;返回栈的大小：&quot;</span> &lt;&lt; q.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断堆栈是否为空 返回元素</span></span><br><span class="line">    <span class="keyword">while</span> (! q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//返回第一个元素</span></span><br><span class="line">        cout &lt;&lt; q.front() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从队头移除第一个元素</span></span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;返回栈的大小：&quot;</span> &lt;&lt; q.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062803254435-1024x381.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>入队（push）</li><li>出队（pop）</li><li>返回队头元素（front）</li><li>返回队尾元素（back）</li><li>判断队是否为空（empty）</li><li>返回队列大小（size）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程46：STL常用容器（queue容器-queue基本概念）</title>
      <link href="/post/8813420.html"/>
      <url>/post/8813420.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="3-6-queue容器"><a href="#3-6-queue容器" class="headerlink" title="3.6 queue容器"></a>3.6 queue容器</h1><h2 id="3-6-1-queue基本概念"><a href="#3-6-1-queue基本概念" class="headerlink" title="3.6.1 queue基本概念"></a>3.6.1 queue基本概念</h2><p><strong>概念：</strong>Queue是一种<strong>先进先出</strong>（First In First Out,FIFO）的数据结构，它有两个出口。<br><img src="http://image.camcad.cn/2020/06/202006280251581.jpg"><br>队列容器允许从一端新增元素，从另一端移除元素。 队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为 队列中进数据称为—<strong>入队</strong><code>push</code> 队列中出数据称为—<strong>出队</strong><code>pop</code></p><p><strong>生活中的队列：</strong><br><img src="http://image.camcad.cn/2020/06/2020062802565955.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程45：STL常用容器（stack容器-stack常用接口）</title>
      <link href="/post/40b5411f.html"/>
      <url>/post/40b5411f.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-5-2-stack常用接口"><a href="#3-5-2-stack常用接口" class="headerlink" title="3.5.2 stack常用接口"></a>3.5.2 stack常用接口</h2><p>功能描述：栈容器常用的对外接口</p><p><strong>构造函数：</strong><br><code>stack&lt;T&gt; stk;</code> &#x2F;&#x2F;stack采用模板类实现，stack对象的默认构造形式。<br><code>stack(const stack &amp;stk);</code> &#x2F;&#x2F;拷贝构造函数 </p><p><strong>赋值操作：</strong></p><ul><li><code>stack &amp;operator=（const stack &amp;stk);</code> &#x2F;&#x2F;重载等号操作符</li></ul><p><strong>数据存取：</strong></p><ul><li><code>push(elem);</code> &#x2F;&#x2F;向栈顶添加元素</li><li><code>pop( );</code> &#x2F;&#x2F;从栈顶移除第一个元素</li><li><code>top( );</code> &#x2F;&#x2F;返回栈顶元素</li></ul><p><strong>大小操作：</strong></p><ul><li><code>empty( );</code> &#x2F;&#x2F;判断堆栈是否为空</li><li><code>size( );</code> &#x2F;&#x2F;返回栈的大小</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;stack&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    stack&lt;<span class="built_in">int</span>&gt;stk1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向栈顶添加元素</span></span><br><span class="line">    stk1.push(<span class="number">110</span>);</span><br><span class="line">    stk1.push(<span class="number">120</span>);</span><br><span class="line">    stk1.push(<span class="number">119</span>);</span><br><span class="line">    stk1.push(<span class="number">192</span>);</span><br><span class="line"></span><br><span class="line">    stack&lt;<span class="built_in">int</span>&gt;stk;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载等号操作符</span></span><br><span class="line">    stk = stk1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回栈的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;栈的大小为：&quot;</span> &lt;&lt; stk.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断堆栈是否为空 访问元素</span></span><br><span class="line">    <span class="keyword">while</span> (!stk.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//返回栈顶元素</span></span><br><span class="line">        cout &lt;&lt; stk.top() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从栈顶移除第一个元素</span></span><br><span class="line">        stk.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回栈的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;栈的大小为：&quot;</span> &lt;&lt; stk.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062802320475-1024x368.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>入栈（push）</li><li>出栈（pop）</li><li>返回栈顶（top）</li><li>判断栈是否为空（empty）</li><li>返回栈大小（size）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程44：STL常用容器（stack容器-stack基本概念）</title>
      <link href="/post/55b24c9e.html"/>
      <url>/post/55b24c9e.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="3-5-stack容器"><a href="#3-5-stack容器" class="headerlink" title="3.5 stack容器"></a>3.5 stack容器</h1><h2 id="3-5-1-stack基本概念"><a href="#3-5-1-stack基本概念" class="headerlink" title="3.5.1 stack基本概念"></a>3.5.1 stack基本概念</h2><p><strong>概念：</strong>stack是一种<strong>先进后出</strong>（First In Last Out,FILO）和数据结构，它只有一个出口。<br><a href="http://image.camcad.cn/2020/06/2020062801573083.jpg"><img src="http://image.camcad.cn/2020/06/2020062801573083.jpg"></a> </p><p><strong>生活中的栈：</strong><br><img src="http://image.camcad.cn/2020/06/2020062802000455.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程43：STL常用容器（案例-评委打分）</title>
      <link href="/post/39e2ef53.html"/>
      <url>/post/39e2ef53.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="3-4-案例-评委打分"><a href="#3-4-案例-评委打分" class="headerlink" title="3.4 案例-评委打分"></a>3.4 案例-评委打分</h1><h2 id="3-4-1-案例描述"><a href="#3-4-1-案例描述" class="headerlink" title="3.4.1 案例描述"></a>3.4.1 案例描述</h2><p>有5名选手：选手ABCDE，10个评委分别对每一名选手打分，去除评委中最高分、最低分，取每个选手平均分打印出来。</p><h2 id="3-4-2-实现步骤"><a href="#3-4-2-实现步骤" class="headerlink" title="3.4.2 实现步骤"></a>3.4.2 实现步骤</h2><ul><li>1.创建五名选手，放到vector容器中</li><li>2.遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分存到deque容器中</li><li>3.sort算法对deque容器中分数排序，去除最高分和最低分</li><li>4.deque容器遍历一遍，累加总分</li><li>5.获取平均分</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;deque&gt;</span></span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include &lt;ctime&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;algorithm&gt;  //标准算法 头文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="built_in">int</span> score)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> m_Name;  <span class="comment">//姓名</span></span><br><span class="line">    <span class="built_in">int</span> m_Score;    <span class="comment">//平均分</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建选择</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createPerson</span>(<span class="params">vector&lt;Person&gt; &amp;v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> nameNnm = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> name = <span class="string">&quot;选手&quot;</span>;</span><br><span class="line">        name += nameNnm[i];</span><br><span class="line"></span><br><span class="line">        <span class="function">Person <span class="title">p</span>(<span class="params">name, <span class="number">0</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将创建的Person对象，放入到容器中</span></span><br><span class="line">        v.push_back(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//评委打分</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setScore</span>(<span class="params">vector&lt;Person&gt; &amp;v, <span class="keyword">const</span> <span class="built_in">int</span> len</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//添加随机数种子，利用当前系统时间生成随机数，防止每次随机数都一样</span></span><br><span class="line">    srand((unsigned <span class="built_in">int</span>)time(NULL));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取五名选手</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Person&gt;::iterator vit = v.begin(); vit != v.end(); vit++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将评委的分数 放入到deque容器中</span></span><br><span class="line">        deque&lt;<span class="built_in">int</span>&gt;d;</span><br><span class="line">        <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//1、系统生成随机数</span></span><br><span class="line">            <span class="built_in">int</span> score = rand() % <span class="number">41</span> + <span class="number">60</span>;    <span class="comment">//rand() % 41 + 60 生成 0 + 60 ~ 40 + 60 随机数</span></span><br><span class="line">            d.push_back(score);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//排序升序</span></span><br><span class="line">        sort(d.begin(), d.end());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//去除最高分</span></span><br><span class="line">        d.pop_back();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//去除最低分</span></span><br><span class="line">        d.pop_front();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//求取平均分</span></span><br><span class="line">        <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (deque&lt;<span class="built_in">int</span>&gt;::iterator dit = d.begin(); dit != d.end(); dit++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += *dit;    <span class="comment">//累加每个评委的分数</span></span><br><span class="line">        &#125;</span><br><span class="line">        vit-&gt;m_Score = sum / d.size();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取平均分</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showScore</span>(<span class="params">vector&lt;Person&gt; &amp;v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Person&gt;::iterator vit = v.begin(); vit != v.end(); vit++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; vit-&gt;m_Name &lt;&lt; <span class="string">&quot; 平均分：&quot;</span> &lt;&lt; vit-&gt;m_Score &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.创建五名选手，放到vector容器中</span></span><br><span class="line">    vector&lt;Person&gt;v;</span><br><span class="line">    createPerson(v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分存到deque容器中</span></span><br><span class="line">    <span class="built_in">int</span> len = <span class="number">10</span>;</span><br><span class="line">    setScore(v, len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.获取平均分</span></span><br><span class="line">    showScore(v);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062711492377-1024x396.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程42：STL常用容器（deque容器-deque排序）</title>
      <link href="/post/f71fb165.html"/>
      <url>/post/f71fb165.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-3-7-deque排序"><a href="#3-3-7-deque排序" class="headerlink" title="3.3.7 deque排序"></a>3.3.7 deque排序</h2><p><strong>功能描述：</strong><br>利用算法实现对deque容器进行排序 </p><p><strong>算法：</strong></p><ul><li><code>sort(iterator beg, iterator end)</code> &#x2F;&#x2F;对beg和end区间内元素进行排序。</li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码:"></a>示例代码:</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;deque&gt;</span></span><br><span class="line"><span class="meta">#include &lt;ctime&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;algorithm&gt;  //标准算法 头文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> m_size 15</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDeque</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> deque&lt;<span class="built_in">int</span>&gt; &amp;d</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (deque&lt;<span class="built_in">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//添加随机数种子，利用当前系统时间生成随机数，防止每次随机数都一样</span></span><br><span class="line">    srand((unsigned <span class="built_in">int</span>)time(NULL));</span><br><span class="line"></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; m_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//1、系统生成随机数</span></span><br><span class="line">        <span class="built_in">int</span> iNum = rand() % <span class="number">100</span> + <span class="number">1</span>;    <span class="comment">//rand() % 100 + 1 生成 0 + 1 ~ 99 + 1 随机数</span></span><br><span class="line"></span><br><span class="line">        d1.push_back(iNum);</span><br><span class="line">    &#125;</span><br><span class="line">    printDeque(<span class="string">&quot;d1 初始化&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对beg和end区间内元素进行排序。</span></span><br><span class="line">    <span class="comment">//对于支持随机访问的迭代器的容器，都可以利用sort算法直接对其进行排序</span></span><br><span class="line">    sort(d1.begin(), d1.end());     <span class="comment">//默认为 升序</span></span><br><span class="line">    printDeque(<span class="string">&quot;d1 排序后&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062709081044-1024x333.jpg"></p><h3 id="总结：sort算法非常实用，使用时包含头文件algorithhm即可。"><a href="#总结：sort算法非常实用，使用时包含头文件algorithhm即可。" class="headerlink" title="总结：sort算法非常实用，使用时包含头文件algorithhm即可。"></a>总结：sort算法非常实用，使用时包含头文件algorithhm即可。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程41：STL常用容器（deque容器-deque数据存取）</title>
      <link href="/post/2593a9e0.html"/>
      <url>/post/2593a9e0.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-3-6-deque数据存取"><a href="#3-3-6-deque数据存取" class="headerlink" title="3.3.6 deque数据存取"></a>3.3.6 deque数据存取</h2><p><strong>功能描述：</strong><br>对deque中的数据的存取操作 </p><p><strong>函数原型：</strong></p><ul><li><code>operator[int idx];</code> &#x2F;&#x2F;返回索引int idx所指的数据</li><li><code>at[int idx];</code> &#x2F;&#x2F;返回索引int idx所指的数据</li><li><code>front();</code> &#x2F;&#x2F;返回容器中第一个数据元素</li><li><code>back();</code> &#x2F;&#x2F;返回容器中最后一个数据元素</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;deque&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d1;</span><br><span class="line">    d1.push_back(<span class="number">10</span>);</span><br><span class="line">    d1.push_back(<span class="number">110</span>);</span><br><span class="line">    d1.push_back(<span class="number">120</span>);</span><br><span class="line">    d1.push_back(<span class="number">119</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//operator[int idx];    //返回索引[int idx]所指的数据</span></span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; d1.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;d1[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]= &quot;</span> &lt;&lt; d1[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//at[int idx];  //返回索引[int idx]所指的数据</span></span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; d1.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;d1.at(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)= &quot;</span> &lt;&lt; d1.at(i) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//front();  //返回容器中第一个数据元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;d1 容器中第一个数据元素为：&quot;</span> &lt;&lt; d1.front() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//back();   //返回容器中最后一个数据元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;d1 容器中最后一个数据元素为：&quot;</span> &lt;&lt; d1.back() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062708313491-1024x442.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>除了用迭代器获取deque容器中元素，[ ]和at也可以。</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程40：STL常用容器（deque容器-deque插入和删除）</title>
      <link href="/post/8feeb365.html"/>
      <url>/post/8feeb365.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-3-5-deque插入和删除"><a href="#3-3-5-deque插入和删除" class="headerlink" title="3.3.5 deque插入和删除"></a>3.3.5 deque插入和删除</h2><p><strong>功能描述：</strong><br>向deque容器中插入和删除数据 </p><p><strong>函数原型：</strong><br>两端插入操作：</p><ul><li><code>push_back(elem);</code> &#x2F;&#x2F;在容器尾部添加一个数据</li><li><code>push_front(elem);</code> &#x2F;&#x2F;在容器头部插入一个数据</li><li><code>pop_back();</code> &#x2F;&#x2F;删除容器最后一个数据</li><li><code>pop_front();</code> &#x2F;&#x2F;删除容器第一个数据 指定位置操作：</li><li><code>insert(pos, elem);</code> &#x2F;&#x2F;在pos位置插入一个elem元素的拷贝，返回新数据的位置</li><li><code>insert(pos,n,elem);</code> &#x2F;&#x2F;在pos位置插入n个elem数据，无返回值</li><li><code>insert(pos,beg, end);</code> 在pos位置插入beg,end区间的数据，无返回值</li><li><code>erase(beg,end);</code> 删除beg,end区间的数据，返回下一个数据的位置</li><li><code>erase(pos);</code> &#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置</li><li><code>clear();</code> &#x2F;&#x2F;清空容器的所有数据</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;deque&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDeque</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> deque&lt;<span class="built_in">int</span>&gt; &amp;d</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (deque&lt;<span class="built_in">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//push_back(elem);      //在容器尾部添加一个数据</span></span><br><span class="line">    d1.push_back(<span class="number">10</span>);</span><br><span class="line">    d1.push_back(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//push_front(elem);     //在容器头部插入一个数据</span></span><br><span class="line">    d1.push_front(<span class="number">111</span>);</span><br><span class="line"></span><br><span class="line">    printDeque(<span class="string">&quot;d1 初始化&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//pop_back();   //删除容器最后一个数据</span></span><br><span class="line">    d1.pop_back();</span><br><span class="line">    printDeque(<span class="string">&quot;d1 删除容器最后一个数据&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//pop_front();  //删除容器第一个数据</span></span><br><span class="line">    d1.pop_front();</span><br><span class="line">    printDeque(<span class="string">&quot;d1 删除容器第一个数据&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d2;</span><br><span class="line">    d2.push_back(<span class="number">10</span>);</span><br><span class="line">    d2.push_back(<span class="number">20</span>);</span><br><span class="line">    d2.push_front(<span class="number">100</span>);</span><br><span class="line">    d2.push_front(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    printDeque(<span class="string">&quot;d2 初始化&quot;</span>, d2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert(pos, elem);        //在pos位置插入一个elem元素的拷贝，返回新数据的位置</span></span><br><span class="line">    d2.insert(d2.begin(), <span class="number">120</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d2 在pos位置插入一个elem元素的拷贝&quot;</span>, d2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert(pos,n,elem);       //在pos位置插入n个elem数据，无返回值</span></span><br><span class="line">    d2.insert(d2.end(), <span class="number">2</span>, <span class="number">110</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d2 在pos位置插入n个elem数据&quot;</span>, d2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert(pos,beg, end); 在pos位置插入[beg,end]区间的数据，无返回值</span></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d3;</span><br><span class="line">    d3.insert(d3.end(), d2.begin(), d2.end());</span><br><span class="line">    printDeque(<span class="string">&quot;d3 在pos位置插入[beg,end]区间的数据&quot;</span>, d3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(beg,end);   删除[beg,end]区间的数据，返回下一个数据的位置</span></span><br><span class="line">    d3.erase(d3.begin() + <span class="number">1</span>, d3.end() - <span class="number">1</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d3 删除[beg,end]区间的数据&quot;</span>, d3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(pos);   //删除pos位置的数据，返回下一个数据的位置</span></span><br><span class="line">    d3.erase(d3.begin());</span><br><span class="line">    printDeque(<span class="string">&quot;d3 删除pos位置的数据，返回下一个数据的位置&quot;</span>, d3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//clear();  //清空容器的所有数据</span></span><br><span class="line">    d2.clear();</span><br><span class="line">    printDeque(<span class="string">&quot;d2 清空容器的所有数据&quot;</span>, d2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/20200627080647100-1024x491.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>插入和删除提供的位置是迭代器!</li><li>尾插（push_back）</li><li>尾删（pop_back）</li><li>头插（push_front）</li><li>头删（pop_front）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程39：STL常用容器（deque容器-deque大小操作）</title>
      <link href="/post/ffb738d8.html"/>
      <url>/post/ffb738d8.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-3-4-deque大小操作"><a href="#3-3-4-deque大小操作" class="headerlink" title="3.3.4 deque大小操作"></a>3.3.4 deque大小操作</h2><p><strong>功能描述：</strong><br>对deque容器的大小进行操作。 </p><p><strong>函数原型：</strong></p><ul><li><code>deque.empty();</code> &#x2F;&#x2F;判断容器是否为空</li><li><code>deque.size();</code> &#x2F;&#x2F;返回容器中元素的个数</li><li><code>deque.resize(num);</code> &#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以默认值填充新位置。 &#x2F;&#x2F;如果容器变短，则未尾超出容器长度的元素被删除。</li><li><code>deque.resize(num,elem)</code> &#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以elem值填充新位置。 &#x2F;&#x2F;如果容器变短，则未性超出容器长度的元素被删除。</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;deque&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> m_size 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDeque</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> deque&lt;<span class="built_in">int</span>&gt; &amp;d</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (deque&lt;<span class="built_in">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; m_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        d1.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    printDeque(<span class="string">&quot;d1 初始化&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//deque.empty(); //判断容器是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (d1.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;容器为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//deque.size(); //返回容器中元素的个数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;d1 容器中元素的个数为：&quot;</span> &lt;&lt; d1.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//deque.resize(num); //重新指定容器的长度为 num,若容器变长，则以默认值填充新位置。</span></span><br><span class="line">    d1.resize(<span class="number">15</span>, <span class="number">120</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d1 容器变长：&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果容器变短，则未尾超出容器长度的元素被删除。</span></span><br><span class="line">    d1.resize(<span class="number">5</span>,<span class="number">120</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d1 容器变短：&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//deque.resize(num,elem) //重新指定容器的长度为 num,若容器变长，则以 elem 值填充新位置。</span></span><br><span class="line">    d1.resize(<span class="number">10</span>, <span class="number">110</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d1 重新指定容器：&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果容器变短，则未性超出容器长度的元素被删除。</span></span><br><span class="line">    d1.resize(<span class="number">4</span>, <span class="number">110</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d1 重新指定容器：&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062706062394-1024x399.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>deque没有容量的概念。</li><li>判断是否为空（empty）</li><li>返回元素个数（size）</li><li>重新指定个数（resize）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程38：STL常用容器（deque容器-deque赋值操作）</title>
      <link href="/post/7bcbbe51.html"/>
      <url>/post/7bcbbe51.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><p><strong>功能描述：</strong><br>给deque容器进行赋值。 </p><p><strong>函数原型：</strong></p><ul><li><code>deque &amp;operator=(const deque&lt;T&gt; &amp;deq);</code> &#x2F;&#x2F;重载等号操作符</li><li><code>assign(deg,end);</code> &#x2F;&#x2F;将beg,end区间中的数据拷贝赋值给本身。</li><li><code>assign(n,elem);</code> &#x2F;&#x2F;将n个elem拷贝赋值给本身。</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;deque&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> m_size 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDeque</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> deque&lt;<span class="built_in">int</span>&gt; &amp;d</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (deque&lt;<span class="built_in">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; m_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        d1.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    printDeque(<span class="string">&quot;d1 赋值为&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//deque &amp;operator=(const deque&lt;T&gt; &amp;deq); //重载等号操作符</span></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d2 = d1;</span><br><span class="line">    printDeque(<span class="string">&quot;d2 赋值为&quot;</span>, d2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//assign(deg,end); //将[beg,end]区间中的数据拷贝赋值给本身。</span></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d3;</span><br><span class="line">    d3.assign(d1.begin(), d1.end());</span><br><span class="line">    printDeque(<span class="string">&quot;d3 赋值为&quot;</span>,d3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//assign(n,elem); //将n个elem拷贝赋值给本身。</span></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d4;</span><br><span class="line">    d4.assign(<span class="number">10</span>, <span class="number">101</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d4 赋值为&quot;</span>, d4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062705294550-1024x297.jpg"></p><h3 id="总结：deque赋值操作也与vector相同，需熟练掌握。"><a href="#总结：deque赋值操作也与vector相同，需熟练掌握。" class="headerlink" title="总结：deque赋值操作也与vector相同，需熟练掌握。"></a>总结：deque赋值操作也与vector相同，需熟练掌握。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程37：STL常用容器（deque容器-deque构造函数）</title>
      <link href="/post/3ddb7e7f.html"/>
      <url>/post/3ddb7e7f.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-3-2-deque构造函数"><a href="#3-3-2-deque构造函数" class="headerlink" title="3.3.2 deque构造函数"></a>3.3.2 deque构造函数</h2><p><strong>功能描述：</strong><br>deque容器构造 </p><p><strong>函数原型：</strong></p><ul><li><code>deque&lt;T&gt;deqT;</code> &#x2F;&#x2F;默认构造形式</li><li><code>deque(beg, end);</code> &#x2F;&#x2F;构造函数将 deg,end 区间中的元素拷贝给本身。</li><li><code>deque(n, elem);</code> &#x2F;&#x2F;构造函数将n个elem拷贝给本身</li><li><code>deque(const deque &amp;deq);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;deque&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> m_size 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDeque</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> deque&lt;<span class="built_in">int</span>&gt; &amp;d</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (deque&lt;<span class="built_in">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//deque&lt;T&gt;deqT; //默认构造形式</span></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; m_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        d1.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    printDeque(<span class="string">&quot;d1 初始化&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//deque(begin, end); //构造函数将[degin,end]区间中的元素拷贝给本身。</span></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d2(d1.begin(), d1.end());</span><br><span class="line">    printDeque(<span class="string">&quot;d2 初始化&quot;</span>, d2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//deque(n, elem); //构造函数将n个elem拷贝给本身</span></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d3(<span class="number">10</span>, <span class="number">120</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d3 初始化&quot;</span>, d3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//deque(const deque &amp;deq); //拷贝构造函数</span></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d4(d2);</span><br><span class="line">    printDeque(<span class="string">&quot;d4 初始化&quot;</span>, d4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062702420121-1024x441.jpg"></p><h3 id="总结：deque容器和vector容器的构造方式几乎一致，灵活使用即可。"><a href="#总结：deque容器和vector容器的构造方式几乎一致，灵活使用即可。" class="headerlink" title="总结：deque容器和vector容器的构造方式几乎一致，灵活使用即可。"></a>总结：deque容器和vector容器的构造方式几乎一致，灵活使用即可。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程36：STL常用容器（deque容器-deque容器基本概念）</title>
      <link href="/post/2d258b96.html"/>
      <url>/post/2d258b96.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="3-3-deque容器"><a href="#3-3-deque容器" class="headerlink" title="3.3 deque容器"></a>3.3 deque容器</h1><h2 id="3-3-1-deque容器基本概念"><a href="#3-3-1-deque容器基本概念" class="headerlink" title="3.3.1 deque容器基本概念"></a>3.3.1 deque容器基本概念</h2><p><strong>功能：</strong></p><ul><li>双端数组，可以对头端进行插入删除操作。</li></ul><p><strong>deque与vector区别：</strong></p><ul><li>vector对于头部的插入删除效率低，数据量越大，效率越低。</li><li>deque相对而言，对头部的插入删除速度会比vector快。</li><li>vector访问元素时的速度会比deque快，这和两者实现有关。<br><a href="http://image.camcad.cn/2020/06/2020062701504737.jpg"><img src="http://image.camcad.cn/2020/06/2020062701504737.jpg"></a></li></ul><p><strong>deque内部工作原理：</strong> deque内部有个<strong>中控器</strong>，维护每段缓冲区中的内容，缓冲区中存放真实数据。中控器维护的是每个缓冲区的地址，使得使用deque时像一片连接的内存空间。<br><img src="http://image.camcad.cn/2020/06/2020062701554631.jpg"></p><ul><li>deque容器的迭代器也是支持随机访问的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程35：STL常用容器（vector容器- vector预留空间）</title>
      <link href="/post/d3b74cd4.html"/>
      <url>/post/d3b74cd4.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-2-8-vector预留空间"><a href="#3-2-8-vector预留空间" class="headerlink" title="3.2.8 vector预留空间"></a>3.2.8 vector预留空间</h2><p><strong>功能描述：</strong><br>减少vector在动态扩展容量时的扩展次数。 </p><p><strong>函数原型：</strong></p><ul><li><code>reserve(int len);</code> &#x2F;&#x2F;容器预留len个元素长度，预留位置不初始化，元素不可访问。</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> m_size 100000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;    </span><br><span class="line">    <span class="built_in">int</span> num = <span class="number">0</span>;    <span class="comment">//统计开辟次数</span></span><br><span class="line">    <span class="built_in">int</span> *p = NULL;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(i);</span><br><span class="line">        <span class="keyword">if</span> (p != &amp;v1[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            p = &amp;v1[<span class="number">0</span>];</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;未加reserve v1开辟次数为：&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v2;</span><br><span class="line">    <span class="built_in">int</span> num1 = <span class="number">0</span>;   <span class="comment">//统计开辟次数</span></span><br><span class="line">    <span class="built_in">int</span> *p1 = NULL;</span><br><span class="line"></span><br><span class="line">    v2.reserve(m_size);     <span class="comment">//预留空间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v2.push_back(i);</span><br><span class="line">        <span class="keyword">if</span> (p1 != &amp;v2[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            p1 = &amp;v2[<span class="number">0</span>];</span><br><span class="line">            num1++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加上reserve v2开辟次数为：&quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062509384530-1024x321.jpg"></p><h3 id="总结：如果数据量较大，可以一开始利用reserve预留空间。"><a href="#总结：如果数据量较大，可以一开始利用reserve预留空间。" class="headerlink" title="总结：如果数据量较大，可以一开始利用reserve预留空间。"></a>总结：如果数据量较大，可以一开始利用reserve预留空间。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程34：STL常用容器（vector容器- vector互换容器）</title>
      <link href="/post/ae7f0af0.html"/>
      <url>/post/ae7f0af0.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-2-7-vector互换容器"><a href="#3-2-7-vector互换容器" class="headerlink" title="3.2.7 vector互换容器"></a>3.2.7 vector互换容器</h2><p><strong>功能描述：</strong><br>实现两个容器内元素进行互换 </p><p><strong>函数原型：</strong></p><ul><li><code>swap(vec)；</code> &#x2F;&#x2F;将vec与本身的元素互换</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> m_size 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str,vector&lt;<span class="built_in">int</span>&gt; &amp;v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; v.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; v[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//容器1</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; m_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    printVector(<span class="string">&quot;v1互换前初始值为：&quot;</span>, v1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//窗口2</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v2;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; m_size<span class="number">-5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v2.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    printVector(<span class="string">&quot;v2互换前初始值为：&quot;</span>, v2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//容器互换</span></span><br><span class="line">    v1.swap(v2);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    printVector(<span class="string">&quot;v1互换后初始值为：&quot;</span>, v1);</span><br><span class="line">    printVector(<span class="string">&quot;v2互换后初始值为：&quot;</span>, v2);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际应用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;实际应用：&quot;</span> &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;itv;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        itv.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;itv的容量为：&quot;</span> &lt;&lt; itv.capacity() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;itv的大小为：&quot;</span> &lt;&lt; itv.size() &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重新定义 itv.size() 的内存大小</span></span><br><span class="line">    itv.resize(<span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;定义后 itv的容量为：&quot;</span> &lt;&lt; itv.capacity() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;定义后 itv的大小为：&quot;</span> &lt;&lt; itv.size() &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//容器互换（优化容量）</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;(itv).swap(itv);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;优化后 itv的容量为：&quot;</span> &lt;&lt; itv.capacity() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;优化后 itv的大小为：&quot;</span> &lt;&lt; itv.size() &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062507504748-1024x585.jpg"></p><h3 id="总结：swap-可以使用两个容器互换，可以达到实用的收缩内存效果。"><a href="#总结：swap-可以使用两个容器互换，可以达到实用的收缩内存效果。" class="headerlink" title="总结：swap()可以使用两个容器互换，可以达到实用的收缩内存效果。"></a>总结：swap()可以使用两个容器互换，可以达到实用的收缩内存效果。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程33：STL常用容器（vector容器- vector数据存取）</title>
      <link href="/post/7528e38.html"/>
      <url>/post/7528e38.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-2-6-vector数据存取"><a href="#3-2-6-vector数据存取" class="headerlink" title="3.2.6 vector数据存取"></a>3.2.6 vector数据存取</h2><p><strong>功能描述：</strong><br>对vector中的数据的存取操作 </p><p><strong>函数原型：</strong></p><ul><li><code>operator[];</code> &#x2F;&#x2F;返回索引idx所指的数据</li><li><code>at(int idx);</code> &#x2F;&#x2F;返回索引idx所指的数据</li><li><code>front();</code> &#x2F;&#x2F;返回容器中第一个数据元素</li><li><code>back();</code> &#x2F;&#x2F;返回容器中最后一个数据元素</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> m_size 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str,vector&lt;<span class="built_in">int</span>&gt; &amp;v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it=v.begin();it !=v.end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; m_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v.push_back(i+<span class="number">11</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    printVector(<span class="string">&quot;初始化&quot;</span>,v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//operator[];   //返回索引[ idx ]所指的数据</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;索引 [2] 所指的数据为：&quot;</span> &lt;&lt; v[<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//at(int idx);  //返回索引[ idx ]所指的数据</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;索引 [4] 所指的数据为：&quot;</span> &lt;&lt; v.at(<span class="number">4</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//front();      //返回容器中第一个数据元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;返回容器中第一个数据元素：&quot;</span> &lt;&lt; v.front() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//back();       //返回容器中最后一个数据元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;返回容器中最后一个数据元素：&quot;</span> &lt;&lt; v.back() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062506560863-1024x418.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>除了用迭代器获取vector容器中元素,operatoridx和at(int idx)也可以。</li><li>front()返回容器第一个元素</li><li>back()返回容器最后一个元素</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程32：STL常用容器（vector容器- vector插入和删除）</title>
      <link href="/post/e8abcb67.html"/>
      <url>/post/e8abcb67.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-2-5-vector插入和删除"><a href="#3-2-5-vector插入和删除" class="headerlink" title="3.2.5 vector插入和删除"></a>3.2.5 vector插入和删除</h2><p><strong>功能描述：</strong><br>对vector容器进行插入、删除操作 </p><p><strong>函数原型：</strong></p><ul><li><code>push_back(ele);</code> &#x2F;&#x2F;尾部插入元素ele</li><li><code>pop_back();</code> &#x2F;&#x2F;删除最后一个元素</li><li><code>insert(const_iterator pos, ele);</code> &#x2F;&#x2F;迭代器指向位置pos插入元素ele</li><li><code>insert(const_iterator pos, int count, ele);</code> &#x2F;&#x2F;迭代器指向位置pos插入count个元素ele</li><li><code>erase(const_iterator pos);</code> &#x2F;&#x2F;删除迭代器指向的元素</li><li><code>erase(const_iterator start, const_iterator end);</code> &#x2F;&#x2F;删除迭代器从start到end之间的元素</li><li><code>clear();</code> &#x2F;&#x2F;删除容器中所有元素</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i_size 10   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str,vector&lt;<span class="built_in">int</span>&gt; &amp;v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; i_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    printVector(<span class="string">&quot;初始化&quot;</span>,v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾插</span></span><br><span class="line">    v.push_back(<span class="number">110</span>);</span><br><span class="line">    printVector(<span class="string">&quot;尾插&quot;</span>,v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾删</span></span><br><span class="line">    v.pop_back();</span><br><span class="line">    printVector(<span class="string">&quot;尾删&quot;</span>,v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代器指向位置pos插入元素ele</span></span><br><span class="line">    v.insert(v.begin() + <span class="number">1</span>, <span class="number">120</span>);</span><br><span class="line">    printVector(<span class="string">&quot;迭代器指向位置pos插入元素ele&quot;</span>,v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代器指向位置pos插入count个元素ele</span></span><br><span class="line">    v.insert(v.begin(), <span class="number">3</span>, <span class="number">66</span>);</span><br><span class="line">    printVector(<span class="string">&quot;迭代器指向位置pos插入count个元素ele&quot;</span>, v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除迭代器指向的元素</span></span><br><span class="line">    v.erase(v.begin());</span><br><span class="line">    printVector(<span class="string">&quot;删除迭代器指向的元素&quot;</span>, v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //删除迭代器从start到end之间的元素</span></span><br><span class="line"><span class="comment">    v.erase(v.begin(), v.end());</span></span><br><span class="line"><span class="comment">    printVector(&quot;删除迭代器从start到end之间的元素&quot;, v);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除容器中所有元素</span></span><br><span class="line">    v.clear();</span><br><span class="line">    printVector(<span class="string">&quot;删除容器中所有元素&quot;</span>,v);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062502132056-1024x337.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>尾插（push_back）</li><li>尾删（pop_back）</li><li>插入（insert）–&gt;（位置迭代器）</li><li>删除（erase）–&gt;（位置迭代器）</li><li>清空（clear）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程31：STL常用容器（vector容器- vector容量和大小）</title>
      <link href="/post/e82d8690.html"/>
      <url>/post/e82d8690.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-2-4-vector容量和大小"><a href="#3-2-4-vector容量和大小" class="headerlink" title="3.2.4 vector容量和大小"></a>3.2.4 vector容量和大小</h2><p><strong>功能描述：</strong></p><ul><li>对vector容器的容量和大小操作。</li></ul><p><strong>函数原型：</strong></p><ul><li><code>empty();</code> &#x2F;&#x2F;判断容器是否为空。</li><li><code>capacity();</code> &#x2F;&#x2F;容器的容量。</li><li><code>size();</code> &#x2F;&#x2F;返回容器中元素的个数。</li><li><code>resize(int num);</code> &#x2F;&#x2F;1.重新指定容器的长度为num，若容器变长，则以默认值填充新位置。 &#x2F;&#x2F;2.如果容器变短，则未尾超出容器长度的元素被删除。</li><li><code>resize（int num,elem);</code> &#x2F;&#x2F;1.重新指定容器的长度为num,若容器变长，则以elem值填充新位置。 &#x2F;&#x2F;2.如果容器变短，则未尾超出容器长度的元素被删除。</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i_size 10   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params">vector&lt;<span class="built_in">int</span>&gt; v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; i_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    printVector(v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//empty(); //判断容器是否为空。</span></span><br><span class="line">    <span class="keyword">if</span> (!v.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;容器不为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//capacity(); //容器的容量。</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;容器的容量为：&quot;</span> &lt;&lt; v.capacity() &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//size(); //返回容器中元素的个数（大小）。</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;容器中元素的个数（大小）为：&quot;</span> &lt;&lt; v.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//resize(int num); //1.重新指定容器的长度为num，若容器变长，则以默认值0填充新位置。</span></span><br><span class="line">    v.resize(<span class="number">15</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;容器中元素的个数（大小）为：&quot;</span> &lt;&lt; v.size() &lt;&lt; endl;</span><br><span class="line">    printVector(v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.如果容器变短，则未尾超出容器长度的元素被删除。</span></span><br><span class="line">    v.resize(<span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;容器中元素的个数（大小）为：&quot;</span> &lt;&lt; v.size() &lt;&lt; endl;</span><br><span class="line">    printVector(v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//resize（int num, elem); //1.重新指定容器的长度为num,若容器变长，则以elem值填充新位置。</span></span><br><span class="line">    v.resize(<span class="number">9</span>, <span class="number">110</span>); </span><br><span class="line">    printVector(v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.如果容器变短，则未尾超出容器长度的元素被删除。</span></span><br><span class="line">    v.resize(<span class="number">7</span>,<span class="number">110</span>);</span><br><span class="line">    printVector(v);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062408214446-1024x577.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>判断是否为空（empty）</li><li>返回元素个数（size）</li><li>返回容器容量（capacity）</li><li>重新指定大小（resize）</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程30：STL常用容器（vector容器- vector赋值操作）</title>
      <link href="/post/92771253.html"/>
      <url>/post/92771253.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-2-3-vector赋值操作"><a href="#3-2-3-vector赋值操作" class="headerlink" title="3.2.3 vector赋值操作"></a>3.2.3 vector赋值操作</h2><p><strong>功能描述：</strong><br>给vector容器进行赋值 </p><p><strong>函数原型：</strong></p><ul><li><code>vector &amp;operator=(const vector &amp;vec);</code> &#x2F;&#x2F;重载等号操作符</li><li><code>assign(beg, end);</code> &#x2F;&#x2F;将beg,end区间中的数据拷贝赋值给本身</li><li><code>assign(n, elem);</code> &#x2F;&#x2F;将n个elem拷贝赋值给本身</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params">vector&lt;<span class="built_in">int</span>&gt; &amp;v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    printVector(v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载等号操作符</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v2;</span><br><span class="line">    v2 = v;</span><br><span class="line">    printVector(v2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将[beg,end]区间中的数据拷贝赋值给本身</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v3;</span><br><span class="line">    v3.assign(v.begin(), v.end());</span><br><span class="line">    printVector(v3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将n个elem拷贝赋值给本身</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v4;</span><br><span class="line">    v4.assign(<span class="number">10</span>, <span class="number">120</span>);</span><br><span class="line">    printVector(v4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062402084819-1024x399.jpg"></p><h3 id="总结：vector赋值方式比较简单，使用operator-x3D-或者assign都可以实现。"><a href="#总结：vector赋值方式比较简单，使用operator-x3D-或者assign都可以实现。" class="headerlink" title="总结：vector赋值方式比较简单，使用operator&#x3D;或者assign都可以实现。"></a>总结：vector赋值方式比较简单，使用operator&#x3D;或者assign都可以实现。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程29：STL常用容器（vector容器- vector构造函数）</title>
      <link href="/post/4a098d18.html"/>
      <url>/post/4a098d18.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-2-2-vector-构造函数"><a href="#3-2-2-vector-构造函数" class="headerlink" title="3.2.2 vector 构造函数"></a>3.2.2 vector 构造函数</h2><p><strong>功能描述：</strong></p><ul><li>创建vector容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>vector&lt;T&gt;v;</code> &#x2F;&#x2F;采用模板实现类实现，默认构造函数</li><li><code>vector(v.begin(), v.end());</code> &#x2F;&#x2F;将v(begin(), end())区间中的元素拷贝给本身</li><li><code>vector(n, elem);</code> &#x2F;&#x2F;构造函数将n个elem拷贝给本身</li><li><code>vector(const vector &amp;vec);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params">vector&lt;<span class="built_in">int</span>&gt; &amp;v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator i = v.begin(); i != v.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//采用模板实现类实现，默认构造函数</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(<span class="number">11</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">    printVector(v1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过区间方式进行构造</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v2(v1.begin(), v1.end());</span><br><span class="line">    printVector(v2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//n个elem方式构造</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v3(<span class="number">10</span>, <span class="number">110</span>);</span><br><span class="line">    printVector(v3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拷贝构造</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v4(v1);</span><br><span class="line">    printVector(v4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/202006240129145-1024x321.jpg"></p><h3 id="总结：vector的多种构造方式没有可比性，灵活使用即可。"><a href="#总结：vector的多种构造方式没有可比性，灵活使用即可。" class="headerlink" title="总结：vector的多种构造方式没有可比性，灵活使用即可。"></a>总结：vector的多种构造方式没有可比性，灵活使用即可。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程28：STL常用容器（vector容器- vector基本概念）</title>
      <link href="/post/874b2290.html"/>
      <url>/post/874b2290.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h1><h2 id="3-2-1-vector基本概念"><a href="#3-2-1-vector基本概念" class="headerlink" title="3.2.1 vector基本概念"></a>3.2.1 vector基本概念</h2><p><strong>功能：</strong></p><ul><li>vector数据结构和<strong>数组非常相似</strong>，也称为<strong>单端数组</strong>。</li></ul><p><strong>vector与普通数组区别：</strong></p><ul><li>不同之处在于数组是静态空间，面vector可以<strong>动态扩展</strong>。</li></ul><p><strong>动态扩展：</strong></p><ul><li><p>并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间。<br><img src="http://image.camcad.cn/2020/06/2020062400481370.jpg"></p></li><li><p>vector容器的迭代器是支持随机访问的迭代器</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程27：STL常用容器（string容器- string子串）</title>
      <link href="/post/4addf364.html"/>
      <url>/post/4addf364.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-1-9-string子串"><a href="#3-1-9-string子串" class="headerlink" title="3.1.9 string子串"></a>3.1.9 string子串</h2><p><strong>功能描述：</strong></p><ul><li>从字符串中获取想要的子串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string substr(int pos = 0,int n = npos) const;</code> &#x2F;&#x2F;返回由pos开始的n个字符组成的字符串</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> sub = str.substr(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str.substr(2, 3)= &quot;</span> &lt;&lt; sub &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//实战案例</span></span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">&quot;emmet_huang@163.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取str字符串“&amp;”符号的位置</span></span><br><span class="line">    <span class="built_in">string</span> sub = str.substr(<span class="number">0</span>, str.find(<span class="string">&quot;@&quot;</span>));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;实战案例：&quot;</span> &lt;&lt; sub &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译结果如下："><a href="#以上代码编译结果如下：" class="headerlink" title="以上代码编译结果如下："></a>以上代码编译结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062309143135-1024x311.jpg"></p><h3 id="总结：灵活的运用求子串功能，可以在实际开发中获取有效的信息。"><a href="#总结：灵活的运用求子串功能，可以在实际开发中获取有效的信息。" class="headerlink" title="总结：灵活的运用求子串功能，可以在实际开发中获取有效的信息。"></a>总结：灵活的运用求子串功能，可以在实际开发中获取有效的信息。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程26：STL常用容器（string容器- string插入和删除）</title>
      <link href="/post/fda2c593.html"/>
      <url>/post/fda2c593.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-1-8-string插入和删除"><a href="#3-1-8-string插入和删除" class="headerlink" title="3.1.8 string插入和删除"></a>3.1.8 string插入和删除</h2><p><strong>功能描述：</strong></p><ul><li>对string字符串进行插入和删除字符操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string &amp;insert（int pos, const char *s);</code> &#x2F;&#x2F;插入字符串</li><li><code>string &amp;insert（int pos, const string &amp;str);</code> &#x2F;&#x2F;插入字符串</li><li><code>string &amp;insert（int pos, int n, char c);</code> &#x2F;&#x2F;在指定位置插入n个字符c</li><li><code>string &amp;erase(int pos, int n = npos);</code> &#x2F;&#x2F;删除从pos开始的n个字符</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//插入字符串（字符）</span></span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">&quot;heoll&quot;</span>;</span><br><span class="line">    str.insert(str.size(), <span class="string">&quot; world&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;插入：&quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除字符串（字符）</span></span><br><span class="line">    str.erase(str.size()<span class="number">-6</span>, <span class="number">6</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除：&quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062308444158-1024x387.jpg"></p><h3 id="总结：插入和删除的起始下标都是从0开始。"><a href="#总结：插入和删除的起始下标都是从0开始。" class="headerlink" title="总结：插入和删除的起始下标都是从0开始。"></a>总结：插入和删除的起始下标都是从0开始。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程25：STL常用容器（string容器- string字符存取）</title>
      <link href="/post/f8fa3b7d.html"/>
      <url>/post/f8fa3b7d.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="string字符存取"><a href="#string字符存取" class="headerlink" title="string字符存取"></a>string字符存取</h2><p><strong>string中单个字符存取方式有两种：</strong></p><ul><li><code>char &amp;operator[ ](int n);</code> &#x2F;&#x2F;通过方式取字符</li><li><code>char &amp;at(int n);</code> &#x2F;&#x2F;通过at方法获取字符</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;读取字符串中指定位置字符&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">string</span> str1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法一</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;方法一 str1[i]：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; str1.size()<span class="comment">/*获取字符串大小*/</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; str1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法二</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;方法二 str1.at(i)：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; str1.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; str1.at(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;更改字符串中指定位置字符&quot;</span> &lt;&lt; endl;</span><br><span class="line">    str1[<span class="number">2</span>] = <span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1[2] = &#x27;L&#x27; 更改后：&quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    str1.at(<span class="number">0</span>) = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1.at(0) = &#x27;H&#x27; 更改后：&quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062307561880-1024x482.jpg"></p><h3 id="总结：string字符串中单个字符存取有两种方式，利用-或at。"><a href="#总结：string字符串中单个字符存取有两种方式，利用-或at。" class="headerlink" title="总结：string字符串中单个字符存取有两种方式，利用[]或at。"></a>总结：string字符串中单个字符存取有两种方式，利用[]或at。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程24：STL常用容器（string容器- string字符串比较）</title>
      <link href="/post/35ac6e08.html"/>
      <url>/post/35ac6e08.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-1-6-string字符串比较"><a href="#3-1-6-string字符串比较" class="headerlink" title="3.1.6 string字符串比较"></a>3.1.6 string字符串比较</h2><p><strong>功能描述：</strong></p><ul><li>字符串之间的比较</li></ul><p><strong>比较方式：</strong></p><ul><li>字符串比较是按字符的ASCII码进行对比 <code>= 返回 0</code> <code>&gt; 返回 1</code> <code>&lt; 返回 -1</code></li></ul><p><strong>函数原型：</strong></p><ul><li><code>int compare(const string &amp;s)const;</code> &#x2F;&#x2F;与字符串s比较</li><li><code>int compare(const char *s)const;</code> &#x2F;&#x2F;与字符串s比较</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> str1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> str2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str1.compare(str2)==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;str1等于str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (str1.compare(str2) &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;str1大于str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (str1.compare(str2) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;str1小于str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/202006230721372-1024x287.jpg"></p><h3 id="总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大。"><a href="#总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大。" class="headerlink" title="总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大。"></a>总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程23：STL常用容器（string容器-string查找和替换）</title>
      <link href="/post/708754f6.html"/>
      <url>/post/708754f6.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-1-5-string查找和替换"><a href="#3-1-5-string查找和替换" class="headerlink" title="3.1.5 string查找和替换"></a>3.1.5 string查找和替换</h2><p><strong>功能描述：</strong></p><ul><li>查找：查找指定字符串是否存在</li><li>替换：在指定的位置替换字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>int find(const string &amp;str, int pos = 0)const;</code> &#x2F;&#x2F;查找str第一次出现位置，从pos开始查找</p></li><li><p><code>int find(const char *s, int pos = 0)const;</code> &#x2F;&#x2F;查找s第一次出现位置，从pos开始查找</p></li><li><p><code>int find(const char *s, int pos, int n)const;</code> &#x2F;&#x2F;从pos位置查找s的前n个字符串，第一次位置</p></li><li><p><code>int find(const char c, int pos = 0)const;</code> &#x2F;&#x2F;查找字符c第一次出现位置</p></li><li><p><code>int rfind(const string &amp;str, int pos = npos)const;</code> &#x2F;&#x2F;查找str最后一次位置，从pos开始查找</p></li><li><p><code>int rfind(const char *s, int pos = npos)const;</code> &#x2F;&#x2F;查找s最后一次出现位置，从pos开始查找</p></li><li><p><code>int rfind(const char *s, int pos, int n)const;</code> &#x2F;&#x2F;从pos查找s的前n个字符,最后一次位置</p></li><li><p><code>int rfind(const char c, int pos = 0)const;</code> &#x2F;&#x2F;查找字符c最后一次出现位置</p></li><li><p><code>string &amp;replace(int pos, int n, const string &amp;str);</code> &#x2F;&#x2F;替换从pos开始n个字符为字符串str</p></li><li><p><code>string &amp;replace(int pos, int n, const char *s);</code> &#x2F;&#x2F;替换从pos开始的n个字符为字符串s</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;查找&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">string</span> str1 = <span class="string">&quot;abcdec&quot;</span>;</span><br><span class="line">    <span class="built_in">int</span> pos = str1.find(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pos==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;未找到！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;find c的位置为：&quot;</span> &lt;&lt; pos &lt;&lt; endl;   <span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//rfind和find区别</span></span><br><span class="line">    <span class="comment">//rfind从右往左查找，find从左往右查找</span></span><br><span class="line">     pos = str1.rfind(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pos == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;未找到！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;rfind c的位置为：&quot;</span> &lt;&lt; pos &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; endl;  <span class="comment">//5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;替换&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">string</span> str1 = <span class="string">&quot;heoll world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从3号位置起 2个字符，替换为&quot;222&quot;</span></span><br><span class="line">    str1.replace(<span class="number">3</span>, <span class="number">2</span>,<span class="string">&quot;222&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;replace str1：&quot;</span> &lt;&lt; str1 &lt;&lt; endl;    <span class="comment">//heo222 world</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062306181193-1024x430.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>find查找是从左往后，rfind从右往左</li><li>find找到字符串后返回查找的第一个字符位置，找不到返回-1</li><li>replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程22：STL常用容器（string容器-string字符串拼接）</title>
      <link href="/post/688b2f27.html"/>
      <url>/post/688b2f27.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-1-4-string字符串拼接"><a href="#3-1-4-string字符串拼接" class="headerlink" title="3.1.4 string字符串拼接"></a>3.1.4 string字符串拼接</h2><p><strong>功能描述：</strong></p><ul><li>实现在字符串未尾拼接字符串 <strong>函数原型：</strong><ul><li><code>string&amp; operator+=(const char *str);</code> &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; operator+=(const char c);</code> &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; operator+=(const string &amp;str);</code> &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; append(const char *s);</code> &#x2F;&#x2F;把字符串s连接到当前字符串结尾</li><li><code>string&amp; append(const char *s, int n);</code> &#x2F;&#x2F;把字符串s的前n个字符连接到当前字符串结尾</li><li><code>string&amp; append(const string &amp;s);</code> &#x2F;&#x2F;同operator+&#x3D;（const string &amp;str)</li><li><code>string&amp; append(const string &amp;s, int pos, int n);</code> &#x2F;&#x2F;字符串s中从pos开始的n个字符连接到字符串结尾</li></ul></li></ul><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//string&amp; operator+=(const char *str);  //重载+=操作符</span></span><br><span class="line">    <span class="built_in">string</span> str11 = <span class="string">&quot;Huang&quot;</span>;</span><br><span class="line">    str11 += <span class="string">&quot;my-Emmet&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str11：&quot;</span> &lt;&lt; str11 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//string&amp; operator+=(const char c);     //重载+=操作符</span></span><br><span class="line">    <span class="built_in">string</span> str21 = <span class="string">&quot;Emme&quot;</span>;</span><br><span class="line">    str21 += <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str21：&quot;</span> &lt;&lt; str21 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//string&amp; operator+=(const string &amp;str);    //重载+=操作符</span></span><br><span class="line">    <span class="built_in">string</span> str31 = <span class="string">&quot;Huangmy-&quot;</span>;</span><br><span class="line">    str31 += str21;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str31：&quot;</span> &lt;&lt; str31 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//string&amp; append(const char *s);    //把字符串s连接到当前字符串结尾</span></span><br><span class="line">    <span class="built_in">string</span> str41 = <span class="string">&quot;NX&quot;</span>;</span><br><span class="line">    str41.append(<span class="string">&quot;OPEN&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str41：&quot;</span> &lt;&lt; str41 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//string&amp; append(const char *s, int n); //把字符串s的前n个字符连接到当前字符串结尾</span></span><br><span class="line">    <span class="built_in">string</span> str51 = <span class="string">&quot;NX二次开发&quot;</span>;</span><br><span class="line">    str51.append(<span class="string">&quot;OPEN API&quot;</span>,<span class="number">4</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str51：&quot;</span> &lt;&lt; str51 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//string&amp; append(const string &amp;s);      //同operator+=（const string &amp;str)</span></span><br><span class="line">    <span class="built_in">string</span> str61 = <span class="string">&quot;NX-&quot;</span>;</span><br><span class="line">    str61.append(str11);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str61：&quot;</span> &lt;&lt; str61 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//string&amp; append(const string &amp;s, int pos, int n);  //字符串s中从pos开始的n个字符连接到字符串结尾</span></span><br><span class="line">    <span class="built_in">string</span> str71;</span><br><span class="line">    str71.append(str51,<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str71：&quot;</span> &lt;&lt; str71 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062302533218-1024x608.jpg"></p><h3 id="总结：字符串拼接的重载版本很多，初学阶段记住几种即可。"><a href="#总结：字符串拼接的重载版本很多，初学阶段记住几种即可。" class="headerlink" title="总结：字符串拼接的重载版本很多，初学阶段记住几种即可。"></a>总结：字符串拼接的重载版本很多，初学阶段记住几种即可。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程21：STL常用容器（string容器-string赋值操作）</title>
      <link href="/post/1e20fd3e.html"/>
      <url>/post/1e20fd3e.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-1-3-string赋值操作"><a href="#3-1-3-string赋值操作" class="headerlink" title="3.1.3 string赋值操作"></a>3.1.3 string赋值操作</h2><p><strong>功能描述：</strong></p><ul><li>给string字符串进行赋值</li></ul><p><strong>赋值的函数原型：</strong></p><ul><li><code>string&amp; operator=(const char *s);</code> &#x2F;&#x2F;char*类型字符串赋值给当前的字符串</li><li><code>string&amp; operator=(const string &amp;s);</code> &#x2F;&#x2F;把字符串s赋给当前的字符串</li><li><code>string&amp; operator=(char c);</code> &#x2F;&#x2F;字符赋值给字符串</li><li><code>string&amp; assign(const char *s);</code> &#x2F;&#x2F;把字符串s赋给当前的字符串</li><li><code>string&amp; assign(const char *s , int n );</code> &#x2F;&#x2F;把字符串s的前n个字符赋给当前的字符串</li><li><code>string&amp; assign(const string &amp;s);</code> &#x2F;&#x2F;把字符串s赋给当前字符串</li><li><code>string&amp; assign(int n , char c);</code> &#x2F;&#x2F;用n个字符c赋给当前字符串</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.string&amp; operator=(const char *s); //char*类型字符串赋值给当前的字符串</span></span><br><span class="line">    <span class="built_in">string</span> str1;</span><br><span class="line">    str1 = <span class="string">&quot;Emmet&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1：&quot;</span> &lt;&lt; str1 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.string&amp; operator=(const string &amp;s); //把字符串s赋给当前的字符串</span></span><br><span class="line">    <span class="built_in">string</span> str2;</span><br><span class="line">    str2 = str1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str2：&quot;</span> &lt;&lt; str2 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.string&amp; operator=(char c); //字符赋值给字符串</span></span><br><span class="line">    <span class="built_in">string</span> str3;</span><br><span class="line">    str3 = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str3：&quot;</span> &lt;&lt; str3 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.string&amp; assign(const char *s); //把字符串s赋给当前的字符串</span></span><br><span class="line">    <span class="built_in">string</span> str4;</span><br><span class="line">    str4.assign(<span class="string">&quot;Huangmy-Emmet&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str4：&quot;</span> &lt;&lt; str4 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.string&amp; assign(const char *s, int n); //把字符串s的前n个字符赋给当前的字符串</span></span><br><span class="line">    <span class="built_in">string</span> str5;</span><br><span class="line">    str5.assign(<span class="string">&quot;Huangmy-Emmet&quot;</span>,<span class="number">7</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str5：&quot;</span> &lt;&lt; str5 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.string&amp; assign(const string &amp;s); //把字符串s赋给当前字符串</span></span><br><span class="line">    <span class="built_in">string</span> str6;</span><br><span class="line">    str6.assign(str5);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str6：&quot;</span> &lt;&lt; str6 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7.string&amp; assign(int n, char c); //用n个字符c赋给当前字符串</span></span><br><span class="line">    <span class="built_in">string</span> str7;</span><br><span class="line">    str7.assign(<span class="number">10</span>,<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str7：&quot;</span> &lt;&lt; str7 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062302002080-1024x552.jpg"></p><h3 id="总结：string的赋值方式很多，operator-x3D-这种方式是比较实用的。"><a href="#总结：string的赋值方式很多，operator-x3D-这种方式是比较实用的。" class="headerlink" title="总结：string的赋值方式很多，operator&#x3D;这种方式是比较实用的。"></a>总结：string的赋值方式很多，operator&#x3D;这种方式是比较实用的。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程20：STL常用容器（string容器-string构造函数）</title>
      <link href="/post/4cf03f75.html"/>
      <url>/post/4cf03f75.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h2 id="3-1-2-string构造函数"><a href="#3-1-2-string构造函数" class="headerlink" title="3.1.2 string构造函数"></a>3.1.2 string构造函数</h2><p><strong>构造函数原型：</strong></p><ul><li><p><code>string( );</code> &#x2F;&#x2F;创建一个空的字符串 例如：string str;</p></li><li><p><code>string( const char *s );</code> &#x2F;&#x2F;使用字符串s初始化</p></li><li><p><code>string( const string &amp;srt );</code> &#x2F;&#x2F;使用一个string对象初始化另一个string对象</p></li><li><p><code>string( int n,char c );</code> &#x2F;&#x2F;使用n个字符c初始化</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.string( ); //创建一个空的字符串 例如：string str;</span></span><br><span class="line">    <span class="built_in">string</span> s1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.string( const char *s ); //使用字符串s初始化</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s2</span>(<span class="params"><span class="string">&quot;abc&quot;</span></span>)</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符串s2：&quot;</span> &lt;&lt; s2 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.string( const string &amp;srt ); //使用一个string对象初始化另一个string对象</span></span><br><span class="line">    <span class="built_in">string</span> s3 = s2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符串s3：&quot;</span> &lt;&lt; s3 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.string( int n,char c ); //使用n个字符c初始化</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s4</span>(<span class="params"><span class="number">11</span>,<span class="string">&#x27;a&#x27;</span></span>)</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符串s4：&quot;</span> &lt;&lt; s4 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062214034738-1024x500.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程19：STL常用容器（string容器-string基本概念）</title>
      <link href="/post/41dab95a.html"/>
      <url>/post/41dab95a.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="3-1-string容器"><a href="#3-1-string容器" class="headerlink" title="3.1 string容器"></a>3.1 string容器</h1><h2 id="3-1-1-string基本概念"><a href="#3-1-1-string基本概念" class="headerlink" title="3.1.1 string基本概念"></a>3.1.1 string基本概念</h2><p><strong>本质：</strong></p><ul><li>string是C++风格的字符串，而string本质上是一个类。 *_string和chat_区别：**</li><li>chat*是一个指针</li><li>string是一个类，类内部封装了char_，管理这个字符串，是一个char_型的容器。</li></ul><p><strong>特点：</strong> string类内部封装了很多成员方法 例如：查找（find），拷贝（copy），删除（delete），替换（replace），插入（insert）。 string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责。</p>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程18：STL初识（容器算法迭代器初识）</title>
      <link href="/post/9ad20f91.html"/>
      <url>/post/9ad20f91.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="C-提高编程"><a href="#C-提高编程" class="headerlink" title="C++提高编程"></a>C++提高编程</h1><h2 id="2-5-容器算法迭代器初识"><a href="#2-5-容器算法迭代器初识" class="headerlink" title="2.5 容器算法迭代器初识"></a>2.5 容器算法迭代器初识</h2><p>了解STL中容器、算法、迭代器概念之后，我们利用代码感受STL的魅力。 STL中最常用的容器是Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据，并遍历这个容器。</p><h3 id="2-5-1-vector存放内置数据类型"><a href="#2-5-1-vector存放内置数据类型" class="headerlink" title="2.5.1 vector存放内置数据类型"></a>2.5.1 vector存放内置数据类型</h3><ul><li><p>容器：<code>vector</code></p></li><li><p>算法：<code>for_each</code></p></li><li><p>迭代器：<code>vector&lt;int&gt;::iterator</code></p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码:"></a>示例代码:</h4></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;     //vector容器 头文件</span></span><br><span class="line"><span class="meta">#include &lt;algorithm&gt;  //算法 头文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建vector容器对象，并且通过模板参数指定容器中存放的数据类型</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向容器尾部插入数据</span></span><br><span class="line">    v.push_back(<span class="number">10</span>);</span><br><span class="line">    v.push_back(<span class="number">11</span>);</span><br><span class="line">    v.push_back(<span class="number">23</span>);</span><br><span class="line">    v.push_back(<span class="number">44</span>);</span><br><span class="line">    v.push_back(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素</span></span><br><span class="line">    <span class="comment">//v.begin() 返回迭代器指向容器中第一个数据</span></span><br><span class="line">    <span class="comment">//v.end()   返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置</span></span><br><span class="line">    <span class="comment">//vector&lt;int&gt;::iterator   拿到vector&lt;int&gt;这种容器的迭代器类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历方法一</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历方法一（while）&quot;</span> &lt;&lt; endl;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;::iterator itBegin = v.begin();</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;::iterator itEnd = v.end();</span><br><span class="line">    <span class="keyword">while</span> (itBegin != itEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *itBegin &lt;&lt; endl;</span><br><span class="line">        itBegin++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历方法二</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历方法二（for）&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator i = v.begin(); i != v.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *i &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历方法三</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历方法三（算法）&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v.begin(), v.end(), func);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h4><p><img src="http://image.camcad.cn/2020/06/2020062207315468-1024x755.jpg"></p><h3 id="2-5-2-vector存放自定义数据类型"><a href="#2-5-2-vector存放自定义数据类型" class="headerlink" title="2.5.2 vector存放自定义数据类型"></a>2.5.2 vector存放自定义数据类型</h3><p>学习目标：vector中存放自定义数据类型，并打印输出。</p><h4 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;     //vector容器 头文件</span></span><br><span class="line"><span class="meta">#include &lt;algorithm&gt;  //算法 头文件</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="built_in">string</span> name,<span class="built_in">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span>(<span class="params">Person val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; val.m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; val.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放自定义数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建vector容器对象，并且通过模板参数指定容器中存放的数据类型</span></span><br><span class="line">    vector&lt;Person&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建自定义数据类型</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span>(<span class="params"><span class="string">&quot;张三&quot;</span>, <span class="number">18</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span>(<span class="params"><span class="string">&quot;李四&quot;</span>, <span class="number">28</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span>(<span class="params"><span class="string">&quot;王五&quot;</span>, <span class="number">22</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span>(<span class="params"><span class="string">&quot;赵六&quot;</span>, <span class="number">23</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span>(<span class="params"><span class="string">&quot;小二&quot;</span>, <span class="number">20</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向容器尾部插入数据</span></span><br><span class="line">    v.push_back(p1);</span><br><span class="line">    v.push_back(p2);</span><br><span class="line">    v.push_back(p3);</span><br><span class="line">    v.push_back(p4);</span><br><span class="line">    v.push_back(p5);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素</span></span><br><span class="line">    <span class="comment">//v.begin() 返回迭代器指向容器中第一个数据</span></span><br><span class="line">    <span class="comment">//v.end()   返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置</span></span><br><span class="line">    <span class="comment">//vector&lt;int&gt;::iterator   拿到vector&lt;int&gt;这种容器的迭代器类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历方法一</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历方法一（while）&quot;</span> &lt;&lt; endl;</span><br><span class="line">    vector&lt;Person&gt;::iterator itBegin = v.begin();</span><br><span class="line">    vector&lt;Person&gt;::iterator itEnd = v.end();</span><br><span class="line">    <span class="keyword">while</span> (itBegin != itEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; (*itBegin).m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; (*itBegin).m_Age &lt;&lt; endl;</span><br><span class="line">        itBegin++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历方法二</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历方法二（for）&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Person&gt;::iterator i = v.begin(); i != v.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; i-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; i-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; (*i).m_Name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; (*i).m_Age &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历方法三</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历方法三（算法）&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v.begin(), v.end(), func);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放自定义数据类型 指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建vector容器对象，并且通过模板参数指定容器中存放的数据类型</span></span><br><span class="line">    vector&lt;Person*&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建自定义数据类型</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span>(<span class="params"><span class="string">&quot;张三&quot;</span>, <span class="number">18</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span>(<span class="params"><span class="string">&quot;李四&quot;</span>, <span class="number">28</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span>(<span class="params"><span class="string">&quot;王五&quot;</span>, <span class="number">22</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span>(<span class="params"><span class="string">&quot;赵六&quot;</span>, <span class="number">23</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span>(<span class="params"><span class="string">&quot;小二&quot;</span>, <span class="number">20</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向容器尾部插入数据</span></span><br><span class="line">    v.push_back(&amp;p1);</span><br><span class="line">    v.push_back(&amp;p2);</span><br><span class="line">    v.push_back(&amp;p3);</span><br><span class="line">    v.push_back(&amp;p4);</span><br><span class="line">    v.push_back(&amp;p5);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历方法二</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历方法二（for）&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Person*&gt;::iterator i = v.begin(); i != v.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;指针-姓名：&quot;</span> &lt;&lt; (*i)-&gt;m_Name &lt;&lt; <span class="string">&quot; 指针-年龄：&quot;</span> &lt;&lt; (*i)-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; (**i).m_Name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; (**i).m_Age &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h4><p><img src="http://image.camcad.cn/2020/06/2020062208322680-1024x918.jpg"></p><h3 id="2-5-3-vector容器嵌套容器"><a href="#2-5-3-vector容器嵌套容器" class="headerlink" title="2.5.3 vector容器嵌套容器"></a>2.5.3 vector容器嵌套容器</h3><p>学习目标：容器中嵌套容器，我们将所有数据进行遍历输出</p><h4 id="示例代码：-1"><a href="#示例代码：-1" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;     //vector容器 头文件</span></span><br><span class="line"><span class="meta">#include &lt;algorithm&gt;  //算法 头文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//容器嵌套容器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建主容器</span></span><br><span class="line">    vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建子容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v2;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v3;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v4;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v5;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//子容器赋值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(<span class="number">1</span> + i);</span><br><span class="line">        v2.push_back(<span class="number">2</span> + i);</span><br><span class="line">        v3.push_back(<span class="number">3</span> + i);</span><br><span class="line">        v4.push_back(<span class="number">4</span> + i);</span><br><span class="line">        v5.push_back(<span class="number">5</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主容器赋值</span></span><br><span class="line">    v.push_back(v1);</span><br><span class="line">    v.push_back(v2);</span><br><span class="line">    v.push_back(v3);</span><br><span class="line">    v.push_back(v4);</span><br><span class="line">    v.push_back(v5);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历主容器里的值</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt;::iterator i = v.begin(); i != v.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历子容器里的值</span></span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator j = (*i).begin(); j != (*i).end(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; *j&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以上代码编译执行结果如下：-2"><a href="#以上代码编译执行结果如下：-2" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h4><p><img src="http://image.camcad.cn/2020/06/2020062210244935-1024x445.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程17：STL初识（STL的诞生，STL基本概念，STL六大组件，STL中容器、算法、迭代器）</title>
      <link href="/post/51a145f9.html"/>
      <url>/post/51a145f9.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="第二章：STL初识"><a href="#第二章：STL初识" class="headerlink" title="第二章：STL初识"></a>第二章：STL初识</h1><h2 id="2-1-STL的诞生"><a href="#2-1-STL的诞生" class="headerlink" title="2.1 STL的诞生"></a>2.1 STL的诞生</h2><ul><li><p>长久以来，软件界一直希望建立一种可重复利用的东西</p></li><li><p>C++的<strong>面向对象</strong>和<strong>泛型编程</strong>思想，目的就是复用性的提升</p></li><li><p>大多情况下，数据结构和算法都未能有一套标准，导致被迫从事大量重复工作</p></li><li><p>为了建立数据结构和算法的一套标准，诞生了STL</p><h2 id="2-2-STL基本概念"><a href="#2-2-STL基本概念" class="headerlink" title="2.2 STL基本概念"></a>2.2 STL基本概念</h2></li><li><p>STL（Standard Template-Library）标准模板库</p></li><li><p>STL从广义上分为：容器（container），算法（algorithm），迭代器（iterator）</p></li><li><p><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接</p></li><li><p>STL几乎所有的代码都采用模板类或者模板函数</p></li></ul><h2 id="2-3-STL六大组件"><a href="#2-3-STL六大组件" class="headerlink" title="2.3 STL六大组件"></a>2.3 STL六大组件</h2><p>STL大体分为六大组件，分别是：<strong>容器</strong>、<strong>算法</strong>、<strong>迭代器</strong>、<strong>仿函数</strong>、<strong>适配器</strong>（<strong>配接器</strong>）、<strong>空间配置器</strong></p><ul><li>1.容器：各种数据结构，如 向量(vector)、列表(list)、栈(stack)、队列(queue)、集合(set)、映射(map)、deque等，用来存放数据。</li><li>2.算法，各种常用的算法，如sort、find、copy、for_each等。</li><li>3.迭代器：扮演了容器与算法之间的胶合剂。</li><li>4.仿函数：行为类似函数，可作为算法的某种策略。</li><li>5.适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。</li><li>6.空间配置器：负责空间的配置与管理。</li></ul><h2 id="2-4-STL中容器、算法、迭代器"><a href="#2-4-STL中容器、算法、迭代器" class="headerlink" title="2.4 STL中容器、算法、迭代器"></a>2.4 STL中容器、算法、迭代器</h2><h3 id="容器：置物之所也"><a href="#容器：置物之所也" class="headerlink" title="容器：置物之所也"></a>容器：置物之所也</h3><p>STL<strong>容器</strong>就是将运用最<strong>广泛的一些数据结构</strong>实现出来。 常用的数据结构：数组，链表，树，栈，队列，集合，映射表等。 这些容器分为<strong>序列式容器</strong>和<strong>关联式容器</strong>两种。 <strong>序列式容器：</strong>强调值的排序，序列式容器中的每个元素均有固定的位置。 <strong>关联式容器：</strong>二叉树结构，各元素之间没有严格的物理上的顺序关系。</p><h3 id="算法：问题之解法也"><a href="#算法：问题之解法也" class="headerlink" title="算法：问题之解法也"></a>算法：问题之解法也</h3><p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法（Algorithms） 算法分为 ：<strong>质变算法**<strong>非质变算法</strong>。</strong> 质变算法：<strong>是指运算过程中会更改区间内的元素的内容，例如拷贝，替换，删除等等。</strong> 非质变算法：**是指运算过程中不会更改区间内的元素内容，例如查找，计数，遍历，寻找极值等等。</p><h3 id="迭代器：容器和算法之间粘合剂"><a href="#迭代器：容器和算法之间粘合剂" class="headerlink" title="迭代器：容器和算法之间粘合剂"></a>迭代器：容器和算法之间粘合剂</h3><p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。 每个容器都有自己专属的迭代器 迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针。</p><p><strong>迭代器种类：</strong></p><table><thead><tr><th align="center">种类</th><th align="left">功能</th><th align="left">支持运算</th></tr></thead><tbody><tr><td align="center">输入迭代器</td><td align="left">对数据的只读访问</td><td align="left">只读，支持++、&#x3D;&#x3D;、!&#x3D;</td></tr><tr><td align="center">输出迭代器</td><td align="left">对数据的只写访问</td><td align="left">只写，支持++</td></tr><tr><td align="center">前向迭代器</td><td align="left">读写操作，并能向前推进迭代器</td><td align="left">读写，支持++、&#x3D;&#x3D;、!&#x3D;</td></tr><tr><td align="center">双向迭代器</td><td align="left">读写操作，并能向前和向后操作</td><td align="left">读写，支持++、–</td></tr><tr><td align="center">随机访问迭代器</td><td align="left">读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td><td align="left">读写，支持++、–、[n] 、-n、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;</td></tr></tbody></table><h3 id="总结：常用的容器中迭代器种类为双向迭代器和随机访问迭代器。"><a href="#总结：常用的容器中迭代器种类为双向迭代器和随机访问迭代器。" class="headerlink" title="总结：常用的容器中迭代器种类为双向迭代器和随机访问迭代器。"></a>总结：常用的容器中迭代器种类为双向迭代器和随机访问迭代器。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程16：模板（类模板-类模板案例）</title>
      <link href="/post/a1b304bb.html"/>
      <url>/post/a1b304bb.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="1-3-9-类模板案例"><a href="#1-3-9-类模板案例" class="headerlink" title="1.3.9 类模板案例"></a>1.3.9 类模板案例</h1><p><strong>案例描述：</strong>实现一个通用的数组类，要求如下：</p><ul><li>可以对内置数据类型以及自定义数据类型的数据进行存储</li><li>将数组中的数据存储到堆区</li><li>构造函数中可以传入数组的容量</li><li>提供对应的拷贝构造函数以及operator&#x3D;防止浅拷贝问题</li><li>提供尾插和尾删法对数组中的数据进行增加和删除</li><li>可以通过下标的方式访问数组中的元素</li><li>可以获取数组中当前元素个数和数组容量</li></ul><h2 id="原理分析："><a href="#原理分析：" class="headerlink" title="原理分析："></a>原理分析：</h2><p><a href="http://image.camcad.cn/2020/06/2020062001520059.jpg"><img src="http://image.camcad.cn/2020/06/2020062001520059-1024x383.jpg"></a></p><h2 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h2><h3 id="头文件（myArray-hpp）"><a href="#头文件（myArray-hpp）" class="headerlink" title="头文件（myArray.hpp）"></a>头文件（myArray.hpp）</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">MyArray</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造函数（参数 容量）</span></span><br><span class="line">    MyArray(<span class="built_in">int</span> capacity)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;有参构造函数&quot; &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;m_Capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拷贝构造函数</span></span><br><span class="line">    MyArray(<span class="keyword">const</span> MyArray &amp;array)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;拷贝构造&quot; &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Capacity = array.m_Capacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size = array.m_Size;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//深拷贝</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[array.m_Capacity];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数组array中的数据都拷贝过来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;pAddress[i] = array.pAddress[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载= 操作符operator= 防止浅拷贝问题</span></span><br><span class="line">    MyArray&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyArray &amp;array)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先判断原来堆区是否有数据，如果有先释放</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;pAddress != NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; &quot;operator=函数&quot; &lt;&lt; endl;</span></span><br><span class="line">            delete[] <span class="keyword">this</span>-&gt;pAddress;</span><br><span class="line">            <span class="keyword">this</span>-&gt;pAddress = NULL;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_Capacity = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Capacity = array.m_Capacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size = array.m_Size;</span><br><span class="line">        <span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;m_Capacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;pAddress[i] = array.pAddress[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾插法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Push_Back</span>(<span class="params"><span class="keyword">const</span> T &amp;<span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断容量是否等于大小</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Capacity==<span class="keyword">this</span>-&gt;m_Size)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;容量已满！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;pAddress[<span class="keyword">this</span>-&gt;m_Size] = <span class="keyword">value</span>;     <span class="comment">//在数组未尾插入数组</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size++;      <span class="comment">//更新数组大小</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾删法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Pop_Back</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//让用户访问不到最后一个元素，即为尾删，逻辑删除</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Size==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载[] 操作符 arr[0]</span></span><br><span class="line">    <span class="comment">//通过下标访问数组中的元素</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span>[](<span class="built_in">int</span> index)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;pAddress[index];    <span class="comment">//不考虑越界，用户自己处理</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数组中的容量</span></span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">getCapacity</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数组的大小</span></span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">getSize</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~MyArray()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;pAddress != NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;</span></span><br><span class="line">            delete[] <span class="keyword">this</span>-&gt;pAddress;</span><br><span class="line">            <span class="keyword">this</span>-&gt;pAddress = NULL;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_Capacity = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组</span></span><br><span class="line">    T* pAddress;;   <span class="comment">//指定一个堆空间，这个空间存储真正的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//容量</span></span><br><span class="line">    <span class="built_in">int</span> m_Capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//大小</span></span><br><span class="line">    <span class="built_in">int</span> m_Size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="主文件（main-cpp）"><a href="#主文件（main-cpp）" class="headerlink" title="主文件（main.cpp）"></a>主文件（main.cpp）</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#include &quot;myArray.hpp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printIntAttay</span>(<span class="params">MyArray&lt;<span class="built_in">int</span>&gt; p</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; p.getSize(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; p[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    MyArray&lt;<span class="built_in">int</span>&gt;p1(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p1.Push_Back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1的打印输出为：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    printIntAttay(p1);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1的容量为：&quot;</span> &lt;&lt; p1.getCapacity() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1的大小为：&quot;</span> &lt;&lt; p1.getSize() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2的打印输出为：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    MyArray&lt;<span class="built_in">int</span>&gt;p2(p1);</span><br><span class="line">    printIntAttay(p2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾删</span></span><br><span class="line">    p2.Pop_Back();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2尾删后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2的容量为：&quot;</span> &lt;&lt; p2.getCapacity() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2的大小为：&quot;</span> &lt;&lt; p2.getSize() &lt;&lt; endl;</span><br><span class="line">    printIntAttay(p2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    Person() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="built_in">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        m_Name = name;</span><br><span class="line">        m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPersonArray</span>(<span class="params">MyArray&lt;Person&gt; &amp;arr</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.getSize(); i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; arr[i].m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; arr[i].m_Age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    MyArray &lt;Person&gt;arr(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function">Person <span class="title">p1</span>(<span class="params"><span class="string">&quot;小二&quot;</span>, <span class="number">18</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span>(<span class="params"><span class="string">&quot;张二&quot;</span>, <span class="number">20</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span>(<span class="params"><span class="string">&quot;李四&quot;</span>, <span class="number">23</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span>(<span class="params"><span class="string">&quot;王五&quot;</span>, <span class="number">19</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span>(<span class="params"><span class="string">&quot;赵六&quot;</span>, <span class="number">25</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    arr.Push_Back(p1);</span><br><span class="line">    arr.Push_Back(p2);</span><br><span class="line">    arr.Push_Back(p3);</span><br><span class="line">    arr.Push_Back(p4);</span><br><span class="line">    arr.Push_Back(p5);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据插入数组中</span></span><br><span class="line">    printPersonArray(arr);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;arr的容量为：&quot;</span> &lt;&lt; arr.getCapacity() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;arr的大小为：&quot;</span> &lt;&lt; arr.getSize() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一、内置数据类型测试&quot;</span> &lt;&lt; endl;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;二、自定义数据类型测试&quot;</span> &lt;&lt; endl;</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062015484681-1024x679.jpg"></p><h2 id="总结：能够利用所学知识点实现通用的数组。"><a href="#总结：能够利用所学知识点实现通用的数组。" class="headerlink" title="总结：能够利用所学知识点实现通用的数组。"></a>总结：能够利用所学知识点实现通用的数组。</h2>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程15：模板（类模板-类模板与友元）</title>
      <link href="/post/809a0b8.html"/>
      <url>/post/809a0b8.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="1-3-8-类模板与友无"><a href="#1-3-8-类模板与友无" class="headerlink" title="1.3.8 类模板与友无"></a>1.3.8 类模板与友无</h1><p><strong>学习目标：</strong></p><ul><li>掌握类模板配合友元函数的类内和类外实现。</li></ul><h3 id="全局函数类内实现-直接在类内声明友元即可。"><a href="#全局函数类内实现-直接在类内声明友元即可。" class="headerlink" title="全局函数类内实现-直接在类内声明友元即可。"></a>全局函数类内实现-直接在类内声明友元即可。</h3><h3 id="全局函数类外实现-需要提前让编译器知道全局函数的存在。"><a href="#全局函数类外实现-需要提前让编译器知道全局函数的存在。" class="headerlink" title="全局函数类外实现-需要提前让编译器知道全局函数的存在。"></a>全局函数类外实现-需要提前让编译器知道全局函数的存在。</h3><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.提前让编译器知道Person类的存在</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.全局函数（类外实现）</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">showPrint02</span>(<span class="title">Person</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt;&amp;<span class="title">p</span>)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局函数（类外实现） 姓名：&quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="string">&quot;全局函数（类外实现）年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//全局函数（类内实现）</span></span><br><span class="line">    <span class="function">friend <span class="keyword">void</span> <span class="title">showPrint01</span>(<span class="params">Person&lt;T1, T2&gt;&amp;p</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;全局函数（类内实现） 姓名：&quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="string">&quot;全局函数（类内实现）年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.全局函数（类外实现）</span></span><br><span class="line">    <span class="comment">//加空模板参数列表 &lt;&gt;</span></span><br><span class="line">    <span class="comment">//如果全局函数是类外实现，需要让编译器提前知道这个函数的存在</span></span><br><span class="line">    friend <span class="keyword">void</span> showPrint02&lt;&gt;(Person&lt;T1, T2&gt;&amp;p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    Person(T1 name, T2 age)</span><br><span class="line">    &#123;</span><br><span class="line">        m_Name = name;</span><br><span class="line">        m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T1 m_Name;</span><br><span class="line">    T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;p(<span class="string">&quot;类内实现&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    showPrint01(p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;p(<span class="string">&quot;类外实现&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    showPrint02(p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062001161751-1024x414.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程14：模板（类模板-类模板分文件编写）</title>
      <link href="/post/a5263ddf.html"/>
      <url>/post/a5263ddf.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="1-3-7-类模板分文件编写"><a href="#1-3-7-类模板分文件编写" class="headerlink" title="1.3.7 类模板分文件编写"></a>1.3.7 类模板分文件编写</h1><p><strong>学习目标：</strong></p><ul><li>掌握类模板成员函数分文件编写产生的问题以及解决方式。</li></ul><p><strong>问题：</strong></p><ul><li>类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</li></ul><p><strong>解决：</strong></p><ul><li>解决方式1：直接包含.cpp源文件</li><li>解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，.hpp是约定的名称，并不是强制。</li></ul><h2 id="方法一：直接包含-cpp源文件"><a href="#方法一：直接包含-cpp源文件" class="headerlink" title="方法一：直接包含.cpp源文件"></a>方法一：直接包含.cpp源文件</h2><h3 id="示例代码-头文件（-h）"><a href="#示例代码-头文件（-h）" class="headerlink" title="示例代码 头文件（.h）"></a>示例代码 头文件（.h）</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span> &gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    Person(T1 name, T2 age);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPrint</span>()</span>;</span><br><span class="line"></span><br><span class="line">    T1 m_Name;</span><br><span class="line">    T2 m_Age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="示例代码-源文件（-cpp）"><a href="#示例代码-源文件（-cpp）" class="headerlink" title="示例代码 源文件（.cpp）"></a>示例代码 源文件（.cpp）</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &quot;Person.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数 类外实现</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="title">Person</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt;::<span class="title">Person</span>(<span class="title">T1</span> <span class="title">name</span>, <span class="title">T2</span> <span class="title">age</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数 类外实现</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">Person</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt;::<span class="title">showPrint</span>()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例代码-主文件"><a href="#示例代码-主文件" class="headerlink" title="示例代码 主文件"></a>示例代码 主文件</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &quot;Person.cpp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;p(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    p.showPrint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020061914362125-1024x356.jpg"></p><h2 id="方法二：将声明和实现写到同一个文件中，并更改后缀名为-hpp，-hpp是约定的名称，并不是强制。"><a href="#方法二：将声明和实现写到同一个文件中，并更改后缀名为-hpp，-hpp是约定的名称，并不是强制。" class="headerlink" title="方法二：将声明和实现写到同一个文件中，并更改后缀名为.hpp，.hpp是约定的名称，并不是强制。"></a>方法二：将声明和实现写到同一个文件中，并更改后缀名为.hpp，.hpp是约定的名称，并不是强制。</h2><h3 id="示例代码-头文件及源文件（-hpp）"><a href="#示例代码-头文件及源文件（-hpp）" class="headerlink" title="示例代码 头文件及源文件（.hpp）"></a>示例代码 头文件及源文件（.hpp）</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span> &gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    Person(T1 name, T2 age);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPrint</span>()</span>;</span><br><span class="line"></span><br><span class="line">    T1 m_Name;</span><br><span class="line">    T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数 类外实现</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="title">Person</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt;::<span class="title">Person</span>(<span class="title">T1</span> <span class="title">name</span>, <span class="title">T2</span> <span class="title">age</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数 类外实现</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">Person</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt;::<span class="title">showPrint</span>()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例代码-主文件-1"><a href="#示例代码-主文件-1" class="headerlink" title="示例代码 主文件"></a>示例代码 主文件</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &quot;Person.hpp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;p(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    p.showPrint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/20200619144222100-1024x356.jpg"></p><h2 id="总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为-hpp"><a href="#总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为-hpp" class="headerlink" title="总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp"></a>总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</h2>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程13：模板（类模板-类模板成员函数类外实现）</title>
      <link href="/post/bbca2a77.html"/>
      <url>/post/bbca2a77.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="1-3-6-类模板成员函数类外实现"><a href="#1-3-6-类模板成员函数类外实现" class="headerlink" title="1.3.6 类模板成员函数类外实现"></a>1.3.6 类模板成员函数类外实现</h1><p>学习目标：能够掌握类模板中的成员函数类外实现。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板中构造函数、成员函数类内声明 类外实现</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数 类内声明</span></span><br><span class="line">    Person(T1 name, T2 age);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员函数 类内声明</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showprint</span>()</span>;</span><br><span class="line"></span><br><span class="line">    T1 m_Name;</span><br><span class="line">    T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数 类外实现</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="title">Person</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt;::<span class="title">Person</span>(<span class="title">T1</span> <span class="title">name</span>,<span class="title">T2</span> <span class="title">age</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数 类外实现</span></span><br><span class="line">template&lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">Person</span>&lt;<span class="title">T1</span>,<span class="title">T2</span>&gt;::<span class="title">showprint</span>()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Person m_Name：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="string">&quot;Person m_Age：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Person&lt;<span class="built_in">string</span>,<span class="built_in">int</span>&gt; <span class="title">p</span>(<span class="params"><span class="string">&quot;张三&quot;</span>, <span class="number">18</span></span>)</span>;</span><br><span class="line">    p.showprint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020061909293344-1024x382.jpg"></p><h3 id="总结：类模板中成员函数类外实现时，需要加上模板参数列表。"><a href="#总结：类模板中成员函数类外实现时，需要加上模板参数列表。" class="headerlink" title="总结：类模板中成员函数类外实现时，需要加上模板参数列表。"></a>总结：类模板中成员函数类外实现时，需要加上模板参数列表。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程12：模板（类模板-类模板与继承）</title>
      <link href="/post/24f7c9.html"/>
      <url>/post/24f7c9.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="1-3-5-类模板与继承"><a href="#1-3-5-类模板与继承" class="headerlink" title="1.3.5 类模板与继承"></a>1.3.5 类模板与继承</h1><p>当类模板碰到继承时，需要注意一下几点：</p><ul><li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型。</li><li>如果不指定，编译器无法给子类分配内存。</li><li>如果想灵活指定出父类中T的类型，子类也需变为类模板。</li></ul><h2 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//父类模板</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Base</span></span><br><span class="line">&#123;</span><br><span class="line">    T m_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="comment">//class Son :public Base        //错误，C++编译需要给子类分配内存，必须知道父类中T的类型才可以向下继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Son</span> :<span class="title">public</span> <span class="title">Base</span>&lt;<span class="title">int</span>&gt;       <span class="comment">//必须指定一个类型</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Son()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son 指定一个类型&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Son s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果想灵活指定父类中T类型，子类也需要变类模板</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Son2</span> :<span class="title">public</span> <span class="title">Base</span>&lt;<span class="title">T2</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Son2()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son2 T1的数据类型为：&quot;</span> &lt;&lt; typeid(T1).name() &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son2 T2的数据类型为：&quot;</span> &lt;&lt; typeid(T2).name() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T1 obj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Son2&lt;<span class="built_in">char</span>, <span class="built_in">int</span>&gt;s2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020061908243032-1024x433.jpg"></p><h3 id="总结：如果父类是类模板，子类需要指定出父类中T的数据类型。"><a href="#总结：如果父类是类模板，子类需要指定出父类中T的数据类型。" class="headerlink" title="总结：如果父类是类模板，子类需要指定出父类中T的数据类型。"></a>总结：如果父类是类模板，子类需要指定出父类中T的数据类型。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程11：模板（类模板-类模板对象做函数参数）</title>
      <link href="/post/b9754251.html"/>
      <url>/post/b9754251.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="1-3-4-类模板对象做函数参数"><a href="#1-3-4-类模板对象做函数参数" class="headerlink" title="1.3.4 类模板对象做函数参数"></a>1.3.4 类模板对象做函数参数</h1><h4 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h4><ul><li><p>类模板实例化出的对象，向函数传参的方式</p><h3 id="一共有三种传入方式："><a href="#一共有三种传入方式：" class="headerlink" title="一共有三种传入方式："></a>一共有三种传入方式：</h3></li><li><p>1.指定传入的类型：直接显示对象的数据类型</p></li><li><p>2.参数模板化：将对象中的参数变为模板进行传递</p></li><li><p>3.整个类模板化：将这个对象类型模板化进行传递</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">typeName</span>,<span class="keyword">class</span> <span class="title">typeAge</span>=<span class="built_in">int</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    Person(typeName name,typeAge age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPrint</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;m_Name：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="string">&quot;m_Age：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    typeName m_Name;</span><br><span class="line">    typeAge m_Age;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.指定传入的类型：直接显示对象的数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Person01</span>(<span class="params">Person&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;&amp;p</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    p.showPrint();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p的数据类型为：&quot;</span> &lt;&lt; typeid(p).name() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>,<span class="built_in">int</span>&gt;p(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    Person01(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.参数模板化：将对象中的参数变为模板进行传递</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">Person02</span>(<span class="title">Person</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt;&amp;<span class="title">p</span>)</span><br><span class="line">&#123;</span><br><span class="line">    p.showPrint();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;T1的数据类型为：&quot;</span> &lt;&lt; typeid(T1).name() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;T2的数据类型为：&quot;</span> &lt;&lt; typeid(T2).name() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>&gt;p(<span class="string">&quot;李四&quot;</span>, <span class="number">23</span>);</span><br><span class="line">    Person02(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.整个类模板化：将这个对象类型模板化进行传递</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">Person03</span>(<span class="title">T</span> &amp;<span class="title">p</span>)</span><br><span class="line">&#123;</span><br><span class="line">    p.showPrint();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;T的数据类型为：&quot;</span> &lt;&lt; typeid(T).name() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>&gt;p(<span class="string">&quot;王五&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    Person03(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    test02();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    test03();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/202006190707434-1024x339.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>1.使用typeid( 类型 ).name( )可以返回本身的数据类型。</li><li>2.通过类模板创建的对象，可以有三种方式向函数中进行传参</li><li>3.使用比较广泛是第一种：指定传入类型</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程10：模板（类模板-类模板中成员函数创建时机）</title>
      <link href="/post/c6fb3775.html"/>
      <url>/post/c6fb3775.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="1-3-3-类模板中成员函数创建时机"><a href="#1-3-3-类模板中成员函数创建时机" class="headerlink" title="1.3.3 类模板中成员函数创建时机"></a>1.3.3 类模板中成员函数创建时机</h1><p><strong>类模板中成员函数和普通类中成员函数创建时机是有区别的：</strong></p><ul><li>普通类中的成员函数一开始就可以创建</li><li>类模板中的成员函数在调用是才创建</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Porson01</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">showPorson01</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;showPorson01调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Porson02</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPorson02</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;showPorson02调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">tempPorson</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    T obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类模板中的成员函数，并不是一开始就创建的，而是在模板调用再生成</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func01</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        obj.showPorson01();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func02</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        obj.showPorson02();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    tempPorson &lt;Porson01&gt;t;</span><br><span class="line">    t.func01();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//t.func02();   //编译会出错，说明函数调用才会创建成员函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建。"><a href="#总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建。" class="headerlink" title="总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建。"></a>总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程09：模板（类模板- 类模板与函数模板区别）</title>
      <link href="/post/77590297.html"/>
      <url>/post/77590297.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="1-3-2-类模板与函数模板区别"><a href="#1-3-2-类模板与函数模板区别" class="headerlink" title="1.3.2 类模板与函数模板区别"></a>1.3.2 类模板与函数模板区别</h1><h3 id="类模板与函数模板区别主要有两点："><a href="#类模板与函数模板区别主要有两点：" class="headerlink" title="类模板与函数模板区别主要有两点："></a>类模板与函数模板区别主要有两点：</h3><h5 id="1-类模板没有自动类型推导的使用方式"><a href="#1-类模板没有自动类型推导的使用方式" class="headerlink" title="1.类模板没有自动类型推导的使用方式"></a>1.类模板没有自动类型推导的使用方式</h5><h5 id="2-类模板在模板参数列表中可以有默认参数"><a href="#2-类模板在模板参数列表中可以有默认参数" class="headerlink" title="2.类模板在模板参数列表中可以有默认参数"></a>2.类模板在模板参数列表中可以有默认参数</h5><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板</span></span><br><span class="line">template &lt;typename typeName, typename typeAge = <span class="built_in">int</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(typeName name, typeAge age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPrintf</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;m_Name：&quot;</span> &lt;&lt;<span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="string">&quot;m_Age：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    typeName m_Name;</span><br><span class="line">    typeAge m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.类模板没有自动类型推导的使用方式</span></span><br><span class="line">    <span class="comment">//Person&lt;&gt;p(&quot;张三&quot;, 18);  //错误，类模板没有自动类推导</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.类模板在模板参数列表中可以有默认参数</span></span><br><span class="line">    Person&lt;<span class="built_in">string</span>&gt;p(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    p.showPrintf();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020061903123033.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程08：模板（类模板-类模板的语法）</title>
      <link href="/post/64b85e0c.html"/>
      <url>/post/64b85e0c.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="1-3-类模板"><a href="#1-3-类模板" class="headerlink" title="1.3 类模板"></a>1.3 类模板</h1><h2 id="1-3-1-类模板语法"><a href="#1-3-1-类模板语法" class="headerlink" title="1.3.1 类模板语法"></a>1.3.1 类模板语法</h2><p>类模板作用：</p><ul><li>建立一个通用类，类中的成员数据类型可以不具体化制定，用一个虚拟的类型来代表。</li></ul><p><strong>语法：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tempate &lt; typename T , ...&gt;</span><br><span class="line">    类</span><br></pre></td></tr></table></figure><p><strong>解释：</strong> template：声明创建模板 typename：表面其后面的符号是一种数据类型，可以用class代替 T：通用的数据类型，名称可以替换，通常为大写字母</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板</span></span><br><span class="line">template &lt;typename typeName ,typename typeAge&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(typeName name, typeAge age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    typeName m_Name;</span><br><span class="line">    typeAge m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//指定typeName为string类型，typeAge为int类型</span></span><br><span class="line">    Person&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;p(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p.m_Name：&quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt;<span class="string">&quot;p.Age：&quot;</span>&lt;&lt; p.m_Age &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020061902453253-1024x434.jpg"></p><h3 id="总结：类模板和函数模板语法相似，在声明模板template（class）后面加类，此类称为类模板。"><a href="#总结：类模板和函数模板语法相似，在声明模板template（class）后面加类，此类称为类模板。" class="headerlink" title="总结：类模板和函数模板语法相似，在声明模板template（class）后面加类，此类称为类模板。"></a>总结：类模板和函数模板语法相似，在声明模板template（class）后面加类，此类称为类模板。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程07：模板（函数模板-模板的局限性）</title>
      <link href="/post/1e329533.html"/>
      <url>/post/1e329533.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="1-2-6-模板的局限性"><a href="#1-2-6-模板的局限性" class="headerlink" title="1.2.6 模板的局限性"></a>1.2.6 模板的局限性</h1><p><strong>局限性：</strong></p><ul><li>模板的通用并不是万能的</li></ul><h4 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">f</span>(<span class="title">T</span> <span class="title">a</span>,<span class="title">T</span> <span class="title">b</span>)</span><br><span class="line"> &#123;</span><br><span class="line">     a=b;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在上述代码中提供的赋值操作，如果传入的a和b是一个数组就无法实现了。 </p><p><strong>再例如：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">f</span>(<span class="title">T</span> <span class="title">a</span>,<span class="title">T</span> <span class="title">b</span>)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span>( a &gt; b ) &#123; ... &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，如果T的数据类型传入的是像Person这样的自定义数据类型，也无法正常运行，因此C++为了解决这种问题，提供模板的重载，可以为这些特定的类型提供具体化的模板。</p><h4 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    Person(<span class="built_in">string</span> name,<span class="built_in">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数模板</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T</span>&gt;</span><br><span class="line"><span class="title">bool</span> <span class="title">myCompare</span>(<span class="title">T</span> &amp;<span class="title">a</span>, <span class="title">T</span> &amp;<span class="title">b</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (a==b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用具体化Person的版本实现代码，具体化优先调用</span></span><br><span class="line">template&lt;&gt; <span class="function"><span class="built_in">bool</span> <span class="title">myCompare</span>(<span class="params">Person &amp;a, Person &amp;b</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.m_Name == b.m_Name&amp;&amp;a.m_Age == b.m_Age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">10</span>, b = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">bool</span> ret = myCompare(a,b);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;两个变量相等&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;两个变量不相等&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tset02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p01</span>(<span class="params"><span class="string">&quot;张三&quot;</span>, <span class="number">18</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p02</span>(<span class="params"><span class="string">&quot;张三&quot;</span>, <span class="number">18</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bool</span> ret = myCompare(p01, p02);</span><br><span class="line">    <span class="keyword">if</span> (ret)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;两个类的相等&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;两个类的不相等&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line">    tset02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020061902131311-1024x435.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>利用具体化的模板，可以解决自定义类型的通用化</li><li>学习模板并不是为了写模板，而是在STL能够运用系统提供的模板</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程06：模板（函数模板-普通函数与函数模板调用规则）</title>
      <link href="/post/27f24ea2.html"/>
      <url>/post/27f24ea2.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="1-2-5-普通函数与函数模板调用规则"><a href="#1-2-5-普通函数与函数模板调用规则" class="headerlink" title="1.2.5 普通函数与函数模板调用规则"></a>1.2.5 普通函数与函数模板调用规则</h1><p><strong>调用规则如下：</strong> </p><ul><li>1.如果函数模板和普通函数实现（声明定义）相同，优先调用普通函数 </li><li>2.可以通过空模板参数列表来强制调用函数模板 </li><li>3.函数模板也可以发生重载 </li><li>4.如果函数模板可以产生更好的匹配，优先调用函数模板</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.如果函数模板和普通函数实现相同，优先调用普通函数</span></span><br><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPorson01</span>(<span class="params"><span class="built_in">int</span> a,<span class="built_in">int</span> b</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;showPorson01普通函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数模板</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">showPorson01</span>(<span class="title">T</span> <span class="title">a</span>,<span class="title">T</span> <span class="title">b</span>)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;showProson01函数模板&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.函数模板也可以发生重载</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">showPorson01</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">c</span>)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;函数模板重载调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.如果函数模板和普通函数实现相同，优先调用普通函数</span></span><br><span class="line">    showPorson01(a, b);         <span class="comment">//showPorson01普通函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.可以通过空模板参数列表来强制调用函数模板</span></span><br><span class="line">    showPorson01&lt;&gt;(a, b);     <span class="comment">//showProson01函数模板</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.函数模板也可以发生重载</span></span><br><span class="line">    showPorson01(a, b, <span class="number">100</span>);    <span class="comment">//函数模板重载调用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.如果函数模板可以产生更好的匹配，优先调用函数模板</span></span><br><span class="line">    <span class="built_in">char</span> A = <span class="string">&#x27;A&#x27;</span>, B = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">    showPorson01(A,B);          <span class="comment">//showProson01函数模板</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/202006181122559.jpg"></p><h3 id="总结：既然提供了函数模板，最好就不要提供普通函数，否则-容易出现二义性"><a href="#总结：既然提供了函数模板，最好就不要提供普通函数，否则-容易出现二义性" class="headerlink" title="总结：既然提供了函数模板，最好就不要提供普通函数，否则 容易出现二义性"></a>总结：既然提供了函数模板，最好就不要提供普通函数，否则 容易出现二义性</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程05：模板（函数模板-普通函数与函数模板的区别）</title>
      <link href="/post/b4e4aa78.html"/>
      <url>/post/b4e4aa78.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="1-2-4-普通函数与函数模板的区别"><a href="#1-2-4-普通函数与函数模板的区别" class="headerlink" title="1.2.4 普通函数与函数模板的区别"></a>1.2.4 普通函数与函数模板的区别</h1><p><strong>普通函数与函数模板区别：</strong></p><ul><li>普通函数调用时可以发生自动类型转换（隐式类型转换）</li><li>函数模板调用时，如果利用自动类型推导，不会发生隐式转换</li><li>如果利用显示指定类型的方式，可以发生隐式类型转换</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通函数</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">myAdd</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数模板</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T</span>&gt;</span><br><span class="line"><span class="title">T</span> <span class="title">TmyAdd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">char</span> c = <span class="string">&#x27;c&#x27;</span>; <span class="comment">//小写（c）的ASII码：99</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.普通函数调用时可以发生自动类型转换（隐式类型转换）</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;普通函数 myAdd(a, b)：&quot;</span> &lt;&lt; myAdd(a, b) &lt;&lt; endl; <span class="comment">//正确</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;普通函数 myAdd(a, c)：&quot;</span> &lt;&lt; myAdd(a, c) &lt;&lt; endl; <span class="comment">//正确        </span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.函数模板调用时，如果利用自动类型推导，不会发生隐式转换</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;函数模板 TmyAdd(a, b)（自动类型推导）：&quot;</span> &lt;&lt; TmyAdd(a, b) &lt;&lt; endl;       <span class="comment">//正确</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;函数模板 TmyAdd(a, c)（自动类型推导）：&quot; &lt;&lt; TmyAdd(a, c) &lt;&lt; endl;     //错误</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.如果利用显示指定类型的方式，可以发生隐式类型转换</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;函数模板 TmyAdd&lt;int&gt;(a, b)（指定类型）：&quot;</span> &lt;&lt; TmyAdd&lt;<span class="built_in">int</span>&gt;(a, b) &lt;&lt; endl;       <span class="comment">//正确</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;函数模板 TmyAdd&lt;int&gt;(a, c)（指定类型）：&quot;</span> &lt;&lt; TmyAdd&lt;<span class="built_in">int</span>&gt;(a, c) &lt;&lt; endl;       <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020061709081019-1024x522.jpg"></p><h3 id="总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T。"><a href="#总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T。" class="headerlink" title="总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T。"></a>总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程04：模板（函数模板-函数模板案例）</title>
      <link href="/post/78da7e04.html"/>
      <url>/post/78da7e04.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="1-2-3-函数模板案例"><a href="#1-2-3-函数模板案例" class="headerlink" title="1.2.3 函数模板案例"></a>1.2.3 函数模板案例</h1><p><strong>案例描述：</strong></p><ul><li>利用函数模板封装一个排序的函数，可以对不同数据类型数组进行排序。</li><li>排序规则从大到小，排序算法为选择排序</li><li>分别利用char数组和int数组进行测试</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序模板</span></span><br><span class="line">template &lt;typename T&gt; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySort</span>(<span class="params">T a[],<span class="built_in">int</span> len</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择排序选项！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1、降序排序&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2、升序排序&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> maxormin = i;       <span class="comment">//自定义一个最大值或最小值</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = i+<span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[maxormin] &lt; a[j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        maxormin = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[maxormin] &gt; a[j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        maxormin = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i !=maxormin)   </span><br><span class="line">            &#123;</span><br><span class="line">                T temp = a[i];</span><br><span class="line">                a[i] = a[maxormin];</span><br><span class="line">                a[maxormin] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印模板</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">printArr</span>(<span class="title">T</span> <span class="title">arr</span>, <span class="title">int</span> <span class="title">len</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> a[] = &#123; <span class="number">7</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span> &#125;;        <span class="comment">//整形数组</span></span><br><span class="line">    <span class="built_in">int</span> len = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(a[<span class="number">0</span>]);     <span class="comment">//数组长度</span></span><br><span class="line"></span><br><span class="line">    mySort(a, len);         <span class="comment">//排序    </span></span><br><span class="line">    printArr(a, len);       <span class="comment">//打印输出</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">char</span> c[] = <span class="string">&quot;ceadfb&quot;</span>;  <span class="comment">//字符数组</span></span><br><span class="line">    <span class="built_in">int</span> len = <span class="keyword">sizeof</span>(c) / <span class="keyword">sizeof</span>(c[<span class="number">0</span>]);     <span class="comment">//数组长度</span></span><br><span class="line"></span><br><span class="line">    mySort(c, len);     <span class="comment">//排序</span></span><br><span class="line">    printArr(c, len);   <span class="comment">//打印输出</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020061708181789-1024x662.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识</title>
      <link href="/post/7fd4f72a.html"/>
      <url>/post/7fd4f72a.html</url>
      
        <content type="html"><![CDATA[<h3 id="第一章：内存分区模型"><a href="#第一章：内存分区模型" class="headerlink" title="第一章：内存分区模型"></a>第一章：内存分区模型</h3><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">001</td><td align="left"><a href="https://notes.camcad.cn/post/1f273a4e.html">C++核心知识01：内存分区模型（程序运行前）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=84">08:55</a></td></tr><tr><td align="center">002</td><td align="left"><a href="https://notes.camcad.cn/post/a9567b5e.html">C++核心知识02：内存分区模型（程序运行后）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=85">17:08</a></td></tr><tr><td align="center">003</td><td align="left"><a href="https://notes.camcad.cn/post/f5a87345.html">C++核心知识03：内存分区模型（new操作符）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=88">10:40</a></td></tr></tbody></table><h3 id="第二章：引用"><a href="#第二章：引用" class="headerlink" title="第二章：引用"></a>第二章：引用</h3><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">004</td><td align="left"><a href="https://notes.camcad.cn/post/d3d53efc.html">C++核心知识04：引用（引用的基本使用）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=89">06:12</a></td></tr><tr><td align="center">005</td><td align="left"><a href="https://notes.camcad.cn/post/2c4aca87.html">C++核心知识05：引用（引用的注意事项）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=90">07:39</a></td></tr><tr><td align="center">006</td><td align="left"><a href="https://notes.camcad.cn/post/7c1f4207.html">C++核心知识06：引用（引用做函数参数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=91">10:25</a></td></tr><tr><td align="center">007</td><td align="left"><a href="https://notes.camcad.cn/post/49e8996a.html">C++核心知识07：引用（引用做函数返回值）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=92">10:47</a></td></tr><tr><td align="center">008</td><td align="left"><a href="https://notes.camcad.cn/post/54d34880.html">C++核心知识08：引用（引用的本质）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=93">07:42</a></td></tr><tr><td align="center">009</td><td align="left"><a href="https://notes.camcad.cn/post/22ef0d6a.html">C++核心知识09：引用（常量引用）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=94">09:18</a></td></tr></tbody></table><h3 id="第三章：函数提高"><a href="#第三章：函数提高" class="headerlink" title="第三章：函数提高"></a>第三章：函数提高</h3><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">010</td><td align="left"><a href="https://notes.camcad.cn/post/742f45c2.html">C++核心知识10：函数提高（函数默认参数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=95">13:16</a></td></tr><tr><td align="center">011</td><td align="left"><a href="https://notes.camcad.cn/post/11a68870.html">C++核心知识11：函数提高（函数占位参数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=96">06:10</a></td></tr><tr><td align="center">012</td><td align="left"><a href="https://notes.camcad.cn/post/a93a0f90.html">C++核心知识12：函数提高（函数重载-函数重载概述）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=97">11:19</a></td></tr><tr><td align="center">013</td><td align="left"><a href="https://notes.camcad.cn/post/af4cd469.html">C++核心知识13：函数提高（函数重载-函数重载注意事项）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=98">11:22</a></td></tr></tbody></table><h3 id="第四章：类和对象"><a href="#第四章：类和对象" class="headerlink" title="第四章：类和对象"></a>第四章：类和对象</h3><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">014</td><td align="left"><a href="https://notes.camcad.cn/post/d60295ce.html">C++核心知识14：类和对象（封装-封装的意义）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=99">14:36</a></td></tr><tr><td align="center">015</td><td align="left"><a href="https://notes.camcad.cn/post/443da51e.html">C++核心知识15：类和对象（封装-struct和class区别）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=102">05:41</a></td></tr><tr><td align="center">016</td><td align="left"><a href="https://notes.camcad.cn/post/d18a6ddb.html">C++核心知识16：类和对象（封装-成员属性设置为私有）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=103">16:25</a></td></tr><tr><td align="center">017</td><td align="left"><a href="https://notes.camcad.cn/post/a7e8e2e0.html">C++核心知识17：类和对象（封装-练习案例2：点和圆的关系）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=105">25:00</a></td></tr><tr><td align="center">018</td><td align="left"><a href="https://notes.camcad.cn/post/a0c1d58.html">C++核心知识18：类和对象（对象的初始化和清理-构造函数和析构函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=106">15:56</a></td></tr><tr><td align="center">019</td><td align="left"><a href="https://notes.camcad.cn/post/410f4cfc.html">C++核心知识19：类和对象（对象的初始化和清理-构造函数的分类及调用）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=107">25:48</a></td></tr><tr><td align="center">020</td><td align="left"><a href="https://notes.camcad.cn/post/1e388f1.html">C++核心知识20：类和对象（对象的初始化和清理-拷贝构造函数调用时机）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=108">12:32</a></td></tr><tr><td align="center">021</td><td align="left"><a href="https://notes.camcad.cn/post/4957dc4c.html">C++核心知识21：类和对象（对象的初始化和清理-构造函数调用规则）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=109">13:53</a></td></tr><tr><td align="center">022</td><td align="left"><a href="https://notes.camcad.cn/post/f261c562.html">C++核心知识22：类和对象（对象的初始化和清理-深拷贝与浅拷贝）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=110">16:43</a></td></tr><tr><td align="center">023</td><td align="left"><a href="https://notes.camcad.cn/post/92cfe06a.html">C++核心知识23：类和对象（对象的初始化和清理-初始化列表）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=111">07:22</a></td></tr><tr><td align="center">024</td><td align="left"><a href="https://notes.camcad.cn/post/10048791.html">C++核心知识24：类和对象（对象的初始化和清理-类对象作为类成员）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=112">13:23</a></td></tr><tr><td align="center">025</td><td align="left"><a href="https://notes.camcad.cn/post/9c9825a3.html">C++核心知识25：类和对象（对象的初始化和清理-静态成员）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=113">09:08</a></td></tr><tr><td align="center">026</td><td align="left"><a href="https://notes.camcad.cn/post/be27d4eb.html">C++核心知识26：类和对象（C++对象模型和this指针-成员变量和成员函数分开存储）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=114">10:38</a></td></tr><tr><td align="center">027</td><td align="left"><a href="https://notes.camcad.cn/post/49bdc38e.html">C++核心知识27：类和对象（C++对象模型和this指针-this指针概念）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=115">15:37</a></td></tr><tr><td align="center">028</td><td align="left"><a href="https://notes.camcad.cn/post/bb043411.html">C++核心知识28：类和对象（C++对象模型和this指针-空指针访问成员函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=116">06:19</a></td></tr><tr><td align="center">029</td><td align="left"><a href="https://notes.camcad.cn/post/3e7e5462.html">C++核心知识29：类和对象（C++对象模型和this指针-const修饰成员函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=117">12:40</a></td></tr><tr><td align="center">030</td><td align="left"><a href="https://notes.camcad.cn/post/54dc0ab8.html">C++核心知识30：类和对象（友元-全局函数做友元）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=118">08:43</a></td></tr><tr><td align="center">031</td><td align="left"><a href="https://notes.camcad.cn/post/d307b743.html">C++核心知识31：类和对象（友元-类做友元）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=119">10:28</a></td></tr><tr><td align="center">032</td><td align="left"><a href="https://notes.camcad.cn/post/dc731654.html">C++核心知识32：类和对象（友元-成员函数做友元）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=120">10:12</a></td></tr><tr><td align="center">033</td><td align="left"><a href="https://notes.camcad.cn/post/a06479a2.html">C++核心知识33：类和对象（运算符重载-加号运算符重载）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=121">21:32</a></td></tr><tr><td align="center">034</td><td align="left"><a href="https://notes.camcad.cn/post/c2b29a2.html">C++核心知识34：类和对象（运算符重载-左移运算符重载）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=122">15:35</a></td></tr><tr><td align="center">035</td><td align="left"><a href="https://notes.camcad.cn/post/1cbfd86.html">C++核心知识35：类和对象（运算符重载-递增运算符重载）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=123">21:37</a></td></tr><tr><td align="center">036</td><td align="left"><a href="https://notes.camcad.cn/post/261c09c2.html">C++核心知识36：类和对象（运算符重载-赋值运算符重载）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=124">17:16</a></td></tr><tr><td align="center">037</td><td align="left"><a href="https://notes.camcad.cn/post/15ab8371.html">C++核心知识37：类和对象（运算符重载-关系运算符重载）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=125">08:28</a></td></tr><tr><td align="center">038</td><td align="left"><a href="https://notes.camcad.cn/post/d57eb46e.html">C++核心知识38：类和对象（运算符重载-函数调用运算符重载）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=126">09:47</a></td></tr><tr><td align="center">039</td><td align="left"><a href="https://notes.camcad.cn/post/d92241ea.html">C++核心知识39：类和对象（继承-继承的基本语法）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=127">17:53</a></td></tr><tr><td align="center">040</td><td align="left"><a href="https://notes.camcad.cn/post/cb95e71a.html">C++核心知识40：类和对象（继承-继承方式）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=128">16:27</a></td></tr><tr><td align="center">041</td><td align="left"><a href="https://notes.camcad.cn/post/cdbddfdd.html">C++核心知识41：类和对象（继承-继承中的对象模型&amp;vs开发人员命令提示符）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=129">12:30</a></td></tr><tr><td align="center">042</td><td align="left"><a href="https://notes.camcad.cn/post/2a4be3b1.html">C++核心知识42：类和对象（继承-继承中构造和析构顺序）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=130">04:58</a></td></tr><tr><td align="center">043</td><td align="left"><a href="https://notes.camcad.cn/post/434dacb3.html">C++核心知识43：类和对象（继承-继承同名成员处理方式）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=131">11:06</a></td></tr><tr><td align="center">044</td><td align="left"><a href="https://notes.camcad.cn/post/335a130a.html">C++核心知识44：类和对象（继承-继承同名静态成员处理方式）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=132">13:00</a></td></tr><tr><td align="center">045</td><td align="left"><a href="https://notes.camcad.cn/post/66431651.html">C++核心知识45：类和对象（继承-多继承语法）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=133">08:54</a></td></tr><tr><td align="center">046</td><td align="left"><a href="https://notes.camcad.cn/post/db3b53a0.html">C++核心知识46：类和对象（继承-菱形继承&amp;virtual）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=134">19:32</a></td></tr><tr><td align="center">047</td><td align="left"><a href="https://notes.camcad.cn/post/76b5e75d.html">C++核心知识47：类和对象（多态-多态的基本概念）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=135">16:59</a></td></tr><tr><td align="center">048</td><td align="left"><a href="https://notes.camcad.cn/post/e0aaaf87.html">C++核心知识48：类和对象（多态-多态案例一计算机类）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=137">20:07</a></td></tr><tr><td align="center">049</td><td align="left"><a href="https://notes.camcad.cn/post/9854c368.html">C++核心知识49：类和对象（多态-纯虚函数和抽象类）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=138">10:25</a></td></tr><tr><td align="center">050</td><td align="left"><a href="https://notes.camcad.cn/post/3996e7a6.html">C++核心知识50：类和对象（多态-多态案例二_制作饮品）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=139">12:29</a></td></tr><tr><td align="center">051</td><td align="left"><a href="https://notes.camcad.cn/post/78f7bf55.html">C++核心知识51：类和对象（多态-虚析构和纯虚析构）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=140">17:04</a></td></tr><tr><td align="center">052</td><td align="left"><a href="https://notes.camcad.cn/post/5b82a581.html">C++核心知识52：类和对象（多态-多态案例三_电脑组装）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=141">08:45</a></td></tr></tbody></table><h3 id="第五章：文件操作"><a href="#第五章：文件操作" class="headerlink" title="第五章：文件操作"></a>第五章：文件操作</h3><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">053</td><td align="left"><a href="https://notes.camcad.cn/post/fa9b9dc9.html">C++核心知识53：文件操作（文本文件-写文件）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=143">16:07</a></td></tr><tr><td align="center">054</td><td align="left"><a href="https://notes.camcad.cn/post/49557b6.html">C++核心知识54：文件操作（文本文件-读文件）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=144">13:33</a></td></tr><tr><td align="center">055</td><td align="left"><a href="https://notes.camcad.cn/post/b7952e98.html">C++核心知识55：文件操作（二进制文件-写文件）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=145">07:44</a></td></tr><tr><td align="center">056</td><td align="left"><a href="https://notes.camcad.cn/post/24c85066.html">C++核心知识56：文件操作（二进制文件-读文件）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=146">06:29</a></td></tr></tbody></table><h3 id="第六章：职工管理系统"><a href="#第六章：职工管理系统" class="headerlink" title="第六章：职工管理系统"></a>第六章：职工管理系统</h3><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">057</td><td align="left"><a href="https://notes.camcad.cn/post/953e7e3d.html">职工管理系统01：管理系统需求</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=147">11:16</a></td></tr><tr><td align="center">058</td><td align="left"><a href="https://notes.camcad.cn/post/b6a02408.html">职工管理系统02：创建项目</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=148">03:17</a></td></tr><tr><td align="center">059</td><td align="left"><a href="https://notes.camcad.cn/post/5bcbd485.html">职工管理系统03：创建管理类</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=149">05:42</a></td></tr><tr><td align="center">060</td><td align="left"><a href="https://notes.camcad.cn/post/835de141.html">职工管理系统04：菜单功能</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=150">05:26</a></td></tr><tr><td align="center">061</td><td align="left"><a href="https://notes.camcad.cn/post/b0cffca2.html">职工管理系统05：退出功能</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=151">08:57</a></td></tr><tr><td align="center">062</td><td align="left"><a href="https://notes.camcad.cn/post/b86aec87.html">职工管理系统06：创建职工类</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=152">17:13</a></td></tr><tr><td align="center">063</td><td align="left"><a href="https://notes.camcad.cn/post/b9fc9be6.html">职工管理系统07：创建职工类（创建经理类）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=153">10:33</a></td></tr><tr><td align="center">064</td><td align="left"><a href="https://notes.camcad.cn/post/d918eefa.html">职工管理系统08：创建职工类（创建总裁类）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=153">00:00</a></td></tr><tr><td align="center">065</td><td align="left"><a href="https://notes.camcad.cn/post/617e186a.html">职工管理系统09：测试多态</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=153">00:00</a></td></tr><tr><td align="center">066</td><td align="left"><a href="https://notes.camcad.cn/post/d9135.html">职工管理系统10：添加职工（功能分析）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=154">25:05</a></td></tr><tr><td align="center">070</td><td align="left"><a href="https://notes.camcad.cn/post/e692a636.html">职工管理系统11：文件交互（写文件）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=155">08:15</a></td></tr><tr><td align="center">071</td><td align="left"><a href="https://notes.camcad.cn/post/dd6cfc14.html">职工管理系统12：文件交互（读文件）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=156">07:22</a></td></tr><tr><td align="center">072</td><td align="left"><a href="https://notes.camcad.cn/post/410390e.html">职工管理系统13：显示职工</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=160">08:18</a></td></tr><tr><td align="center">073</td><td align="left"><a href="https://notes.camcad.cn/post/f80d1cb6.html">职工管理系统14：删除职工</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=161">06:54</a></td></tr><tr><td align="center">074</td><td align="left"><a href="https://notes.camcad.cn/post/90ed886a.html">职工管理系统15：修改职工</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=163">13:11</a></td></tr><tr><td align="center">075</td><td align="left"><a href="https://notes.camcad.cn/post/97bcc53.html">职工管理系统16：查找职工</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=164">14:15</a></td></tr><tr><td align="center">076</td><td align="left"><a href="https://notes.camcad.cn/post/960c29f6.html">职工管理系统17：排序</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=165">14:17</a></td></tr><tr><td align="center">077</td><td align="left"><a href="https://notes.camcad.cn/post/c543387c.html">职工管理系统18：清空文件</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=166">07:50</a></td></tr></tbody></table><h2 id="视频转载-bilibili博主《黑马程序员》"><a href="#视频转载-bilibili博主《黑马程序员》" class="headerlink" title="视频转载 bilibili博主《黑马程序员》"></a>视频转载 bilibili博主《<a href="https://space.bilibili.com/37974444?spm_id_from=333.788.b_765f7570696e666f.2">黑马程序员</a>》</h2>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程03：模板（函数模板-函数模板注意事项）</title>
      <link href="/post/760e6263.html"/>
      <url>/post/760e6263.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="1-2-2-函数模板注意事项"><a href="#1-2-2-函数模板注意事项" class="headerlink" title="1.2.2 函数模板注意事项"></a>1.2.2 函数模板注意事项</h1><p><strong>注意事项：</strong></p><ul><li>自动类型推导，必须推导出一致的数据类型T,才可以使用</li><li>模板必须要确定出T的数据类型，才可以使用</li></ul><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.自动类型推导，必须推导出一致的数据类型T,才可以使用</span></span><br><span class="line"><span class="comment">//函数模板</span></span><br><span class="line">template &lt;typename T&gt; <span class="comment">//声明一个模板，T表示通用数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap01</span>(<span class="params">T &amp;a, T &amp;b</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    T temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用方法一（自动判断数据类型）</span></span><br><span class="line">    <span class="comment">//mySwap01(a, b);       //正确</span></span><br><span class="line">    <span class="comment">//mySwap01(a,c);        //错误，数据类型不一致</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用方法二（指定数据类型）</span></span><br><span class="line">    mySwap01&lt;<span class="built_in">int</span>&gt;(a, b);  <span class="comment">//正确</span></span><br><span class="line">    <span class="comment">//mySwap01(b, c);       //错误，数据类型不一致</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;main a：&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\nmain b：&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.模板必须要确定出T的数据类型，才可以使用</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">mySwap02</span>()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;测试&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//mySwap02();       //错误！因为没有指定C的参数，所以无法利用自动判断数据类型，</span></span><br><span class="line">    mySwap02&lt;<span class="built_in">int</span>&gt;();  <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//test01();</span></span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结：使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型。"><a href="#总结：使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型。" class="headerlink" title="总结：使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型。"></a>总结：使用模板时必须确定出通用数据类型T，并且能够推导出一致的类型。</h3>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程02：模板（函数模板-函数模板的语法）</title>
      <link href="/post/30168b8d.html"/>
      <url>/post/30168b8d.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="一、模板"><a href="#一、模板" class="headerlink" title="一、模板"></a>一、模板</h1><h2 id="1-2-函数模板"><a href="#1-2-函数模板" class="headerlink" title="1.2 函数模板"></a>1.2 函数模板</h2><ul><li>C++另一种编程思想称为泛型编程，主要利用的技术就是模板</li><li>C++提供两种模板机制：<code>函数模板</code>和<code>类模板</code></li></ul><h3 id="1-2-1函数模板语法"><a href="#1-2-1函数模板语法" class="headerlink" title="1.2.1函数模板语法"></a>1.2.1函数模板语法</h3><p>函数模板作用： 建立一个通用函数，其函数返回值类型和参类型可以不具体制定，用一个虚拟的类型来代表。</p><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数模板</span></span><br><span class="line">template &lt;typename T&gt;</span><br><span class="line"><span class="comment">//函数声明或定义</span></span><br></pre></td></tr></table></figure><h4 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h4><p><strong>template：</strong>声明创建模板 <strong>typename：</strong>表明其后面的符号是一种数据类型，可以用class代替 <strong>T：</strong>通用的数据类型，名称可以替换，通常为大写字母</p><h4 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数模板</span></span><br><span class="line">template &lt;typename T&gt; <span class="comment">//声明一个模板，T表示通用数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mySwap</span>(<span class="params">T &amp;a, T &amp;b</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    T temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用方法一（自动判断数据类型）</span></span><br><span class="line">    <span class="comment">//mySwap(a, b);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用方法二（指定数据类型）</span></span><br><span class="line">    mySwap&lt;<span class="built_in">int</span>&gt;(a, b);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;main a：&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;\nmain b：&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h4><p><img src="http://image.camcad.cn/2020/06/2020061704170928-1024x435.jpg"></p><h3 id="总结-："><a href="#总结-：" class="headerlink" title="总结 ："></a>总结 ：</h3><ul><li>函数模板利用关键字template</li><li>使用函数模板有两种方式：自动类型推导、显示指定类型</li><li>模板的目的是为了提高复用性，将类型参数化</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++提高编程01：模板（模板的概念）</title>
      <link href="/post/e472be6d.html"/>
      <url>/post/e472be6d.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="C-提高编程"><a href="#C-提高编程" class="headerlink" title="C++提高编程"></a>C++提高编程</h1><ul><li>本阶段主要针对C++<code>泛型编程</code>和<code>STL</code>技术做详细讲解，探讨C++更深层的使用。</li></ul><h2 id="第一章：模板"><a href="#第一章：模板" class="headerlink" title="第一章：模板"></a>第一章：模板</h2><h3 id="模板的概念"><a href="#模板的概念" class="headerlink" title="模板的概念"></a>模板的概念</h3><ul><li>模板就是建立通用的模具，大大复用性。</li></ul><p>例如1：生活中的模板，一寸照片模板<br><img src="http://image.camcad.cn/2020/06/202006170251029-1024x459.jpg"></p><h3 id="模板的特点："><a href="#模板的特点：" class="headerlink" title="模板的特点："></a>模板的特点：</h3><ul><li>模板不可以直接使用，它只是一个构架</li><li>模板的通用并不是万能</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++提高编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++提高编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统18：清空文件</title>
      <link href="/post/c543387c.html"/>
      <url>/post/c543387c.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="15、清空文件"><a href="#15、清空文件" class="headerlink" title="15、清空文件"></a>15、清空文件</h1><p><strong>功能描述：</strong>将文件中记录数据清空。</p><h2 id="15-1-清空函数声明"><a href="#15-1-清空函数声明" class="headerlink" title="15.1 清空函数声明"></a>15.1 清空函数声明</h2><p>在workerManager.h中添加成员函数<code>void clean_File( );</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清空文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean_File</span>()</span>;</span><br></pre></td></tr></table></figure><h2 id="15-2-清空函数实现"><a href="#15-2-清空函数实现" class="headerlink" title="15.2 清空函数实现"></a>15.2 清空函数实现</h2><p>在workerManager.cpp中实现成员函数<code>void clean_File( );</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清空文件</span></span><br><span class="line"><span class="keyword">void</span> workerManager::clean_File()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件不存在或记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;确认清空？&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1、确认清空&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2、返回退出&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span>==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//打开模式 ios::trunc 如果存在删除文件并重新创建</span></span><br><span class="line">            <span class="function">ofstream <span class="title">ofs</span>(<span class="params">FILENAME, ios::trunc</span>)</span>;     <span class="comment">//删除文件后重新创建</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭文本</span></span><br><span class="line">            ofs.close();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Emparray !=NULL)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//删除堆区每个职工的对象</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Empnum; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Emparray[i]!=NULL)</span><br><span class="line">                    &#123;</span><br><span class="line">                        delete <span class="keyword">this</span>-&gt;m_Emparray[i];</span><br><span class="line">                        <span class="keyword">this</span>-&gt;m_Emparray[i] = NULL;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//删除堆区数据指针</span></span><br><span class="line">                delete[] <span class="keyword">this</span>-&gt;m_Emparray;</span><br><span class="line">                <span class="keyword">this</span>-&gt;m_Emparray = NULL;</span><br><span class="line">                <span class="keyword">this</span>-&gt;m_Empnum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;清空成功!&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-3-测试清空文件"><a href="#15-3-测试清空文件" class="headerlink" title="15.3 测试清空文件"></a>15.3 测试清空文件</h2><p>在main函数分支7选项中，调用清空文件接口<br><img src="http://image.camcad.cn/2020/06/2020061602151243.jpg"> 测试1-当文件不存在或记录为空时<br><img src="http://image.camcad.cn/2020/06/2020061602163578.jpg"> 测试2-当清空数据库数据时<br><img src="http://image.camcad.cn/2020/06/2020061602184696.jpg"> 数据库文件为空！<br><img src="http://image.camcad.cn/2020/06/202006160219337.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统17：排序</title>
      <link href="/post/960c29f6.html"/>
      <url>/post/960c29f6.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="14、排序"><a href="#14、排序" class="headerlink" title="14、排序"></a>14、排序</h1><p><strong>功能描述：</strong>按照职工编号进行排序，排序的顺序由用户指定。</p><h2 id="14-1-排序函数声明"><a href="#14-1-排序函数声明" class="headerlink" title="14.1 排序函数声明"></a>14.1 排序函数声明</h2><p>在workerManager.h中添加成员函数<code>void sort_Emp( );</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编号排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_Emp</span>()</span>;</span><br></pre></td></tr></table></figure><h2 id="14-2-排序函数实现"><a href="#14-2-排序函数实现" class="headerlink" title="14.2 排序函数实现"></a>14.2 排序函数实现</h2><p>在workerManager.cpp中实现成员函数<code>void sort_Emp( )&#39;</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="keyword">void</span> workerManager::sort_Emp()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件不存在或记录为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入排序选项模式：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1、升序排序&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2、降序排序&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Empnum; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//最小值 或 最大值</span></span><br><span class="line">            <span class="built_in">int</span> minormax = i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = i+<span class="number">1</span>; j &lt; <span class="keyword">this</span>-&gt;m_Empnum; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">select</span>==<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Emparray[minormax]-&gt;m_Id &gt; <span class="keyword">this</span>-&gt;m_Emparray[j]-&gt;m_Id)</span><br><span class="line">                    &#123;</span><br><span class="line">                        minormax = j;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Emparray[minormax]-&gt;m_Id &lt; <span class="keyword">this</span>-&gt;m_Emparray[j]-&gt;m_Id)</span><br><span class="line">                    &#123;</span><br><span class="line">                        minormax = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i !=minormax)</span><br><span class="line">            &#123;</span><br><span class="line">                Worker *tmep = <span class="keyword">this</span>-&gt;m_Emparray[i];</span><br><span class="line">                <span class="keyword">this</span>-&gt;m_Emparray[i] = <span class="keyword">this</span>-&gt;m_Emparray[minormax];</span><br><span class="line">                <span class="keyword">this</span>-&gt;m_Emparray[minormax] = tmep;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;排序更改成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存数据</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;save();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示数据</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;show_Emp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-3-测试排序功能"><a href="#14-3-测试排序功能" class="headerlink" title="14.3 测试排序功能"></a>14.3 测试排序功能</h2><p>在main函数分支6选项中，调用排序职工接口：<br><img src="http://image.camcad.cn/2020/06/2020061514293666-524x1024.jpg"> 测试1-文件不存在或记录为空<br><img src="http://image.camcad.cn/2020/06/2020061514322415-1024x615.jpg"> 测试2-升序排序<br><img src="http://image.camcad.cn/2020/06/2020061514350265-1024x667.jpg"> 测试3-降序排序<br><img src="http://image.camcad.cn/2020/06/2020061514361573-1024x673.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统16：查找职工</title>
      <link href="/post/97bcc53.html"/>
      <url>/post/97bcc53.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="13、查找职工"><a href="#13、查找职工" class="headerlink" title="13、查找职工"></a>13、查找职工</h1><p><strong>功能描述：</strong>提供两种查找职工方式，一种按照职工编号，另一种按照职工姓名。</p><h2 id="13-1-查找职工函数声明"><a href="#13-1-查找职工函数声明" class="headerlink" title="13.1 查找职工函数声明"></a>13.1 查找职工函数声明</h2><p>在workerManager.h中添加成员函数：<code>void find_Emp( );</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_Emp</span>()</span>;</span><br></pre></td></tr></table></figure><h2 id="13-2-查找职工函数实现"><a href="#13-2-查找职工函数实现" class="headerlink" title="13.2 查找职工函数实现"></a>13.2 查找职工函数实现</h2><p>在workerManager.cpp中实现成员函数<code>void find_Emp( );</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找职工</span></span><br><span class="line"><span class="keyword">void</span> workerManager::find_Emp()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件不存在或者记录为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请选择查找模式：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1、职工编号查找&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2、职工姓名查找&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//职工编号查找</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span>==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> id = <span class="number">0</span>;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;请输入需要查找的职工编号：&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cin &gt;&gt; id;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> ret = <span class="keyword">this</span>-&gt;isExist(id);</span><br><span class="line">            <span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;查找完成，结果如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">this</span>-&gt;m_Emparray[ret]-&gt;showInfo();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;输入的职工编号有误或不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//职工编号姓名</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span>==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> name;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;请输入需要查找的职工姓名&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cin &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//标志姓名是否存在</span></span><br><span class="line">            <span class="built_in">bool</span> isName = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Empnum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Emparray[i]-&gt;m_Name == name)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;查找到职工编号：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Emparray[i]-&gt;m_Id &lt;&lt; <span class="string">&quot; 信息如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line">                    <span class="keyword">this</span>-&gt;m_Emparray[i]-&gt;showInfo();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//姓名存在</span></span><br><span class="line">                    isName = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!isName)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;查找的职工姓名有误或不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入的选项有误或不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-3-测试查找职工"><a href="#13-3-测试查找职工" class="headerlink" title="13.3 测试查找职工"></a>13.3 测试查找职工</h2><p>在main函数分支5选项中，调用查找职工接口：<br><img src="http://image.camcad.cn/2020/06/2020061509372916-768x1024.jpg"> 测试1-按照职工编号查找（不存在）<br><img src="http://image.camcad.cn/2020/06/2020061509395615.jpg"><br>测试2-按照职工编号查找（存在）<br><img src="http://image.camcad.cn/2020/06/2020061509423267-1024x703.jpg"> 测试3-按照职工姓名查找（不存在）<br><img src="http://image.camcad.cn/2020/06/2020061509442760.jpg"> 测试4-按照职工姓名查找（存在）<br><img src="http://image.camcad.cn/2020/06/2020061509453398-1024x670.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统15：修改职工</title>
      <link href="/post/90ed886a.html"/>
      <url>/post/90ed886a.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="12、修改职工"><a href="#12、修改职工" class="headerlink" title="12、修改职工"></a>12、修改职工</h1><p><strong>功能描述</strong>能够按照职工的编号对职工信息进行修改并保存。</p><h2 id="12-1-修改职工函数声明"><a href="#12-1-修改职工函数声明" class="headerlink" title="12.1 修改职工函数声明"></a>12.1 修改职工函数声明</h2><p>在workerManager.h中添加成员函数<code>void mod_Emp( );</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mod_Emp</span>()</span>;</span><br></pre></td></tr></table></figure><h2 id="12-2-修改职工函数实现"><a href="#12-2-修改职工函数实现" class="headerlink" title="12.2 修改职工函数实现"></a>12.2 修改职工函数实现</h2><p>在workerManager.cpp中实现成员函数<code>void mod_Emp( );</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加职工</span></span><br><span class="line"><span class="keyword">void</span> workerManager::mod_Emp()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件不存在或者记录为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> id;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入需要修改的职工id号：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; id;</span><br><span class="line">        <span class="built_in">int</span> ret = <span class="keyword">this</span>-&gt;isExist(id);</span><br><span class="line">        <span class="keyword">if</span> (ret==<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入的id有误或不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> new_id = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">string</span> new_name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="built_in">int</span> new_deptId = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            delete <span class="keyword">this</span>-&gt;m_Emparray[ret];</span><br><span class="line"></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;查到：&quot;</span> &lt;&lt; ret &lt;&lt; <span class="string">&quot;号职工！\n请输入职工编号：&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cin &gt;&gt; new_id;</span><br><span class="line"></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;请输入职工姓名：&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cin &gt;&gt; new_name;</span><br><span class="line"></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;请输入职工岗位,对应以下选择&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;1、员工\n2、经理\n3、总裁&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cin &gt;&gt; new_deptId;</span><br><span class="line"></span><br><span class="line">            Worker *worker = NULL;</span><br><span class="line">            <span class="keyword">switch</span> (new_deptId)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                worker = <span class="keyword">new</span> Employee(new_id, new_name, new_deptId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                worker = <span class="keyword">new</span> Manager(new_id, new_name, new_deptId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                worker = <span class="keyword">new</span> Boss(new_id, new_name, new_deptId);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//数组数据更新</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;m_Emparray[ret] = worker;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//保存至文件</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;save();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统14：删除职工</title>
      <link href="/post/f80d1cb6.html"/>
      <url>/post/f80d1cb6.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="11、删除职工"><a href="#11、删除职工" class="headerlink" title="11、删除职工"></a>11、删除职工</h1><p><strong>功能描述：</strong>按照职工的编号进行删除职工操作。</p><h2 id="11-1-删除职工函数声明"><a href="#11-1-删除职工函数声明" class="headerlink" title="11.1 删除职工函数声明"></a>11.1 删除职工函数声明</h2><p>在workerManager.h中添加成员函数<code>void del_Emp( );</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del_Emp</span>()</span>;</span><br></pre></td></tr></table></figure><h2 id="11-2-职工是否存在函数声明"><a href="#11-2-职工是否存在函数声明" class="headerlink" title="11.2 职工是否存在函数声明"></a>11.2 职工是否存在函数声明</h2><p>很多功能都需要用到根据职工是否存在再来进行操作如：删除职工、修改职工、查找职工。 因此添加该公告函数，以便后续调用。 在workerManager.h中添加成员函数<code>int isExist(int id);</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按照职工编号判断职工是否存在，若存在返回职工所在数据中位置，不存在返回-1；</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">isExist</span>(<span class="params"><span class="built_in">int</span> id</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="11-3-职工是否存在函数实现"><a href="#11-3-职工是否存在函数实现" class="headerlink" title="11.3 职工是否存在函数实现"></a>11.3 职工是否存在函数实现</h2><p>在workerManager.cpp中实现成员函数：<code>int isExist(int id);</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按照职工编号判断职工是否存在，若存在返回职工所在数据中位置，不存在返回-1；</span></span><br><span class="line"><span class="built_in">int</span> workerManager::isExist(<span class="built_in">int</span> id)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Empnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Emparray[i]-&gt;m_Id == id)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-4-删除职工函数实现"><a href="#11-4-删除职工函数实现" class="headerlink" title="11.4 删除职工函数实现"></a>11.4 删除职工函数实现</h2><p>在workerManager.cpp中实现成员函数：<code>voic del_Emp( );</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除职工</span></span><br><span class="line"><span class="keyword">void</span> workerManager::del_Emp()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件不存在或者数据为空&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> id = <span class="number">0</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入需要删除的id号：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; id;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> ret = <span class="keyword">this</span>-&gt;isExist(id);</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入的id有误或者不存在！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = ret; i &lt; <span class="keyword">this</span>-&gt;m_Empnum - <span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//数据前移</span></span><br><span class="line">                <span class="keyword">this</span>-&gt;m_Emparray[i] = <span class="keyword">this</span>-&gt;m_Emparray[i + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//更新数组中记录人员个数</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;m_Empnum--;    </span><br><span class="line"></span><br><span class="line">            <span class="comment">//保存数据</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;save();</span><br><span class="line"></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;删除成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-5-测试删除职工"><a href="#11-5-测试删除职工" class="headerlink" title="11.5 测试删除职工"></a>11.5 测试删除职工</h2><p>在main函数分支3选项中，调用删除职工接口 <img src="http://image.camcad.cn/2020/06/2020061502474579-797x1024.jpg"> 测试1-删除不存在的职工情况 <img src="http://image.camcad.cn/2020/06/2020061502492790.jpg"> 测试2-删除存在的职工情况 <img src="http://image.camcad.cn/2020/06/2020061502510463-1024x648.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统13：显示职工</title>
      <link href="/post/410390e.html"/>
      <url>/post/410390e.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="10、显示职工"><a href="#10、显示职工" class="headerlink" title="10、显示职工"></a>10、显示职工</h1><p><strong>功能描述：</strong>显示当前所有职工信息。</p><h2 id="10-1-显示职工函数声明"><a href="#10-1-显示职工函数声明" class="headerlink" title="10.1 显示职工函数声明"></a>10.1 显示职工函数声明</h2><p>在workerManager.h中添加成员函数<code>void show_Emp( );</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示职工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_Emp</span>()</span>;</span><br></pre></td></tr></table></figure><h3 id="10-2-显示职工函数实现"><a href="#10-2-显示职工函数实现" class="headerlink" title="10.2 显示职工函数实现"></a>10.2 显示职工函数实现</h3><p>在workerManager.cpp中实现成员函数<code>void show_Emp( );</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示职工</span></span><br><span class="line"><span class="keyword">void</span> workerManager::show_Emp()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_FileIsEmpty)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;数据库文件不存在或者记录为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Empnum; i++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>-&gt;m_Emparray[i]-&gt;showInfo();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-3-测试显示职工"><a href="#10-3-测试显示职工" class="headerlink" title="10.3 测试显示职工"></a>10.3 测试显示职工</h3><p>在main函数分支2选项中，调用显示职工接口<br><img src="http://image.camcad.cn/2020/06/2020061409565759-879x1024.jpg"> 测试分别测试文件为空和文件不为空是两种情况 测试效果： 测试1-文件不存在或者空情况 <img src="http://image.camcad.cn/2020/06/202006140952389-1024x646.jpg"> 测试2-文件存在且有记录情况 <img src="http://image.camcad.cn/2020/06/202006140954382-1024x420.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统12：文件交互（读文件）</title>
      <link href="/post/dd6cfc14.html"/>
      <url>/post/dd6cfc14.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="9、文件交互-读文件"><a href="#9、文件交互-读文件" class="headerlink" title="9、文件交互-读文件"></a>9、文件交互-读文件</h1><p><strong>功能描述：</strong>将文件中的内容读取到程序中 虽然我们实现了添加职工后保存到文件的操作，但是每次开始运行程序，并没有将文件中数据读取到程序中而我们的程序功能中还有清空文件的需求 <strong>因此构造函数初始化数据的情况分为三种：</strong></p><ul><li>1.第一次使用，文件未创建</li><li>2.文件存在，但是数据被用户清空</li><li>3.文件存在，并且保存职工的所有数据</li></ul><h2 id="9-1-文件未创建"><a href="#9-1-文件未创建" class="headerlink" title="9.1 文件未创建"></a>9.1 文件未创建</h2><p>在workerManager.h中添加新的成员属性<code>m_FileIsEmpty标志文件是否为空</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//标志文件是否为空</span></span><br><span class="line"><span class="type">bool</span> m_FileIsEmpty;</span><br></pre></td></tr></table></figure><p>修改WorkerManager.cpp中构造函数代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">workerManager::workerManager()</span><br><span class="line">&#123;</span><br><span class="line">    ifstream ios;</span><br><span class="line"></span><br><span class="line">    ios.open(FILENAME, ios::in);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件不存在情况</span></span><br><span class="line">    <span class="keyword">if</span> (!ios.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;!!!!数据库文件不存在!!!!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//测试输出</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        this-&gt;m_Empnum = <span class="number">0</span>;                  <span class="comment">//初始化人数</span></span><br><span class="line">        this-&gt;m_Emparray = <span class="literal">NULL</span>;         <span class="comment">//员工数组的指针</span></span><br><span class="line">        this-&gt;m_FileIsEmpty = <span class="literal">true</span>;          <span class="comment">//初始化文件为空标志</span></span><br><span class="line">        ios.close();                        <span class="comment">//关闭文件</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ios.close();                        <span class="comment">//关闭文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除文件后，测试文件不存在时初始化数据功能。"><a href="#删除文件后，测试文件不存在时初始化数据功能。" class="headerlink" title="删除文件后，测试文件不存在时初始化数据功能。"></a>删除文件后，测试文件不存在时初始化数据功能。</h4><h2 id="9-2-文件存在且数据为空"><a href="#9-2-文件存在且数据为空" class="headerlink" title="9.2 文件存在且数据为空"></a>9.2 文件存在且数据为空</h2><p>在workerManager.cpp中的构造函数追加代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.文件存在，数据为空</span></span><br><span class="line"><span class="type">char</span> ch;    <span class="comment">//定义字符</span></span><br><span class="line">ifs &gt;&gt; ch;    <span class="comment">//右移读取一个字符</span></span><br><span class="line"><span class="keyword">if</span> (ifs.eof())  <span class="comment">//如果文件没有记录  </span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;!!!!文件为空!!!!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//测试输出</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    this-&gt;m_Empnum = <span class="number">0</span>;                  <span class="comment">//初始化人数</span></span><br><span class="line">    this-&gt;m_Emparray = <span class="literal">NULL</span>;         <span class="comment">//员工数组的指针</span></span><br><span class="line">    this-&gt;m_FileIsEmpty = <span class="literal">true</span>;          <span class="comment">//初始化文件为空标志</span></span><br><span class="line">    ifs.close();                        <span class="comment">//关闭文件</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>追加代码位置如图： <img src="http://image.camcad.cn/2020/06/2020061315311494-1024x825.jpg"> 将文件创建后清空文件内容，并测试该情况下初始化功能。</p><p>我们发现文件不存在或者为空m_FileIsEmpty判断文件是否为空的标志都为真，那何时为假？ 成功添加职工后，应该更改文件下为空的标志 在<code>void WorkerManager::ADD_Emp( )</code>成员函数中添加</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新职工不为空标志</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_FileIsEmpty = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p><img src="http://image.camcad.cn/2020/06/2020061315371694.jpg"></p><h2 id="9-3-文件存在，并且保存职工的所有数据"><a href="#9-3-文件存在，并且保存职工的所有数据" class="headerlink" title="9.3 文件存在，并且保存职工的所有数据"></a>9.3 文件存在，并且保存职工的所有数据</h2><h3 id="9-3-1-获取记录的职工人数"><a href="#9-3-1-获取记录的职工人数" class="headerlink" title="9.3.1 获取记录的职工人数"></a>9.3.1 获取记录的职工人数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//总计人数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_EmpNum</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>在workerManager.cpp中实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//总计人数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">workerManager::get_EmpNum</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ifstream ifs;</span><br><span class="line">    ifs.open(FILENAME, ios::in);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="type">int</span> deptId;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; deptId)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//统计人数变量</span></span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在workerManager.cpp构造函数中继续追加代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.文件存在，并且记录数据</span></span><br><span class="line"><span class="type">int</span> num = this-&gt;get_EmpNum();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;职工人数为：&quot;</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">//测试代码</span></span><br><span class="line">this-&gt;m_Empnum = num;    <span class="comment">//更新成员属性</span></span><br></pre></td></tr></table></figure><p>手动添加一些职工数据，测试获取职工数量函数<br><img src="http://image.camcad.cn/2020/06/202006131613565.jpg"><br><img src="http://image.camcad.cn/2020/06/2020061316153426-1024x565.jpg"></p><h3 id="9-3-2-初始化数组"><a href="#9-3-2-初始化数组" class="headerlink" title="9.3.2 初始化数组"></a>9.3.2 初始化数组</h3><p>根据职工的数据，初始化workerManager中的Worker**m_EmpArray指针。 在WorkerManager.h中添加函数<code>void init_Emp( );</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化数据库</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_Emp</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>在WorkerManager.cpp中实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化数据库</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">workerManager::init_Emp</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ifstream ifs;</span><br><span class="line">    ifs.open(FILENAME, ios::in);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="type">int</span> deptId;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; id &amp;&amp; ifs &gt;&gt; name &amp;&amp; ifs &gt;&gt; deptId)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        Worker* worker = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (deptId==<span class="number">1</span>)      <span class="comment">//员工</span></span><br><span class="line">        &#123;</span><br><span class="line">            worker = new Employee(id, name, deptId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (deptId==<span class="number">2</span>) <span class="comment">//经理</span></span><br><span class="line">        &#123;</span><br><span class="line">            worker = new Manager(id, name, deptId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (deptId==<span class="number">3</span>) <span class="comment">//总裁</span></span><br><span class="line">        &#123;</span><br><span class="line">            worker = new Boss(id, name, deptId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化数据</span></span><br><span class="line">        this-&gt;m_Emparray[index] = worker;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在workerManager.cpp构造函数中追加代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开辟空间</span></span><br><span class="line">this-&gt;m_Emparray = new Worker*[this-&gt;m_Empnum];</span><br><span class="line"></span><br><span class="line"><span class="comment">//将文件中的数据，存到数组中</span></span><br><span class="line">this-&gt;init_Emp();</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; this-&gt;m_Empnum; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;职工编号：&quot;</span> &lt;&lt; this-&gt;m_Emparray[i]-&gt;m_Id &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">        &lt;&lt; <span class="string">&quot;职工姓名：&quot;</span> &lt;&lt; this-&gt;m_Emparray[i]-&gt;m_Name &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">        &lt;&lt; <span class="string">&quot;所在部门：&quot;</span> &lt;&lt; this-&gt;m_Emparray[i]-&gt;m_DeptId &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，测试从文件中获取的数据<br><img src="http://image.camcad.cn/2020/06/2020061407561119-1024x578.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统11：文件交互（写文件）</title>
      <link href="/post/e692a636.html"/>
      <url>/post/e692a636.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="8、文件交互-写文件"><a href="#8、文件交互-写文件" class="headerlink" title="8、文件交互-写文件"></a>8、文件交互-写文件</h1><p><strong>功能描述：</strong>对文件进行读写 在上一个添加功能中，我们只是将所有的数据添加到了内存中，一旦程序结束就无法保存了。 因此文件管理类中需要一个与文件进行交互的功能，对于文件进行读写操作。</p><h2 id="8-1设定文件路径"><a href="#8-1设定文件路径" class="headerlink" title="8.1设定文件路径"></a>8.1设定文件路径</h2><p>首先我们将文件路径，在workerManager.h中添加宏常量，并且包含头文件fstream。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILENAME <span class="string">&quot;empFile.dat&quot;</span></span></span><br></pre></td></tr></table></figure><h2 id="8-2-成员函数声明"><a href="#8-2-成员函数声明" class="headerlink" title="8.2 成员函数声明"></a>8.2 成员函数声明</h2><p>在workerManager.h中类里添加成员函数<code>void save( )</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h2 id="8-3-保存文件功能实现"><a href="#8-3-保存文件功能实现" class="headerlink" title="8.3 保存文件功能实现"></a>8.3 保存文件功能实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">workerManager::save</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.增加头文件</span></span><br><span class="line">    <span class="comment">//2.创建流文件</span></span><br><span class="line">    ofstream ofs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.创建文本--写文件</span></span><br><span class="line">    ofs.open(FILENAME, ios::out);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.输入数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; this-&gt;m_Empnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ofs &lt;&lt; this-&gt;m_Emparray[i]-&gt;m_Id &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">            &lt;&lt; this-&gt;m_Emparray[i]-&gt;m_Name &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">            &lt;&lt; this-&gt;m_Emparray[i]-&gt;m_DeptId &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.关闭文本</span></span><br><span class="line">    ofs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-4-保存文件功能测试"><a href="#8-4-保存文件功能测试" class="headerlink" title="8.4 保存文件功能测试"></a>8.4 保存文件功能测试</h2><p>在添加职工功能中添加成功后添加保存数据函数<code>void save( )</code><br><img src="http://image.camcad.cn/2020/06/2020061307024011.jpg"> </p><p>再次运行代码，添加职工 <img src="http://image.camcad.cn/2020/06/2020061307063256-853x1024.jpg"> </p><p>同级目录下多出文件，并且保存了添加的信息 <img src="http://image.camcad.cn/2020/06/2020061307093886-1024x704.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统10：添加职工（功能分析）</title>
      <link href="/post/d9135.html"/>
      <url>/post/d9135.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="7、添加职工"><a href="#7、添加职工" class="headerlink" title="7、添加职工"></a>7、添加职工</h1><p><strong>功能描述：</strong>批量添加职工，并且保存到文件中</p><h2 id="7-1-功能分析"><a href="#7-1-功能分析" class="headerlink" title="7.1 功能分析"></a>7.1 功能分析</h2><p><strong>分析：</strong> 用户在批量创建时，可能会创建不同种类的职工。 如果想将所有不同种类的员工都放入一个数组中，可以将所有员工的指针维护到一个数组里。 如果想想在程序中维护这个不定长度的数组，可以将数组创建到堆区，并利用Worker＊＊的指针维护。<br><img src="http://image.camcad.cn/2020/06/2020061303183239-1024x335.jpg"></p><h2 id="7-2-功能实现"><a href="#7-2-功能实现" class="headerlink" title="7.2 功能实现"></a>7.2 功能实现</h2><p>在WorkerManager.h头文件中添加中成员属性代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//记录文件中的人数个数</span></span><br><span class="line"><span class="type">int</span> m_Empnum;</span><br><span class="line"></span><br><span class="line"><span class="comment">//员工数组的指针</span></span><br><span class="line">Worker **m_Emparray;</span><br></pre></td></tr></table></figure><p>在workerManager.cpp构造函数中初始化属性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">workerManager::workerManager()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化人数</span></span><br><span class="line">    this-&gt;m_Empnum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//员工数组的指针</span></span><br><span class="line">    this-&gt;m_Emparray = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在workerManager.h中添加成员函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加职工</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_Emp</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>workerManager.cpp中实现该函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加职工</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">workerManager::add_Emp</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入需要增加的人员数量&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="type">int</span> addnum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; addnum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (addnum &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//计算新空间大小</span></span><br><span class="line">        <span class="type">int</span> newsize = addnum + this-&gt;m_Empnum;       <span class="comment">//新空间人数=原来记录人数+新增人数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//开辟新空间</span></span><br><span class="line">        Worker **newSpace = new Worker*[newsize];   </span><br><span class="line"></span><br><span class="line">        <span class="comment">//将原空间下的内容放到新空间下</span></span><br><span class="line">        <span class="keyword">if</span> (this-&gt;m_Emparray != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; this-&gt;m_Empnum; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                newSpace[i] = this-&gt;m_Emparray[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输入新数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; addnum; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> id;         <span class="comment">//职工编号</span></span><br><span class="line">            <span class="built_in">string</span> name;    <span class="comment">//职工姓名</span></span><br><span class="line">            <span class="type">int</span> deptId;     <span class="comment">//部门选择</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个新职工编号&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个新职工姓名&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个新职工岗位,对应以下选择&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1、员工\n2、经理\n3、总裁&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; deptId;</span><br><span class="line"></span><br><span class="line">            Worker *worker = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">switch</span> (deptId)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                worker = new Employee(id, name, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                worker = new Manager(id, name, <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                worker = new Boss(id, name, <span class="number">3</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将创建职工职责，保存到数组中</span></span><br><span class="line">            newSpace[this-&gt;m_Empnum + i] = worker;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放原有空间</span></span><br><span class="line">        delete[] this-&gt;m_Emparray;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更改新空间的指向</span></span><br><span class="line">        this-&gt;m_Emparray = newSpace;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新新的职工人数</span></span><br><span class="line">        this-&gt;m_Empnum = newsize;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//提示信息</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成功添加&quot;</span> &lt;&lt; addnum &lt;&lt; <span class="string">&quot;名新职工&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入的数据有误，请重新输入&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在workerManager.cpp的析构函数中，释放堆区数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">workerManager::~workerManager()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (this-&gt;m_Emparray !=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        delete[] this-&gt;m_Emparray;</span><br><span class="line">        this-&gt;m_Emparray = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统09：测试多态</title>
      <link href="/post/617e186a.html"/>
      <url>/post/617e186a.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="6、创建职工类"><a href="#6、创建职工类" class="headerlink" title="6、创建职工类"></a>6、创建职工类</h1><h2 id="6-5-测试多态"><a href="#6-5-测试多态" class="headerlink" title="6.5 测试多态"></a>6.5 测试多态</h2><p>在职工管理系统.cpp中添加测试函数，并且运行能够产生多态。</p><h3 id="测试代码如下："><a href="#测试代码如下：" class="headerlink" title="测试代码如下："></a>测试代码如下：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;workerManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;worker.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;employee.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;manager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;boss.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//测试代码</span></span><br><span class="line">    Worker *w = <span class="literal">NULL</span>;</span><br><span class="line">    w = new Employee(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    w-&gt;showInfo();</span><br><span class="line">    delete w;</span><br><span class="line"></span><br><span class="line">    w = new Manager(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    w-&gt;showInfo();</span><br><span class="line">    delete w;</span><br><span class="line"></span><br><span class="line">    w = new Boss(<span class="number">3</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">3</span>);</span><br><span class="line">    w-&gt;showInfo();</span><br><span class="line">    delete w;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//请按任意键继续...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译执行结果如下："><a href="#编译执行结果如下：" class="headerlink" title="编译执行结果如下："></a>编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020061223230993-1024x275.jpg"> 测试成功后，测试代码可以注释保留，或者选择删除。</p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统08：创建职工类（创建总裁类）</title>
      <link href="/post/d918eefa.html"/>
      <url>/post/d918eefa.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="6、创建职工类"><a href="#6、创建职工类" class="headerlink" title="6、创建职工类"></a>6、创建职工类</h1><h2 id="6-4-创建总裁类"><a href="#6-4-创建总裁类" class="headerlink" title="6.4 创建总裁类"></a>6.4 创建总裁类</h2><p>老板类继承职工抽象类，并重写父类中纯虚函数，和普通员工类似。 在头文件和源文件的文件夹下分别创建boss.h和boss.cpp文件。</p><h3 id="boss-h中代码如下："><a href="#boss-h中代码如下：" class="headerlink" title="boss.h中代码如下："></a>boss.h中代码如下：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;worker.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//总裁</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boss</span> :</span>public Worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    Boss(<span class="type">int</span> id, <span class="built_in">string</span> name, <span class="type">int</span> eptId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//个人信息描述</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">showInfo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取岗位名称</span></span><br><span class="line">    virtual <span class="built_in">string</span> <span class="title function_">getDeptName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="boss-cpp中代码如下："><a href="#boss-cpp中代码如下：" class="headerlink" title="boss.cpp中代码如下："></a>boss.cpp中代码如下：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;boss.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Boss::Boss(<span class="type">int</span> id, <span class="built_in">string</span> name, <span class="type">int</span> dptId)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;m_Id = id;</span><br><span class="line">    this-&gt;m_Name = name;</span><br><span class="line">    this-&gt;m_DeptId = dptId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//个人信息描述</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Boss::showInfo</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;职工编号：&quot;</span> &lt;&lt; m_Id</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\t职工姓名：&quot;</span> &lt;&lt; m_Name</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\t岗位：&quot;</span> &lt;&lt; this-&gt;getDeptName()</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\t岗位职责：管理公司所有事务&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="built_in">string</span> <span class="title function_">Boss::getDeptName</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;总裁&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统07：创建职工类（创建经理类）</title>
      <link href="/post/b9fc9be6.html"/>
      <url>/post/b9fc9be6.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="6、创建职工类"><a href="#6、创建职工类" class="headerlink" title="6、创建职工类"></a>6、创建职工类</h1><h2 id="6-3-创建经理类"><a href="#6-3-创建经理类" class="headerlink" title="6.3 创建经理类"></a>6.3 创建经理类</h2><p>经理类继承职工抽象类，并重写父类中纯虚函数，和普通员工类似。 在头文件和源文件的文件夹下分别创建manager.h和manager.cpp文件</p><h3 id="manager-h中代码如下："><a href="#manager-h中代码如下：" class="headerlink" title="manager.h中代码如下："></a>manager.h中代码如下：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;worker.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//经理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span>:</span>public Worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    Manager(<span class="type">int</span> id, <span class="built_in">string</span> name, <span class="type">int</span> eptId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//个人信息描述</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">showInfo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取岗位名称</span></span><br><span class="line">    virtual <span class="built_in">string</span> <span class="title function_">getDeptName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="manager-cpp中代码如下："><a href="#manager-cpp中代码如下：" class="headerlink" title="manager.cpp中代码如下："></a>manager.cpp中代码如下：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;manager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Manager::Manager(<span class="type">int</span> id, <span class="built_in">string</span> name, <span class="type">int</span> dptId)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;m_Id = id;</span><br><span class="line">    this-&gt;m_Name = name;</span><br><span class="line">    this-&gt;m_DeptId = dptId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//个人信息描述</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Manager::showInfo</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;职工编号：&quot;</span> &lt;&lt; m_Id</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\t职工姓名：&quot;</span> &lt;&lt; m_Name</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\t岗位：&quot;</span> &lt;&lt; this-&gt;getDeptName()</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\t岗位职责：完成老板交给的任务，并下发任务给员工&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="built_in">string</span> <span class="title function_">Manager::getDeptName</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;经理&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统06：创建职工类</title>
      <link href="/post/b86aec87.html"/>
      <url>/post/b86aec87.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="6、创建职工类"><a href="#6、创建职工类" class="headerlink" title="6、创建职工类"></a>6、创建职工类</h1><h2 id="6-1-创建职工抽象类"><a href="#6-1-创建职工抽象类" class="headerlink" title="6.1 创建职工抽象类"></a>6.1 创建职工抽象类</h2><p>**职工的分类为:**普通员工、经理、老板 将三种职工抽象到一个类（worker）中，利用多态管理不同职工种类。 职工的属性为：职工编号、职工姓名、职工所在部门编号。 职工的行为：岗位职责信息描述，获取岗位名称</p><h3 id="头文件文件夹下创建文件worker-h-文件并且添加如下代码："><a href="#头文件文件夹下创建文件worker-h-文件并且添加如下代码：" class="headerlink" title="头文件文件夹下创建文件worker.h 文件并且添加如下代码："></a>头文件文件夹下创建文件worker.h 文件并且添加如下代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//职工抽象基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//个人信息描述</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">showInfo</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取岗位名称</span></span><br><span class="line">    virtual <span class="built_in">string</span> <span class="title function_">getDeptName</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//职工编号</span></span><br><span class="line">    <span class="type">int</span> m_Id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//职工姓名</span></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//职工所在部门名称编号</span></span><br><span class="line">    <span class="type">int</span> m_DeptId;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="6-2创建普通员工类"><a href="#6-2创建普通员工类" class="headerlink" title="6.2创建普通员工类"></a>6.2创建普通员工类</h2><p>普通员工类继承职工抽象类，并重写父类中纯虚函数，在头文件和源文件的文件夹下分别创建employee.h和employee.cpp文件</p><h3 id="employee-h中代码如下"><a href="#employee-h中代码如下" class="headerlink" title="employee.h中代码如下"></a>employee.h中代码如下</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;worker.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//员工类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> :</span>public Worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    Employee(<span class="type">int</span> id, <span class="built_in">string</span> name, <span class="type">int</span> eptId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//个人信息描述</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">showInfo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取岗位名称</span></span><br><span class="line">    virtual <span class="built_in">string</span> <span class="title function_">getDeptName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="employee-cpp中代码如下"><a href="#employee-cpp中代码如下" class="headerlink" title="employee.cpp中代码如下"></a>employee.cpp中代码如下</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;employee.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Employee::Employee(<span class="type">int</span> id, <span class="built_in">string</span> name, <span class="type">int</span> dptId)</span><br><span class="line">&#123;</span><br><span class="line">    this-&gt;m_Id = id;</span><br><span class="line">    this-&gt;m_Name = name;</span><br><span class="line">    this-&gt;m_DeptId = dptId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//个人信息描述</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Employee::showInfo</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;职工编号：&quot;</span> &lt;&lt; m_Id</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\t职工姓名：&quot;</span> &lt;&lt; m_Name</span><br><span class="line">        &lt;&lt; <span class="string">&quot;\t岗位：&quot;</span> &lt;&lt; this-&gt;getDeptName() </span><br><span class="line">        &lt;&lt; <span class="string">&quot;\t岗位职责：完成经理交给的任务&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取岗位名称</span></span><br><span class="line"><span class="built_in">string</span> <span class="title function_">Employee::getDeptName</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>(<span class="string">&quot;员工&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统05：退出功能</title>
      <link href="/post/b0cffca2.html"/>
      <url>/post/b0cffca2.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="5、退出功能"><a href="#5、退出功能" class="headerlink" title="5、退出功能"></a>5、退出功能</h1><h2 id="5-1-提供功能接口"><a href="#5-1-提供功能接口" class="headerlink" title="5.1 提供功能接口"></a>5.1 提供功能接口</h2><p>在main函数中提供分支选择，提供每个功能接口</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//实例化对象</span></span><br><span class="line">    workerManager wm;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> choice = <span class="number">0</span>;     <span class="comment">//用户选择初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        wm.show_Menu();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入你的选择&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; choice;</span><br><span class="line">        <span class="keyword">switch</span> (choice)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:     <span class="comment">//退出系统</span></span><br><span class="line">            wm.exitSystem();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:     <span class="comment">//增加职工</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:     <span class="comment">//显示职工</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:     <span class="comment">//删除职工</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:     <span class="comment">//修改职工</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:     <span class="comment">//查找职工</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:     <span class="comment">//编号排序</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:     <span class="comment">//清空文档</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);    <span class="comment">//清屏</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//请按任意键继续...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-实现退出功能"><a href="#5-2-实现退出功能" class="headerlink" title="5.2 实现退出功能"></a>5.2 实现退出功能</h2><p>在workerManager.h中提供退出系统的成员函数：<code>void exitSystem( );</code><br><img src="http://image.camcad.cn/2020/06/2020061208190949.jpg"> 在workerManager.cpp中提供具体的功能实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//退出系统</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">workerManager::exitSystem</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎下次使用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);    <span class="comment">//退出程序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-测试功能"><a href="#5-3-测试功能" class="headerlink" title="5.3 测试功能"></a>5.3 测试功能</h2><p>在main函数分支0选项中，调用退出程序 的接口。<br><img src="http://image.camcad.cn/2020/06/2020061208230372-923x1024.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统04：菜单功能</title>
      <link href="/post/835de141.html"/>
      <url>/post/835de141.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4、菜单功能"><a href="#4、菜单功能" class="headerlink" title="4、菜单功能"></a>4、菜单功能</h1><p>功能描述：与用户的沟通界面</p><h2 id="4-1-添加成员函数"><a href="#4-1-添加成员函数" class="headerlink" title="4.1 添加成员函数"></a>4.1 添加成员函数</h2><p>在管理类workerManager.h中添加成员函数<code>void show_Menu( );</code><br><img src="http://image.camcad.cn/2020/06/2020061207375575.jpg"></p><h2 id="4-2-菜单功能实现"><a href="#4-2-菜单功能实现" class="headerlink" title="4.2 菜单功能实现"></a>4.2 菜单功能实现</h2><p>在管理类workerManager.cpp中实现 show_Menu( )函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">workerManager::show_Menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;**************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*******  欢迎使用职工管理系统！ ******&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;**********  0.退出管理程序  **********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;**********  1.增加职工信息  **********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;**********  2.显示职工信息  **********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;**********  3.删除离职职工  **********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;**********  4.修改职工信息  **********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;**********  5.查找职工信息  **********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;**********  6.按照编号排序  **********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;**********  7.清空所有文档  **********&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;**************************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-测试菜单功能"><a href="#4-3-测试菜单功能" class="headerlink" title="4.3 测试菜单功能"></a>4.3 测试菜单功能</h2><p>在职工管理系统.cpp中测试菜单功能</p><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;workerManager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//实例化对象</span></span><br><span class="line">    workerManager wm;</span><br><span class="line">    wm.show_Menu();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h4><p><img src="http://image.camcad.cn/2020/06/2020061207425823.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统03：创建管理类</title>
      <link href="/post/5bcbd485.html"/>
      <url>/post/5bcbd485.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="3、创建管理类"><a href="#3、创建管理类" class="headerlink" title="3、创建管理类"></a>3、创建管理类</h1><p><strong>管理类负责的内容如下：</strong></p><ul><li>与用户的沟通菜单界面</li><li>对职工增删改查的操作</li><li>与文件的读写交互</li></ul><h2 id="3-1-创建文件"><a href="#3-1-创建文件" class="headerlink" title="3.1 创建文件"></a>3.1 创建文件</h2><p>在头文件和源文件的文件下分别创建workerManager.h和workerManager.cpp文件。 <img src="http://image.camcad.cn/2020/06/2020061207020490-1024x379.jpg"></p><h2 id="3-2-头文件实现"><a href="#3-2-头文件实现" class="headerlink" title="3.2 头文件实现"></a>3.2 头文件实现</h2><p>在workerManager.h中设计管理类，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once            <span class="comment">//防止头文件重复包含</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>       <span class="comment">//包含输入输出流 头文件</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;    <span class="comment">//使用标准命名空间</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">workerManager</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    workerManager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~workerManager();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="3-3-源文件实现"><a href="#3-3-源文件实现" class="headerlink" title="3.3 源文件实现"></a>3.3 源文件实现</h2><p>在workerManager.cpp中将构造和析构函数空实现补全。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;workerManager.h&quot;</span></span></span><br><span class="line">workerManager::workerManager()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">workerManager::~workerManager()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统02：创建项目</title>
      <link href="/post/b6a02408.html"/>
      <url>/post/b6a02408.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h1><p>创建项目步骤如下：</p><ul><li>创建新项目</li><li>添加文件</li></ul><h2 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h2><p>打开vs软件后，点击创建新项目，创建新的C++项目。 <img src="http://image.camcad.cn/2020/06/2020061206320776-1024x423.jpg"></p><h3 id="2-1-1-填写项目名称以及项目路径，点击确定"><a href="#2-1-1-填写项目名称以及项目路径，点击确定" class="headerlink" title="2.1.1 填写项目名称以及项目路径，点击确定"></a>2.1.1 填写项目名称以及项目路径，点击确定</h3><p><img src="http://image.camcad.cn/2020/06/2020061206334073-1024x627.jpg"></p><h2 id="2-2-添加文件"><a href="#2-2-添加文件" class="headerlink" title="2.2 添加文件"></a>2.2 添加文件</h2><h3 id="2-2-1-右键源文件，进行添加文件"><a href="#2-2-1-右键源文件，进行添加文件" class="headerlink" title="2.2.1 右键源文件，进行添加文件"></a>2.2.1 右键源文件，进行添加文件</h3><p><img src="http://image.camcad.cn/2020/06/2020061206362276-1024x467.jpg"> <img src="http://image.camcad.cn/2020/06/2020061206371915-1024x622.jpg"> <img src="http://image.camcad.cn/2020/06/2020061206375496-1024x421.jpg"></p><h3 id="2-2-2-至此，项目创建完毕。"><a href="#2-2-2-至此，项目创建完毕。" class="headerlink" title="2.2.2 至此，项目创建完毕。"></a>2.2.2 至此，项目创建完毕。</h3>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职工管理系统01：管理系统需求</title>
      <link href="/post/953e7e3d.html"/>
      <url>/post/953e7e3d.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="1、管理系统需求"><a href="#1、管理系统需求" class="headerlink" title="1、管理系统需求"></a>1、管理系统需求</h1><p>职工管理系统可以用来管理公司内所有员工的信息。</p><p>本教程主要利用C++来实现一个基于多态的职工管理系统。</p><p>公司中职工分为三类：普通员工、经理、老板，显示信息时，需要显示职工编号、职工姓名、职工岗位以及职责。</p><h4 id="普通员工职责：完成经理交给的任务。"><a href="#普通员工职责：完成经理交给的任务。" class="headerlink" title="普通员工职责：完成经理交给的任务。"></a>普通员工职责：完成经理交给的任务。</h4><h4 id="经理职责：完成老板交给的任务，并下发任务给员工。"><a href="#经理职责：完成老板交给的任务，并下发任务给员工。" class="headerlink" title="经理职责：完成老板交给的任务，并下发任务给员工。"></a>经理职责：完成老板交给的任务，并下发任务给员工。</h4><h4 id="老板职责：管理公司所有事务。"><a href="#老板职责：管理公司所有事务。" class="headerlink" title="老板职责：管理公司所有事务。"></a>老板职责：管理公司所有事务。</h4><h2 id="管理系统中需要实现的功能如下："><a href="#管理系统中需要实现的功能如下：" class="headerlink" title="管理系统中需要实现的功能如下："></a>管理系统中需要实现的功能如下：</h2><ul><li>退出管理程序：退出当前管理系统</li><li>增加职工信息：实现批量添加职工功能，将信息录入文件中，职工信息为：职工编号、姓名、部门编号</li><li>显示职工信息：显示公司内部所有职工的信息</li><li>删除离职职工：按照编号删除指定的职工</li><li>修改职工信息：按照编号修改职工个人信息</li><li>查找职工信息：按照职工的编号或者职工的姓名进行查找相关的人员信息</li><li>按照编号排序：按照职工编号，进行排序，排序规则由用户指定</li><li>清空所有文档：清空文件中记录的所有职工信息（清空前需要再次确认，防止误删）</li></ul><h3 id="系统界面效果如下："><a href="#系统界面效果如下：" class="headerlink" title="系统界面效果如下："></a>系统界面效果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020061207314536.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识56：文件操作（二进制文件-读文件）</title>
      <link href="/post/24c85066.html"/>
      <url>/post/24c85066.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h1><h2 id="5-2-2-读文件"><a href="#5-2-2-读文件" class="headerlink" title="5.2.2 读文件"></a>5.2.2 读文件</h2><p>二进制方式读文件主要利用流对象调用成员函数read。 函数原型：<code>istream&amp; read(char *buffer,int len);</code> 参数解释：字符指针buffer指向内存中一段储存空间，len是读写的字节数。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cName 24</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    <span class="type">char</span> m_Name[cName];</span><br><span class="line">    <span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.加载头文件 &lt;fstream&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建流文件</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.打开文件</span></span><br><span class="line">    ifs.open(<span class="string">&quot;02.txt&quot;</span>, ios::in  ios::binary);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.判断文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文本文件不存在&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.读取内容</span></span><br><span class="line">    Person p;</span><br><span class="line">    ifs.read((<span class="type">char</span>*)&amp;p, <span class="keyword">sizeof</span>(Person));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();   </span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020061009003538-1024x402.jpg"></p><h3 id="总结：文件输入流对象可以通过read函数，以二进制的方式读取数据。"><a href="#总结：文件输入流对象可以通过read函数，以二进制的方式读取数据。" class="headerlink" title="总结：文件输入流对象可以通过read函数，以二进制的方式读取数据。"></a>总结：文件输入流对象可以通过read函数，以二进制的方式读取数据。</h3>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识55：文件操作（二进制文件-写文件）</title>
      <link href="/post/b7952e98.html"/>
      <url>/post/b7952e98.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h1><p>以二进制的方式对文件进行读写操作 打开方式要指定为<code>iso::binary</code></p><h2 id="5-2-1-写文件"><a href="#5-2-1-写文件" class="headerlink" title="5.2.1 写文件"></a>5.2.1 写文件</h2><p>二进制方式写文件主要利用流对象调用成员函数<code>write</code> 函数原型：<code>ostream&amp; write(const char * buffer , int len);</code> 参数解释 ：字符指针buffer指向内存中一段存储空间，len是读写的字节数。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cName 24</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    <span class="type">char</span> m_Name[cName];</span><br><span class="line">    <span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.加载头文件 &lt;fstream&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建流文件</span></span><br><span class="line">    ofstream ofs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.打开文件</span></span><br><span class="line">    ofs.open(<span class="string">&quot;02.txt&quot;</span>, ios::out  ios::binary);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.写入内容</span></span><br><span class="line">    Person p = &#123; <span class="string">&quot;李四&quot;</span>,<span class="number">18</span> &#125;;</span><br><span class="line">    ofs.write((<span class="type">const</span> <span class="type">char</span>*)&amp;p, <span class="keyword">sizeof</span>(Person));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.关闭文件</span></span><br><span class="line">    ofs.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();   <span class="comment">//写内容</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果（打开文本文件）如下"><a href="#以上代码编译执行结果（打开文本文件）如下" class="headerlink" title="以上代码编译执行结果（打开文本文件）如下:"></a>以上代码编译执行结果（打开文本文件）如下:</h3><p><img src="http://image.camcad.cn/2020/06/2020061008350891-1024x495.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>文件输出流对象可以通过write函数，以二进制方式写入数据。</p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识54：文件操作（文本文件-读文件）</title>
      <link href="/post/49557b6.html"/>
      <url>/post/49557b6.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="5-1-文本文件"><a href="#5-1-文本文件" class="headerlink" title="5.1 文本文件"></a>5.1 文本文件</h1><h2 id="5-1-2-读文件"><a href="#5-1-2-读文件" class="headerlink" title="5.1.2 读文件"></a>5.1.2 读文件</h2><p>读文件与写文件步骤相似，但是读取方式相对于比较多。</p><p>读文件步骤如下： 1.包含头文件 ＃include ＜fstream＞</p><p>2.创建流对象 ifstream ifs;</p><p>3.打开文件并判断文件是否打开成功 ifs.open(“文件路径”，打开方式);</p><p>4.读数据 四种方式读取</p><p>5.关闭文件 ifs.close();</p><h3 id="示例代码（读文件）："><a href="#示例代码（读文件）：" class="headerlink" title="示例代码（读文件）："></a>示例代码（读文件）：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.加载头文件 &lt;fstream&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建流文件</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.打开文件</span></span><br><span class="line">    ifs.open(<span class="string">&quot;01.txt&quot;</span>,ios::in);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.判断文本文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;文本文件不存在！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.读取内容</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //方法一</span></span><br><span class="line"><span class="comment">    char content[1024] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">    while (ifs&gt;&gt;content)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; content &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法二</span></span><br><span class="line">    <span class="built_in">string</span> content;</span><br><span class="line">    <span class="keyword">while</span> (getline(ifs,content))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; content &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //方法三</span></span><br><span class="line"><span class="comment">    char content[1024] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">    while (ifs.getline(content, sizeof(content)))</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; content &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //方法四</span></span><br><span class="line"><span class="comment">    char c;</span></span><br><span class="line"><span class="comment">    while ((c=ifs.get()) != EOF )   //EOF： end of file（文件尾部）</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; c;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();   <span class="comment">//写内容</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020061004290179-1024x501.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>读文件可以利用ifstream,或者fstream类</li><li>利用is_open函数可以判断文件是否打开成功</li><li>close关闭文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识53：文件操作（文本文件-写文件）</title>
      <link href="/post/fa9b9dc9.html"/>
      <url>/post/fa9b9dc9.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5 文件操作"></a>5 文件操作</h1><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放。 通过<strong>文件操作可以将数据持久化</strong>。 C++中对文件操作需要包含头文件 ＜fstream＞</p><p>文件类型分为两种：</p><ul><li><strong>文件文件：</strong>文件以文本的<strong>ASCII码</strong>形式存储在计算机中。</li><li><strong>二进制文件：</strong>文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们。</li></ul><p>操作文件的三大类：</p><ul><li>ofstream：写操作</li><li>ifstream：读操作</li><li>fstream：读写操作</li></ul><h1 id="5-1-文本文件"><a href="#5-1-文本文件" class="headerlink" title="5.1 文本文件"></a>5.1 文本文件</h1><h2 id="5-1-1-写文件"><a href="#5-1-1-写文件" class="headerlink" title="5.1.1 写文件"></a>5.1.1 写文件</h2><h3 id="写文件步骤如下："><a href="#写文件步骤如下：" class="headerlink" title="写文件步骤如下："></a>写文件步骤如下：</h3><p>1.包含头文件 ＃include ＜fstream＞</p><p>2.创建流对象 ofstream ofs;</p><p>3.打开文件 ofs.open(“文件路径”,打开方式);</p><p>4.写数据 ofs&lt;&lt;”写入的数据”;</p><p>5.关闭文件 ofs.close();</p><p><strong>文件打开方式：</strong></p><table><thead><tr><th align="center">打开方式</th><th align="left">解释</th></tr></thead><tbody><tr><td align="center">ios::in</td><td align="left">为读文件而打开文件</td></tr><tr><td align="center">iso::out</td><td align="left">为写文件而打开文件</td></tr><tr><td align="center">ios::ate</td><td align="left">初始位置：文件尾</td></tr><tr><td align="center">ios::trunc</td><td align="left">如果文件存在先删除，再创建</td></tr><tr><td align="center">ios::binary</td><td align="left">二进制方式</td></tr></tbody></table><h4 id="注意：文件打开方式可以配合使用，利用-操作符。"><a href="#注意：文件打开方式可以配合使用，利用-操作符。" class="headerlink" title="注意：文件打开方式可以配合使用，利用 操作符。"></a>注意：文件打开方式可以配合使用，利用 操作符。</h4><h4 id="例如：用二进制方式写文件：ios-binary-ios-out"><a href="#例如：用二进制方式写文件：ios-binary-ios-out" class="headerlink" title="例如：用二进制方式写文件：ios::binary ios::out"></a>例如：用二进制方式写文件：<code>ios::binary ios::out</code></h4><h3 id="示例代码（写文件）："><a href="#示例代码（写文件）：" class="headerlink" title="示例代码（写文件）："></a>示例代码（写文件）：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.加载头文件 &lt;fstream&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建流文件</span></span><br><span class="line">    ofstream ofs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开文件</span></span><br><span class="line">    ofs.open(<span class="string">&quot;01.txt&quot;</span>,ios::out);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入内容</span></span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;姓名：李四&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;年龄：20&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;身高：170&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ofs.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();   <span class="comment">//写内容</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下（打开文本文件）："><a href="#以上代码编译执行结果如下（打开文本文件）：" class="headerlink" title="以上代码编译执行结果如下（打开文本文件）："></a>以上代码编译执行结果如下（打开文本文件）：</h3><p><img src="http://image.camcad.cn/2020/06/2020061003223974.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>文件操作必须包含头文件fstream</li><li>读文件可以利用ofstream或者fstream类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识52：类和对象（多态-多态案例三_电脑组装）</title>
      <link href="/post/5b82a581.html"/>
      <url>/post/5b82a581.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7 多态"></a>4.7 多态</h1><h2 id="4-7-6-多态案例三-电脑组装"><a href="#4-7-6-多态案例三-电脑组装" class="headerlink" title="4.7.6 多态案例三-电脑组装"></a>4.7.6 多态案例三-电脑组装</h2><p><strong>案例描述：</strong> 电脑主要组成部件为CPU（用于计算），GPU（用于显示），内存条（用于存储）。 将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和AMD厂商以及Lenove厂商。创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口。 测试时组装三台不同的电脑进行工作。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象CPU</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractCPU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">cpuCaculate</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象GPU</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractGPU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">gpuDisplay</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象内存卡</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractSD</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">sdStorage</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computers</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">    Computers(AbstractCPU *cpu, AbstractGPU *gpu, AbstractSD *sd)</span><br><span class="line">    &#123;</span><br><span class="line">        m_CPU = cpu;</span><br><span class="line">        m_GPU = gpu;</span><br><span class="line">        m_SD = sd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供工作函数</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">work</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_CPU-&gt;cpuCaculate();</span><br><span class="line">        m_GPU-&gt;gpuDisplay();</span><br><span class="line">        m_SD-&gt;sdStorage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~Computers()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_CPU !=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            delete m_CPU;</span><br><span class="line">            m_CPU = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m_GPU != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            delete m_GPU;</span><br><span class="line">            m_GPU = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m_SD != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            delete m_SD;</span><br><span class="line">            m_SD = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    AbstractCPU *m_CPU;</span><br><span class="line">    AbstractGPU *m_GPU;</span><br><span class="line">    AbstractSD  *m_SD;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Intel厂商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelCPU</span> :</span>public AbstractCPU</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">cpuCaculate</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel CPU计算中&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelGPU</span> :</span>public AbstractGPU</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">gpuDisplay</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel GPU显示中&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelSD</span> :</span>public AbstractSD</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">sdStorage</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Intel SD储存中&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lenovo厂商</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoCPU</span> :</span> public AbstractCPU</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">cpuCaculate</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo CPU正在计算&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoGPU</span> :</span>public AbstractGPU</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">gpuDisplay</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo GPU显示中&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LenovoSD</span> :</span>public AbstractSD</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">sdStorage</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Lenovo SD储存中&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//第一台电脑</span></span><br><span class="line">    Computers <span class="title function_">computers1</span><span class="params">(new IntelCPU, new IntelGPU, new IntelSD)</span>;</span><br><span class="line">    computers1.work();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二台电脑</span></span><br><span class="line">    AbstractCPU *LenovoCPU01 = new LenovoCPU;</span><br><span class="line">    AbstractGPU *LenovoGPU01 = new LenovoGPU;</span><br><span class="line">    AbstractSD *LenovoSD01 = new LenovoSD;</span><br><span class="line">    Computers *computers2 = new Computers(LenovoCPU01, LenovoGPU01, LenovoSD01);</span><br><span class="line">    computers2-&gt;work();</span><br><span class="line">    delete computers2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三台电脑</span></span><br><span class="line">    Computers <span class="title function_">computers3</span><span class="params">(new IntelCPU, new LenovoGPU, new IntelSD)</span>;</span><br><span class="line">    computers3.work();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h4><p><img src="http://image.camcad.cn/2020/06/2020060911084457-1024x555.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识51：类和对象（多态-虚析构和纯虚析构）</title>
      <link href="/post/78f7bf55.html"/>
      <url>/post/78f7bf55.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7 多态"></a>4.7 多态</h1><h2 id="4-7-5-虚析构得纯虚析构"><a href="#4-7-5-虚析构得纯虚析构" class="headerlink" title="4.7.5 虚析构得纯虚析构"></a>4.7.5 虚析构得纯虚析构</h2><p>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码。</p><p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong>。</p><p>虚析构和纯虚析构共性：</p><ul><li>可以解决父类指针释放子类对象</li><li>都需要有具体的函数实现</li></ul><p>虚析构和纯虚析构区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象。</li></ul><p>虚析构语法：<code>virtual ~类名( )&#123; &#125;</code> 纯虚析构语法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virtual ~类名( ) = <span class="number">0</span>;</span><br><span class="line">类名::~类名( )&#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类(饮料)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractAinmal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    AbstractAinmal()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;AbstractAinmal 构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">action</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //1.利用虚析构可以解决 父类指针释放子类对象时不干净问题</span></span><br><span class="line"><span class="comment">    virtual ~AbstractAinmal()</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; &quot;AbstractAinmal 虚析构函数&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.纯虚析构 需要声明也需要实现</span></span><br><span class="line">    <span class="comment">//有了纯虚析构之后，这个类也属于抽象类，无法实例化对象</span></span><br><span class="line">    virtual ~AbstractAinmal() = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">AbstractAinmal::~AbstractAinmal()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;AbstractAinmal 纯虚析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> :</span>public AbstractAinmal</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    Cat(<span class="built_in">string</span> name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Cat 构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        m_Name = new <span class="built_in">string</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">action</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *m_Name &lt;&lt; <span class="string">&quot;小猫在叫&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~Cat()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Cat 析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (m_Name != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            delete m_Name;</span><br><span class="line">            m_Name = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> *m_Name;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    AbstractAinmal *ainmal = new Cat(<span class="string">&quot;Toom：&quot;</span>);</span><br><span class="line">    ainmal-&gt;action();</span><br><span class="line">    delete ainmal;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060906485949-1024x469.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>1.虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</li><li>2.如果子类中没有堆区数据，可以不写虚析构或纯虚析构</li><li>3.拥有纯虚析构函数的类也属于抽象类</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识50：类和对象（多态-多态案例二_制作饮品）</title>
      <link href="/post/3996e7a6.html"/>
      <url>/post/3996e7a6.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7 多态"></a>4.7 多态</h1><h2 id="4-7-4-多态案例二-制作饰品"><a href="#4-7-4-多态案例二-制作饰品" class="headerlink" title="4.7.4 多态案例二_制作饰品"></a>4.7.4 多态案例二_制作饰品</h2><p><strong>案例描述：</strong> 制作饰品的大致流程为：煮水–&gt;冲泡–&gt;倒入杯中–&gt;加入辅料。</p><p>利用多态技术实现本案例，提供抽象制作 饮品基类，提供子类制作咖啡和茶叶。 <img src="http://image.camcad.cn/2020/06/2020060902412845-1024x350.jpg"></p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类(饮料)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractBeverages</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//煮水</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">water</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//冲泡</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">brewing</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//倒入杯中</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">pour</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入辅料</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">accessories</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//制作步骤</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">steps</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        water();</span><br><span class="line">        brewing();</span><br><span class="line">        pour();</span><br><span class="line">        accessories();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//咖啡类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffee</span>:</span>public AbstractBeverages</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//煮水</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">water</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.上等纯净水&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//冲泡</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">brewing</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.冲泡咖啡&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//倒入杯中</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">pour</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3.倒入咖啡杯中&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入辅料</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">accessories</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;4.加入少量白糖牛奶&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冲泡茶叶</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tea</span> :</span>public AbstractBeverages</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//煮水</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">water</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.极品山泉水&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//冲泡</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">brewing</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.冲泡茶叶&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//倒入杯中</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">pour</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3.倒入茶几中&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入辅料</span></span><br><span class="line">    virtual <span class="type">void</span> <span class="title function_">accessories</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;4.放入少量枸杞&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//制作饮料</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">makingDrinks</span><span class="params">(AbstractBeverages *<span class="built_in">abs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">abs</span>-&gt;steps();</span><br><span class="line">    delete <span class="built_in">abs</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//冲咖啡</span></span><br><span class="line">    makingDrinks(new Coffee);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;——————————&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//分割</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//冲泡茶</span></span><br><span class="line">    makingDrinks(new Tea);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译结果如下："><a href="#以上代码编译结果如下：" class="headerlink" title="以上代码编译结果如下："></a>以上代码编译结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060903223123-1024x557.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识49：类和对象（多态-纯虚函数和抽象类）</title>
      <link href="/post/9854c368.html"/>
      <url>/post/9854c368.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7 多态"></a>4.7 多态</h1><h2 id="4-7-3-纯虚函数和抽象类"><a href="#4-7-3-纯虚函数和抽象类" class="headerlink" title="4.7.3 纯虚函数和抽象类"></a>4.7.3 纯虚函数和抽象类</h2><p>在多态中，通常父类中的虚函数实现是毫无意义的，主要都是调用子类重写的内容。</p><p>因此可以将虚函数改为<strong>纯虚函数</strong>。</p><p><code>纯虚函数语法：virtual 返回值类型 函数名 (参数列表) = 0;</code></p><p>当类中有了纯虚函数，这个类也称为抽象类。</p><p><strong>抽象类特点：</strong></p><ul><li>无法实例化对象</li><li>子类必须重写抽象类中的纯虚函数，否则也属于抽象类。</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现计算器抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractComputers</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽象类：只要有一个纯虚函数，这个类称为抽象类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽象类特点：</span></span><br><span class="line">    <span class="comment">//1.无法实例化对象</span></span><br><span class="line">    <span class="comment">//2.抽象类的子类 必须要重写父类中的纯虚函数，否则也属于抽象类</span></span><br><span class="line"></span><br><span class="line">    virtual <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    <span class="type">double</span> m_num01;</span><br><span class="line">    <span class="type">double</span> m_num02;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">addComputers</span>:</span>public AbstractComputers</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> <span class="title function_">getResult</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>  m_num01 + m_num02;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//AbstractComputers ab; //抽象类是无法实例化对象</span></span><br><span class="line">    <span class="comment">//new AbstractComputers;    //抽象类是无法实例化对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//addComputers a;   //子类必须重写父类中的纯虚函数，否则无法实例化对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//加</span></span><br><span class="line">    AbstractComputers *add = new addComputers;</span><br><span class="line">    add-&gt;m_num01 = <span class="number">10</span>;</span><br><span class="line">    add-&gt;m_num02 = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; add-&gt;m_num01 &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; add-&gt;m_num02 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; add-&gt;getResult() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    delete add;     <span class="comment">//释放内存</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060902100292-1024x489.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识48：类和对象（多态-多态案例一计算机类）</title>
      <link href="/post/e0aaaf87.html"/>
      <url>/post/e0aaaf87.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7 多态"></a>4.7 多态</h1><h2 id="4-7-2-多态案例一-计算机类"><a href="#4-7-2-多态案例一-计算机类" class="headerlink" title="4.7.2 多态案例一_计算机类"></a>4.7.2 多态案例一_计算机类</h2><p><strong>案例描述：</strong> 分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类。</p><p><strong>多态的优点：</strong></p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><h2 id="普通写法（示例）"><a href="#普通写法（示例）" class="headerlink" title="普通写法（示例）"></a>普通写法（示例）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Computers</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    Computers(<span class="built_in">double</span> num01,<span class="built_in">double</span> num02)</span><br><span class="line">    &#123;</span><br><span class="line">        m_num01 = num01;</span><br><span class="line">        m_num02 = num02;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">double</span> <span class="title">getResult</span>(<span class="params"><span class="built_in">string</span> opre</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (opre==<span class="string">&quot;+&quot;</span>)                    <span class="comment">//加</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_num01 + m_num02;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opre == <span class="string">&quot;-&quot;</span>)         <span class="comment">//减</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_num01 - m_num02;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opre == <span class="string">&quot;*&quot;</span>)         <span class="comment">//乘</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_num01 * m_num02;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (opre == <span class="string">&quot;/&quot;</span>)         <span class="comment">//除</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_num01 / m_num02;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">double</span> m_num01;</span><br><span class="line">    <span class="built_in">double</span> m_num02;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//普通实现方式</span></span><br><span class="line">    <span class="function">Computers <span class="title">c</span>(<span class="params"><span class="number">10</span>, <span class="number">20</span></span>)</span>;</span><br><span class="line">    cout &lt;&lt; c.m_num01 &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; c.m_num02 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;+&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; c.m_num01 &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; c.m_num02 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;-&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; c.m_num01 &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; c.m_num02 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;*&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; c.m_num01 &lt;&lt; <span class="string">&quot; / &quot;</span> &lt;&lt; c.m_num02 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; c.getResult(<span class="string">&quot;/&quot;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h4><p><img src="http://image.camcad.cn/2020/06/2020060811310317-1024x442.jpg"></p><h3 id="普通写法-总结："><a href="#普通写法-总结：" class="headerlink" title="普通写法 总结："></a>普通写法 总结：</h3><ul><li>如果想扩展新的功能，需要修改源码</li><li>在做项目中 提倡 开闭原则</li><li><strong>开闭原则：</strong>对扩展进行开放，对修改进行关闭</li></ul><h2 id="多态写法（示例）"><a href="#多态写法（示例）" class="headerlink" title="多态写法（示例）"></a>多态写法（示例）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.代码组织结构清晰</span></span><br><span class="line"><span class="comment">2.可读性强</span></span><br><span class="line"><span class="comment">3.利于前期和后期的扩展以及维护</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现计算器抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">AbstractComputers</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">virtual</span> <span class="built_in">double</span> <span class="title">getResult</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">double</span> m_num01;</span><br><span class="line">    <span class="built_in">double</span> m_num02;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">addComputers</span>:<span class="title">public</span> <span class="title">AbstractComputers</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">double</span> <span class="title">getResult</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>  m_num01 + m_num02;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//减</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">subComputers</span> :<span class="title">public</span> <span class="title">AbstractComputers</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">double</span> <span class="title">getResult</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>  m_num01 - m_num02;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//乘</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">mulComputers</span> :<span class="title">public</span> <span class="title">AbstractComputers</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">double</span> <span class="title">getResult</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>  m_num01 * m_num02;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//除</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">divComputers</span> :<span class="title">public</span> <span class="title">AbstractComputers</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">double</span> <span class="title">getResult</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>  m_num01 / m_num02;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//加</span></span><br><span class="line">    AbstractComputers *<span class="keyword">add</span> = <span class="keyword">new</span> addComputers;</span><br><span class="line">    <span class="keyword">add</span>-&gt;m_num01 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">add</span>-&gt;m_num02 = <span class="number">20</span>;</span><br><span class="line">    cout &lt;&lt; <span class="keyword">add</span>-&gt;m_num01 &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; <span class="keyword">add</span>-&gt;m_num02 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; <span class="keyword">add</span>-&gt;getResult() &lt;&lt; endl;</span><br><span class="line">    delete <span class="keyword">add</span>;     <span class="comment">//释放内存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//减</span></span><br><span class="line">    <span class="keyword">add</span> = <span class="keyword">new</span> subComputers;</span><br><span class="line">    <span class="keyword">add</span>-&gt;m_num01 = <span class="number">10.5</span>;</span><br><span class="line">    <span class="keyword">add</span>-&gt;m_num02 = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="keyword">add</span>-&gt;m_num01 &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; <span class="keyword">add</span>-&gt;m_num02 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; <span class="keyword">add</span>-&gt;getResult() &lt;&lt; endl;</span><br><span class="line">    delete <span class="keyword">add</span>;     <span class="comment">//释放内存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//乘</span></span><br><span class="line">    <span class="keyword">add</span> = <span class="keyword">new</span> mulComputers;</span><br><span class="line">    <span class="keyword">add</span>-&gt;m_num01 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">add</span>-&gt;m_num02 = <span class="number">3.14</span>;</span><br><span class="line">    cout &lt;&lt; <span class="keyword">add</span>-&gt;m_num01 &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; <span class="keyword">add</span>-&gt;m_num02 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; <span class="keyword">add</span>-&gt;getResult() &lt;&lt; endl;</span><br><span class="line">    delete <span class="keyword">add</span>;     <span class="comment">//释放内存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//除</span></span><br><span class="line">    <span class="keyword">add</span> = <span class="keyword">new</span> divComputers;</span><br><span class="line">    <span class="keyword">add</span>-&gt;m_num01 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">add</span>-&gt;m_num02 = <span class="number">3</span>;</span><br><span class="line">    cout &lt;&lt; <span class="keyword">add</span>-&gt;m_num01 &lt;&lt; <span class="string">&quot; / &quot;</span> &lt;&lt; <span class="keyword">add</span>-&gt;m_num02 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; <span class="keyword">add</span>-&gt;getResult() &lt;&lt; endl;</span><br><span class="line">    delete <span class="keyword">add</span>;     <span class="comment">//释放内存</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h4><p><img src="http://image.camcad.cn/2020/06/2020060812070328-1024x455.jpg"></p><h3 id="总结：C-开发提倡利用多态设计程序架构，因为多态优点很多。"><a href="#总结：C-开发提倡利用多态设计程序架构，因为多态优点很多。" class="headerlink" title="总结：C++开发提倡利用多态设计程序架构，因为多态优点很多。"></a>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多。</h3>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识47：类和对象（多态-多态的基本概念）</title>
      <link href="/post/76b5e75d.html"/>
      <url>/post/76b5e75d.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-7-多态"><a href="#4-7-多态" class="headerlink" title="4.7 多态"></a>4.7 多态</h1><h2 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h2><h4 id="多态是C-面向对象三大特性之一"><a href="#多态是C-面向对象三大特性之一" class="headerlink" title="多态是C++面向对象三大特性之一"></a>多态是C++面向对象三大特性之一</h4><p><strong>多态分为两类：</strong></p><ul><li>静态多态：函数重载 和 运算符重载属于静态多态，复用函数数名。</li><li>动态多态：派生类和虚函数实现运行时多态。</li></ul><p>静态多态和动态多态区别：</p><ul><li>静态多态的函数地址早绑定 - 编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定 - 运行阶段确定函数地址</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Animal 动物在叫&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Cat</span> :<span class="title">public</span> <span class="title">Animal</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">speak</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Cat 小猫在叫&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Dog</span> :<span class="title">public</span> <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">speak</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Dog 小狗在叫&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行说话的函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">动态多态满足条件：</span></span><br><span class="line"><span class="comment">  1.有继承关系</span></span><br><span class="line"><span class="comment">  2.子类重写父类的虚函数</span></span><br><span class="line"><span class="comment">  &#123; 重写：函数返回值类型 函数名 参数列表（需要完全相同）&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">动态多态使用：</span></span><br><span class="line"><span class="comment">  1.父类的指针或者引用 执行子类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSpeak</span>(<span class="params">Animal &amp;animal</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    animal.speak();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Cat cot;</span><br><span class="line">    doSpeak(cot);</span><br><span class="line"></span><br><span class="line">    Dog dog;</span><br><span class="line">    doSpeak(dog);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060810193381-1024x446.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><strong>多态满足条件：</strong></p><ul><li>有继承关系</li><li>子类<strong>重写</strong>父类中的虚函数 <strong>重写：</strong>函数返回值类型 函数名 参数列表 （完全一致称为重写）。</li></ul><p><strong>多态使用条件：</strong></p><ul><li>父类指针或引用指向子类对象</li></ul><h2 id="多态的原理剖析图"><a href="#多态的原理剖析图" class="headerlink" title="多态的原理剖析图"></a>多态的原理剖析图</h2><p><a href="http://image.camcad.cn/2020/06/202006081021541.jpg"><img src="http://image.camcad.cn/2020/06/202006081021541-1024x498.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识46：类和对象（继承-菱形继承&amp;virtual）</title>
      <link href="/post/db3b53a0.html"/>
      <url>/post/db3b53a0.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6 继承"></a>4.6 继承</h1><h2 id="4-6-8-菱形继承"><a href="#4-6-8-菱形继承" class="headerlink" title="4.6.8 菱形继承"></a>4.6.8 菱形继承</h2><p><strong>菱形继承概念：</strong></p><ul><li>两个派生类继承同一个基类</li><li>又有某个类同时继承两个派生类</li><li>这种继承被称为菱形继承，或者钻石继承</li></ul><p><strong>典型的菱形继承案例：</strong><br><img src="http://image.camcad.cn/2020/06/2020060803244837.jpg"></p><p><strong>菱形继承问题：</strong> 1.羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。 2.草泥马继承自动物数据两份，其实我们应该清楚，这份数据我们只需要一份就可以。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承前加 virtual 关键字后，变为虚继承</span></span><br><span class="line"><span class="comment">//此时公共的父类 Animal 称为虚基类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Sheep</span> :<span class="title">virtual</span> <span class="title">public</span> <span class="title">Animal</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Tuo</span> :<span class="title">virtual</span> <span class="title">public</span> <span class="title">Animal</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title">SheepTuo</span> :<span class="title">public</span> <span class="title">Sheep</span>, <span class="title">public</span> <span class="title">Tuo</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    SheepTuo s;</span><br><span class="line">    s.Sheep::m_Age = <span class="number">20</span>;</span><br><span class="line">    s.Tuo::m_Age = <span class="number">18</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s.Sheep::m_Age= &quot;</span> &lt;&lt; s.Sheep::m_Age &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s.Tuo::m_Age= &quot;</span> &lt;&lt; s.Tuo::m_Age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//继承前加 virtual 关键字后，变为虚继承</span></span><br><span class="line">    <span class="comment">//此时公共的父类 Animal 称为虚基类</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s.m_Age= &quot;</span> &lt;&lt; s.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060803444082-1024x416.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费毫无意义。</li><li>利用虚继承可以解决菱形继承问题。（virtual）</li></ul><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><p><img src="http://image.camcad.cn/2020/06/2020060803513645-1024x536.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识45：类和对象（继承-多继承语法）</title>
      <link href="/post/66431651.html"/>
      <url>/post/66431651.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6 继承"></a>4.6 继承</h1><h2 id="4-6-7-多继承语法"><a href="#4-6-7-多继承语法" class="headerlink" title="4.6.7 多继承语法"></a>4.6.7 多继承语法</h2><p>C++允许一个类继承<strong>多个类</strong> <code>语法：class 子类 :继承方式 父类1,继承方式 父类2, ...</code> 多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><p><strong>C++实际开发中不建议使用多继承</strong></p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Parent01</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Parent01()</span><br><span class="line">    &#123;</span><br><span class="line">        m_A = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:     </span><br><span class="line"><span class="built_in">int</span> m_A;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Parent02</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Parent02()</span><br><span class="line">    &#123;</span><br><span class="line">        m_A = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> m_A;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Son</span> :<span class="title">public</span> <span class="title">Parent01</span>,<span class="title">public</span> <span class="title">Parent02</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    Son()</span><br><span class="line">    &#123;</span><br><span class="line">        m_A = <span class="number">30</span>;</span><br><span class="line">        m_B = <span class="number">80</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">int</span> m_A;</span><br><span class="line"><span class="built_in">int</span> m_B;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Son s;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;sizeof(Son)占用内存空间：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(Son) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;子类(Son) m_A= &quot;</span> &lt;&lt; s.m_A &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;子类(Son) m_B= &quot;</span> &lt;&lt; s.m_B &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;父类(Parent01) m_A= &quot;</span> &lt;&lt; s.Parent01::m_A &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;父类(Parent02) m_A= &quot;</span> &lt;&lt; s.Parent02::m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060802405789-1024x473.jpg"></p><h3 id="总结：多继承中如果父类中出现了同名情况，子类使用时候要加作用域。"><a href="#总结：多继承中如果父类中出现了同名情况，子类使用时候要加作用域。" class="headerlink" title="总结：多继承中如果父类中出现了同名情况，子类使用时候要加作用域。"></a>总结：多继承中如果父类中出现了同名情况，子类使用时候要加作用域。</h3>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识44：类和对象（继承-继承同名静态成员处理方式）</title>
      <link href="/post/335a130a.html"/>
      <url>/post/335a130a.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-6继承"><a href="#4-6继承" class="headerlink" title="4.6继承"></a>4.6继承</h1><h2 id="4-6-6-继承同名静态成员处理方式"><a href="#4-6-6-继承同名静态成员处理方式" class="headerlink" title="4.6.6 继承同名静态成员处理方式"></a>4.6.6 继承同名静态成员处理方式</h2><p><strong>问题：</strong>继承中同名的静态成员在子类对象上如何进行访问？ 静态成员和非静态成员出现同名，处理方式一致</p><ul><li>访问子类同名成员 直接访问即可</li><li>访问父类同名成员 需要加作用域</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Parent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent父类中的func()函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span>(<span class="params"><span class="built_in">int</span> num</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent父类中的func(int num)函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:     </span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span> m_num;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">int</span> Parent::m_num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Son</span> :<span class="title">public</span> <span class="title">Parent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son子类中的func()函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span> m_num;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">int</span> Son::m_num = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.通过对象方式访问数据</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;通过对象方式访问数据&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Son s;</span><br><span class="line">    <span class="comment">//访问子类与父类同名的成员属性</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;（Son）子类static int m_num：&quot;</span> &lt;&lt; s.m_num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问父类与子类同名的成员属性</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;（Parent）父类static int m_num：&quot;</span> &lt;&lt; s.Parent::m_num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问子类与父类同名函数func()</span></span><br><span class="line">    s.func();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问父类与子类同名函数func()</span></span><br><span class="line">    s.Parent::func();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问父类与子类同名函数func(int num)</span></span><br><span class="line">    s.Parent::func(<span class="number">100</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.通过类名访问数据</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;通过类名访问数据&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//访问子类与父类同名的成员属性</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;（Son）子类static int m_num：&quot;</span> &lt;&lt; Son::m_num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问父类与子类同名的成员属性</span></span><br><span class="line">    <span class="comment">//第一个::代表通过类名方式访问，第二个::代表访问父类作用域下</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;（Parent）父类static int m_num：&quot;</span> &lt;&lt;  Son::Parent::m_num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问子类与父类同名函数func()</span></span><br><span class="line">    Son::func();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问父类与子类同名函数func()</span></span><br><span class="line">    Son::Parent::func();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问父类与子类同名函数func(int num)</span></span><br><span class="line">    Son::Parent::func(<span class="number">100</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h4><p><img src="http://image.camcad.cn/2020/06/2020060802091993-1024x649.jpg"></p><h3 id="总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象-和-通过类名）"><a href="#总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象-和-通过类名）" class="headerlink" title="总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）"></a>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</h3>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识43：类和对象（继承-继承同名成员处理方式）</title>
      <link href="/post/434dacb3.html"/>
      <url>/post/434dacb3.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6 继承"></a>4.6 继承</h1><h2 id="4-6-5-继承同名成员处理方式"><a href="#4-6-5-继承同名成员处理方式" class="headerlink" title="4.6.5 继承同名成员处理方式"></a>4.6.5 继承同名成员处理方式</h2><p><strong>问题：</strong>当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p><ul><li>访问子类同名成员 直接访问即可</li><li>访问父类同名成员 需要加作用域</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Parent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Parent()</span><br><span class="line">    &#123;</span><br><span class="line">        m_num = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent父类中的func()函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span>(<span class="params"><span class="built_in">int</span> num</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent父类中的func(int num)函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:     </span><br><span class="line">    <span class="built_in">int</span> m_num;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Son</span> :<span class="title">public</span> <span class="title">Parent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Son()</span><br><span class="line">    &#123;</span><br><span class="line">        m_num = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son子类中的func()函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> m_num;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Son s;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问子类与父类同名的成员属性</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;（Son）子类m_num：&quot;</span> &lt;&lt; s.m_num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问父类与子类同名的成员属性</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;（Parent）父类m_num：&quot;</span> &lt;&lt; s.Parent::m_num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问子类与父类同名函数func()</span></span><br><span class="line">    s.func();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问父类与子类同名函数func()</span></span><br><span class="line">    s.Parent::func();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问父类与子类同名函数func(int num)</span></span><br><span class="line">    s.Parent::func(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060710155781-1024x499.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><h4 id="1-子类对象可以直接访问到子类中同名成员"><a href="#1-子类对象可以直接访问到子类中同名成员" class="headerlink" title="1.子类对象可以直接访问到子类中同名成员"></a>1.子类对象可以直接访问到子类中同名成员</h4><h4 id="2-子类对象加作用域可以访问到父类同名成员"><a href="#2-子类对象加作用域可以访问到父类同名成员" class="headerlink" title="2.子类对象加作用域可以访问到父类同名成员"></a>2.子类对象加作用域可以访问到父类同名成员</h4><h4 id="3-当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数"><a href="#3-当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数" class="headerlink" title="3.当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数"></a>3.当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</h4>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识42：类和对象（继承-继承中构造和析构顺序）</title>
      <link href="/post/2a4be3b1.html"/>
      <url>/post/2a4be3b1.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6 继承"></a>4.6 继承</h1><h2 id="4-6-4-继承中构造和析构顺序"><a href="#4-6-4-继承中构造和析构顺序" class="headerlink" title="4.6.4 继承中构造和析构顺序"></a>4.6.4 继承中构造和析构顺序</h2><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数。</p><p>问题：父类和子类的构造和析构顺序是谁先谁后？</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Parent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:     </span><br><span class="line"></span><br><span class="line">    Parent()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent 构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~Parent()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Parent 析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Son</span> :<span class="title">public</span> <span class="title">Parent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    Son()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son 构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~Son()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son 析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//继承中的构造和析构顺序如下：</span></span><br><span class="line">    <span class="comment">//先构造父类，再构造子类，析构的顺序与构造的顺序相反。</span></span><br><span class="line">    Son s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h4><p><img src="http://image.camcad.cn/2020/06/2020060709351657-1024x505.jpg"></p><h3 id="总结：继承中-先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反。"><a href="#总结：继承中-先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反。" class="headerlink" title="总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反。"></a>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反。</h3>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识41：类和对象（继承-继承中的对象模型&amp;vs开发人员命令提示符）</title>
      <link href="/post/cdbddfdd.html"/>
      <url>/post/cdbddfdd.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6 继承"></a>4.6 继承</h1><h2 id="4-6-3-继承中的对象模型"><a href="#4-6-3-继承中的对象模型" class="headerlink" title="4.6.3 继承中的对象模型"></a>4.6.3 继承中的对象模型</h2><p><strong>问题：</strong>从父类继承过来成员，哪些属于子类对象中？</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Parent</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:     <span class="comment">//公共权限</span></span><br><span class="line">    <span class="built_in">int</span> m_A;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:  <span class="comment">//保护权限</span></span><br><span class="line">    <span class="built_in">int</span> m_B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:    <span class="comment">//私有权限</span></span><br><span class="line">    <span class="built_in">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Son</span> :<span class="title">public</span> <span class="title">Parent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用（开发人员命令提示符）工具查看对象模型</span></span><br><span class="line"><span class="comment">//跳转盘符 D：</span></span><br><span class="line"><span class="comment">//跳转文件路径 cd 具体路径下</span></span><br><span class="line"><span class="comment">//查看命名</span></span><br><span class="line"><span class="comment">//cl /d1 reportSingleClassLayout类名 &quot;文件名&quot;</span></span><br><span class="line"><span class="comment">//cl /d1 reportSingleClassLayoutSon &quot;main.cpp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//父类中所有非静态成员属性都会被子类继承下去</span></span><br><span class="line">    <span class="comment">//父类中私有成员属性 是被编译器给隐藏了，因此是访问不到，但是确实被子类继承了</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;子类 sizeof(Son) 占用多大内存空间：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(Son) &lt;&lt; endl;  <span class="comment">//16</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060707474547-1024x408.jpg"></p><h2 id="利用工具查看："><a href="#利用工具查看：" class="headerlink" title="利用工具查看："></a>利用工具查看：</h2><p><img src="http://image.camcad.cn/2020/06/2020060708225855.jpg"> 1.打开工具窗口后，定位到当前CPP文件盘符。 2.然后输入：cl &#x2F;d1 reportSingleClassLayout查看的类名 “所属文件名”</p><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060707474547-1024x408.jpg"></p><h2 id="利用工具查看：-1"><a href="#利用工具查看：-1" class="headerlink" title="利用工具查看："></a>利用工具查看：</h2><p><img src="http://image.camcad.cn/2020/06/2020060708225855.jpg"> 1.打开工具窗口后，定位到当前CPP文件盘符。 2.然后输入：cl &#x2F;d1 reportSingleClassLayout查看的类名 “所属文件名”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//利用（开发人员命令提示符）工具查看对象模型</span><br><span class="line">//1.跳转盘符：C：</span><br><span class="line">//2.跳转文件路径：cd 具体路径下</span><br><span class="line">//3.查看命名：dir</span><br><span class="line">//4.cl /d1 reportSingleClassLayout类名 &quot;文件名&quot;</span><br><span class="line">//cl /d1 reportSingleClassLayoutSon &quot;main.cpp&quot;</span><br></pre></td></tr></table></figure><h3 id="效果如下图："><a href="#效果如下图：" class="headerlink" title="效果如下图："></a>效果如下图：</h3><p><img src="http://image.camcad.cn/2020/06/2020060708345629-1024x567.jpg"></p><h3 id="结论：父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到。"><a href="#结论：父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到。" class="headerlink" title="结论：父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到。"></a>结论：父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到。</h3>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识40：类和对象（继承-继承方式）</title>
      <link href="/post/cb95e71a.html"/>
      <url>/post/cb95e71a.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6 继承"></a>4.6 继承</h1><h2 id="4-6-2-继承方式"><a href="#4-6-2-继承方式" class="headerlink" title="4.6.2 继承方式"></a>4.6.2 继承方式</h2><p>继承的语法：class 子类 :继承方式 父类</p><h4 id="继承方式一共有三种："><a href="#继承方式一共有三种：" class="headerlink" title="继承方式一共有三种："></a>继承方式一共有三种：</h4><ul><li>公共继承（public）</li><li>保护继承（protected）</li><li>私有继承（private）</li></ul><p><img src="http://image.camcad.cn/2020/06/2020060704120821-1024x567.jpg"></p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">public:     <span class="comment">//公共权限</span></span><br><span class="line">    <span class="type">int</span> m_A;</span><br><span class="line"></span><br><span class="line">protected:  <span class="comment">//保护权限</span></span><br><span class="line">    <span class="type">int</span> m_B;</span><br><span class="line"></span><br><span class="line">private:    <span class="comment">//私有权限</span></span><br><span class="line">    <span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son01</span> :</span>public Parent</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_A = <span class="number">10</span>;       <span class="comment">//父类中的公共权限成员，到子类中依然是公共权限</span></span><br><span class="line">        m_B = <span class="number">10</span>;       <span class="comment">//父类中的保护权限成员，到子类中依然是保护权限</span></span><br><span class="line">        <span class="comment">//m_C = 10;     //父类中的私有权限成员，子类访问不了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son02</span> :</span>protected Parent</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_A = <span class="number">10</span>;       <span class="comment">//父类中的公共权限成员，到子类中变成为保护权限</span></span><br><span class="line">        m_B = <span class="number">10</span>;       <span class="comment">//父类中的保护权限成员，到子类中依然是保护权限</span></span><br><span class="line">        <span class="comment">//m_C = 10;     //父类中的私有权限成员，子类访问不了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son03</span> :</span>private Parent</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_A = <span class="number">10</span>;       <span class="comment">//父类中的公共权限成员，到子类中变成为私有权限</span></span><br><span class="line">        m_B = <span class="number">10</span>;       <span class="comment">//父类中的保护权限成员，到子类中变成为私有权限</span></span><br><span class="line">        <span class="comment">//m_C = 10;     //父类中的私有权限成员，子类访问不了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Son01 s;</span><br><span class="line">    s.m_A = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//s.m_B = 100;  //错误，到Son01中 m_B是保护仅限 类外访问不了</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Son02 s;</span><br><span class="line">    <span class="comment">//s.m_A = 100;  //错误，到Son02中 m_A是保护仅限 类外访问不了</span></span><br><span class="line">    <span class="comment">//s.m_B = 100;  //错误，到Son02中 m_B是保护仅限 类外访问不了</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test03</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Son03 s;</span><br><span class="line">    <span class="comment">//s.m_A = 100;  //错误，到Son03中 m_A是私有仅限 类外访问不了</span></span><br><span class="line">    <span class="comment">//s.m_B = 100;  //错误，到Son03中 m_B是私有仅限 类外访问不了</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line">    test02();</span><br><span class="line">    test03();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识39：类和对象（继承-继承的基本语法）</title>
      <link href="/post/d92241ea.html"/>
      <url>/post/d92241ea.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-6-继承"><a href="#4-6-继承" class="headerlink" title="4.6 继承"></a>4.6 继承</h1><h4 id="继承是面向对象三大特性之一"><a href="#继承是面向对象三大特性之一" class="headerlink" title="继承是面向对象三大特性之一"></a>继承是面向对象三大特性之一</h4><p>有些类与类之间存在特殊的关系，例如下图中： <img src="http://image.camcad.cn/2020/06/2020060702392360-1024x291.jpg"> 我们发现，定义这些类时，下级别的成员除了拥有上级的共性 ，还有自己的特性。 这个时候我们就可以考虑利用继承的技术，减少重复代码。</p><h2 id="4-6-1-继承的基本语法"><a href="#4-6-1-继承的基本语法" class="headerlink" title="4.6.1 继承的基本语法"></a>4.6.1 继承的基本语法</h2><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的右侧列表，只有中心内容不同，接下来我们分别利用普通写法和继承的写法来实现网页的内容，看一下继承存在的意义以及好处。</p><h3 id="语法：class-子类-继承方式-父类"><a href="#语法：class-子类-继承方式-父类" class="headerlink" title="语法：class 子类 :继承方式 父类"></a>语法：class 子类 :继承方式 父类</h3><ul><li>子类 也称为 派生类</li><li>父类 也称为 基类</li></ul><h3 id="1-普通实现："><a href="#1-普通实现：" class="headerlink" title="1.普通实现："></a>1.普通实现：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//首页</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">header</span><span class="params">()</span>   <span class="comment">//页眉</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、福利抽奖、应用软件、技术干货、视频教程、求助讨论...发布文章&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">footer</span><span class="params">()</span>   <span class="comment">//页脚</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;版权声明、网站驱动、关于网站、文章归档、网站地图...网站备案&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">right</span><span class="params">()</span>    <span class="comment">//右边</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;登录、注册、近期文章、标签云、栏目...日期&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">home</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页相关内容&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//福利抽奖</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welfare</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">header</span><span class="params">()</span>   <span class="comment">//页眉</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、福利抽奖、应用软件、技术干货、视频教程、求助讨论...发布文章&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">footer</span><span class="params">()</span>   <span class="comment">//页脚</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;版权声明、网站驱动、关于网站、文章归档、网站地图...网站备案&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">right</span><span class="params">()</span>    <span class="comment">//右边</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;登录、注册、近期文章、标签云、栏目...日期&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">welfare</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;福利抽奖相关内容&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//应用软件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apps</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">header</span><span class="params">()</span>   <span class="comment">//页眉</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、福利抽奖、应用软件、技术干货、视频教程、求助讨论...发布文章&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">footer</span><span class="params">()</span>   <span class="comment">//页脚</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;版权声明、网站驱动、关于网站、文章归档、网站地图...网站备案&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">right</span><span class="params">()</span>    <span class="comment">//右边</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;登录、注册、近期文章、标签云、栏目...日期&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">apps</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;应用软件相关内容&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Home h;</span><br><span class="line">    h.home();</span><br><span class="line">    h.header();</span><br><span class="line">    h.footer();</span><br><span class="line">    h.right();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Welfare w;</span><br><span class="line">    w.welfare();</span><br><span class="line">    w.header();</span><br><span class="line">    w.footer();</span><br><span class="line">    w.right();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Apps a;</span><br><span class="line">    a.apps();</span><br><span class="line">    a.header();</span><br><span class="line">    a.footer();</span><br><span class="line">    a.right();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060703200085-1024x718.jpg"></p><h3 id="2-继承实现："><a href="#2-继承实现：" class="headerlink" title="2.继承实现："></a>2.继承实现：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//公共页面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasePage</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">header</span><span class="params">()</span>   <span class="comment">//页眉</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页、福利抽奖、应用软件、技术干货、视频教程、求助讨论...发布文章&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">footer</span><span class="params">()</span>   <span class="comment">//页脚</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;版权声明、网站驱动、关于网站、文章归档、网站地图...网站备案&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">right</span><span class="params">()</span>    <span class="comment">//右边</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;登录、注册、近期文章、标签云、栏目...日期&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//首页</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> :</span>public BasePage</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">home</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;首页相关内容&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//福利抽奖</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welfare</span> :</span>public BasePage </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">welfare</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;福利抽奖相关内容&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//应用软件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apps</span> :</span>public BasePage</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">apps</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;应用软件相关内容&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Home h;</span><br><span class="line">    h.home();</span><br><span class="line">    h.header();</span><br><span class="line">    h.footer();</span><br><span class="line">    h.right();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Welfare w;</span><br><span class="line">    w.welfare();</span><br><span class="line">    w.header();</span><br><span class="line">    w.footer();</span><br><span class="line">    w.right();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Apps a;</span><br><span class="line">    a.apps();</span><br><span class="line">    a.header();</span><br><span class="line">    a.footer();</span><br><span class="line">    a.right();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n\n&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060703200085-1024x718.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识38：类和对象（运算符重载-函数调用运算符重载）</title>
      <link href="/post/d57eb46e.html"/>
      <url>/post/d57eb46e.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h1><h2 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载"></a>4.5.6 函数调用运算符重载</h2><ul><li>函数调用运算符( ) 也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定的写法，非常灵活</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prtson</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数调用运算符重载</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">operator</span><span class="params">()</span><span class="params">(<span class="built_in">string</span>  name)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">string</span> m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAdd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> num01, <span class="type">int</span> num02)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> num01 + num02;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//重载的 ( )操作符 也称为仿函数</span></span><br><span class="line">    Prtson p;</span><br><span class="line">    p(<span class="string">&quot;test01 hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    MyAdd add;</span><br><span class="line">    <span class="type">int</span> ret = add(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test02 ret= &quot;</span> &lt;&lt; ret &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//匿名函数对象</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test02 匿名函数对象= &quot;</span> &lt;&lt; MyAdd()(<span class="number">100</span>, <span class="number">212</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line">    test02();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060702022259-1024x426.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识37：类和对象（运算符重载-关系运算符重载）</title>
      <link href="/post/15ab8371.html"/>
      <url>/post/15ab8371.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h1><h2 id="4-5-5-关系运算符重载"><a href="#4-5-5-关系运算符重载" class="headerlink" title="4.5.5 关系运算符重载"></a>4.5.5 关系运算符重载</h2><p><strong>作用：</strong>重载关系运算符，可以让两个自定义类型对象进行对比操作。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prtson</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">    Prtson(<span class="built_in">string</span> name, <span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        m_name = name;</span><br><span class="line">        m_age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相等重载</span></span><br><span class="line">    <span class="type">bool</span> operator==(Prtson &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (this-&gt;m_name == p.m_name &amp;&amp; this-&gt;m_age == p.m_age)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不相等重载</span></span><br><span class="line">    <span class="type">bool</span> operator!=(Prtson &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (this-&gt;m_name == p.m_name &amp;&amp; this-&gt;m_age == p.m_age)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">string</span> m_name;</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Prtson <span class="title function_">p1</span><span class="params">(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>)</span>;</span><br><span class="line">    Prtson <span class="title function_">p2</span><span class="params">(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p1 == p2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;两个类的属性相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;两个类的属性不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p1 != p2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;两个类的属性不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;两个类的属性相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060615295788-1024x456.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识36：类和对象（运算符重载-赋值运算符重载）</title>
      <link href="/post/261c09c2.html"/>
      <url>/post/261c09c2.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h1><h2 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h2><p>C++编译器至少给一个类添加4个函数：</p><ul><li>1.默认构造函数（无参，函数体为空）</li><li>2.默认析构函数（无参，函数体为空）</li><li>3.默认拷贝函数，对属性进行值拷贝</li><li>4.赋值运算符 operator&#x3D;，对属性进行值拷贝</li></ul><p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    MyInteger(<span class="type">int</span> num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将数据开辟到堆区</span></span><br><span class="line">        m_num = new <span class="type">int</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MyInteger&amp; operator=(MyInteger &amp;myinteger)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//m_num = myinteger.m_num;      //错误，编译器提供的是浅拷贝</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//应该先判断是否有属性在堆区，如果有先释放干净，然后再深拷贝</span></span><br><span class="line">        <span class="keyword">if</span> (m_num != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            delete m_num;</span><br><span class="line">            m_num = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//提供深拷贝，解决浅拷贝的问题</span></span><br><span class="line">        m_num = new <span class="type">int</span>(*myinteger.m_num);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回自身</span></span><br><span class="line">        <span class="keyword">return</span> *this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~MyInteger()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_num != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            delete m_num;</span><br><span class="line">            m_num = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *m_num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    MyInteger <span class="title function_">p01</span><span class="params">(<span class="number">15</span>)</span>;</span><br><span class="line">    MyInteger <span class="title function_">p02</span><span class="params">(<span class="number">10</span>)</span>;</span><br><span class="line">    MyInteger <span class="title function_">p03</span><span class="params">(<span class="number">20</span>)</span>;</span><br><span class="line"></span><br><span class="line">    p02 = p01 = p03;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p02.m_num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060611053696-1024x388.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识35：类和对象（运算符重载-递增运算符重载）</title>
      <link href="/post/1cbfd86.html"/>
      <url>/post/1cbfd86.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h1><h2 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h2><p><strong>作用：</strong>通过重载递增运算符，实现自己的整形数据。</p><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p><img src="http://image.camcad.cn/2020/06/2020060608401739-1024x697.jpg"></p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    friend ostream&amp; operator&lt;&lt;(ostream &amp;out, MyInteger p1);</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    MyInteger()</span><br><span class="line">    &#123;</span><br><span class="line">        m_num = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载前置++运算符，返回引用为了一直对一个数据进行递增操作</span></span><br><span class="line">    MyInteger&amp; operator++()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先进行++运算</span></span><br><span class="line">        m_num++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再返回自身</span></span><br><span class="line">        <span class="keyword">return</span> *this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载后置++运算符</span></span><br><span class="line">    <span class="comment">//  MyInteger operator++(int) int代表占位参数，可以用于区分前置和后置递增</span></span><br><span class="line">    MyInteger operator++(<span class="type">int</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先 记录当时结果</span></span><br><span class="line">        MyInteger tmap = *this;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//后 递增</span></span><br><span class="line">        m_num++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再返回</span></span><br><span class="line">        <span class="keyword">return</span> tmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    <span class="type">int</span> m_num;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数实现左移重载（ &lt;&lt; ）</span></span><br><span class="line"><span class="comment">//ostream对象只能有一个</span></span><br><span class="line">ostream&amp; operator&lt;&lt;(ostream &amp;out, MyInteger p1)   <span class="comment">//本质 operator&lt;&lt;(cout,p),简化 cout&lt;&lt;p;</span></span><br><span class="line">&#123;</span><br><span class="line">    out &lt;&lt; p1.m_num;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    MyInteger a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;前置++运算：&quot;</span> &lt;&lt; ++a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;前置++运算 结果：&quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    MyInteger a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;后置++运算：&quot;</span> &lt;&lt; a++ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;后置++运算 结果：&quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060608421773-1024x457.jpg"></p><h2 id="递减运算符重载"><a href="#递减运算符重载" class="headerlink" title="递减运算符重载"></a>递减运算符重载</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInteger</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    friend ostream&amp; operator&lt;&lt;(ostream &amp;out, MyInteger p1);</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    MyInteger()</span><br><span class="line">    &#123;</span><br><span class="line">        m_num = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载前置--运算符</span></span><br><span class="line">    MyInteger&amp; operator--()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先进行--运算</span></span><br><span class="line">        m_num--;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再返回自身</span></span><br><span class="line">        <span class="keyword">return</span> *this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载后置--运算符</span></span><br><span class="line">    MyInteger operator--(<span class="type">int</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先 记录当时结果</span></span><br><span class="line">        MyInteger tmap = *this;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//后 递减</span></span><br><span class="line">        m_num--;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再返回</span></span><br><span class="line">        <span class="keyword">return</span> tmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    <span class="type">int</span> m_num;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数实现左移重载（ &lt;&lt; ）</span></span><br><span class="line"><span class="comment">//ostream对象只能有一个</span></span><br><span class="line">ostream&amp; operator&lt;&lt;(ostream &amp;out, MyInteger p1)   <span class="comment">//本质 operator&lt;&lt;(cout,p),简化 cout&lt;&lt;p;</span></span><br><span class="line">&#123;</span><br><span class="line">    out &lt;&lt; p1.m_num;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    MyInteger a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test01 前置++运算：&quot;</span> &lt;&lt; --a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test01 前置++运算 结果：&quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    MyInteger a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test02 后置++运算：&quot;</span> &lt;&lt; a-- &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test02 后置++运算 结果：&quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/202006060849217-1024x480.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识34：类和对象（运算符重载-左移运算符重载）</title>
      <link href="/post/c2b29a2.html"/>
      <url>/post/c2b29a2.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h1><h2 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="4.5.2 左移运算符重载"></a>4.5.2 左移运算符重载</h2><p><strong>作用：</strong>可以输出自定义数据类型。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prtson</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    friend ostream&amp; operator&lt;&lt;(ostream &amp;out, Prtson &amp;p1);</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    Prtson(<span class="type">int</span> a,<span class="type">int</span> b)</span><br><span class="line">    &#123;</span><br><span class="line">        m_A = a;</span><br><span class="line">        m_B = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//错误，成员函数实现不了 p &lt;&lt; cout 不是我们想要的效果</span></span><br><span class="line">    <span class="comment">//void operator&lt;&lt;(Prtson &amp;p) &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    <span class="type">int</span> m_A;</span><br><span class="line">    <span class="type">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数实现左移重载（ &lt;&lt; ）</span></span><br><span class="line"><span class="comment">//ostream对象只能有一个</span></span><br><span class="line">ostream&amp; operator&lt;&lt;(ostream &amp;out, Prtson &amp;p1) <span class="comment">//本质 operator&lt;&lt;(cout,p),简化 cout&lt;&lt;p;</span></span><br><span class="line">&#123;</span><br><span class="line">    out &lt;&lt; <span class="string">&quot;m_A：&quot;</span> &lt;&lt; p1.m_A &lt;&lt; <span class="string">&quot;\nm_b：&quot;</span> &lt;&lt; p1.m_B;  </span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Prtson <span class="title function_">p</span><span class="params">(<span class="number">10</span>,<span class="number">20</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//链式编程</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060607130085.jpg"></p><h3 id="总结：重载左移运算符配合友元可以实现输出自定义数据类型。"><a href="#总结：重载左移运算符配合友元可以实现输出自定义数据类型。" class="headerlink" title="总结：重载左移运算符配合友元可以实现输出自定义数据类型。"></a>总结：重载左移运算符配合友元可以实现输出自定义数据类型。</h3>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识33：类和对象（运算符重载-加号运算符重载）</title>
      <link href="/post/a06479a2.html"/>
      <url>/post/a06479a2.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h1><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型。</p><h2 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h2><p><strong>作用：</strong>实现两个自定义数据类型相加的运算，关键字（<strong>operator</strong>）。</p><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p><a href="http://image.camcad.cn/2020/06/2020060603021327.jpg"><img src="http://image.camcad.cn/2020/06/2020060603021327-1024x422.jpg"></a></p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prtson</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //1.通过成员函数重载+号（operator）</span></span><br><span class="line"><span class="comment">    Prtson operator+(Prtson &amp;p)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        Prtson temp;</span></span><br><span class="line"><span class="comment">        temp.m_A = this-&gt;m_A + p.m_A;</span></span><br><span class="line"><span class="comment">        temp.m_B = this-&gt;m_B + p.m_B;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        return temp;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> m_A;</span><br><span class="line">    <span class="type">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.通过全局函数重载+号</span></span><br><span class="line">Prtson operator+(Prtson &amp;p1, Prtson &amp;p2)</span><br><span class="line">&#123;</span><br><span class="line">    Prtson temp;</span><br><span class="line">    temp.m_A = p1.m_A + p2.m_A;</span><br><span class="line">    temp.m_B = p1.m_B + p2.m_B;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.类和变量重载+号</span></span><br><span class="line">Prtson operator+(Prtson &amp;p1, <span class="type">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line">    Prtson temp;</span><br><span class="line">    temp.m_A = p1.m_A + num;</span><br><span class="line">    temp.m_B = p1.m_B + num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Prtson p1;</span><br><span class="line">    p1.m_A = <span class="number">10</span>;</span><br><span class="line">    p1.m_B = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    Prtson p2;</span><br><span class="line">    p2.m_A = <span class="number">10</span>;</span><br><span class="line">    p2.m_B = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员函数重载本质调用</span></span><br><span class="line">    <span class="comment">//Prtson p3 = p1.operator+(p2);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//全局函数重载本质调用</span></span><br><span class="line">    <span class="comment">//Prtson p3 = operator+(p1, p2);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//简化调用</span></span><br><span class="line">    Prtson p3 = p1 + p2;    </span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过成员函数重载+号 p3.m_A：&quot;</span> &lt;&lt; p3.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过成员函数重载+号 p3.m_B：&quot;</span> &lt;&lt; p3.m_B &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Prtson p4 = p1 + <span class="number">200</span>;   <span class="comment">//相当于 operator+(p1,10);</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;类和变量重载+号 p4.m_A：&quot;</span> &lt;&lt; p4.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;类和变量重载+号 p4.m_B：&quot;</span> &lt;&lt; p4.m_B &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);    <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060604240720-1024x500.jpg"></p><h3 id="总结1：对于内置数据类型的表达式，运算符是不可能改变的。"><a href="#总结1：对于内置数据类型的表达式，运算符是不可能改变的。" class="headerlink" title="总结1：对于内置数据类型的表达式，运算符是不可能改变的。"></a>总结1：对于内置数据类型的表达式，运算符是不可能改变的。</h3><h3 id="总结2：不要滥用运算符重载。"><a href="#总结2：不要滥用运算符重载。" class="headerlink" title="总结2：不要滥用运算符重载。"></a>总结2：不要滥用运算符重载。</h3>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识32：类和对象（友元-成员函数做友元）</title>
      <link href="/post/dc731654.html"/>
      <url>/post/dc731654.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h1><h3 id="4-4-3-成员函数做友元"><a href="#4-4-3-成员函数做友元" class="headerlink" title="4.4.3 成员函数做友元"></a>4.4.3 成员函数做友元</h3><p>让void goodGay::Visit01()函数访问Building类中的私有属性，函数前面需加<strong>friend</strong>关键字。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span> <span class="comment">//在调用之前需加 声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">goodGay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    goodGay();</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">Visit01</span><span class="params">()</span>; <span class="comment">//参观函数 访问Building中的属性</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">Visit02</span><span class="params">()</span>; </span><br><span class="line"></span><br><span class="line">    ~goodGay()</span><br><span class="line">    &#123;</span><br><span class="line">        delete building;</span><br><span class="line">        building = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//告诉编译器，goodGay::Visit01()函数是Building类的好朋友，可以访问到Building类中的私有内容</span></span><br><span class="line">    friend <span class="type">void</span> <span class="title function_">goodGay::Visit01</span><span class="params">()</span>; <span class="comment">//参观函数 访问Building中的属性</span></span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    Building();</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">string</span> m_SittingRoom;       <span class="comment">//客厅</span></span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    <span class="built_in">string</span> m_BedRoom;           <span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::Building()</span><br><span class="line">&#123;</span><br><span class="line">    m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">    m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">goodGay::goodGay()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建建筑物对象</span></span><br><span class="line">    building = new Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">goodGay::Visit01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Visit01 好基友全局函数 正在访问：&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Visit01 好基友全局函数 正在访问：&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">goodGay::Visit02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Visit02 好基友全局函数 正在访问：&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    goodGay gay;</span><br><span class="line">    gay.Visit01();</span><br><span class="line">    gay.Visit02();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060602274528-1024x467.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识31：类和对象（友元-类做友元）</title>
      <link href="/post/d307b743.html"/>
      <url>/post/d307b743.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h1><h2 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h2><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span>;</span> <span class="comment">//在调用之前需加 声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">goodGay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    goodGay();</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">Visit</span><span class="params">()</span>;   <span class="comment">//参观函数 访问Building中的属性</span></span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//告诉编译器，goodGay类是Building类的好朋友，可以访问到Building类中的私有内容</span></span><br><span class="line">    friend <span class="class"><span class="keyword">class</span> <span class="title">goodGay</span>;</span></span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    Building();</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">string</span> m_SittingRoom;       <span class="comment">//客厅</span></span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    <span class="built_in">string</span> m_BedRoom;           <span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::Building()</span><br><span class="line">&#123;</span><br><span class="line">    m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">    m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">goodGay::goodGay()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建建筑物对象</span></span><br><span class="line">    building = new Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">goodGay::Visit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友全局函数 正在访问：&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友全局函数 正在访问：&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    goodGay gay;</span><br><span class="line">    gay.Visit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060601265210-1024x489.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识30：类和对象（友元-全局函数做友元）</title>
      <link href="/post/54dc0ab8.html"/>
      <url>/post/54dc0ab8.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h1><p>生活中你的家有客厅（Public），有你的卧室（Private）。 客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是説只有你能进去，但是呢，你也可以允许你的好闺蜜或者好基友进去。 在程序里，有些私有属性也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术，友元的目的就是让一个函数或者类访问另一个类中私有成员。</p><p>友元的三种实现：</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h2 id="全局函数做友元"><a href="#全局函数做友元" class="headerlink" title="全局函数做友元"></a>全局函数做友元</h2><p>友元的关键字为 <strong>friend</strong></p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Building</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//goodGay全局函数是Building好朋友，可以访问Building中私有成员。</span></span><br><span class="line">    friend <span class="type">void</span> <span class="title function_">goodGay</span><span class="params">(Building *building)</span>;    <span class="comment">//访问函数前需加（friend）关键字</span></span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    Building()</span><br><span class="line">    &#123;</span><br><span class="line">        m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">        m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">string</span> m_SittingRoom;       <span class="comment">//客厅</span></span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    <span class="built_in">string</span> m_BedRoom;           <span class="comment">//卧室</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">goodGay</span><span class="params">(Building *building)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友全局函数 正在访问：&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;好基友全局函数 正在访问：&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Building b;</span><br><span class="line">    goodGay(&amp;b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060515314799-1024x501.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识29：类和对象（C++对象模型和this指针-const修饰成员函数）</title>
      <link href="/post/3e7e5462.html"/>
      <url>/post/3e7e5462.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h1><h2 id="4-3-4-const修饰成员函数"><a href="#4-3-4-const修饰成员函数" class="headerlink" title="4.3.4 const修饰成员函数"></a>4.3.4 const修饰成员函数</h2><h3 id="常函数"><a href="#常函数" class="headerlink" title="常函数"></a>常函数</h3><ul><li>成员函数后加const后我们称为这个函数为<strong>常函数</strong>。</li><li>常函数内不可以修改成员属性。</li><li>成员属性声明时加关键字mutable后，在常函数中依然可以修改。</li></ul><h3 id="常对象："><a href="#常对象：" class="headerlink" title="常对象："></a>常对象：</h3><ul><li>声明对象前加const称该对象为常对象。</li><li>常对象只能调用常函数。</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//this指针的本质 是指针常量 指针的指向是不可以修改的</span></span><br><span class="line">    <span class="comment">//const Person * const this;</span></span><br><span class="line">    <span class="comment">//在成员函数后面加const，修饰的是this指向，让指针指向的值也不可以修改</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">showPerson</span><span class="params">()</span> <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;m_age = <span class="number">18</span>;</span><br><span class="line">        <span class="comment">//this-&gt;m_id = 10001;    //错误，const修饰的this指向的值不可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">test02</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> m_id;   </span><br><span class="line">    mutable <span class="type">int</span> m_age;  <span class="comment">//特殊变量（mutable），即使在常函数中，也可以修改这个值，加关键字mutble</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//常函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person p;</span><br><span class="line">    p.showPerson();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//常对象</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> Person p; <span class="comment">//在对象前加const，变为常对象</span></span><br><span class="line">    <span class="comment">//p.m_id = 1001;    //错误</span></span><br><span class="line">    p.m_age = <span class="number">28</span>;   <span class="comment">//m_age是特殊值，在常对象下也可以修改</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//常对象只能调用常函数</span></span><br><span class="line">    p.showPerson();</span><br><span class="line">    <span class="comment">//p.test02();   //错误，常对象 不可以调用普通成员函数，因为普通成员函数可以修改属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//test01();</span></span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识28：类和对象（C++对象模型和this指针-空指针访问成员函数）</title>
      <link href="/post/bb043411.html"/>
      <url>/post/bb043411.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h1><h2 id="4-3-3-空指针访问成员函数"><a href="#4-3-3-空指针访问成员函数" class="headerlink" title="4.3.3 空指针访问成员函数"></a>4.3.3 空指针访问成员函数</h2><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针。</p><p>如果用到this指针，需要加以判断保证代码的健壮性。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">showClassName</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is class&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">showClassAge</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//报错原因：因为传入的指针为NULL（所以需要加以下判断）</span></span><br><span class="line">        <span class="keyword">if</span> (this == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄为：&quot;</span> &lt;&lt; m_age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> m_age;  <span class="comment">//年龄</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person *p = <span class="literal">NULL</span>;   <span class="comment">//创建指针时，需要初始化（NULL）</span></span><br><span class="line">    p-&gt;showClassName();</span><br><span class="line">    p-&gt;showClassAge();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060511190471-1024x441.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识27：类和对象（C++对象模型和this指针-this指针概念）</title>
      <link href="/post/49bdc38e.html"/>
      <url>/post/49bdc38e.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h1><h2 id="4-3-2-this指针概念"><a href="#4-3-2-this指针概念" class="headerlink" title="4.3.2 this指针概念"></a>4.3.2 this指针概念</h2><ul><li>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的。</li><li>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一份代码。</li><li>那么问题是：这一份代码是如何区分那个对象调用自己的呢？</li></ul><p>C++通过提供特殊的对象指针，this指针，解决上述问题。<strong>this指针指向被调用的成员函数所属的对象</strong>。</p><p>this指针是隐含每一个非静态成员函数内的一种指针。 this指针不需要定义，直接使用即可。</p><p>this指针的用途：</p><ul><li>当形参和成员变量同名时，可用this指针来区分。</li><li>在类的非静态成员函数中返回对象本身，可使用return *this</li></ul><h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员变量 和 成员函数 占用内存是分开存储</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.解决名称冲突问题</span></span><br><span class="line">    Person(<span class="type">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.在类的非静态成员函数中返回对象本身，可使用return *this</span></span><br><span class="line">    Person&amp; <span class="title function_">PersonAddAge</span><span class="params">(Person p)</span></span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;age += p.age;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *this;   <span class="comment">//返回对象本身</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> age;    <span class="comment">//年龄</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.解决名称冲突问题</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person <span class="title function_">p</span><span class="params">(<span class="number">18</span>)</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p的年龄：&quot;</span> &lt;&lt; p.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.在类的非静态成员函数中返回对象本身，可使用return *this</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person <span class="title function_">p1</span><span class="params">(<span class="number">10</span>)</span>;</span><br><span class="line">    Person <span class="title function_">p2</span><span class="params">(<span class="number">10</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链式编程思想</span></span><br><span class="line">    p2.PersonAddAge(p1).PersonAddAge(p1).PersonAddAge(p1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2的年龄：&quot;</span> &lt;&lt;p2.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//test01();</span></span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060509253913-1024x408.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识26：类和对象（C++对象模型和this指针-成员变量和成员函数分开存储）</title>
      <link href="/post/be27d4eb.html"/>
      <url>/post/be27d4eb.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h1><h2 id="4-3-1-成员变量和成员函数分开存储"><a href="#4-3-1-成员变量和成员函数分开存储" class="headerlink" title="4.3.1 成员变量和成员函数分开存储"></a>4.3.1 成员变量和成员函数分开存储</h2><p>C++中，类内的成员变量和成员函数分开存储。 只有非静态成员变量才属于类的对象上。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员变量 和 成员函数 占用内存是分开存储</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person01</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person02</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> m_A;            <span class="comment">//非静态成员变量，属于类的对象上</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_B;     <span class="comment">//静态成员变量，不属于类的对象上</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">func01</span><span class="params">()</span> &#123;&#125;    <span class="comment">//非静态成员函数，不属于类的对象上</span></span><br><span class="line">    <span class="type">static</span> <span class="type">void</span> <span class="title function_">func02</span><span class="params">()</span> &#123;&#125;     <span class="comment">//静态成员函数，不属于类的对象上   </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//空类，占用一个字节大小的内存空间</span></span><br><span class="line">    Person01 p;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person01占用内存空间大小：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(p) &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Person02 p2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person02占用内存空间大小：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(p2) &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060508284674-1024x522.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识25：类和对象（对象的初始化和清理-静态成员）</title>
      <link href="/post/9c9825a3.html"/>
      <url>/post/9c9825a3.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-2-对象初始化和清理"><a href="#4-2-对象初始化和清理" class="headerlink" title="4.2 对象初始化和清理"></a>4.2 对象初始化和清理</h1><h2 id="4-2-8-静态成员"><a href="#4-2-8-静态成员" class="headerlink" title="4.2.8 静态成员"></a>4.2.8 静态成员</h2><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员。</p><h2 id="静态成员分为："><a href="#静态成员分为：" class="headerlink" title="静态成员分为："></a>静态成员分为：</h2><h3 id="静态成员变量："><a href="#静态成员变量：" class="headerlink" title="静态成员变量："></a>静态成员变量：</h3><ul><li>所有对象共享同一份数据</li><li>在编译阶段分配内存</li><li>类内声明，类外初始化</li></ul><h3 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h3><ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul><h3 id="示例1：静态成员变量"><a href="#示例1：静态成员变量" class="headerlink" title="示例1：静态成员变量"></a>示例1：静态成员变量</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_A;     <span class="comment">//静态成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    静态成员变量特点：</span></span><br><span class="line"><span class="comment">        1.在编译阶段分配内存</span></span><br><span class="line"><span class="comment">        2.类内声明，类外初始化</span></span><br><span class="line"><span class="comment">        3.所有对象共享同一份数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_B;     <span class="comment">//静态成员变量也是有访问权限</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.类内声明，类外初始化</span></span><br><span class="line"><span class="type">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> Person::m_B = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="comment">//静态成员变量两种访问方式</span></span><br><span class="line">    <span class="comment">//1.通过这对象</span></span><br><span class="line">    Person p1;</span><br><span class="line">    p1.m_A = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1.m_A静态成员变量：&quot;</span> &lt;&lt; p1.m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    Person p2;</span><br><span class="line">    p2.m_A = <span class="number">200</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1.m_A静态成员变量：&quot;</span> &lt;&lt; p1.m_A &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//共享同一份数据</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2.m_A静态成员变量：&quot;</span> &lt;&lt; p2.m_A &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过类名访问</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;m_A静态成员变量：&quot;</span> &lt;&lt;Person::m_A &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;m_B静态成员变量：&quot; &lt;&lt; Person::m_B &lt;&lt; endl;  //错误，私有权限无法访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060507280754-1024x492.jpg"></p><h3 id="示例2：静态成员函数"><a href="#示例2：静态成员函数" class="headerlink" title="示例2：静态成员函数"></a>示例2：静态成员函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    静态成员函数特点：</span></span><br><span class="line"><span class="comment">        1.程序共享一个函数</span></span><br><span class="line"><span class="comment">        2.静态成员函数只能访问静态成员变量</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">static</span> <span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        m_A = <span class="number">100</span>;</span><br><span class="line">        <span class="comment">//m_B = 100;        //错误，不可以访问非静态成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_A;     <span class="comment">//静态成员变量</span></span><br><span class="line">    <span class="type">int</span> m_B;</span><br><span class="line">private:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态成员函数也是有访问权限</span></span><br><span class="line">    <span class="type">static</span> <span class="type">void</span> <span class="title function_">func02</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func02函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类内声明，类外初始化</span></span><br><span class="line"><span class="type">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="comment">//1.静态成员变量两种访问方式</span></span><br><span class="line">    Person p1;</span><br><span class="line">    p1.func();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.通过类名</span></span><br><span class="line">    Person::func();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Person::func02(); //错误，私有权限无法访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060507464274-1024x485.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识24：类和对象（对象的初始化和清理-类对象作为类成员）</title>
      <link href="/post/10048791.html"/>
      <url>/post/10048791.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h1><h2 id="4-2-7-类对象作为类成员"><a href="#4-2-7-类对象作为类成员" class="headerlink" title="4.2.7 类对象作为类成员"></a>4.2.7 类对象作为类成员</h2><p>C++类中的成员可以是另一个类的对象，我们称该成员为对象成员。 </p><p><strong>例如：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B类中有对象A作为成员，A为对象成员。 那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    Phone(<span class="built_in">string</span> name):m_PName(name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Phone 构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~Phone() </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Phoen 析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> m_PName;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//公共权限</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    Person(<span class="type">int</span> id, <span class="built_in">string</span> name, <span class="type">int</span> age, <span class="built_in">string</span> phone) :m_Id(id), m_Name(name), m_Age(age), m_Phone(phone)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 构造函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~Person()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 析构函数调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> m_Id;           <span class="comment">//序号</span></span><br><span class="line">    <span class="built_in">string</span> m_Name;      <span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> m_Age;          <span class="comment">//年龄</span></span><br><span class="line">    Phone m_Phone;      <span class="comment">//手机</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person <span class="title function_">p</span><span class="params">(<span class="number">1001</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">18</span>, <span class="string">&quot;华为P40PRO&quot;</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;序号：&quot;</span> &lt;&lt; p.m_Id &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot;\t年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="string">&quot;\t手机：&quot;</span> &lt;&lt; p.m_Phone.m_PName &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060506103964-1024x405.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识23：类和对象（对象的初始化和清理-初始化列表）</title>
      <link href="/post/92cfe06a.html"/>
      <url>/post/92cfe06a.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-2-对象的初始化和清"><a href="#4-2-对象的初始化和清" class="headerlink" title="4.2 对象的初始化和清"></a>4.2 对象的初始化和清</h1><h2 id="4-2-6-初始化列表"><a href="#4-2-6-初始化列表" class="headerlink" title="4.2.6 初始化列表"></a>4.2.6 初始化列表</h2><p><strong>作用：</strong> C++提供了初始化列表语法，用来初始化属性。 </p><p><strong>语法：</strong>构造函数( ):属性1( 值1 ),属性2( 值1 ),…{ }</p><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//公共权限</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    Person(<span class="type">int</span> id, <span class="built_in">string</span> name, <span class="type">int</span> age) :m_Id(id), m_Name(name), m_Age(age)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~Person()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有权限</span></span><br><span class="line"><span class="comment">//private:</span></span><br><span class="line">    <span class="type">int</span> m_Id;           <span class="comment">//序号</span></span><br><span class="line">    <span class="built_in">string</span> m_Name;      <span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> m_Age;          <span class="comment">//年龄</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person <span class="title function_">p</span><span class="params">(<span class="number">1001</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">18</span>)</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;序号：&quot;</span> &lt;&lt; p.m_Id &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot;\t年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060505450862-1024x432.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识22：类和对象（对象的初始化和清理-深拷贝与浅拷贝）</title>
      <link href="/post/f261c562.html"/>
      <url>/post/f261c562.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h1><h2 id="4-2-5-深拷贝与浅拷贝"><a href="#4-2-5-深拷贝与浅拷贝" class="headerlink" title="4.2.5 深拷贝与浅拷贝"></a>4.2.5 深拷贝与浅拷贝</h2><p><strong>深浅拷贝是面试经典问题，也是常见的一个坑</strong></p><p><strong>浅拷贝：</strong>简单的赋值拷贝操作<br><strong>深拷贝：</strong>在堆区重新申请空间，进行拷贝操作 </p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//公共权限</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">Person()<span class="comment">//无参构造（默认构造/普通构造）</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 无参构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person(<span class="type">int</span> age,<span class="type">int</span> height)<span class="comment">//有参构造（普通构造）</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 有参构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">m\_Age = age;</span><br><span class="line">m\_Height = new <span class="type">int</span>(height);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person(<span class="type">const</span> Person &amp;p)<span class="comment">//拷贝构造</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 拷贝构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">m\_Age = p.m\_Age;</span><br><span class="line">                <span class="comment">//m\_Height = p.m\_Height;//错误，编译器默认生成的代码</span></span><br><span class="line">m\_Height = new <span class="type">int</span>(\*p.m\_Height);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~Person()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Func 析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (m\_Height !=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">delete m\_Height;</span><br><span class="line">m\_Height = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"><span class="type">int</span> m\_Age;<span class="comment">//年龄</span></span><br><span class="line"><span class="type">int</span> \*m\_Height;<span class="comment">//身高</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">Person <span class="title function_">p1</span><span class="params">(<span class="number">18</span>, <span class="number">170</span>)</span>;</span><br><span class="line">Person <span class="title function_">p2</span><span class="params">(p1)</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1年龄为：&quot;</span> &lt;&lt; p1.m\_Age &lt;&lt; <span class="string">&quot;\\tp1身高为：&quot;</span> &lt;&lt; \*p1.m\_Height &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p2年龄为：&quot;</span> &lt;&lt; p2.m\_Age &lt;&lt; <span class="string">&quot;\\tp2身高为：&quot;</span> &lt;&lt; \*p2.m\_Height &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);<span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060503363618-1024x505.jpg"></p><h4 id="总结：如果属性有在堆区开辟的内存，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题。"><a href="#总结：如果属性有在堆区开辟的内存，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题。" class="headerlink" title="总结：如果属性有在堆区开辟的内存，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题。"></a>总结：如果属性有在堆区开辟的内存，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题。</h4>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识21：类和对象（对象的初始化和清理-构造函数调用规则）</title>
      <link href="/post/4957dc4c.html"/>
      <url>/post/4957dc4c.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h1><h2 id="4-2-4-构造函数调用规则"><a href="#4-2-4-构造函数调用规则" class="headerlink" title="4.2.4 构造函数调用规则"></a>4.2.4 构造函数调用规则</h2><p>默认情况下，C++编译器至少给一个类添加3个函数。</p><ul><li>1.默认构造函数（无参，函数体为空）。</li><li>2.默认析构函数（无参，函数体为空）。</li><li>3.默认拷贝构造函数，对属性进行值拷贝。</li></ul><p>构造函数调用规则如下：</p><ul><li>如果用户定义有参构造函数，C++不在提供默认无参构造，但是会提供默认拷贝构造。</li><li>如果用户定义拷贝构造函数，C++不再提供其他构造函数。</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Func</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//公共权限</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    Func()  <span class="comment">//无参构造（默认构造/普通构造）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Func 无参构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Func(<span class="type">int</span> a) <span class="comment">//有参构造（普通构造）</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_Age = a;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Func 有参构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Func(<span class="type">const</span> Func &amp;f)     <span class="comment">//拷贝构造</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Func 拷贝构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        m_Age = f.m_Age;    <span class="comment">//将传入的对象所有属性，拷贝到这个对象里</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~Func()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Func 析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> m_Age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.如果用户定义有参构造函数，C++不在提供默认无参构造，但是会提供默认拷贝构造。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Func f;</span><br><span class="line">    f.m_Age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    Func <span class="title function_">f2</span><span class="params">(f)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;f2的年龄为：&quot;</span> &lt;&lt; f2.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.如果用户定义拷贝构造函数，C++不再提供其他构造函数。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Test02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Func <span class="title function_">f</span><span class="params">(<span class="number">28</span>)</span>;</span><br><span class="line">    Func <span class="title function_">f2</span><span class="params">(f)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;f2的年龄为：&quot;</span> &lt;&lt; f2.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Test01();</span></span><br><span class="line">    Test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识20：类和对象（对象的初始化和清理-拷贝构造函数调用时机）</title>
      <link href="/post/1e388f1.html"/>
      <url>/post/1e388f1.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h1><h2 id="4-2-3-拷贝构造函数调用时机"><a href="#4-2-3-拷贝构造函数调用时机" class="headerlink" title="4.2.3 拷贝构造函数调用时机"></a>4.2.3 拷贝构造函数调用时机</h2><p>C++中拷贝构造函数调用时机通常有三种情况：</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象。</li><li>值传递的方式给函数参数传值。</li><li>以值方式返回局部对象。</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Func</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//公共权限</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    Func()  <span class="comment">//无参构造（默认构造/普通构造）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Func 无参构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Func(<span class="type">int</span> a) <span class="comment">//有参构造（普通构造）</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_Age = a;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Func 有参构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Func(<span class="type">const</span> Func &amp;f)     <span class="comment">//拷贝构造</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Func 拷贝构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        m_Age = f.m_Age;    <span class="comment">//将传入的对象所有属性，拷贝到这个对象里</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~Func()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Func 析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> m_Age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用一个已经创建完毕的对象来初始化一个新对象。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Func <span class="title function_">f1</span><span class="params">(<span class="number">10</span>)</span>;</span><br><span class="line">    Func <span class="title function_">f2</span><span class="params">(f1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;f2的年龄为：&quot;</span> &lt;&lt; f2.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//值传递的方式给函数参数传值。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">doWork01</span><span class="params">(Func f)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Test02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Func f;</span><br><span class="line">    doWork01(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以值方式返回局部对象。</span></span><br><span class="line">Func <span class="title function_">doWork02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Func f1;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (<span class="type">int</span>*)&amp;f1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> f1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Test03</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Func f = doWork02();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (<span class="type">int</span>*)&amp;f &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Test01();</span></span><br><span class="line">    <span class="comment">//Test02();</span></span><br><span class="line">    Test03();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识19：类和对象（对象的初始化和清理-构造函数的分类及调用）</title>
      <link href="/post/410f4cfc.html"/>
      <url>/post/410f4cfc.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-2对象的初始化和清理"><a href="#4-2对象的初始化和清理" class="headerlink" title="4.2对象的初始化和清理"></a>4.2对象的初始化和清理</h1><h2 id="4-2-2-构造函数的分类及调用"><a href="#4-2-2-构造函数的分类及调用" class="headerlink" title="4.2.2 构造函数的分类及调用"></a>4.2.2 构造函数的分类及调用</h2><p><strong>两种分类方式：</strong></p><ul><li>按参数分为：有参构造和无参构造。</li><li>按类型分曾：普通构造和拷贝构造。</li></ul><p><strong>三种调用方式：</strong></p><ul><li>括号法</li><li>显示法</li><li>隐式转换法</li></ul><h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Func</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//公共权限</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    Func()  <span class="comment">//无参构造（默认构造/普通构造）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Func 无参构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Func(<span class="type">int</span> a) <span class="comment">//有参构造（普通构造）</span></span><br><span class="line">    &#123;</span><br><span class="line">        age = a;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Func 有参构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Func(<span class="type">const</span> Func &amp;f)     <span class="comment">//拷贝构造</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Func 拷贝构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        age = f.age;    <span class="comment">//将传入的对象所有属性，拷贝到这个对象里</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~Func()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Func 析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Test</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//括号法</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***** 括号法 *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Func f01;       <span class="comment">//默认构造函数调用</span></span><br><span class="line">    Func <span class="title function_">f02</span><span class="params">(<span class="number">10</span>)</span>;   <span class="comment">//有参构造函数调用</span></span><br><span class="line">    Func <span class="title function_">f03</span><span class="params">(f02)</span>;  <span class="comment">//拷贝构造函数调用</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;f02的年龄为：&quot;</span> &lt;&lt; f02.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;f03的年龄为：&quot;</span> &lt;&lt; f03.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    注意事项1：</span></span><br><span class="line"><span class="comment">            1.调用默认构造函数的时候，不要加入( )</span></span><br><span class="line"><span class="comment">            Func f04();     //因为这等代码，编译器会认为是一个函数的声明，不会认为在创建对象。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示法</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***** 显示法 *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Func f11;               <span class="comment">//无参构造</span></span><br><span class="line">    Func f12 = Func(<span class="number">10</span>);    <span class="comment">//有参构造</span></span><br><span class="line">    Func f13 = Func(f12);   <span class="comment">//拷贝构造</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Func(10);   //匿名对象 特点：当前执行结束后，系统会立即回收匿名对象</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; &quot;匿名对象&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    注意事项2</span></span><br><span class="line"><span class="comment">            1.不要利用拷贝构造函数初始化匿名对象。 编译器会认为 Func(13)==Func f13;对象声明</span></span><br><span class="line"><span class="comment">            Func(f13);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//隐式转换法</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***** 隐式转换法 *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Func f21 = <span class="number">10</span>;      <span class="comment">//相当于 Func F21 = Func(10);  //有参构造</span></span><br><span class="line">    Func f22 = f21;     <span class="comment">//拷贝构造</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Test();     <span class="comment">//函数调用</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060408192013-1024x933.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识18：类和对象（对象的初始化和清理-构造函数和析构函数）</title>
      <link href="/post/a0c1d58.html"/>
      <url>/post/a0c1d58.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h1><ul><li>生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用的时候也会删除一些自己信息数据保证安全。</li><li>C++中的面向对象来源于生活，每个对象也都会有初始化设置以及对象销毁前的清理数据的设置。</li></ul><h2 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h2><ul><li>对象的<strong>初始化</strong>和<strong>清理</strong>也是两个非常重要的安全问题。</li><li>一个对象或者变量没有初始状态，对其使用后是未知。</li><li>同样的使用完一个对象或者变量，没有及时清理，也会造成一定的安全问题。</li></ul><p>C++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理的工作。对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造函数和析构函数，编译器会提供编译器的构造函数以及析构函数是空实现</strong>。</p><ul><li>构造函数：主要作用在于创建对象时为对象的<strong>成员属性赋值</strong>，构造函数由编译器自动调用，无须手动调用。</li><li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用执行一些清理工作。</li></ul><h3 id="构造函数语法：类名"><a href="#构造函数语法：类名" class="headerlink" title="构造函数语法：类名( ){ }"></a>构造函数语法：类名( ){ }</h3><ul><li>1.构造函数，没有返回值也不用写void。</li><li>2.函数名称与类名相同。</li><li>3.构造函数可以有参数，因此可以发生重载。</li><li>4.程序在调用对象时候会自动调用构造，无须手动调用，而且只会调用一次。</li></ul><h3 id="析构函数语法：-类名"><a href="#析构函数语法：-类名" class="headerlink" title="析构函数语法：~类名( ){ }"></a>析构函数语法：~类名( ){ }</h3><ul><li>1.析构函数，没有返回值也不写void。</li><li>2.函数名称与类名相同，在名称前加上符号~。</li><li>3.析构函数不可以有参数，因此不可以发生重载。</li><li>4.程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次。</li></ul><h3 id="测试示例："><a href="#测试示例：" class="headerlink" title="测试示例："></a>测试示例：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//公共权限</span></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    Person()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 构造函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~Person()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person 析构函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person p;   <span class="comment">//创建了一个对象，但是没有调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Func();     <span class="comment">//构造函数、析构函数测试</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020060407011755-1024x512.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识17：类和对象（封装-练习案例2：点和圆的关系）</title>
      <link href="/post/a7e8e2e0.html"/>
      <url>/post/a7e8e2e0.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4、类和对象"><a href="#4、类和对象" class="headerlink" title="4、类和对象"></a>4、类和对象</h1><h2 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h2><h3 id="4-1-4-练习案例2：点和圆的关系"><a href="#4-1-4-练习案例2：点和圆的关系" class="headerlink" title="4.1.4 练习案例2：点和圆的关系"></a>4.1.4 练习案例2：点和圆的关系</h3><p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。 <img src="http://image.camcad.cn/2020/06/2020060402430037-1024x344.jpg"></p><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p><img src="http://image.camcad.cn/2020/06/2020060402443743-1024x319.jpg"></p><h2 id="代码：方法一"><a href="#代码：方法一" class="headerlink" title="代码：方法一"></a>代码：方法一</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//公共仅限</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">SetX</span><span class="params">(<span class="type">double</span> x)</span>     <span class="comment">//设置X</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_X = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> <span class="title function_">GetX</span><span class="params">()</span>           <span class="comment">//获取X</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> m_X;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">SetY</span><span class="params">(<span class="type">double</span> y)</span>     <span class="comment">//设置Y</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_Y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> <span class="title function_">GetY</span><span class="params">()</span>           <span class="comment">//获取Y</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> m_Y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有仅限</span></span><br><span class="line">private:</span><br><span class="line">    <span class="type">double</span> m_X;     <span class="comment">//X</span></span><br><span class="line">    <span class="type">double</span> m_Y;     <span class="comment">//Y</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建圆类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//公共仅限</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">SetRadius</span><span class="params">(<span class="type">double</span> r)</span>        <span class="comment">//设置半径</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_R = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> <span class="title function_">GetRadius</span><span class="params">()</span>              <span class="comment">//获取半径</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> m_R;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">SetCenter</span><span class="params">(Point Center)</span>    <span class="comment">//设置圆心</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_Center = Center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Point <span class="title function_">GetCenter</span><span class="params">()</span>               <span class="comment">//获取圆心</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> m_Center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有仅限</span></span><br><span class="line">private:</span><br><span class="line">    <span class="type">double</span> m_R;     <span class="comment">//半径</span></span><br><span class="line">    Point m_Center; <span class="comment">//圆心（在类中可以让另一个类 作为本类成员）</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断点和圆的关系</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">isInCircle</span><span class="params">(Circle &amp;c, Point &amp;p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//求出两点之间的距离（平方）</span></span><br><span class="line">    <span class="type">double</span> Distance = (c.GetCenter().GetX() - p.GetX())*(c.GetCenter().GetX() - p.GetX()) +</span><br><span class="line">        (c.GetCenter().GetY() - p.GetY())*(c.GetCenter().GetY() - p.GetY());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算半径平方</span></span><br><span class="line">    <span class="type">double</span> rDistance = c.GetRadius()*c.GetRadius();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断关系</span></span><br><span class="line">    <span class="keyword">if</span> (Distance == rDistance)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;点在圆上&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Distance &lt; rDistance)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;点在圆内&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Distance &gt; rDistance)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;点在圆外&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建圆</span></span><br><span class="line">    Circle c;</span><br><span class="line">    c.SetRadius(<span class="number">10</span>);    <span class="comment">//半径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建圆心</span></span><br><span class="line">    Point Center;</span><br><span class="line">    Center.SetX(<span class="number">10</span>);</span><br><span class="line">    Center.SetY(<span class="number">0</span>);</span><br><span class="line">    c.SetCenter(Center);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建点</span></span><br><span class="line">    Point p;</span><br><span class="line">    p.SetX(<span class="number">10</span>);</span><br><span class="line">    p.SetY(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断关系</span></span><br><span class="line">    isInCircle(c, p);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码：方法二"><a href="#代码：方法二" class="headerlink" title="代码：方法二"></a>代码：方法二</h2><h3 id="圆类头文件（Circle-h）"><a href="#圆类头文件（Circle-h）" class="headerlink" title="圆类头文件（Circle.h）"></a>圆类头文件（Circle.h）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Point.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建圆类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//公共仅限</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">SetRadius</span><span class="params">(<span class="type">double</span> r)</span>;       <span class="comment">//设置半径</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">GetRadius</span><span class="params">()</span>;             <span class="comment">//获取半径</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">SetCenter</span><span class="params">(Point Center)</span>;   <span class="comment">//设置圆心</span></span><br><span class="line">    Point <span class="title function_">GetCenter</span><span class="params">()</span>;              <span class="comment">//获取圆心</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//私有仅限</span></span><br><span class="line">private:</span><br><span class="line">    <span class="type">double</span> m_R;     <span class="comment">//半径</span></span><br><span class="line">    Point m_Center; <span class="comment">//圆心（在类中可以让另一个类 作为本类成员）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="点类头文件（Point-h）"><a href="#点类头文件（Point-h）" class="headerlink" title="点类头文件（Point.h）"></a>点类头文件（Point.h）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//公共仅限</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">SetX</span><span class="params">(<span class="type">double</span> x)</span>;    <span class="comment">//设置X</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">GetX</span><span class="params">()</span>;          <span class="comment">//获取X</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">SetY</span><span class="params">(<span class="type">double</span> y)</span>;    <span class="comment">//设置Y</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">GetY</span><span class="params">()</span>;          <span class="comment">//获取Y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//私有仅限</span></span><br><span class="line">private:</span><br><span class="line">    <span class="type">double</span> m_X;     <span class="comment">//X</span></span><br><span class="line">    <span class="type">double</span> m_Y;     <span class="comment">//Y</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="圆类源文件（Circle-cpp）"><a href="#圆类源文件（Circle-cpp）" class="headerlink" title="圆类源文件（Circle.cpp）"></a>圆类源文件（Circle.cpp）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Circle.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Circle::SetRadius</span><span class="params">(<span class="type">double</span> r)</span>        <span class="comment">//设置半径</span></span><br><span class="line">&#123;</span><br><span class="line">    m_R = r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">Circle::GetRadius</span><span class="params">()</span>              <span class="comment">//获取半径</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Circle::SetCenter</span><span class="params">(Point Center)</span>    <span class="comment">//设置圆心</span></span><br><span class="line">&#123;</span><br><span class="line">    m_Center = Center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point <span class="title function_">Circle::GetCenter</span><span class="params">()</span>           <span class="comment">//获取圆心</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_Center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点类源文件（Point-cpp）"><a href="#点类源文件（Point-cpp）" class="headerlink" title="点类源文件（Point.cpp）"></a>点类源文件（Point.cpp）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Point.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Point::SetX</span><span class="params">(<span class="type">double</span> x)</span>      <span class="comment">//设置X</span></span><br><span class="line">&#123;</span><br><span class="line">    m_X = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">Point::GetX</span><span class="params">()</span>            <span class="comment">//获取X</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_X;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Point::SetY</span><span class="params">(<span class="type">double</span> y)</span>      <span class="comment">//设置Y</span></span><br><span class="line">&#123;</span><br><span class="line">    m_Y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">Point::GetY</span><span class="params">()</span>            <span class="comment">//获取Y</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_Y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主函数（main-cpp）"><a href="#主函数（main-cpp）" class="headerlink" title="主函数（main.cpp）"></a>主函数（main.cpp）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Point.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Circle.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断点和圆的关系</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">isInCircle</span><span class="params">(Circle &amp;c, Point &amp;p)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//求出两点之间的距离（平方）</span></span><br><span class="line">    <span class="type">double</span> Distance = (c.GetCenter().GetX() - p.GetX())*(c.GetCenter().GetX() - p.GetX()) +</span><br><span class="line">        (c.GetCenter().GetY() - p.GetY())*(c.GetCenter().GetY() - p.GetY());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算半径平方</span></span><br><span class="line">    <span class="type">double</span> rDistance = c.GetRadius()*c.GetRadius();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断关系</span></span><br><span class="line">    <span class="keyword">if</span> (Distance == rDistance)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;点在圆上&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Distance &lt; rDistance)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;点在圆内&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Distance &gt; rDistance)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;点在圆外&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建圆</span></span><br><span class="line">    Circle c;</span><br><span class="line">    c.SetRadius(<span class="number">10</span>);    <span class="comment">//半径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建圆心</span></span><br><span class="line">    Point Center;</span><br><span class="line">    Center.SetX(<span class="number">10</span>);</span><br><span class="line">    Center.SetY(<span class="number">0</span>);</span><br><span class="line">    c.SetCenter(Center);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建点</span></span><br><span class="line">    Point p;</span><br><span class="line">    p.SetX(<span class="number">10</span>);</span><br><span class="line">    p.SetY(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断关系</span></span><br><span class="line">    isInCircle(c, p);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识16：类和对象（封装-成员属性设置为私有）</title>
      <link href="/post/d18a6ddb.html"/>
      <url>/post/d18a6ddb.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4、类和对象"><a href="#4、类和对象" class="headerlink" title="4、类和对象"></a>4、类和对象</h1><h2 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h2><h3 id="4-1-3-成员属性设置为私有"><a href="#4-1-3-成员属性设置为私有" class="headerlink" title="4.1.3 成员属性设置为私有"></a>4.1.3 成员属性设置为私有</h3><p><strong>优点1：</strong>将所有成员属性设置为私有，可以自己控制读写权限。 </p><p><strong>优点2：</strong>对于写权限 ，我们可以检测数据的有效性。 </p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//公共权限</span></span><br><span class="line"><span class="comment">//优点1：将所有成员属性设置为私有，可以自己控制读写权限。</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">SetName</span><span class="params">(<span class="built_in">string</span> name)</span>   <span class="comment">//设置年龄</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> <span class="title function_">GetName</span><span class="params">()</span>            <span class="comment">//获取年龄</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> m_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">GetAge</span><span class="params">()</span>                <span class="comment">//获取年龄</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> m_age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> <span class="title function_">GetHeight</span><span class="params">()</span>          <span class="comment">//获取身高</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> m_height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优点2：对于写权限 ，我们可以检测数据的有效性。</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">SetAge</span><span class="params">(<span class="type">int</span> age)</span>        <span class="comment">//设置年龄</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt;= <span class="number">0</span>  age &gt; <span class="number">200</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;错误：年龄取值范围 0 &lt; 年龄 &gt; 200&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span>;     <span class="comment">//返回退出</span></span><br><span class="line">        &#125;</span><br><span class="line">        m_age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有权限</span></span><br><span class="line">private:</span><br><span class="line">    <span class="built_in">string</span> m_name = <span class="string">&quot;&quot;</span>;       <span class="comment">//姓名（读写）</span></span><br><span class="line">    <span class="type">int</span> m_age = <span class="number">0</span>;          <span class="comment">//年龄（写）</span></span><br><span class="line">    <span class="type">double</span> m_height = <span class="number">170</span>;  <span class="comment">//身高（读）</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    p1.SetName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    p1.SetAge(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p1.GetName() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; p1.GetAge() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;身高：&quot;</span> &lt;&lt; p1.GetHeight() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="练习案例1：设计立方体类"><a href="#练习案例1：设计立方体类" class="headerlink" title="练习案例1：设计立方体类"></a>练习案例1：设计立方体类</h3><ul><li>设计立方体类（Cube)。</li><li>求出立方体的面积和体积。</li><li>分别用全局函数和成员函数判断两个立方体是否相等。 <img src="http://image.camcad.cn/2020/06/2020060308393019-1024x312.jpg"></li></ul><p><strong>示例代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、设计立方体类（Cube）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cube</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//公共权限</span></span><br><span class="line">public:</span><br><span class="line"><span class="type">void</span> <span class="title function_">SetL</span><span class="params">(<span class="type">double</span> l)</span><span class="comment">//设置长度</span></span><br><span class="line">&#123;</span><br><span class="line">m\_L = l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">GetL</span><span class="params">()</span><span class="comment">//获取长度</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m\_L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SetW</span><span class="params">(<span class="type">double</span> w)</span><span class="comment">//设置宽度</span></span><br><span class="line">&#123;</span><br><span class="line">m\_W = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">GetW</span><span class="params">()</span><span class="comment">//获取宽度</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m\_W;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SetH</span><span class="params">(<span class="type">double</span> h)</span><span class="comment">//设置高度</span></span><br><span class="line">&#123;</span><br><span class="line">m\_H = h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">GetH</span><span class="params">()</span><span class="comment">//获取高度</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m\_H;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、求出立方体的面积和体积</span></span><br><span class="line"><span class="type">double</span> <span class="title function_">CalculateS</span><span class="params">()</span><span class="comment">//面积</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> \* m\_L\*m\_W + <span class="number">2</span> \* m\_W\*m\_H + <span class="number">2</span> \* m\_L\*m\_H;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">CalculateV</span><span class="params">()</span><span class="comment">//体积</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> m\_L \* m\_W \* m\_H;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、通过成员函数判断两个立方体是否相等</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isSameByClass</span><span class="params">(Cube &amp;c)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m\_L == c.GetL() &amp;&amp; m\_W == c.GetW() &amp;&amp; m\_H == c.GetH())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有权限</span></span><br><span class="line">private:</span><br><span class="line"><span class="type">double</span> m\_L = <span class="number">0.0</span>;<span class="comment">//长</span></span><br><span class="line"><span class="type">double</span> m\_W = <span class="number">0.0</span>;<span class="comment">//宽</span></span><br><span class="line"><span class="type">double</span> m\_H = <span class="number">0.0</span>;<span class="comment">//高</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、通过全局函数判断两个立方体是否相等</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isSame</span><span class="params">(Cube &amp;c1, Cube&amp;c2)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c1.GetL() == c2.GetL() &amp;&amp; c1.GetW() == c2.GetW() &amp;&amp; c1.GetH() == c2.GetH())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建立方体一</span></span><br><span class="line">Cube c1;</span><br><span class="line">c1.SetL(<span class="number">10</span>);</span><br><span class="line">c1.SetW(<span class="number">10</span>);</span><br><span class="line">c1.SetH(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c1立方体的面积：&quot;</span> &lt;&lt; c1.CalculateS() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c1立方体的体积：&quot;</span> &lt;&lt; c1.CalculateV() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建立方体二</span></span><br><span class="line">Cube c2;</span><br><span class="line">c2.SetL(<span class="number">10</span>);</span><br><span class="line">c2.SetW(<span class="number">10</span>);</span><br><span class="line">c2.SetH(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c2立方体的面积：&quot;</span> &lt;&lt; c2.CalculateS() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c2立方体的体积：&quot;</span> &lt;&lt; c2.CalculateV() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、通过成员函数判断两个立方体是否相等</span></span><br><span class="line"><span class="type">bool</span> ret01 = c1.isSameByClass(c2);</span><br><span class="line"><span class="keyword">if</span> (ret01)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成员函数：c1和c2两个立方体相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;成员函数：c1和c2两个立方体不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、通过全局函数判断两个立方体是否相等</span></span><br><span class="line"><span class="type">bool</span> ret02 = isSame(c1, c2);</span><br><span class="line"><span class="keyword">if</span> (ret02)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局函数：c1和c2两个立方体相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局函数：c1和c2两个立方体不相等&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);<span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下：</p><p><img src="http://image.camcad.cn/2020/06/2020060309521525-1024x510.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识15：类和对象（封装-struct和class区别）</title>
      <link href="/post/443da51e.html"/>
      <url>/post/443da51e.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4、类和对象"><a href="#4、类和对象" class="headerlink" title="4、类和对象"></a>4、类和对象</h1><h2 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h2><h3 id="4-1-2-struct和class区别"><a href="#4-1-2-struct和class区别" class="headerlink" title="4.1.2 struct和class区别"></a>4.1.2 struct和class区别</h3><p>在C++中struct和class唯一的<strong>区别</strong>就在于默认的<strong>访问权限不同</strong>。 </p><p><strong>区别：</strong></p><ul><li>struct 默认权限为公共</li><li>class 默认权限为私有</li></ul><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Func01</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> m_name;  <span class="comment">//默认是公共权限</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Func02</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> m_name;  <span class="comment">//默认是私有权限</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Func01 f1;</span><br><span class="line">    f1.m_name = <span class="string">&quot;默认是公共权限&quot;</span>;    <span class="comment">//正确，默认是公共权限</span></span><br><span class="line"></span><br><span class="line">    Func02 f2;</span><br><span class="line">    <span class="comment">//f2.m_name = &quot;默认是私有权限&quot;;  //错误，默认是私有权限（无法访问）</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识14：类和对象（封装-封装的意义）</title>
      <link href="/post/d60295ce.html"/>
      <url>/post/d60295ce.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="4、类和对象"><a href="#4、类和对象" class="headerlink" title="4、类和对象"></a>4、类和对象</h1><p>C++面向对象的三大特性为：封装、继承、多态。</p><p>C++认为万事万物都皆为对象，对象上有其属性和行为。</p><p>例如： 人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、吃饭、唱歌… 车也可以作为对象，属性有轮胎，方向盘、车灯、…,,行为有载人、放音乐、开空调… 具有相同性质的对象，我们可以抽象称为类，人属于人类，车属于车类。</p><h2 id="4-1-封装"><a href="#4-1-封装" class="headerlink" title="4.1 封装"></a>4.1 封装</h2><h3 id="4-1-1-封装的意义"><a href="#4-1-1-封装的意义" class="headerlink" title="4.1.1 封装的意义"></a>4.1.1 封装的意义</h3><p>封闭是C++面向对象三大特性之一。 </p><p><strong>封装的意义：</strong></p><ul><li>将属性和行为作为一个整体，表现生活中的事物。</li><li>将属性和行为加以权限控制。</li></ul><hr><p><strong>封装意义一：</strong> 在设计类的时候，属性和行为写在一起，表现事物。 </p><p><strong>语法：</strong>class 类名{ 访问权限: 属性 &#x2F; 行为 };</p><h3 id="示例1：设计一个圆类，，求出圆的周长。"><a href="#示例1：设计一个圆类，，求出圆的周长。" class="headerlink" title="示例1：设计一个圆类，，求出圆的周长。"></a>示例1：设计一个圆类，，求出圆的周长。</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、设计一个圆类，求出圆的周长（圆求周长的公式：2 * PI * m_r）</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14</span>; <span class="comment">//圆周率</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//访问权限</span></span><br><span class="line">public:     <span class="comment">//公共权限</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="type">double</span> m_r;     <span class="comment">//半径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//行为</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">CalculateZC</span><span class="params">()</span>    <span class="comment">//获取圆的周长</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * PI * m_r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//实例化（通过一个类，创建一个对象的过程）</span></span><br><span class="line"></span><br><span class="line">    Circle Cir;     <span class="comment">//通过圆类，创建具体的圆（对象）</span></span><br><span class="line">    Cir.m_r = <span class="number">10</span>;   <span class="comment">//给圆赋属性（半径值）</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;圆的周长为：&quot;</span> &lt;&lt; Cir.CalculateZC() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/06/2020060302220086-1024x488.jpg"></p><h3 id="示例2：设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号。"><a href="#示例2：设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号。" class="headerlink" title="示例2：设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号。"></a>示例2：设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号。</h3><p><strong>方法1：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//访问权限</span></span><br><span class="line">public:     <span class="comment">//公共权限</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="built_in">string</span> m_name=<span class="string">&quot;null&quot;</span>; <span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> m_id=<span class="number">-1</span>;            <span class="comment">//学号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//行为</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">ShowStudent</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学生的姓名：&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学生的学号：&quot;</span> &lt;&lt; m_id &lt;&lt; <span class="built_in">endl</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//实例化（通过一个类，创建一个对象的过程）</span></span><br><span class="line"></span><br><span class="line">    Student stu;</span><br><span class="line">    stu.m_name = <span class="string">&quot;小二&quot;</span>;</span><br><span class="line">    stu.m_id = <span class="number">1001</span>;</span><br><span class="line">    stu.ShowStudent();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法2：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//访问权限</span></span><br><span class="line">public:     <span class="comment">//公共权限</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="built_in">string</span> m_name = <span class="string">&quot;null&quot;</span>;   <span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> m_id = <span class="number">-1</span>;          <span class="comment">//学号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//行为</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">SetName</span><span class="params">(<span class="built_in">string</span> name)</span>   <span class="comment">//姓名赋值</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">SetId</span><span class="params">(<span class="type">int</span> id)</span>      <span class="comment">//学号赋值</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> <span class="title function_">ShowStudent</span><span class="params">()</span>      <span class="comment">//打印显示</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学生的姓名：&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学生的学号：&quot;</span> &lt;&lt; m_id &lt;&lt; <span class="built_in">endl</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//实例化（通过一个类，创建一个对象的过程）</span></span><br><span class="line">    Student stu01;</span><br><span class="line">    stu01.SetName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    stu01.SetId(<span class="number">1002</span>);</span><br><span class="line">    stu01.ShowStudent();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/06/2020060303133859.jpg"></p><hr><hr><p><strong>封装意义二：</strong> 类在设计时，可以批属性和行为放在不同的权限下，加以控制。 </p><p><strong>访问权限有三种：</strong><br><strong>public</strong>：公共权限（类内可以访问，类外也可以访问）<br><strong>protected</strong>：保护权限（类内可以访问，类外不可以访问）<br><strong>private</strong>：私有权限（类内可以访问，类外不可以访问） </p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//访问权限有三种：</span></span><br><span class="line"><span class="comment">//1、public：公共权限（类内可以访问，类外也可以访问）</span></span><br><span class="line"><span class="comment">//2、protected：保护权限（类内可以访问，类外不可以访问）</span></span><br><span class="line"><span class="comment">//3、private：私有权限（类内可以访问，类外不可以访问）</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//访问权限</span></span><br><span class="line">public:     <span class="comment">//公共权限</span></span><br><span class="line">    <span class="built_in">string</span> m_name = <span class="string">&quot;null&quot;</span>;       <span class="comment">//姓名</span></span><br><span class="line"></span><br><span class="line">protected:  <span class="comment">//保护权限</span></span><br><span class="line">    <span class="built_in">string</span> m_Car = <span class="string">&quot;本田&quot;</span>;      <span class="comment">//汽车</span></span><br><span class="line"></span><br><span class="line">private:    <span class="comment">//私有权限</span></span><br><span class="line">    <span class="type">int</span> m_Password = <span class="number">123456</span>;    <span class="comment">//密码</span></span><br><span class="line"></span><br><span class="line">public:     <span class="comment">//公共权限</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">ShowPerson</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; m_name &lt;&lt; <span class="string">&quot;\n汽车：&quot;</span> &lt;&lt; m_Car &lt;&lt; <span class="string">&quot;\n密码：&quot;</span> &lt;&lt; m_Password &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person p1;</span><br><span class="line">    p1.m_name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//p1.m_Car = &quot;宝马&quot;;        //protected：保护权限（类内可以访问，类外不可以访问）</span></span><br><span class="line">    <span class="comment">//p1.m_Password = 123;      //private：私有权限（类内可以访问，类外不可以访问）</span></span><br><span class="line"></span><br><span class="line">    p1.ShowPerson();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识13：函数提高（函数重载-函数重载注意事项）</title>
      <link href="/post/af4cd469.html"/>
      <url>/post/af4cd469.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="3、函数提高"><a href="#3、函数提高" class="headerlink" title="3、函数提高"></a>3、函数提高</h1><h2 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h2><h3 id="3-3-2-函数重载注意事项"><a href="#3-3-2-函数重载注意事项" class="headerlink" title="3.3.2 函数重载注意事项"></a>3.3.2 函数重载注意事项</h3><ul><li>引用作为重载条件 </li><li>函数重载碰到函数默认参数</li></ul><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、引用作为重载条件</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func01</span><span class="params">(<span class="type">int</span> &amp;a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func01(int &amp;a)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func01</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func01(const int &amp;a)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、函数重载碰到函数默认参数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func02</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func02(int a)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func02</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">10</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func02(int a,int b=10)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    func01(a);      <span class="comment">//调用无const</span></span><br><span class="line">    func01(<span class="number">10</span>);     <span class="comment">//调用有const</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//func02(10);       //错误，当函数重载碰到默认参数，出现二义性，报错，尽量避免这种情况</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识12：函数提高（函数重载-函数重载概述）</title>
      <link href="/post/a93a0f90.html"/>
      <url>/post/a93a0f90.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="3、函数提高"><a href="#3、函数提高" class="headerlink" title="3、函数提高"></a>3、函数提高</h1><h2 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h2><h3 id="3-3-1-函数重载概述"><a href="#3-3-1-函数重载概述" class="headerlink" title="3.3.1 函数重载概述"></a>3.3.1 函数重载概述</h3><p><strong>作用：</strong>函数名可以相同，提高复用性。</p><p><strong>函数重载满足条件：</strong></p><ul><li>同一个作用域下</li><li>函数名称相同</li><li>函数参数</li></ul><p><strong>类型不同</strong> 或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong>。</p><p><strong>注意：</strong>函数的返回值不可以作为函数重载的条件。</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数重载需要函数都在同一个作用域下</span></span><br><span class="line"><span class="comment">//1、同一个作用域下</span></span><br><span class="line"><span class="comment">//2、函数名称相同</span></span><br><span class="line"><span class="comment">//3、函数参数类型不同 或者 个数不同 或者 顺序不同</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func 的调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func(int) 的调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span>,<span class="type">double</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func(int,double) 的调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">double</span>, <span class="type">int</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func(double, int) 的调用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意事项</span></span><br><span class="line"><span class="comment">//函数的返回值不可以作为函数重载的条件</span></span><br><span class="line"><span class="comment">//int func(int)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//  cout &lt;&lt; &quot;func(int) 的调用&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//  return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    func();</span><br><span class="line">    func(<span class="number">10</span>);</span><br><span class="line">    func(<span class="number">10</span>,<span class="number">3.14</span>);</span><br><span class="line">    func(<span class="number">3.1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/06/2020060211224141.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识11：函数提高（函数占位参数）</title>
      <link href="/post/11a68870.html"/>
      <url>/post/11a68870.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="3、函数提高"><a href="#3、函数提高" class="headerlink" title="3、函数提高"></a>3、函数提高</h1><h2 id="3-2-函数占位参数"><a href="#3-2-函数占位参数" class="headerlink" title="3.2 函数占位参数"></a>3.2 函数占位参数</h2><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置。 </p><p><strong>语法：</strong>返回值类型 函数名 ( 数据类型 ){ 代码列表 };</p><p>在现阶段函数的占位参数存在的意义不大，但是后面的课程中会用到该技术。 </p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数占位参数，占位参数也可以有默认参数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func01</span><span class="params">(<span class="type">int</span> a ,<span class="type">int</span> <span class="comment">/* int =10 */</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;this is func&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    func01(<span class="number">10</span>,<span class="number">10</span>);  <span class="comment">//占位参数必须填补</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识10：函数提高（函数默认参数）</title>
      <link href="/post/742f45c2.html"/>
      <url>/post/742f45c2.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="3、函数提高"><a href="#3、函数提高" class="headerlink" title="3、函数提高"></a>3、函数提高</h1><h2 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h2><p>在C++中，函数的形参列表中的形参是可以有默认值的。 </p><p><strong>语法：</strong>返回值类型 函数名 ( 参数 ＝ 默认值 ) { 代码列表 };</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">func01</span><span class="params">(<span class="type">int</span> a = <span class="number">10</span>, <span class="type">int</span> b = <span class="number">20</span>, <span class="type">int</span> c = <span class="number">30</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;   <span class="comment">//返回值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、如果函数声明有默认值，函数实现的时候就不能有默认参数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">func02</span><span class="params">(<span class="type">int</span> a = <span class="number">10</span>, <span class="type">int</span> b = <span class="number">30</span>, <span class="type">int</span> c = <span class="number">50</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">func02</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; func01(<span class="number">20</span>,<span class="number">20</span>) &lt;&lt; <span class="built_in">endl</span>;      <span class="comment">//a=20,b=20</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; func02(<span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;        <span class="comment">//a=100</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/06/2020060210221448-1024x515.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识09：引用（常量引用）</title>
      <link href="/post/22ef0d6a.html"/>
      <url>/post/22ef0d6a.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="2、引用"><a href="#2、引用" class="headerlink" title="2、引用"></a>2、引用</h1><h2 id="2-6-常量引用"><a href="#2-6-常量引用" class="headerlink" title="2.6 常量引用"></a>2.6 常量引用</h2><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作。</p><p>在函数形参列表中，可以加const修改形参，防止形参改变实参。 </p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、注意：不要返回局部变量引用</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func01</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;ref)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//ref = 100;    //错误，加了const修饰不可修改</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func01 ref= &quot;</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// int &amp;ref = 10; 错误，引用本身需要一个合法的内存空间。</span></span><br><span class="line">    <span class="comment">//加入const修饰后，编译器优化代码：int tpmp = 10; const int &amp;ref=temp;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> &amp;ref = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ref = 20;     //错误，加了const修饰不可修改</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;main ref=&quot;</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数中利用常量引用耳闻目染误操作修改实参</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    func01(a);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/06/2020060209434671.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识08：引用（引用的本质）</title>
      <link href="/post/54d34880.html"/>
      <url>/post/54d34880.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="2、引用"><a href="#2、引用" class="headerlink" title="2、引用"></a>2、引用</h1><h2 id="2-4-引用的本质"><a href="#2-4-引用的本质" class="headerlink" title="2.4 引用的本质"></a>2.4 引用的本质</h2><p><strong>本质：</strong>引用的本质在C++内部实现是一个指针常量。 </p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、注意：不要返回局部变量引用</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func01</span><span class="params">(<span class="type">int</span> &amp;ref)</span></span><br><span class="line">&#123;</span><br><span class="line">    ref = <span class="number">100</span>;  <span class="comment">//ref是引用，转换为 *ref =100;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;func01 ref= &quot;</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编译器自动转换为 int * const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用初始化后不可更改。</span></span><br><span class="line">    <span class="type">int</span> &amp;ref = a;   </span><br><span class="line">    ref = <span class="number">20</span>;   <span class="comment">//内部发现ref是引用，自动帮我们转换为：*ref = 20;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;main a= &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;main ref= &quot;</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    func01(a);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/06/2020060209180053-1024x562.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识07：引用（引用做函数返回值）</title>
      <link href="/post/49e8996a.html"/>
      <url>/post/49e8996a.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="2、引用"><a href="#2、引用" class="headerlink" title="2、引用"></a>2、引用</h1><h2 id="2-4-引用做函数返回值"><a href="#2-4-引用做函数返回值" class="headerlink" title="2.4 引用做函数返回值"></a>2.4 引用做函数返回值</h2><p><strong>作用：</strong>引用是可以作为函数的返回值存在的。</p><p><strong>注意：</strong>不要返回局部变量引用 </p><p><strong>用法：</strong>函数调用可以作为左值使用。 </p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、注意：不要返回局部变量引用</span></span><br><span class="line"><span class="type">int</span> &amp;<span class="title function_">func01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;     <span class="comment">//局部变量存放在栈区，执行函数后将自动释放内存</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、用法：函数调用可以作为左值使用。</span></span><br><span class="line"><span class="type">int</span> &amp;<span class="title function_">func02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> a = <span class="number">20</span>;  <span class="comment">//静态变量存放在全局区，将由操作系统回收</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    int &amp;main_a = func01();</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; main_a &lt;&lt; endl;     //第一次调用成功</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; main_a &lt;&lt; endl;     //错误，局部变量的数据存放在栈区，执行函数后将自动释放内存</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> &amp;main_a = func02();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; main_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; main_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    func02() = <span class="number">50</span>;      <span class="comment">//引用：函数调用可以作为左值使用。</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; main_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; main_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/06/2020060208310850.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识06：引用（引用做函数参数）</title>
      <link href="/post/7c1f4207.html"/>
      <url>/post/7c1f4207.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="2、引用"><a href="#2、引用" class="headerlink" title="2、引用"></a>2、引用</h1><h2 id="2-3-引用做函数参数"><a href="#2-3-引用做函数参数" class="headerlink" title="2.3 引用做函数参数"></a>2.3 引用做函数参数</h2><p><strong>作用：</strong>函数传参时，可以利用引用的方法让形参修饰实参。 </p><p><strong>优点：</strong>可以简化指针修改实参。 </p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap01</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;swap01 a= &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;swap01 b= &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap02</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tmap = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = tmap;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;swap02 a= &quot;</span> &lt;&lt; *a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;swap02 b= &quot;</span> &lt;&lt; *b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用传递</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap03</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tmap = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmap;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;swap03 a= &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;swap03 b= &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//swap01(a, b);     //值传递，形参不修饰实参</span></span><br><span class="line">    <span class="comment">//swap02(&amp;a,&amp;b);    //地址传递，形参修饰实参</span></span><br><span class="line">    swap03(a, b);       <span class="comment">//引用传递，形参修饰实参</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;main a= &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;main b= &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/06/2020060207562775.jpg"></p><p><strong>总结：</strong>通过引用参数产生的效果同按<strong>地址传递</strong>是一样的，引用的语法更简单。</p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识05：引用（引用的注意事项）</title>
      <link href="/post/2c4aca87.html"/>
      <url>/post/2c4aca87.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="2、引用"><a href="#2、引用" class="headerlink" title="2、引用"></a>2、引用</h1><h2 id="2-2-引用注意事项"><a href="#2-2-引用注意事项" class="headerlink" title="2.2 引用注意事项"></a>2.2 引用注意事项</h2><ul><li>引用必须初始化</li><li>引用在初始化后，不可以改变</li></ul><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int &amp;b;//错误，引用必须初始化</span></span><br><span class="line"><span class="type">int</span> &amp;b = a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int &amp;b = c;//错误，引用初始化后，就不可更改</span></span><br><span class="line"></span><br><span class="line">b = c;<span class="comment">//这是赋值操作，不是更改引用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a= &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b= &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c= &quot;</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);<span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下：</p><p><img src="http://image.camcad.cn/2020/06/2020060207231871-1024x475.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识04：引用（引用的基本使用）</title>
      <link href="/post/d3d53efc.html"/>
      <url>/post/d3d53efc.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="2、引用"><a href="#2、引用" class="headerlink" title="2、引用"></a>2、引用</h1><h2 id="2-1-引用的基本使用"><a href="#2-1-引用的基本使用" class="headerlink" title="2.1 引用的基本使用"></a>2.1 引用的基本使用</h2><p><strong>作用：</strong>给变量起别名 </p><p><strong>语法：</strong>数据类型 &amp;别名 &#x3D; 原名; </p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//定义整型</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//引用语法：数据类型 &amp;别名 = 原名;</span></span><br><span class="line">    <span class="type">int</span> &amp;b = a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;修改前a= &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;修改前b= &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    b = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;修改后a= &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;修改后b= &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下: <img src="http://image.camcad.cn/2020/06/2020060206591586.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识03：内存分区模型（new操作符）</title>
      <link href="/post/f5a87345.html"/>
      <url>/post/f5a87345.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="C-核心知识"><a href="#C-核心知识" class="headerlink" title="C++核心知识"></a>C++核心知识</h1><p>本阶段主要针对C++面向对象编程技术做详细讲解，探讨C++中的核心和精髓。</p><h2 id="1、内存分区模型"><a href="#1、内存分区模型" class="headerlink" title="1、内存分区模型"></a>1、内存分区模型</h2><p><strong>C++程序在执行时，将内存大方向划分4个区域：</strong></p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理。</li><li>全局区：存放全局变量和静态变量以及常量。</li><li>栈区：由编译器自动分配释放，存放函数的参数的参数值，局部变量等。</li><li>堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收。</li></ul><p><strong>内存四区意义：</strong> 不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程。</p><h3 id="1-3-new操作符"><a href="#1-3-new操作符" class="headerlink" title="1.3 new操作符"></a>1.3 new操作符</h3><p>C++中利用new操作符在堆区开辟数据。 堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符delete。 </p><p><strong>语法：</strong>new 数据类型 利用new创建的数据，会返回该数据对应的类型指针。 </p><p><strong>示例1：基本语法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//利用new关键字，可以将数据开辟到堆区</span></span><br><span class="line">    <span class="comment">//指针 本质也是局部变量放在栈区上，指针保存的 数据 是放在堆区上</span></span><br><span class="line">    <span class="type">int</span> *a = new <span class="type">int</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> a;       <span class="comment">//返回堆区开辟的内存地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//接受func函数返回开辟在堆区的数据</span></span><br><span class="line">    <span class="type">int</span> *main_a = func();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *main_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    delete main_a;      <span class="comment">//释放内存</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例2：利用new操作符创建数组（int类型）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在堆区利用new操作符开辟数组</span></span><br><span class="line"><span class="type">int</span> *<span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建10个整型数据的数组在堆区</span></span><br><span class="line">    <span class="type">int</span> *arr = new <span class="type">int</span>[<span class="number">10</span>];     <span class="comment">//10表示数组有10个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//给堆区10个数组赋值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[i] = <span class="number">100</span> + i;       <span class="comment">//给元素赋值 100~109</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印堆区数组里面的值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放内存</span></span><br><span class="line">    delete[] arr;       <span class="comment">//注意：在堆区上的数组，释放内存时需加上[]符号表示数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *main_a = func();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识02：内存分区模型（程序运行后）</title>
      <link href="/post/a9567b5e.html"/>
      <url>/post/a9567b5e.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="C-核心知识"><a href="#C-核心知识" class="headerlink" title="C++核心知识"></a>C++核心知识</h1><p>本阶段主要针对C++面向对象编程技术做详细讲解，探讨C++中的核心和精髓。</p><h2 id="1、内存分区模型"><a href="#1、内存分区模型" class="headerlink" title="1、内存分区模型"></a>1、内存分区模型</h2><p><strong>C++程序在执行时，将内存大方向划分4个区域：</strong></p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理。</li><li>全局区：存放全局变量和静态变量以及常量。</li><li>栈区：由编译器自动分配释放，存放函数的参数的参数值，局部变量等。</li><li>堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收。</li></ul><p><strong>内存四区意义：</strong> 不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程。</p><h3 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h3><p><strong>栈区：</strong> 由编译器自动分配释放，存放函数的参数值、局部变量等。 </p><p><strong>注意事项：</strong>不要返回局部变量的地址，栈区开辟的数据由编译器自动释放。 </p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意事项：栈区的数据由编译器管理开辟和释放（不要返回局部变量的地址）</span></span><br><span class="line"><span class="type">int</span> *<span class="title function_">func</span><span class="params">(<span class="type">int</span> a<span class="comment">/*形参变量数据存放在栈区，函数执行完后将自动释放内存*/</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;     <span class="comment">//局部变量存放在栈区，栈区的数据在函数执行完后自动释放</span></span><br><span class="line">    <span class="keyword">return</span> &amp;b;      <span class="comment">//返回局部变量的地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//接受func函数的返回值</span></span><br><span class="line">    <span class="type">int</span> *main_a = func(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *main_a &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">//第一次可以打印正确的数值是因为编译器做了保留</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *main_a &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">//错误，第二次数据就不再保留（函数执行完后进行了释放）</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/06/2020060202442777-1024x387.jpg"></p><p><strong>堆区：</strong> 由程序员分配释放，若程序员不释放程序结束时由操作系统自动回收。 在C++中主要利用new在堆区开辟内存。 </p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//利用new关键字，可以将数据开辟到堆区</span></span><br><span class="line">    <span class="comment">//指针 本质也是局部变量放在栈区上，指针保存的 数据 是放在堆区上</span></span><br><span class="line">    <span class="type">int</span> *a = new <span class="type">int</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> a;       <span class="comment">//返回堆区开辟的内存地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//接受func函数返回开辟在堆区的数据</span></span><br><span class="line">    <span class="type">int</span> *main_a = func();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *main_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *main_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    delete main_a;      <span class="comment">//释放内存</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/06/2020060203101752-1024x549.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程</title>
      <link href="/post/b2d53884.html"/>
      <url>/post/b2d53884.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-语言-零基础入门教程"><a href="#C-语言-零基础入门教程" class="headerlink" title="C++语言 零基础入门教程"></a>C++语言 零基础入门教程</h1><h2 id="1、简介："><a href="#1、简介：" class="headerlink" title="1、简介："></a>1、简介：</h2><p>C++ 是一种面向对象的计算机程序设计语言，由美国AT&amp;T贝尔实验室的本贾尼·斯特劳斯特卢普博士在20世纪80年代初期发明并实现（最初这种语言被称作“C with Classes”带类的C）。它是一种静态数据类型检查的、支持多重编程范式的通用程序设计语言。它支持过程化程序设计、数据抽象、面向对象程序设计、泛型程序设计等多种程序设计风格。</p><h3 id="第一章：C-初识"><a href="#第一章：C-初识" class="headerlink" title="第一章：C++初识"></a>第一章：C++初识</h3><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">001</td><td align="left"><a href="https://notes.camcad.cn/post/b896bb48.html">C&#x2F;C++语言 零基础入门教程01：第一个C++程序“HelloWorld”</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=2">08:22</a></td></tr><tr><td align="center">002</td><td align="left"><a href="https://notes.camcad.cn/post/5a50df31.html">C&#x2F;C++语言 零基础入门教程02：单行注释&#x2F;多行注释</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=3">05:41</a></td></tr><tr><td align="center">003</td><td align="left"><a href="https://notes.camcad.cn/post/6e88c124.html">C&#x2F;C++语言 零基础入门教程03：变量的意义&#x2F;变量的使用</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=2">05:17</a></td></tr><tr><td align="center">004</td><td align="left"><a href="https://notes.camcad.cn/post/8fe4479e.html">C&#x2F;C++语言 零基础入门教程04：常量与变量的区别&#x2F;变量的使用</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=5">07:57</a></td></tr><tr><td align="center">005</td><td align="left"><a href="https://notes.camcad.cn/post/b90c4483.html">C&#x2F;C++语言 零基础入门教程05：C&#x2F;C++中常用的编程关键字</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=6">03:43</a></td></tr><tr><td align="center">006</td><td align="left"><a href="https://notes.camcad.cn/post/6cc951e8.html">C&#x2F;C++语言 零基础入门教程06：标识符命名规则</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=7">09:00</a></td></tr></tbody></table><h3 id="第二章：数据类型"><a href="#第二章：数据类型" class="headerlink" title="第二章：数据类型"></a>第二章：数据类型</h3><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">007</td><td align="left"><a href="https://notes.camcad.cn/post/145d1acc.html">C&#x2F;C++语言 零基础入门教程07：数据类型-整型（short、int、long、long long）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=8">11:11</a></td></tr><tr><td align="center">008</td><td align="left"><a href="https://notes.camcad.cn/post/2f84322d.html">C&#x2F;C++语言 零基础入门教程08：sizeof 关键字</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=9">06:54</a></td></tr><tr><td align="center">009</td><td align="left"><a href="https://notes.camcad.cn/post/d4eac064.html">C&#x2F;C++语言 零基础入门教程09：数据类型-实型（float、double）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=10">11:59</a></td></tr><tr><td align="center">010</td><td align="left"><a href="https://notes.camcad.cn/post/29c728fa.html">C&#x2F;C++语言 零基础入门教程10：数据类型-字符型（char）｜ASCII 编码对照表</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=11">10:33</a></td></tr><tr><td align="center">011</td><td align="left"><a href="https://notes.camcad.cn/post/d374177.html">C&#x2F;C++语言 零基础入门教程11：数据类型-转义字符</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=12">07:28</a></td></tr><tr><td align="center">012</td><td align="left"><a href="https://notes.camcad.cn/post/b12d45c4.html">C&#x2F;C++语言 零基础入门教程12：数据类型-字符串型（char、string）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=13">07:35</a></td></tr><tr><td align="center">013</td><td align="left"><a href="https://notes.camcad.cn/post/d38bc2de.html">C&#x2F;C++语言 零基础入门教程13：数据类型-布尔类型（bool）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=14">04:06</a></td></tr><tr><td align="center">014</td><td align="left"><a href="https://notes.camcad.cn/post/fa01f24.html">C&#x2F;C++语言 零基础入门教程14：数据类型-数据的输入</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=15">10:42</a></td></tr></tbody></table><h3 id="第三章：运算符"><a href="#第三章：运算符" class="headerlink" title="第三章：运算符"></a>第三章：运算符</h3><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">015</td><td align="left"><a href="https://notes.camcad.cn/post/f347932f.html">C&#x2F;C++语言 零基础入门教程15：运算符-算术运算符</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=16">10:56</a></td></tr><tr><td align="center">016</td><td align="left"><a href="https://notes.camcad.cn/post/1a1b9d69.html">C&#x2F;C++语言 零基础入门教程16：运算符-赋值运算符</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=17">07:37</a></td></tr><tr><td align="center">017</td><td align="left"><a href="https://notes.camcad.cn/post/ced67161.html">C&#x2F;C++语言 零基础入门教程17：运算符-比较运算符</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=20">05:18</a></td></tr><tr><td align="center">018</td><td align="left"><a href="https://notes.camcad.cn/post/ea417dd8.html">C&#x2F;C++语言 零基础入门教程18：运算符-逻辑运算符</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=21">10:30</a></td></tr></tbody></table><h3 id="第四章：程序流程结构"><a href="#第四章：程序流程结构" class="headerlink" title="第四章：程序流程结构"></a>第四章：程序流程结构</h3><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">019</td><td align="left"><a href="https://notes.camcad.cn/post/f87d550a.html">C&#x2F;C++语言 零基础入门教程19：程序流程结构-选择结构（if语句）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=24">10:41</a></td></tr><tr><td align="center">020</td><td align="left"><a href="https://notes.camcad.cn/post/1e4ffda8.html">C&#x2F;C++语言 零基础入门教程20：程序流程结构-选择结构（三目运算符）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=29">06:31</a></td></tr><tr><td align="center">021</td><td align="left"><a href="https://notes.camcad.cn/post/fd1e91e2.html">C&#x2F;C++语言 零基础入门教程21：程序流程结构-选择结构（switch语句）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=30">06:01</a></td></tr><tr><td align="center">022</td><td align="left"><a href="https://notes.camcad.cn/post/2a571973.html">C&#x2F;C++语言 零基础入门教程22：程序流程结构-循环结构（while循环语句）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=31">09:23</a></td></tr><tr><td align="center">023</td><td align="left"><a href="https://notes.camcad.cn/post/b20f232b.html">C&#x2F;C++语言 零基础入门教程23：程序流程结构-循环结构（do…while循环语句）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=33">06:46</a></td></tr><tr><td align="center">024</td><td align="left"><a href="https://notes.camcad.cn/post/c0f51a0.html">C&#x2F;C++语言 零基础入门教程24：程序流程结构-循环结构（for循环语句）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=35">07:17</a></td></tr><tr><td align="center">025</td><td align="left"><a href="https://notes.camcad.cn/post/fb12f7df.html">C&#x2F;C++语言 零基础入门教程25：程序流程结构-循环结构（嵌套循环）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=36">11:24</a></td></tr><tr><td align="center">026</td><td align="left"><a href="https://notes.camcad.cn/post/ee302b30.html">C&#x2F;C++语言 零基础入门教程26：程序流程结构-跳转语句（break语句）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=39">12:20</a></td></tr><tr><td align="center">027</td><td align="left"><a href="https://notes.camcad.cn/post/7c12f79e.html">C&#x2F;C++语言 零基础入门教程27：程序流程结构-跳转语句（continue语句）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=40">08:38</a></td></tr><tr><td align="center">028</td><td align="left"><a href="https://notes.camcad.cn/post/576f3422.html">C&#x2F;C++语言 零基础入门教程28：程序流程结构-跳转语句（goto语句）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=41">05:23</a></td></tr></tbody></table><h3 id="第五章：数组"><a href="#第五章：数组" class="headerlink" title="第五章：数组"></a>第五章：数组</h3><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">029</td><td align="left"><a href="https://notes.camcad.cn/post/a644770e.html">C&#x2F;C++语言 零基础入门教程29：数组-一维数组（一维数组的定义方式）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=42">18:13</a></td></tr><tr><td align="center">030</td><td align="left"><a href="https://notes.camcad.cn/post/4796245.html">C&#x2F;C++语言 零基础入门教程30：数组-一维数组（一维数组数组名）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=43">14:26</a></td></tr><tr><td align="center">031</td><td align="left"><a href="https://notes.camcad.cn/post/3920124c.html">C&#x2F;C++语言 零基础入门教程31：数组-一维数组（冒泡排序）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=46">18:57</a></td></tr><tr><td align="center">032</td><td align="left"><a href="https://notes.camcad.cn/post/a5caedcb.html">C&#x2F;C++语言 零基础入门教程32：数组-二维数组</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=47">14:30</a></td></tr><tr><td align="center">033</td><td align="left"><a href="https://notes.camcad.cn/post/591da572.html">C&#x2F;C++语言 零基础入门教程33：数组-二维数组数组名</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=48">14:07</a></td></tr><tr><td align="center">034</td><td align="left"><a href="https://notes.camcad.cn/post/94c0b7aa.html">C&#x2F;C++语言 零基础入门教程34：数组-二维数组应用案例</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=49">10:20</a></td></tr><tr><td align="center">035</td><td align="left"><a href="https://notes.camcad.cn/post/245f3a26.html">C&#x2F;C++语言 零基础入门教程35：函数（概述、函数的定义）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=50">11:20</a></td></tr><tr><td align="center">036</td><td align="left"><a href="https://notes.camcad.cn/post/9cc4cf82.html">C&#x2F;C++语言 零基础入门教程36：函数（函数的调用）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=51">07:44</a></td></tr><tr><td align="center">037</td><td align="left"><a href="https://notes.camcad.cn/post/520ef675.html">C&#x2F;C++语言 零基础入门教程37：函数（值传递）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=52">11:54</a></td></tr><tr><td align="center">038</td><td align="left"><a href="https://notes.camcad.cn/post/94cbec15.html">C&#x2F;C++语言 零基础入门教程38：函数（函数的常见样式）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=53">08:57</a></td></tr><tr><td align="center">039</td><td align="left"><a href="https://notes.camcad.cn/post/d249b32b.html">C&#x2F;C++语言 零基础入门教程39：函数（函数的声明）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=54">08:24</a></td></tr><tr><td align="center">040</td><td align="left"><a href="https://notes.camcad.cn/post/3157c3fd.html">C&#x2F;C++语言 零基础入门教程40：函数（函数的分文件编写）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=55">09:49</a></td></tr></tbody></table><h3 id="第六章：指针"><a href="#第六章：指针" class="headerlink" title="第六章：指针"></a>第六章：指针</h3><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">041</td><td align="left"><a href="https://notes.camcad.cn/post/9c0faa35.html">C&#x2F;C++语言 零基础入门教程41：指针（指针的基本概念&#x2F;指针变量的定义和使用）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=56">10:10</a></td></tr><tr><td align="center">042</td><td align="left"><a href="https://notes.camcad.cn/post/985d89af.html">C&#x2F;C++语言 零基础入门教程42：指针（指针所占内存空间）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=57">06:22</a></td></tr><tr><td align="center">043</td><td align="left"><a href="https://notes.camcad.cn/post/96e13ca0.html">C&#x2F;C++语言 零基础入门教程43：指针（空指针&#x2F;野指针）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=58">07:46</a></td></tr><tr><td align="center">044</td><td align="left"><a href="https://notes.camcad.cn/post/587782a3.html">C&#x2F;C++语言 零基础入门教程44：指针（const修饰指针）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=60">15:05</a></td></tr><tr><td align="center">045</td><td align="left"><a href="https://notes.camcad.cn/post/bb3e0de5.html">C&#x2F;C++语言 零基础入门教程45：指针（指针与数组）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=61">07:27</a></td></tr><tr><td align="center">046</td><td align="left"><a href="https://notes.camcad.cn/post/43672f3.html">C&#x2F;C++语言 零基础入门教程46：指针（指针与函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=62">11:23</a></td></tr><tr><td align="center">047</td><td align="left"><a href="https://notes.camcad.cn/post/924960a9.html">C&#x2F;C++语言 零基础入门教程47：指针（指针配合数组和函数案例）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=63">08:37</a></td></tr></tbody></table><h3 id="第七章：结构体"><a href="#第七章：结构体" class="headerlink" title="第七章：结构体"></a>第七章：结构体</h3><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">048</td><td align="left"><a href="https://notes.camcad.cn/post/4b12509c.html">C&#x2F;C++语言 零基础入门教程48：结构体（结构体基本概念&#x2F;结构体定义和使用）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=64">14:27</a></td></tr><tr><td align="center">049</td><td align="left"><a href="https://notes.camcad.cn/post/5bba5fa.html">C&#x2F;C++语言 零基础入门教程49：结构体（结构体数组）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=65">08:10</a></td></tr><tr><td align="center">050</td><td align="left"><a href="https://notes.camcad.cn/post/a3f94e94.html">C&#x2F;C++语言 零基础入门教程50：结构体（结构体指针）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=66">06:28</a></td></tr><tr><td align="center">051</td><td align="left"><a href="https://notes.camcad.cn/post/3083a4c1.html">C&#x2F;C++语言 零基础入门教程51：结构体（结构体嵌套结构体）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=67">09:28</a></td></tr><tr><td align="center">052</td><td align="left"><a href="https://notes.camcad.cn/post/ac475861.html">C&#x2F;C++语言 零基础入门教程52：结构体（结构体做函数参数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=68">10:57</a></td></tr><tr><td align="center">053</td><td align="left"><a href="https://notes.camcad.cn/post/798e4a4c.html">C&#x2F;C++语言 零基础入门教程53：结构体（结构体中const使用场景）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=69">11:17</a></td></tr><tr><td align="center">054</td><td align="left"><a href="https://notes.camcad.cn/post/cffa1c48.html">C&#x2F;C++语言 零基础入门教程54：结构体（结构体案例1）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=70">20:36</a></td></tr><tr><td align="center">055</td><td align="left"><a href="https://notes.camcad.cn/post/12d1a46e.html">C&#x2F;C++语言 零基础入门教程55：结构体（结构体案例2）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=71">12:53</a></td></tr></tbody></table><h3 id="第八章：实战案例（通讯录管理系统）"><a href="#第八章：实战案例（通讯录管理系统）" class="headerlink" title="第八章：实战案例（通讯录管理系统）"></a>第八章：实战案例（通讯录管理系统）</h3><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">056</td><td align="left"><a href="https://notes.camcad.cn/post/b95538fe.html">C&#x2F;C++语言 实战案例_通讯录管理系统01：系统需求</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=72">06:44</a></td></tr><tr><td align="center">057</td><td align="left"><a href="https://notes.camcad.cn/post/320e246.html">C&#x2F;C++语言 实战案例_通讯录管理系统02：创建项目</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=73">02:49</a></td></tr><tr><td align="center">058</td><td align="left"><a href="https://notes.camcad.cn/post/cb24df7a.html">C&#x2F;C++语言 实战案例_通讯录管理系统03：菜单功能</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=74">06:03</a></td></tr><tr><td align="center">059</td><td align="left"><a href="https://notes.camcad.cn/post/ab27ab7d.html">C&#x2F;C++语言 实战案例_通讯录管理系统04：退出功能</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=75">08:15</a></td></tr><tr><td align="center">060</td><td align="left"><a href="https://notes.camcad.cn/post/5d03cf40.html">C&#x2F;C++语言 实战案例_通讯录管理系统05：添加联系人</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=76">08:47</a></td></tr><tr><td align="center">061</td><td align="left"><a href="https://notes.camcad.cn/post/70d71dbb.html">C&#x2F;C++语言 实战案例_通讯录管理系统06：显示联系人</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=78">10:26</a></td></tr><tr><td align="center">062</td><td align="left"><a href="https://notes.camcad.cn/post/adb305c2.html">C&#x2F;C++语言 实战案例_通讯录管理系统07：删除联系人</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=79">09:49</a></td></tr><tr><td align="center">063</td><td align="left"><a href="https://notes.camcad.cn/post/def9651.html">C&#x2F;C++语言 实战案例_通讯录管理系统08：查找联系人</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=81">08:36</a></td></tr><tr><td align="center">064</td><td align="left"><a href="https://notes.camcad.cn/post/df98f256.html">C&#x2F;C++语言 实战案例_通讯录管理系统09：修改联系人</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=82">12:26</a></td></tr><tr><td align="center">065</td><td align="left"><a href="https://notes.camcad.cn/post/6e2c4abd.html">C&#x2F;C++语言 实战案例_通讯录管理系统10：清空联系人</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=83">06:14</a></td></tr><tr><td align="center">066</td><td align="left"><a href="https://notes.camcad.cn/post/775fada.html">C&#x2F;C++语言 实战案例_通讯录管理系统11：头文件&#x2F;源文件</a></td><td align="center">00:00</td></tr></tbody></table><h2 id="视频转载-bilibili博主《黑马程序员》"><a href="#视频转载-bilibili博主《黑马程序员》" class="headerlink" title="视频转载 bilibili博主《黑马程序员》"></a>视频转载 bilibili博主《<a href="https://space.bilibili.com/37974444?spm_id_from=333.788.b_765f7570696e666f.2">黑马程序员</a>》</h2>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++核心知识01：内存分区模型（程序运行前）</title>
      <link href="/post/1f273a4e.html"/>
      <url>/post/1f273a4e.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-核心知识》"><a href="#教程目录《C-核心知识》" class="headerlink" title="教程目录《C++核心知识》"></a>教程目录《<a href="https://notes.camcad.cn/post/7fd4f72a.html">C++核心知识</a>》</h3><h1 id="C-核心知识"><a href="#C-核心知识" class="headerlink" title="C++核心知识"></a>C++核心知识</h1><p>本阶段主要针对C++面向对象编程技术做详细讲解，探讨C++中的核心和精髓。</p><h2 id="1、内存分区模型"><a href="#1、内存分区模型" class="headerlink" title="1、内存分区模型"></a>1、内存分区模型</h2><p><strong>C++程序在执行时，将内存大方向划分4个区域：</strong></p><ul><li>代码区：存放函数体的二进制代码，由操作系统进行管理。</li><li>全局区：存放全局变量和静态变量以及常量。</li><li>栈区：由编译器自动分配释放，存放函数的参数的参数值，局部变量等。</li><li>堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收。</li></ul><p><strong>内存四区意义：</strong> 不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程。</p><h3 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h3><p>在程序编译后，生成了EXE可执行程序，<br><strong>未执行该程序前</strong>分为两个区域。 </p><p><strong>代码区：</strong> 存放CPU执行的机器指令 代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可。 代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外修改了它的指令。 </p><p><strong>全局区：</strong> 全局变量和静态变量存放在此。 全局区还包含了常量区，字符串常量和其他常量也存放在此。 该区域的数据在程序结束后由操作系统释放。 <img src="http://image.camcad.cn/2020/06/2020060111474469-1024x338.jpg"></p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//备注：s--&gt;static(静态)  g--&gt;global(全局)   c--&gt;const(常量)        l--&gt;local(局部)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="type">int</span> g_a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> g_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰的全局常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> g_c_a = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> g_c_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//变量</span></span><br><span class="line">    <span class="comment">//局部变量（在函数体内定义的变量都为局部变量）</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部变量a的地址为\t&quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;局部变量b的地址为\t&quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;b &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//全局变量</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局变量g_a的地址为\t&quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;g_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;全局变量g_b的地址为\t&quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;g_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态变量</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> s_a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> s_b = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;静态变量s_a的地址为\t&quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;s_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;静态变量s_b的地址为\t&quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;s_b &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//常量</span></span><br><span class="line">    <span class="comment">//字符串常量</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;字符串常量为\t\t&quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;<span class="string">&quot;Hello World&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//const修饰的全局常量</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;const全局常量g_c_a为\t&quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;g_c_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;const全局常量g_c_b为\t&quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;g_c_b &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//const修饰的局部常量</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> c_l_a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> c_l_b = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;const局部常量c_l_a为\t&quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;c_l_a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;const局部常量c_l_b为\t&quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;c_l_b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//暂停（请按任意键继续...）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/06/2020060112475946-1024x589.jpg"></p><p><strong>总结：</strong></p><ul><li>C++中在程序运行前分为全局区和代码区。</li><li>代码区特点是共享和只读。</li><li>全局区中存放全局变量、静态变量和字符串常量。</li><li>常量区中存放const修饰的全局常量和字符串常量。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++核心知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> C++核心知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 实战案例_通讯录管理系统11：头文件/源文件</title>
      <link href="/post/775fada.html"/>
      <url>/post/775fada.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="通讯录管理系统"><a href="#通讯录管理系统" class="headerlink" title="通讯录管理系统"></a>通讯录管理系统</h1><h2 id="头文件（-h）"><a href="#头文件（-h）" class="headerlink" title="头文件（.h）"></a>头文件（.h）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通讯录管理系统 头文件（.h）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1000    <span class="comment">//最大人数</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单功能</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowMenu</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象界面</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ObjectUI</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//联系人结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//性别 </span></span><br><span class="line">    <span class="built_in">string</span> m_Sex;   <span class="comment">//性别：1-&gt;男 ,2-&gt;女</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="type">int</span> m_Age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//联系电话</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> m_Phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//家庭住址</span></span><br><span class="line">    <span class="built_in">string</span> m_Addr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通讯录结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Addressbooks</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">PersonArray</span>[<span class="title">MAX</span>];</span>     <span class="comment">//通讯录中保存的联系人数组</span></span><br><span class="line">    <span class="type">int</span> m_Size; <span class="comment">//通讯录中人员个数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加联系人</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">AddPerson</span><span class="params">(Addressbooks *<span class="built_in">abs</span> )</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示联系人</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowPerson</span><span class="params">(Addressbooks *<span class="built_in">abs</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测联系人是否存在</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isExist</span><span class="params">(Addressbooks *<span class="built_in">abs</span>, <span class="built_in">string</span> name)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除联系人</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeletePerson</span><span class="params">(Addressbooks *<span class="built_in">abs</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找联系人</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">FindPerson</span><span class="params">(Addressbooks *<span class="built_in">abs</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改联系人</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ModifyPerson</span><span class="params">(Addressbooks *<span class="built_in">abs</span>)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="源文件（-cpp）"><a href="#源文件（-cpp）" class="headerlink" title="源文件（.cpp）"></a>源文件（.cpp）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通讯录管理系统 源文件（.cpp）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;通讯录管理系统.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象界面</span></span><br><span class="line">    ObjectUI();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单功能</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowMenu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  1、添加联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  2、显示联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  3、删除联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  4、查找联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  5、修改联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  6、清空联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  0、退出通讯录  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象界面</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ObjectUI</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建通讯录</span></span><br><span class="line">    Addressbooks <span class="built_in">abs</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化通讯录中人数</span></span><br><span class="line">    <span class="built_in">abs</span>.m_Size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化选择编号</span></span><br><span class="line">    <span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ShowMenu(); <span class="comment">//菜单功能</span></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; select;    <span class="comment">//输入数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (select)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:     <span class="comment">//1、添加联系人</span></span><br><span class="line">            AddPerson(&amp;<span class="built_in">abs</span>);    <span class="comment">//利用地址传递，可以修饰实参</span></span><br><span class="line">            <span class="built_in">abs</span>.m_Size++;   <span class="comment">//添加成功+1</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:     <span class="comment">//2、显示联系人</span></span><br><span class="line">            ShowPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:     <span class="comment">//3、删除联系人</span></span><br><span class="line">            DeletePerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:     <span class="comment">//4、查找联系人</span></span><br><span class="line">            FindPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:     <span class="comment">//5、修改联系人</span></span><br><span class="line">            ModifyPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:     <span class="comment">//6、清空联系人</span></span><br><span class="line">            CleanPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:     <span class="comment">//0、退出通讯录</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎您的下次使用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加联系人</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">AddPerson</span><span class="params">(Addressbooks *<span class="built_in">abs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//判断电话本是否已满</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;m_Size == MAX)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通讯录已满，无法添加&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//姓名</span></span><br><span class="line">        <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入姓名：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;PersonArray[<span class="built_in">abs</span>-&gt;m_Size].m_Name = name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//性别</span></span><br><span class="line">        <span class="type">int</span> sex = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入性别：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1--&gt;男&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2--&gt;女&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; sex;</span><br><span class="line">            <span class="keyword">if</span> (sex == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">abs</span>-&gt;PersonArray[<span class="built_in">abs</span>-&gt;m_Size].m_Sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sex == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">abs</span>-&gt;PersonArray[<span class="built_in">abs</span>-&gt;m_Size].m_Sex = <span class="string">&quot;女&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入的数据错误，请您重新输入！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//年龄</span></span><br><span class="line">        <span class="type">int</span> age = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入年龄：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄值范围：1 &lt;= age &lt;= 200&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line">            <span class="keyword">if</span> (age != <span class="number">0</span> &amp;&amp; age &lt;= <span class="number">200</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">abs</span>-&gt;PersonArray[<span class="built_in">abs</span>-&gt;m_Size].m_Age = age;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入的数据错误，请您重新输入！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//联系电话</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> phone = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入联系电话：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; phone;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;PersonArray[<span class="built_in">abs</span>-&gt;m_Size].m_Phone = phone;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//家庭住址</span></span><br><span class="line">        <span class="built_in">string</span> addr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入家庭住址：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; addr;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;PersonArray[<span class="built_in">abs</span>-&gt;m_Size].m_Addr = addr;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;添加成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//请按任意键继续</span></span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);        <span class="comment">//清屏</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示联系人</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowPerson</span><span class="params">(Addressbooks *<span class="built_in">abs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">abs</span>-&gt;m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通讯录中没有任何联系人，请添加联系人。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;编号：&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[i].m_Name &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;性别：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[i].m_Sex &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[i].m_Age &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;电话：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[i].m_Phone &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;住址：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[i].m_Addr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测联系人是否存在</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isExist</span><span class="params">(Addressbooks *<span class="built_in">abs</span>, <span class="built_in">string</span> name)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;PersonArray[i].m_Name == name)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;   <span class="comment">//找到需要删除联系人的下标</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;      <span class="comment">//未能找到需要删除的联系人</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除联系人</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeletePerson</span><span class="params">(Addressbooks *<span class="built_in">abs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入需要删除的姓名：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">    <span class="type">int</span> ret = isExist(<span class="built_in">abs</span>, name);   <span class="comment">//检测联系人</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;未能找到需要删除的联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = ret; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">abs</span>-&gt;PersonArray[i] = <span class="built_in">abs</span>-&gt;PersonArray[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;m_Size--;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;恭喜您，删除成功！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找联系人</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">FindPerson</span><span class="params">(Addressbooks *<span class="built_in">abs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入需要删除的姓名：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">    <span class="type">int</span> ret = isExist(<span class="built_in">abs</span>, name);   <span class="comment">//检测联系人</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;未能找到需要查找的联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;编号：&quot;</span> &lt;&lt; ret + <span class="number">1</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Name &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;性别：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Sex &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Age &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;电话：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Phone &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;住址：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Addr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改联系人</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ModifyPerson</span><span class="params">(Addressbooks *<span class="built_in">abs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入需要更改联系人的姓名：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">    <span class="type">int</span> ret = isExist(<span class="built_in">abs</span>, name);   <span class="comment">//检测联系人</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;未能找到需要查找的联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//姓名</span></span><br><span class="line">        <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入姓名：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Name = name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//性别</span></span><br><span class="line">        <span class="type">int</span> sex = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入性别：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1--&gt;男&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2--&gt;女&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; sex;</span><br><span class="line">            <span class="keyword">if</span> (sex == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sex == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Sex = <span class="string">&quot;女&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入的数据错误，请您重新输入！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//年龄</span></span><br><span class="line">        <span class="type">int</span> age = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入年龄：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄值范围：1 &lt;= age &lt;= 200&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line">            <span class="keyword">if</span> (age != <span class="number">0</span> &amp;&amp; age &lt;= <span class="number">200</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Age = age;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入的数据错误，请您重新输入！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//联系电话</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> phone = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入联系电话：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; phone;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Phone = phone;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//家庭住址</span></span><br><span class="line">        <span class="built_in">string</span> addr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入家庭住址：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; addr;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Addr = addr;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> 通讯录管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 实战案例_通讯录管理系统10：清空联系人</title>
      <link href="/post/6e2c4abd.html"/>
      <url>/post/6e2c4abd.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="通讯录管理系统"><a href="#通讯录管理系统" class="headerlink" title="通讯录管理系统"></a>通讯录管理系统</h1><h2 id="10、清空联系人"><a href="#10、清空联系人" class="headerlink" title="10、清空联系人"></a>10、清空联系人</h2><p>功能描述：清空通讯录中所有信息。 清空联系人实现步骤：</p><ul><li>封装清空联系人函数</li><li>测试清空联系人</li></ul><h2 id="10-1-封装清空联系人函数"><a href="#10-1-封装清空联系人函数" class="headerlink" title="10.1 封装清空联系人函数"></a>10.1 封装清空联系人函数</h2><p><strong>实现思路：</strong>将通讯录所有联系人信息清除掉，只要将通讯录记录的联系人数量置为0，做逻辑清空即可。（void Cleanperssbooks(Addressbooks *abs)） </p><p><strong>清空联系人代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清空联系人</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CleanPerson</span><span class="params">(Addressbooks *<span class="built_in">abs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">abs</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通讯录已清空&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-2-测试清空联系人"><a href="#10-2-测试清空联系人" class="headerlink" title="10.2 测试清空联系人"></a>10.2 测试清空联系人</h2><p>在switch case语句中，case6里添加：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">6</span>:     <span class="comment">//6、清空联系人</span></span><br><span class="line">    CleanPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> 通讯录管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 实战案例_通讯录管理系统09：修改联系人</title>
      <link href="/post/df98f256.html"/>
      <url>/post/df98f256.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="通讯录管理系统"><a href="#通讯录管理系统" class="headerlink" title="通讯录管理系统"></a>通讯录管理系统</h1><h2 id="9、修改联系人"><a href="#9、修改联系人" class="headerlink" title="9、修改联系人"></a>9、修改联系人</h2><p><strong>功能描述：</strong>按照姓名重新修改指定联系人。 修改联系人实现步骤：</p><ul><li>封装修改联系人函数</li><li>测试修改联系人功能</li></ul><h2 id="9-1-封装修改联系人函数"><a href="#9-1-封装修改联系人函数" class="headerlink" title="9.1 封装修改联系人函数"></a>9.1 封装修改联系人函数</h2><p><strong>实现思路：</strong>查找用户输入的联系人，如果查找成功进行修改操作，查找失败提示无此人。（ModifyPerson(Addressbooks *abs)） 修改联系人代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改联系人</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ModifyPerson</span><span class="params">(Addressbooks *<span class="built_in">abs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入需要更改联系人的姓名：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">    <span class="type">int</span> ret = isExist(<span class="built_in">abs</span>, name);   <span class="comment">//检测联系人</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;未能找到需要查找的联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//姓名</span></span><br><span class="line">        <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入姓名：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Name = name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//性别</span></span><br><span class="line">        <span class="type">int</span> sex = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入性别：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1--&gt;男&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2--&gt;女&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; sex;</span><br><span class="line">            <span class="keyword">if</span> (sex == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sex == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Sex = <span class="string">&quot;女&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入的数据错误，请您重新输入！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//年龄</span></span><br><span class="line">        <span class="type">int</span> age = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入年龄：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄值范围：1 &lt;= age &lt;= 200&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line">            <span class="keyword">if</span> (age != <span class="number">0</span> &amp;&amp; age &lt;= <span class="number">200</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Age = age;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入的数据错误，请您重新输入！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//联系电话</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> phone = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入联系电话：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; phone;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Phone = phone;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//家庭住址</span></span><br><span class="line">        <span class="built_in">string</span> addr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入家庭住址：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; addr;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Addr = addr;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-2-测试修改联系人功能"><a href="#9-2-测试修改联系人功能" class="headerlink" title="9.2 测试修改联系人功能"></a>9.2 测试修改联系人功能</h2><p>在switch case语句中，case5里添加：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">5</span>:     <span class="comment">//5、修改联系人</span></span><br><span class="line">    ModifyPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> 通讯录管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 实战案例_通讯录管理系统08：查找联系人</title>
      <link href="/post/def9651.html"/>
      <url>/post/def9651.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="通讯录管理系统"><a href="#通讯录管理系统" class="headerlink" title="通讯录管理系统"></a>通讯录管理系统</h1><h2 id="8、查找联系人"><a href="#8、查找联系人" class="headerlink" title="8、查找联系人"></a>8、查找联系人</h2><p><strong>功能描述：</strong>按照姓名查看指定联系人信息 查找联系人实现步骤：</p><ul><li>封装查找联系人函数</li><li>测试查找指定联系人</li></ul><h2 id="8-1-封装查找联系人函数"><a href="#8-1-封装查找联系人函数" class="headerlink" title="8.1 封装查找联系人函数"></a>8.1 封装查找联系人函数</h2><p>实现思路：判断用户指定的联系人是否存在，如果存在显示信息，不存在则提示查无此人。（void FindPerson(Addressbooks *abs)） </p><p><strong>查找联系人代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找联系人</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">FindPerson</span><span class="params">(Addressbooks *<span class="built_in">abs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入需要删除的姓名：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">    <span class="type">int</span> ret = isExist(<span class="built_in">abs</span>, name);   <span class="comment">//检测联系人</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;未能找到需要查找的联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;编号：&quot;</span> &lt;&lt; ret + <span class="number">1</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Name &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;性别：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Sex &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Age &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;电话：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Phone &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;住址：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[ret].m_Addr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-测试查找指定联系人"><a href="#8-2-测试查找指定联系人" class="headerlink" title="8.2 测试查找指定联系人"></a>8.2 测试查找指定联系人</h2><p>在switch case语句中，case4里添加：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">4</span>:     <span class="comment">//4、查找联系人</span></span><br><span class="line">    FindPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> 通讯录管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 实战案例_通讯录管理系统07：删除联系人</title>
      <link href="/post/adb305c2.html"/>
      <url>/post/adb305c2.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="通讯录管理系统"><a href="#通讯录管理系统" class="headerlink" title="通讯录管理系统"></a>通讯录管理系统</h1><h2 id="7、删除联系人"><a href="#7、删除联系人" class="headerlink" title="7、删除联系人"></a>7、删除联系人</h2><p><strong>功能描述：</strong>按照姓名进行删除指定联系人。</p><p>删除联系人现步骤：</p><ul><li>封装检测联系人是否存在</li><li>封装删除联系人函数</li><li>测试删除联系人功能</li></ul><h2 id="7-1-封装检测联系人是否存在"><a href="#7-1-封装检测联系人是否存在" class="headerlink" title="7.1 封装检测联系人是否存在"></a>7.1 封装检测联系人是否存在</h2><p><strong>设计思路：</strong></p><p>删除联系人前，我们需要先判断用户输入的联系人是否存在，如果存在删除，不存在就提示用户没有要删除的联系人。因此我们可以把检测联系人是否存在封闭成一个函数中，如果存在返回联系人在通讯中的位置，不存在返回-1。（int isExist(Addressbooks *abs , string name)） </p><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检测联系人是否存在</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isExist</span><span class="params">(Addressbooks *<span class="built_in">abs</span>, <span class="built_in">string</span> name)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;PersonArray[i].m_Name == name)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;   <span class="comment">//找到需要删除联系人的下标</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;      <span class="comment">//未能找到需要删除的联系人</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-封闭删除联系人函数"><a href="#7-2-封闭删除联系人函数" class="headerlink" title="7.2 封闭删除联系人函数"></a>7.2 封闭删除联系人函数</h2><p>根据用户输入的联系人判断该通讯录中是否有此人，查找到进行删除，并提示删除成功，查不到提示查无此人。 </p><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除联系人</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeletePerson</span><span class="params">(Addressbooks *<span class="built_in">abs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入需要删除的姓名：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">    <span class="type">int</span> ret = isExist(<span class="built_in">abs</span>, name);   <span class="comment">//检测联系人</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;未能找到需要删除的联系人&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = ret; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">abs</span>-&gt;PersonArray[i] = <span class="built_in">abs</span>-&gt;PersonArray[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;m_Size--;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;恭喜您，删除成功！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> 通讯录管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 实战案例_通讯录管理系统06：显示联系人</title>
      <link href="/post/70d71dbb.html"/>
      <url>/post/70d71dbb.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="通讯录管理系统"><a href="#通讯录管理系统" class="headerlink" title="通讯录管理系统"></a>通讯录管理系统</h1><h2 id="显示联系人"><a href="#显示联系人" class="headerlink" title="显示联系人"></a>显示联系人</h2><p><strong>功能描述：</strong>显示通讯录中已有的联系人信息。3</p><p>显示联系人实现步骤：</p><ul><li>封装显示联系人函数</li><li>测试显示联系人功能</li></ul><h2 id="封装显示联系人函数"><a href="#封装显示联系人函数" class="headerlink" title="封装显示联系人函数"></a>封装显示联系人函数</h2><p><strong>思路：</strong>判断如果当前通讯录中没有人员，就提示记录为空，人数大于0，显示通讯中信息。（void ShowPerson(Addressbooks *abs)）</p><p><strong>显示联系人代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示联系人</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowPerson</span><span class="params">(Addressbooks *<span class="built_in">abs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">abs</span>-&gt;m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通讯录中没有任何联系人，请添加联系人。&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">abs</span>-&gt;m_Size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;编号：&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[i].m_Name &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;性别：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[i].m_Sex &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[i].m_Age &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;电话：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[i].m_Phone &lt;&lt; <span class="string">&quot;\t&quot;</span></span><br><span class="line">            &lt;&lt; <span class="string">&quot;住址：&quot;</span> &lt;&lt; <span class="built_in">abs</span>-&gt;PersonArray[i].m_Addr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-测试显示联系人功能"><a href="#6-2-测试显示联系人功能" class="headerlink" title="6.2 测试显示联系人功能"></a>6.2 测试显示联系人功能</h2><p>在switch case语句中，case2里添加：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">2</span>:     <span class="comment">//2、显示联系人</span></span><br><span class="line">    ShowPerson(&amp;<span class="built_in">abs</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>测试效果如图： <img src="http://image.camcad.cn/2020/05/2020052708504052-1024x297.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> 通讯录管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 实战案例_通讯录管理系统05：添加联系人</title>
      <link href="/post/5d03cf40.html"/>
      <url>/post/5d03cf40.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="通讯录管理系统"><a href="#通讯录管理系统" class="headerlink" title="通讯录管理系统"></a>通讯录管理系统</h1><h2 id="5、添加联系人"><a href="#5、添加联系人" class="headerlink" title="5、添加联系人"></a>5、添加联系人</h2><p><strong>功能描述：</strong> 实现添加降价功能，联系人上限为1000人，联系人信息包括（姓名、性别、年龄、联系电话以及家庭住址）。</p><p><strong>添加联系人实现步骤：</strong></p><ul><li>设计联系人结构体</li><li>设计通讯录结构体</li><li>main函数中创建通讯录</li><li>封装添加联系人函数</li><li>测试添加联系人功能</li></ul><h2 id="5-1-设计联系人结构体"><a href="#5-1-设计联系人结构体" class="headerlink" title="5.1 设计联系人结构体"></a>5.1 设计联系人结构体</h2><p>联系人信息包括：姓名、性别、年龄、联系电话、家庭住址。（struct Person） 设计如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//联系人结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//性别 </span></span><br><span class="line">    <span class="built_in">string</span> m_Sex;   <span class="comment">//性别：1-&gt;男 ,2-&gt;女</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="type">int</span> m_Age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//联系电话</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> m_Phone;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//家庭住址</span></span><br><span class="line">    <span class="built_in">string</span> m_Addr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-2-设计通讯录结构体"><a href="#5-2-设计通讯录结构体" class="headerlink" title="5.2 设计通讯录结构体"></a>5.2 设计通讯录结构体</h2><p>设计时候可以在通讯录结构体中，维护一个容量为1000的存放联系人的数组，并记录当前通讯录中联系人数量。（struct Addressbooks） 设计如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通讯录结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Addressbooks</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Person</span> <span class="title">PersonArray</span>[<span class="title">MAX</span>];</span>     <span class="comment">//通讯录中保存的联系人数组</span></span><br><span class="line">    <span class="type">int</span> m_Size; <span class="comment">//通讯录中人员个数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-3-ObjectUI函数中创建通讯录"><a href="#5-3-ObjectUI函数中创建通讯录" class="headerlink" title="5.3 ObjectUI函数中创建通讯录"></a>5.3 ObjectUI函数中创建通讯录</h2><p>添加联系人函数封装好后，在main函数中创建一个通讯录变量，这个就是我们需要一直维护的通讯录。（Addressbooks abs） 设计如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ObjectUI函数起始位置添加：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建通讯录</span></span><br><span class="line">    Addressbooks <span class="built_in">abs</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化通讯录中人数</span></span><br><span class="line">    <span class="built_in">abs</span>.m_Size = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="5-4-封装添加联系人函数"><a href="#5-4-封装添加联系人函数" class="headerlink" title="5.4 封装添加联系人函数"></a>5.4 封装添加联系人函数</h2><p><strong>思路：</strong>添加联系人前先判断通讯录是否已满，如果满了就不再添加，未满情况将新联系人信息逐个加入到通讯录。（void AddPerson(Addressbooks *abs)）</p><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加联系人</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">AddPerson</span><span class="params">(Addressbooks *<span class="built_in">abs</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//判断电话本是否已满</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>-&gt;m_Size == MAX)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通讯录已满，无法添加&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//姓名</span></span><br><span class="line">        <span class="built_in">string</span> name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入姓名：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;PersonArray[<span class="built_in">abs</span>-&gt;m_Size].m_Name = name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//性别</span></span><br><span class="line">        <span class="type">int</span> sex = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入性别：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1--&gt;男&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2--&gt;女&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; sex;</span><br><span class="line">            <span class="keyword">if</span> (sex == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">abs</span>-&gt;PersonArray[<span class="built_in">abs</span>-&gt;m_Size].m_Sex = <span class="string">&quot;男&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sex == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">abs</span>-&gt;PersonArray[<span class="built_in">abs</span>-&gt;m_Size].m_Sex = <span class="string">&quot;女&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入的数据错误，请您重新输入！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//年龄</span></span><br><span class="line">        <span class="type">int</span> age = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入年龄：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;年龄值范围：1 &lt;= age &lt;= 200&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line">            <span class="keyword">if</span> (age != <span class="number">0</span> &amp;&amp; age &lt;= <span class="number">200</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">abs</span>-&gt;PersonArray[<span class="built_in">abs</span>-&gt;m_Size].m_Age = age;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入的数据错误，请您重新输入！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//联系电话</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> phone = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入联系电话：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; phone;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;PersonArray[<span class="built_in">abs</span>-&gt;m_Size].m_Phone = phone;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//家庭住址</span></span><br><span class="line">        <span class="built_in">string</span> addr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入家庭住址：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; addr;</span><br><span class="line">        <span class="built_in">abs</span>-&gt;PersonArray[<span class="built_in">abs</span>-&gt;m_Size].m_Addr = addr;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;添加成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);  <span class="comment">//请按任意键继续</span></span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);        <span class="comment">//清屏</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试添加联系人功能"><a href="#测试添加联系人功能" class="headerlink" title="测试添加联系人功能"></a>测试添加联系人功能</h2><p>选择界面中，如果玩家选择了1，代表添加联系人，我们可以测试下该功能。 在swith case语句中，case1里添加：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">1</span>:     <span class="comment">//1、添加联系人</span></span><br><span class="line">            AddPerson(&amp;<span class="built_in">abs</span>);    <span class="comment">//利用地址传递，可以修饰实参</span></span><br><span class="line">            <span class="built_in">abs</span>.m_Size++;   <span class="comment">//添加成功+1</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>测试效果如图： <img src="http://image.camcad.cn/2020/05/2020052707273583-1024x877.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> 通讯录管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 实战案例_通讯录管理系统04：退出功能</title>
      <link href="/post/ab27ab7d.html"/>
      <url>/post/ab27ab7d.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="通讯录管理系统"><a href="#通讯录管理系统" class="headerlink" title="通讯录管理系统"></a>通讯录管理系统</h1><h2 id="4、退出功能"><a href="#4、退出功能" class="headerlink" title="4、退出功能"></a>4、退出功能</h2><p><strong>功能描述：</strong>退出通讯录系统<br><strong>思路：</strong>根据用户不同的选择，进入不同的功能，可以选择switch分支结构，将整个架构进行搭建。</p><p>当用户选择0的时候，执行退出，选择其他先不做任何操作不会退出程序。</p><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//退出功能</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">EscKey</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ShowMenu(); <span class="comment">//菜单功能</span></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; select;    <span class="comment">//输入数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (select)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:     <span class="comment">//1、添加联系人</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:     <span class="comment">//2、显示联系人</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:     <span class="comment">//3、删除联系人</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:     <span class="comment">//4、查找联系人</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:     <span class="comment">//5、修改联系人</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:     <span class="comment">//6、清空联系人</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:     <span class="comment">//0、退出通讯录</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;欢迎您的下次使用&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> 通讯录管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 实战案例_通讯录管理系统03：菜单功能</title>
      <link href="/post/cb24df7a.html"/>
      <url>/post/cb24df7a.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="通讯录管理系统"><a href="#通讯录管理系统" class="headerlink" title="通讯录管理系统"></a>通讯录管理系统</h1><h2 id="3、菜单功能"><a href="#3、菜单功能" class="headerlink" title="3、菜单功能"></a>3、菜单功能</h2><p><strong>功能描述：</strong>用户选择功能的界面<br><strong>步骤：</strong></p><ul><li>封装函数显示该UI界面，如void ShowMenu(); 。</li><li>在main函数中调用封闭好的函数。</li></ul><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//菜单功能</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowMenu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  1、添加联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  2、显示联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  3、删除联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  4、查找联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  5、修改联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  6、清空联系人  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*****  0、退出通讯录  *****&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;***************************&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>菜单UI界面效果如下图： <img src="http://image.camcad.cn/2020/05/202005261412398.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> 通讯录管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 实战案例_通讯录管理系统02：创建项目</title>
      <link href="/post/320e246.html"/>
      <url>/post/320e246.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="通讯录管理系统"><a href="#通讯录管理系统" class="headerlink" title="通讯录管理系统"></a>通讯录管理系统</h1><h2 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h2><p>编写一个C++程序总共分为2个步骤</p><ul><li>创建项目</li><li>创建文件</li></ul><h3 id="2-1-创建项目"><a href="#2-1-创建项目" class="headerlink" title="2.1 创建项目"></a>2.1 创建项目</h3><p>Visual Studio 是我们用来编写C&#x2F;C++程序的主要工具，我们先将它打开。</p><p><a href="http://image.camcad.cn/2020/05/2020051702465231.jpg"><img src="http://image.camcad.cn/2020/05/2020051702465231-1024x739.jpg"></a><a href="http://image.camcad.cn/2020/05/2020051702461712.jpg"><img src="http://image.camcad.cn/2020/05/2020051702461712-1024x760.jpg"></a></p><h3 id="2-2-创建文件"><a href="#2-2-创建文件" class="headerlink" title="2.2 创建文件"></a>2.2 创建文件</h3><p>点击”源文件“–&gt;右键”源文件“–&gt;选择”添加“–&gt;点击“新建项”</p><p><a href="http://image.camcad.cn/2020/05/2020051703011331.jpg"><img src="http://image.camcad.cn/2020/05/2020051703011331-1024x593.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> 通讯录管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 实战案例_通讯录管理系统01：系统需求</title>
      <link href="/post/b95538fe.html"/>
      <url>/post/b95538fe.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="通讯录管理系统"><a href="#通讯录管理系统" class="headerlink" title="通讯录管理系统"></a>通讯录管理系统</h1><h2 id="1、系统需求"><a href="#1、系统需求" class="headerlink" title="1、系统需求"></a>1、系统需求</h2><p>通讯录是一个可以记录新人、好友信息的工具。 系统中需要实现的功能如下：</p><ul><li>添加联系人：向通讯录中添加新人，信息包括（姓名、性别、年龄、联系电话以及家庭住址）最多记录1000人。</li><li>显示联系人：显示通讯录中所有联系人信息。</li><li>删除联系人：按照姓名进行删除指定联系人。</li><li>查找联系人：按照姓名查看指定联系人信息。</li><li>修改联系人：按照姓名重新修改指定联系人。</li><li>清空联系人：清空通讯录中所有信息。</li><li>退出通讯录：退出当前使用的通讯录。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
            <tag> 通讯录管理系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程55：结构体（结构体案例2）</title>
      <link href="/post/12d1a46e.html"/>
      <url>/post/12d1a46e.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第八章：结构体"><a href="#第八章：结构体" class="headerlink" title="第八章：结构体"></a>第八章：结构体</h1><h2 id="8-8-1-结构体案例2"><a href="#8-8-1-结构体案例2" class="headerlink" title="8.8.1 结构体案例2"></a>8.8.1 结构体案例2</h2><p><strong>案例描述：</strong> 设计一个英雄的结构体，包括成员姓名、年龄、性别 。创建的结构体数组，数组中存放5名英雄。通过冒泡排序的算法，将数组中的英雄按照年龄进行排序，最终打印排序的结果。 </p><p><strong>五名英雄信息如下：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//英雄结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">heroes</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;    <span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> age;        <span class="comment">//年龄</span></span><br><span class="line">    <span class="built_in">string</span> sex;     <span class="comment">//性别</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>  <span class="title function_">BubbleSort</span><span class="params">(heroes *FiceHeroes ,<span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; len-i<span class="number">-1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (FiceHeroes[j].age &gt; FiceHeroes[j + <span class="number">1</span>].age)</span><br><span class="line">            &#123;</span><br><span class="line">                heroes temp = &#123; FiceHeroes[j].name,FiceHeroes[j].age,FiceHeroes[j].sex &#125;;</span><br><span class="line">                FiceHeroes[j] = &#123; FiceHeroes[j + <span class="number">1</span>].name,FiceHeroes[j + <span class="number">1</span>].age,FiceHeroes[j + <span class="number">1</span>].sex &#125;;</span><br><span class="line">                FiceHeroes[j + <span class="number">1</span>] = &#123; temp.name,temp.age,temp.sex &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印所有信息</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintfArray</span><span class="params">(heroes FiceHeroes[], <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; FiceHeroes[i].name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> </span><br><span class="line">            &lt;&lt; FiceHeroes[i].age &lt;&lt; <span class="string">&quot; 性别：&quot;</span> &lt;&lt; FiceHeroes[i].sex &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">     heroes FiceHeroes[<span class="number">5</span>] = &#123;&#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span> &#125;,</span><br><span class="line">                            &#123; <span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span> &#125;,</span><br><span class="line">                            &#123; <span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span> &#125;,</span><br><span class="line">                            &#123; <span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span> &#125;,</span><br><span class="line">                            &#123; <span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span> &#125;&#125;;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//遍历次数</span></span><br><span class="line">     <span class="type">int</span> len = <span class="keyword">sizeof</span>(FiceHeroes) / <span class="keyword">sizeof</span>(FiceHeroes[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//冒泡排序</span></span><br><span class="line">     BubbleSort(FiceHeroes, len);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//打印所有信息</span></span><br><span class="line">     PrintfArray(FiceHeroes, len);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/05/2020052610234159.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程54：结构体（结构体案例1）</title>
      <link href="/post/cffa1c48.html"/>
      <url>/post/cffa1c48.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第八章：结构体"><a href="#第八章：结构体" class="headerlink" title="第八章：结构体"></a>第八章：结构体</h1><h2 id="8-8-1-结构体案例1"><a href="#8-8-1-结构体案例1" class="headerlink" title="8.8.1 结构体案例1"></a>8.8.1 结构体案例1</h2><p><strong>案例描述：</strong> 学校正在做毕设项目，每名老师领5名学生，总共有3名老师，需求如下： 设计学生和老师是结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员。学生的成员数组有姓名、考试分数。创建数组存放3名老师，通过函数给每个老师及所带的学生赋值最终 打印出老师数据以及老师所带的学生数据。</p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//school.h 头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、创建学生结构体数组</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> sName;   <span class="comment">//学生姓名</span></span><br><span class="line">    <span class="type">int</span> iScores;    <span class="comment">//学生分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、创建老师结构体数组</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> tName;       <span class="comment">//老师姓名</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span>[5];</span>  <span class="comment">//学生数据数组</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、给老师学生赋值函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">assign</span><span class="params">(<span class="keyword">struct</span> Teacher tArray[], <span class="type">int</span> len)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、打印输出函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintArrey</span><span class="params">(<span class="keyword">struct</span> Teacher tArray[], <span class="type">int</span> len)</span>;</span><br></pre></td></tr></table></figure><h3 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//school.cpp 源文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;school.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//添加随机数种子，利用当前系统时间生成随机数，防止每次随机数都一样</span></span><br><span class="line">    srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、创建3名老师数组</span></span><br><span class="line">    Teacher tArray[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、获取老师数组长度</span></span><br><span class="line">    <span class="type">int</span> len = <span class="keyword">sizeof</span>(tArray) / <span class="keyword">sizeof</span>(tArray[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、给老师学生赋值函数</span></span><br><span class="line">    assign(tArray, len);    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、打印输出所有数据</span></span><br><span class="line">    PrintArrey(tArray, len);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、给老师学生赋值函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">assign</span><span class="params">(<span class="keyword">struct</span> Teacher tArray[], <span class="type">int</span> len)</span></span><br><span class="line">&#123;   </span><br><span class="line">    <span class="comment">//编号</span></span><br><span class="line">    <span class="built_in">string</span> number = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//老师姓名</span></span><br><span class="line">        tArray[i].tName = <span class="string">&quot;老师&quot;</span>;</span><br><span class="line">        tArray[i].tName += number[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//学生姓名</span></span><br><span class="line">            tArray[i].stu[j].sName = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">            tArray[i].stu[j].sName += number[j];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//学生分数</span></span><br><span class="line">            <span class="comment">//系统生成随机数</span></span><br><span class="line">            <span class="type">int</span> iNum = rand() % <span class="number">61</span> + <span class="number">40</span>;    <span class="comment">//最底：40 ，最高：61+40-1</span></span><br><span class="line">            tArray[i].stu[j].iScores = iNum;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、打印输出函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintArrey</span><span class="params">(<span class="keyword">struct</span> Teacher tArray[], <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;老师：&quot;</span> &lt;&lt; tArray[i].tName &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t学生：&quot;</span> &lt;&lt; tArray[i].stu[j].sName </span><br><span class="line">                &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; tArray[i].stu[j].iScores &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/05/2020052608284824-1024x767.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程53：结构体（结构体中const使用场景）</title>
      <link href="/post/798e4a4c.html"/>
      <url>/post/798e4a4c.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第八章：结构体"><a href="#第八章：结构体" class="headerlink" title="第八章：结构体"></a>第八章：结构体</h1><h2 id="8-7-结构体中const使用场景"><a href="#8-7-结构体中const使用场景" class="headerlink" title="8.7 结构体中const使用场景"></a>8.7 结构体中const使用场景</h2><p><strong>作用：</strong>用const来防止误操作。<br><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GroupLeader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//成员列表</span></span><br><span class="line">    <span class="type">int</span> iNo;            <span class="comment">//工号</span></span><br><span class="line">    <span class="built_in">string</span> sName;       <span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> iAge;           <span class="comment">//年龄</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintGroupLeader02</span><span class="params">(<span class="type">const</span> GroupLeader *p)</span>   <span class="comment">//加const防止函数体中的误操作</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//p-&gt;sName = &quot;李四&quot;;  //操作失败，；因为加了const修饰</span></span><br><span class="line">    <span class="comment">//打印显示</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;02子函数\n&quot;</span> &lt;&lt; <span class="string">&quot;组长工号：&quot;</span> &lt;&lt; p-&gt;iNo &lt;&lt; <span class="string">&quot; 组长姓名：&quot;</span> </span><br><span class="line">        &lt;&lt; p-&gt;sName &lt;&lt; <span class="string">&quot; 组长年龄：&quot;</span> &lt;&lt; p-&gt;iAge &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//定义组长参数列表</span></span><br><span class="line">    GroupLeader s1;</span><br><span class="line">    s1.iNo = <span class="number">0001</span>;</span><br><span class="line">    s1.sName = <span class="string">&quot;黄家驹&quot;</span>;</span><br><span class="line">    s1.iAge = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    PrintGroupLeader02(&amp;s1);        <span class="comment">//地址传递</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印显示</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;main\n&quot;</span> &lt;&lt; <span class="string">&quot;组长工号：&quot;</span> &lt;&lt; s1.iNo &lt;&lt; <span class="string">&quot; 组长姓名：&quot;</span></span><br><span class="line">        &lt;&lt; s1.sName &lt;&lt; <span class="string">&quot; 组长年龄：&quot;</span> &lt;&lt; s1.iAge &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程52：结构体（结构体做函数参数）</title>
      <link href="/post/ac475861.html"/>
      <url>/post/ac475861.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第八章：结构体"><a href="#第八章：结构体" class="headerlink" title="第八章：结构体"></a>第八章：结构体</h1><h2 id="8-6-结构体做函数参数"><a href="#8-6-结构体做函数参数" class="headerlink" title="8.6 结构体做函数参数"></a>8.6 结构体做函数参数</h2><p><strong>作用：</strong>将结构体作为参数向函数中传递</p><p>传递方式有两种：</p><ul><li>值传递</li><li>地址传递</li></ul><p><strong>示例：</strong></p><pre><code class="c++">#include &lt;iostream&gt;using namespace std;#include &lt;string&gt;//定义结构体struct GroupLeader&#123;//成员列表int iNo;//工号string sName;//姓名int iAge;//年龄&#125;;//值传递void PrintGroupLeader01(GroupLeader s1)&#123;s1.sName = &quot;黄民&quot;;//打印显示cout &lt;&lt; &quot;01子函数\\n&quot; &lt;&lt; &quot;组长工号：&quot; &lt;&lt; s1.iNo &lt;&lt; &quot; 组长姓名：&quot; &lt;&lt; s1.sName &lt;&lt; &quot; 组长年龄：&quot; &lt;&lt; s1.iAge &lt;&lt; endl &lt;&lt; endl;&#125; //地址传递 void PrintGroupLeader02(GroupLeader \*p)&#123; p-&gt;sName = &quot;李四&quot;;//打印显示cout &lt;&lt; &quot;02子函数\\n&quot; &lt;&lt; &quot;组长工号：&quot; &lt;&lt; p-&gt;iNo &lt;&lt; &quot; 组长姓名：&quot; &lt;&lt; p-&gt;sName &lt;&lt; &quot; 组长年龄：&quot; &lt;&lt; p-&gt;iAge &lt;&lt; endl &lt;&lt; endl;&#125;int main()&#123;//定义组长参数列表GroupLeader s1;s1.iNo = 0001;s1.sName = &quot;黄家驹&quot;;s1.iAge = 60;PrintGroupLeader01(s1);//值传递PrintGroupLeader02(&amp;s1);//地址传递//打印显示cout &lt;&lt; &quot;main\\n&quot; &lt;&lt; &quot;组长工号：&quot; &lt;&lt; s1.iNo &lt;&lt; &quot; 组长姓名：&quot; &lt;&lt; s1.sName &lt;&lt; &quot; 组长年龄：&quot; &lt;&lt; s1.iAge &lt;&lt; endl;system(&quot;pause&quot;);return 0;&#125;</code></pre><p>以上代码编译执行结果如下：<img src="http://image.camcad.cn/2020/05/2020052604183148.jpg"></p><h3 id="总结：如果不想修改主函数中的数据用值传递，反之使用地址传递。"><a href="#总结：如果不想修改主函数中的数据用值传递，反之使用地址传递。" class="headerlink" title="总结：如果不想修改主函数中的数据用值传递，反之使用地址传递。"></a>总结：如果不想修改主函数中的数据用值传递，反之使用地址传递。</h3>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程51：结构体（结构体嵌套结构体）</title>
      <link href="/post/3083a4c1.html"/>
      <url>/post/3083a4c1.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第八章-结构体"><a href="#第八章-结构体" class="headerlink" title="第八章 结构体"></a>第八章 结构体</h1><h2 id="8-5-结构体嵌套结构体"><a href="#8-5-结构体嵌套结构体" class="headerlink" title="8.5 结构体嵌套结构体"></a>8.5 结构体嵌套结构体</h2><p><strong>作用：</strong>结构体中的成员可以是另一个结构体。<br><strong>例如：</strong>一名组长管理一名员工，一个组长的结构体中，记录一名员工的结构体。<br> <strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义员工结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Staff</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//成员列表</span></span><br><span class="line">    <span class="type">int</span> iNo;            <span class="comment">//工号</span></span><br><span class="line">    <span class="built_in">string</span> sName;       <span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> iAge;           <span class="comment">//年龄</span></span><br><span class="line">    <span class="type">int</span> iBasicSalary;   <span class="comment">//底薪</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义组长结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GroupLeader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//成员列表</span></span><br><span class="line">    <span class="type">int</span> iNo;            <span class="comment">//工号</span></span><br><span class="line">    <span class="built_in">string</span> sName;       <span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> iAge;           <span class="comment">//年龄</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Staff</span> <span class="title">Sta</span>;</span>   <span class="comment">//员工结构体</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//定义组长参数列表</span></span><br><span class="line">    GroupLeader s1;</span><br><span class="line">    s1.iNo = <span class="number">0001</span>;</span><br><span class="line">    s1.sName = <span class="string">&quot;黄家驹&quot;</span>;</span><br><span class="line">    s1.iAge = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义员工参数列表</span></span><br><span class="line">    s1.Sta.iNo = <span class="number">0203</span>;</span><br><span class="line">    s1.Sta.sName = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    s1.Sta.iAge = <span class="number">22</span>;</span><br><span class="line">    s1.Sta.iBasicSalary = <span class="number">2300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印显示</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;组长工号：&quot;</span> &lt;&lt; s1.iNo &lt;&lt; <span class="string">&quot; 组长姓名：&quot;</span> &lt;&lt; s1.sName &lt;&lt; <span class="string">&quot; 组长年龄：&quot;</span> &lt;&lt; s1.iAge &lt;&lt; <span class="string">&quot;\n&quot;</span></span><br><span class="line">        &lt;&lt; <span class="string">&quot;员工工号：&quot;</span> &lt;&lt; s1.Sta.iNo &lt;&lt; <span class="string">&quot; 员工姓名：&quot;</span> &lt;&lt; s1.Sta.sName &lt;&lt; <span class="string">&quot; 员工年龄：&quot;</span> &lt;&lt; s1.Sta.iAge &lt;&lt; <span class="string">&quot; 员工底薪：&quot;</span> &lt;&lt; s1.Sta.iBasicSalary &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结：在结构体中可以定义另一个结构体作为成员，用来解决实际问题。"><a href="#总结：在结构体中可以定义另一个结构体作为成员，用来解决实际问题。" class="headerlink" title="总结：在结构体中可以定义另一个结构体作为成员，用来解决实际问题。"></a>总结：在结构体中可以定义另一个结构体作为成员，用来解决实际问题。</h3>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程50：结构体（结构体指针）</title>
      <link href="/post/a3f94e94.html"/>
      <url>/post/a3f94e94.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第八章-结构体"><a href="#第八章-结构体" class="headerlink" title="第八章 结构体"></a>第八章 结构体</h1><h2 id="8-4-结构体指针"><a href="#8-4-结构体指针" class="headerlink" title="8.4 结构体指针"></a>8.4 结构体指针</h2><p><strong>作用：</strong>通过指针访问结构体中的成员。</p><ul><li>利用操作符 “-&gt;” 可以通过结构体指针访问结构体属性。<br><strong>示例：</strong><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//结构体定义</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">  <span class="comment">//成员列表</span></span><br><span class="line">  <span class="built_in">string</span> sName;<span class="comment">//姓名</span></span><br><span class="line">  <span class="type">int</span> iAge;<span class="comment">//年龄</span></span><br><span class="line">  <span class="type">int</span> iScore;<span class="comment">//分数</span></span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="comment">//struct 结构体名 数组名\[ 元素个数 \] = &#123; &#123; &#125;,&#123; &#125;,.. &#123; &#125; &#125;;</span></span><br><span class="line">  student arr\[<span class="number">4</span>\] = &#123; &#123;<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">89</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">65</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>,<span class="number">100</span>&#125;,</span><br><span class="line">  &#123;<span class="string">&quot;小二&quot;</span>,<span class="number">17</span>,<span class="number">50</span>&#125; &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//创建结构体指针</span></span><br><span class="line">  student \*p2 = &amp;arr\[<span class="number">2</span>\];</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p2-&gt;sName &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p2-&gt;iAge &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; p2-&gt;iScore &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//创建结构体指针</span></span><br><span class="line">  student \*p = arr;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//遍历结构体指针里面的所有数据</span></span><br><span class="line">  <span class="keyword">for</span> (size\<span class="type">_t</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr\[<span class="number">0</span>\]); i++)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p-&gt;sName</span><br><span class="line">  &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p-&gt;iAge </span><br><span class="line">  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; p-&gt;iScore &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  p++;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>以上代码编译执行结果如下：<img src="http://image.camcad.cn/2020/05/2020052409450077.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程49：结构体（结构体数组）</title>
      <link href="/post/5bba5fa.html"/>
      <url>/post/5bba5fa.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第八章-结构体"><a href="#第八章-结构体" class="headerlink" title="第八章 结构体"></a>第八章 结构体</h1><h2 id="8-3-结构体数组"><a href="#8-3-结构体数组" class="headerlink" title="8.3 结构体数组"></a>8.3 结构体数组</h2><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护。<br><strong>语法：</strong>struct 结构体名 数组名[ 元素个数 ] &#x3D; { { },{ },.. { } }; </p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//成员列表</span></span><br><span class="line">    <span class="built_in">string</span> sName;   <span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> iAge;       <span class="comment">//年龄</span></span><br><span class="line">    <span class="type">int</span> iScore;     <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//struct 结构体名 数组名[ 元素个数 ] = &#123; &#123; &#125;,&#123; &#125;,.. &#123; &#125; &#125;;</span></span><br><span class="line">    student arr[<span class="number">4</span>] = &#123; &#123;<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">89</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">65</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>,<span class="number">100</span>&#125;,</span><br><span class="line">                    &#123;<span class="string">&quot;小二&quot;</span>,<span class="number">17</span>,<span class="number">50</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历结构体里面的所有数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; arr[i].sName &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; arr[i].iAge &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; arr[i].iScore &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/05/2020052408594883-1024x478.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程48：结构体（结构体基本概念/结构体定义和使用）</title>
      <link href="/post/4b12509c.html"/>
      <url>/post/4b12509c.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第八章-结构体"><a href="#第八章-结构体" class="headerlink" title="第八章 结构体"></a>第八章 结构体</h1><h2 id="8-1-结构体基本概念"><a href="#8-1-结构体基本概念" class="headerlink" title="8.1 结构体基本概念"></a>8.1 结构体基本概念</h2><p>结构体属于用户自定义的数据类型，允许用户存储不同的数据类型。</p><h2 id="8-2-结构体定义和使用"><a href="#8-2-结构体定义和使用" class="headerlink" title="8.2 结构体定义和使用"></a>8.2 结构体定义和使用</h2><p><strong>语法：</strong>struct 结构体名 { 结构体成员列表 }; 通过结构体创建变量的方式有三种：</p><ul><li>struct结构体名 变量名</li><li>struct结构体名 变量名&#x3D;{ 成员1值 , 成员2值… };</li><li>定义结构体时顺便创建变量</li></ul><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//成员列表</span></span><br><span class="line">    <span class="built_in">string</span> sName;   <span class="comment">//姓名</span></span><br><span class="line">    <span class="type">int</span> iAge;       <span class="comment">//年龄</span></span><br><span class="line">    <span class="type">int</span> iScore;     <span class="comment">//分数</span></span><br><span class="line"></span><br><span class="line">&#125;s3;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1、struct结构体名 变量名</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s1</span>;</span></span><br><span class="line">    s1.sName = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    s1.iAge = <span class="number">18</span>;</span><br><span class="line">    s1.iScore = <span class="number">80</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; s1.sName &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; s1.iAge &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; s1.iScore &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、struct结构体名 变量名=&#123; 成员1值 , 成员2值... &#125;;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s2</span>  =</span> &#123; <span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">65</span> &#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; s2.sName &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; s2.iAge &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; s2.iScore &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、定义结构体时顺便创建变量</span></span><br><span class="line">    s3.sName = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">    s3.iAge = <span class="number">16</span>;</span><br><span class="line">    s3.iScore = <span class="number">99</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; s3.sName &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; s3.iAge &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; s3.iScore &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/05/2020052408222480.jpg"></p><h3 id="总结1：定义结构体时，关键字struct不可省略。"><a href="#总结1：定义结构体时，关键字struct不可省略。" class="headerlink" title="总结1：定义结构体时，关键字struct不可省略。"></a>总结1：定义结构体时，关键字struct不可省略。</h3><h3 id="总结2：创建结构体变量时，关键字struct可以省略。"><a href="#总结2：创建结构体变量时，关键字struct可以省略。" class="headerlink" title="总结2：创建结构体变量时，关键字struct可以省略。"></a>总结2：创建结构体变量时，关键字struct可以省略。</h3><h3 id="总结3：结构体变量利用操作符-“-”-访问成员。"><a href="#总结3：结构体变量利用操作符-“-”-访问成员。" class="headerlink" title="总结3：结构体变量利用操作符 “.” 访问成员。"></a>总结3：结构体变量利用操作符 “.” 访问成员。</h3>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程47：指针（指针配合数组和函数案例）</title>
      <link href="/post/924960a9.html"/>
      <url>/post/924960a9.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第七章：指针"><a href="#第七章：指针" class="headerlink" title="第七章：指针"></a>第七章：指针</h1><h2 id="7-8-指针、数组、函数"><a href="#7-8-指针、数组、函数" class="headerlink" title="7.8 指针、数组、函数"></a>7.8 指针、数组、函数</h2><p><strong>案例描述：</strong><br>封装一个函数，利用冒泡排序，实现对整型数组的升序排序。 例如数组：int arr[10] &#x3D; { 4,3,6,9,1,2,10,8,7,5 };<br><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建冒泡排序函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubblesort</span><span class="params">(<span class="type">int</span> *arr,<span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; len-i<span class="number">-1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历打印输出</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubbleprintf</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建数组</span></span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环次数</span></span><br><span class="line">    <span class="type">int</span> len = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用冒泡排序函数</span></span><br><span class="line">    bubblesort(arr, len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历打印输出</span></span><br><span class="line">    bubbleprintf(arr, len);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程46：指针（指针与函数）</title>
      <link href="/post/43672f3.html"/>
      <url>/post/43672f3.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第七章：指针"><a href="#第七章：指针" class="headerlink" title="第七章：指针"></a>第七章：指针</h1><h2 id="7-7-指针与函数"><a href="#7-7-指针与函数" class="headerlink" title="7.7 指针与函数"></a>7.7 指针与函数</h2><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap01</span><span class="params">(<span class="type">int</span> iNum01, <span class="type">int</span> iNum02)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;传递之前&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;swap01 iNum01= &quot;</span> &lt;&lt; iNum01 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;swap01 iNum02= &quot;</span> &lt;&lt; iNum02 &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> temp = iNum01;</span><br><span class="line">    iNum01 = iNum02;</span><br><span class="line">    iNum02 = temp;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;传递之后&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;swap01 iNum01= &quot;</span> &lt;&lt; iNum01 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;swap01 iNum02= &quot;</span> &lt;&lt; iNum02 &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap02</span><span class="params">(<span class="type">int</span> *iNum01,<span class="type">int</span> *iNum02)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//地址传递之前</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;地址传递之前&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;swap02 iNum01= &quot;</span> &lt;&lt; *iNum01 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;swap02 iNum02= &quot;</span> &lt;&lt; *iNum02 &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> temp = *iNum01;</span><br><span class="line">    *iNum01 = *iNum02;</span><br><span class="line">    *iNum02 = temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址传递之后</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;地址传递之后&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;swap02 iNum01= &quot;</span> &lt;&lt; *iNum01 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;swap02 iNum02= &quot;</span> &lt;&lt; *iNum02 &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> iNum01 = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> iNum02 = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//值传递</span></span><br><span class="line">    <span class="comment">//swap01(iNum01,iNum02);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//地址传递</span></span><br><span class="line">    swap02(&amp;iNum01, &amp;iNum02);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;main iNum01= &quot;</span> &lt;&lt; iNum01 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;main iNum02= &quot;</span> &lt;&lt; iNum02 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递。"><a href="#总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递。" class="headerlink" title="总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递。"></a>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递。</h3>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程45：指针（指针与数组）</title>
      <link href="/post/bb3e0de5.html"/>
      <url>/post/bb3e0de5.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第七章：指针"><a href="#第七章：指针" class="headerlink" title="第七章：指针"></a>第七章：指针</h1><h2 id="7-6-指针与数组"><a href="#7-6-指针与数组" class="headerlink" title="7.6 指针与数组"></a>7.6 指针与数组</h2><p><strong>作用：</strong>利用指针访问数组中的元素。<br><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//定义整型数组</span></span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">88</span>,<span class="number">64</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义指针</span></span><br><span class="line">    <span class="type">int</span> *p = arr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过指针遍历所有元素里的值</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;通过指针遍历所有元素里的值&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程44：指针（const修饰指针）</title>
      <link href="/post/587782a3.html"/>
      <url>/post/587782a3.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第七章：指针"><a href="#第七章：指针" class="headerlink" title="第七章：指针"></a>第七章：指针</h1><h2 id="7-5-const修饰指针"><a href="#7-5-const修饰指针" class="headerlink" title="7.5 const修饰指针"></a>7.5 const修饰指针</h2><p><strong>const修饰指针有三种情况：</strong><br>1、const修饰指针（常量指针）<br>2、const修饰常量（指针常量）<br>3、const即修饰指针，又修饰常量</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><h3 id="常量指针"><a href="#常量指针" class="headerlink" title="常量指针"></a>常量指针</h3><p><img src="http://image.camcad.cn/2020/05/2020052403143177-1024x513.jpg"></p><h3 id="指针常量"><a href="#指针常量" class="headerlink" title="指针常量"></a>指针常量</h3><p><img src="http://image.camcad.cn/2020/05/2020052403150147-1024x505.jpg"></p><h3 id="即修饰指针，又修饰常量"><a href="#即修饰指针，又修饰常量" class="headerlink" title="即修饰指针，又修饰常量"></a>即修饰指针，又修饰常量</h3><p><img src="http://image.camcad.cn/2020/05/2020052403160080-1024x493.jpg"></p><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//定义整型变量</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、const修饰的是指针，指针指向的地址可以修改，指针指向的值不可以修改（常量指针）</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *p11 = &amp;a;</span><br><span class="line">    p11 = &amp;b;       <span class="comment">//正确</span></span><br><span class="line">    <span class="comment">//*p11 = 20;    //错误</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、const修饰的是常量，指针指向的地址不可以修改，指针指向的值可以修改（指针常量）</span></span><br><span class="line">    <span class="type">int</span> *<span class="type">const</span> p21 = &amp;a;</span><br><span class="line">    <span class="comment">//p21 = &amp;b; //错误</span></span><br><span class="line">    *p21 = <span class="number">20</span>;  <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、const即修饰指针，又修饰常量，两者都不可以修改</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p31 = &amp;a;</span><br><span class="line">    <span class="comment">//p31 = &amp;b;     //错误</span></span><br><span class="line">    <span class="comment">//*p31 = 20;    //错误</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结：看const右侧紧跟着的是指针还是常量，是指针就是常量指针，是常量就是指针常量。"><a href="#总结：看const右侧紧跟着的是指针还是常量，是指针就是常量指针，是常量就是指针常量。" class="headerlink" title="总结：看const右侧紧跟着的是指针还是常量，是指针就是常量指针，是常量就是指针常量。"></a>总结：看const右侧紧跟着的是指针还是常量，是指针就是常量指针，是常量就是指针常量。</h3>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程43：指针（空指针/野指针）</title>
      <link href="/post/96e13ca0.html"/>
      <url>/post/96e13ca0.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第七章：指针"><a href="#第七章：指针" class="headerlink" title="第七章：指针"></a>第七章：指针</h1><h2 id="7-4-空指针-x2F-野指针"><a href="#7-4-空指针-x2F-野指针" class="headerlink" title="7.4 空指针&#x2F;野指针"></a>7.4 空指针&#x2F;野指针</h2><p><strong>空指针：</strong>指针变量指向内存中编号0（NULL）的空间。<br><strong>用途：</strong>初始化指针变量。<br><strong>示例1：</strong>空指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//指针的定义</span></span><br><span class="line">    <span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//错误，*（解引用）不可访问</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意：空指针指向的内存是不可以访问。"><a href="#注意：空指针指向的内存是不可以访问。" class="headerlink" title="注意：空指针指向的内存是不可以访问。"></a>注意：空指针指向的内存是不可以访问。</h3><p><strong>野指针：</strong>指针变量指向非法的内存空间。<br><strong>示例2：</strong>野指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//指针变量p指向内存地址编号为0x1100的内存空间</span></span><br><span class="line">    <span class="type">int</span> *p = (<span class="type">int</span> *)<span class="number">0x1100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//错误，*（解引用）不可访问野指针</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结：空指针和野指针都不是我们申请的内存空间，因此不要访问，否则出错。"><a href="#总结：空指针和野指针都不是我们申请的内存空间，因此不要访问，否则出错。" class="headerlink" title="总结：空指针和野指针都不是我们申请的内存空间，因此不要访问，否则出错。"></a>总结：空指针和野指针都不是我们申请的内存空间，因此不要访问，否则出错。</h3>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程42：指针（指针所占内存空间）</title>
      <link href="/post/985d89af.html"/>
      <url>/post/985d89af.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第七章：指针"><a href="#第七章：指针" class="headerlink" title="第七章：指针"></a>第七章：指针</h1><h2 id="7-3-指针所占内存空间"><a href="#7-3-指针所占内存空间" class="headerlink" title="7.3 指针所占内存空间"></a>7.3 指针所占内存空间</h2><p><strong>提问：</strong>指针也是数据类型，那么这些数据类型占用多少内存空间？ <strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//定义整型变量</span></span><br><span class="line">    <span class="type">int</span> iNum = <span class="number">10</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//指针的定义</span></span><br><span class="line">    <span class="type">int</span> *p = &amp;iNum;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sizeof(p) 占用内存空间\t&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(p) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sizeof(int *) 占用内存空间\t&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="type">int</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sizeof(char *) 占用内存空间\t&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="type">char</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sizeof(double *) 占用内存空间\t&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="type">double</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;sizeof(long *) 占用内存空间\t&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="type">long</span> *) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/05/2020052311460692-1024x476.jpg"></p><h3 id="总结1：在32位操作系统下，指针占4个字节空间大小，不管是什么类型。"><a href="#总结1：在32位操作系统下，指针占4个字节空间大小，不管是什么类型。" class="headerlink" title="总结1：在32位操作系统下，指针占4个字节空间大小，不管是什么类型。"></a>总结1：在32位操作系统下，指针占4个字节空间大小，不管是什么类型。</h3><h3 id="总结2：在64位操作系统下，指针占8个字节空间大小，不管是什么类型。"><a href="#总结2：在64位操作系统下，指针占8个字节空间大小，不管是什么类型。" class="headerlink" title="总结2：在64位操作系统下，指针占8个字节空间大小，不管是什么类型。"></a>总结2：在64位操作系统下，指针占8个字节空间大小，不管是什么类型。</h3>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程41：指针（指针的基本概念/指针变量的定义和使用）</title>
      <link href="/post/9c0faa35.html"/>
      <url>/post/9c0faa35.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第七章：指针"><a href="#第七章：指针" class="headerlink" title="第七章：指针"></a>第七章：指针</h1><h2 id="7-1-指针的基本概念"><a href="#7-1-指针的基本概念" class="headerlink" title="7.1 指针的基本概念"></a>7.1 指针的基本概念</h2><p><strong>指针的作用：</strong>可以通过指针间接访问修改内存里的值。</p><ul><li>内存编号是0开始记录，一般用十六进制数字表示。</li><li>可以利用指针变量保存地址。</li></ul><h2 id="7-2指针变量的定义和使用"><a href="#7-2指针变量的定义和使用" class="headerlink" title="7.2指针变量的定义和使用"></a>7.2指针变量的定义和使用</h2><p>指针变量定义语法：数据类型 * 变量名; <strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//指针的定义</span></span><br><span class="line">    <span class="type">int</span> iNum = <span class="number">10</span>;  <span class="comment">//定义整型变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//指针定义语法：数据类型 *变量名;</span></span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指针变量赋值</span></span><br><span class="line">    p = &amp;iNum;  <span class="comment">//指针指向变量iNum的内存地址</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;iNum的内存地址为：\t&quot;</span> &lt;&lt; &amp;iNum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;指针p的内存地址为：\t&quot;</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指针的使用</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;指针*p内存里面的值为：\t&quot;</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//（* 解引用） 通过 * 操作访问指针指向内存地址里面的值</span></span><br><span class="line"></span><br><span class="line">    *p = <span class="number">20</span>;    <span class="comment">//修改指针指向内存地址里面的值</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; iNum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/05/2020052311183414.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程40：函数（函数的分文件编写）</title>
      <link href="/post/3157c3fd.html"/>
      <url>/post/3157c3fd.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第六章：函数"><a href="#第六章：函数" class="headerlink" title="第六章：函数"></a>第六章：函数</h1><h2 id="6-7-函数的分文件编写"><a href="#6-7-函数的分文件编写" class="headerlink" title="6.7 函数的分文件编写"></a>6.7 函数的分文件编写</h2><p>函数分文件编写一般有4个步骤：<br>1、创建后缀名为.h的头文件<br>2、创建后缀名为.cpp的源文件<br>3、在头文件中写函数的声明<br>4、在源文件中写函数的定义</p><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p><strong>头文件（.h）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//swap. 头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现两个数字交换的函数声明</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> iNum01, <span class="type">int</span> iNum02)</span>;</span><br></pre></td></tr></table></figure><p><strong>源文件（.cpp）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//swap.cpp 源文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;swap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> iNum01, <span class="type">int</span> iNum02)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换之前&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;iNum01= &quot;</span>&lt;&lt;iNum01&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;<span class="string">&quot;iNum02= &quot;</span>&lt;&lt;iNum02 &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数值交换</span></span><br><span class="line">    <span class="type">int</span> temp = iNum01;</span><br><span class="line">    iNum01 = iNum02;</span><br><span class="line">    iNum02 = temp;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换之后&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;iNum01= &quot;</span> &lt;&lt; iNum01 &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="string">&quot;iNum02= &quot;</span> &lt;&lt; iNum02 &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    swap(<span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/05/2020052309354974.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程39：函数（函数的声明）</title>
      <link href="/post/d249b32b.html"/>
      <url>/post/d249b32b.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第六章：函数"><a href="#第六章：函数" class="headerlink" title="第六章：函数"></a>第六章：函数</h1><h2 id="6-6-函数的声明"><a href="#6-6-函数的声明" class="headerlink" title="6.6 函数的声明"></a>6.6 函数的声明</h2><p><strong>作用：</strong>告诉编译器函数名称及如何调用函数，函数的实际主体可以单独定义。</p><ul><li>函数的声明可以多次，但是函数的定义只能有一次。 <strong>示例：</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">test04</span><span class="params">(<span class="type">int</span> iNum01, <span class="type">int</span> iNum02)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">test04</span><span class="params">(<span class="type">int</span> iNum01, <span class="type">int</span> iNum02)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">test04</span><span class="params">(<span class="type">int</span> iNum01,<span class="type">int</span> iNum02)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> iNum01 &gt; iNum02 ? iNum01 + iNum02 : iNum01 \* iNum02;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">40</span>, b = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; test04(a, b) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程38：函数（函数的常见样式）</title>
      <link href="/post/94cbec15.html"/>
      <url>/post/94cbec15.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第六章：函数"><a href="#第六章：函数" class="headerlink" title="第六章：函数"></a>第六章：函数</h1><h2 id="6-5-函数的常见样式"><a href="#6-5-函数的常见样式" class="headerlink" title="6.5 函数的常见样式"></a>6.5 函数的常见样式</h2><p>常见的函数样式有4种： 1、无参无返 2、有参无返 3、无参有返 4、有参有返 <strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//常见函数样式</span></span><br><span class="line"><span class="comment">//1、无参无返</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test01：无参无返&quot;</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、有参无返</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">test02</span><span class="params">(<span class="type">int</span> iNum1,<span class="type">int</span> iNum2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sum = iNum1 + iNum2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test02：有参无返 sum= &quot;</span> &lt;&lt; sum &lt;&lt;<span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、无参有返</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">test03</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test03：无参有返&quot;</span>  &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、有参有返</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">test04</span><span class="params">(<span class="type">int</span> iNum01,<span class="type">int</span> iNum02)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> iSum = iNum01 + iNum02;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;test04：有参有返&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> iSum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();           <span class="comment">//无参无返</span></span><br><span class="line"></span><br><span class="line">    test02(<span class="number">20</span>, <span class="number">30</span>);     <span class="comment">//有参无返</span></span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> a = test03();          <span class="comment">//无参有返</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> sum= test04(<span class="number">54</span>,<span class="number">23</span>);     <span class="comment">//有参有返</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/05/2020052308351624.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程37：函数（值传递）</title>
      <link href="/post/520ef675.html"/>
      <url>/post/520ef675.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第六章：函数"><a href="#第六章：函数" class="headerlink" title="第六章：函数"></a>第六章：函数</h1><h2 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h2><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码。 一个较大的程序项目，一般分为若干个程序块，每个模块实现特定的功能。</p><h2 id="6-4-值传递"><a href="#6-4-值传递" class="headerlink" title="6.4 值传递"></a>6.4 值传递</h2><ul><li>所谓值传递，就是函数调用时实参将数值传入给形参。</li><li>值传递时，如果形参发生变化，并不会影响实参。 <strong>示例：</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> iNum1,<span class="type">int</span> iNum2)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换之前&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;iNum1= &quot;</span> &lt;&lt; iNum1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;iNum2= &quot;</span> &lt;&lt; iNum2 &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> iTemp = iNum1;</span><br><span class="line">iNum1 = iNum2;</span><br><span class="line">iNum2 = iTemp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;交换之后&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;iNum1= &quot;</span> &lt;&lt; iNum1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;iNum2= &quot;</span> &lt;&lt; iNum2 &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return; 当函数声明void(空的)的时候，可以不写return（返回值）。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">swap(a,b);<span class="comment">//调用函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mian中 a= &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mian中 b= &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/05/2020052303352768.jpg"></p><h3 id="总结：值传递时，形参是修饰不了实参。"><a href="#总结：值传递时，形参是修饰不了实参。" class="headerlink" title="总结：值传递时，形参是修饰不了实参。"></a>总结：值传递时，形参是修饰不了实参。</h3>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程36：函数（函数的调用）</title>
      <link href="/post/9cc4cf82.html"/>
      <url>/post/9cc4cf82.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第六章：函数"><a href="#第六章：函数" class="headerlink" title="第六章：函数"></a>第六章：函数</h1><h2 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h2><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码。 一个较大的程序项目，一般分为若干个程序块，每个模块实现特定的功能。</p><h2 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h2><p><strong>功能：</strong>使用定义好的函数。 <strong>语法：</strong>函数名 (参数); <strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="type">int</span><span class="comment">/*1、返回值类型*/</span> Mod<span class="comment">/*2、函数名*/</span>(<span class="type">int</span> iNumber01, <span class="type">int</span> iNumber02<span class="comment">/*3、参数列表*/</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> iMod = iNumber01 % iNumber02;<span class="comment">/*4、函数体语句*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> iMod;<span class="comment">/*5、return表达式（返回值）*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//调用取模函数</span></span><br><span class="line">    <span class="type">int</span> iMod = Mod(<span class="number">9</span>,<span class="number">7</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; iMod &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程35：函数（概述、函数的定义）</title>
      <link href="/post/245f3a26.html"/>
      <url>/post/245f3a26.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第六章：函数"><a href="#第六章：函数" class="headerlink" title="第六章：函数"></a>第六章：函数</h1><h2 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h2><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码。 一个较大的程序项目，一般分为若干个程序块，每个模块实现特定的功能。</p><h2 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h2><p>函数的定义一般主要有5个步骤： 1、返回值类型 2、函数名 3、参数列表 4、函数体语句 5、return表达式（返回值）</p><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名 ( 参数列表 )</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    函数体语句;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> 表达式;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>返回值类型：一个函数可以返回一个值，在函数定义中。</li><li>函数名：给函数起个名称。</li><li>参数列表：使用该函数时，传入的数据。</li><li>函数体语句：花括号内的代码，函数内需要执行的语句。</li><li>return表达式：和<strong>返回值类型</strong>挂钩，函数执行完后，返回相应的数据。</li></ul><p><strong>示例：</strong>定义一个取模函数，实现两个数取模运算。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span><span class="comment">/*1、返回值类型*/</span> Mod<span class="comment">/*2、函数名*/</span>(<span class="type">int</span> iNumber01, <span class="type">int</span> iNumber02<span class="comment">/*3、参数列表*/</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> iMod = iNumber01 % iNumber02;<span class="comment">/*4、函数体语句*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> iMod;<span class="comment">/*5、return表达式（返回值）*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程34：数组-二维数组应用案例</title>
      <link href="/post/94c0b7aa.html"/>
      <url>/post/94c0b7aa.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第五章：数组"><a href="#第五章：数组" class="headerlink" title="第五章：数组"></a>第五章：数组</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素。</p><h3 id="特点1：数组中的每个数据元素都是相同的数据类型。"><a href="#特点1：数组中的每个数据元素都是相同的数据类型。" class="headerlink" title="特点1：数组中的每个数据元素都是相同的数据类型。"></a>特点1：数组中的每个数据元素都是相同的数据类型。</h3><h3 id="特点2：数组是由连续的内存位置组成。"><a href="#特点2：数组是由连续的内存位置组成。" class="headerlink" title="特点2：数组是由连续的内存位置组成。"></a>特点2：数组是由连续的内存位置组成。</h3><hr><h2 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h2><p>二维数组就是在一维数组上，多加一个维度。</p><h3 id="5-3-3-二维数组应用案例"><a href="#5-3-3-二维数组应用案例" class="headerlink" title="5.3.3 二维数组应用案例"></a>5.3.3 二维数组应用案例</h3><p><strong>考试成绩统计表：</strong><br><strong>案例描述：</strong>有三名同学（张三、李四、王五），在一次考试中的成绩分别如下表，请分别输出三名同学的总成绩。</p><table><thead><tr><th align="center">姓名</th><th align="center">语言</th><th align="center">数学</th><th align="center">英语</th></tr></thead><tbody><tr><td align="center">张三</td><td align="center">100</td><td align="center">100</td><td align="center">100</td></tr><tr><td align="center">李四</td><td align="center">85</td><td align="center">75</td><td align="center">88</td></tr><tr><td align="center">王五</td><td align="center">45</td><td align="center">85</td><td align="center">77</td></tr></tbody></table><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//二维数组数组名</span></span><br><span class="line">    <span class="type">int</span> iArray[<span class="number">3</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>&#125;,</span><br><span class="line">                        &#123;<span class="number">85</span>,<span class="number">75</span>,<span class="number">88</span>&#125;,</span><br><span class="line">                        &#123;<span class="number">45</span>,<span class="number">85</span>,<span class="number">77</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> sName[<span class="number">3</span>] = &#123; <span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(iArray) / <span class="keyword">sizeof</span>(iArray[<span class="number">0</span>]); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> iAdd = <span class="number">0</span>;   <span class="comment">//总分变量定义</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sName[i]&lt;&lt;<span class="string">&quot; 总分=&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;      <span class="comment">//姓名变量取值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="keyword">sizeof</span>(iArray[<span class="number">0</span>]) / <span class="keyword">sizeof</span>(iArray[<span class="number">0</span>][<span class="number">0</span>]); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            iAdd += iArray[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; iAdd &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//总分打印</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下: <img src="http://image.camcad.cn/2020/05/2020052210420047.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程33：数组-二维数组数组名</title>
      <link href="/post/591da572.html"/>
      <url>/post/591da572.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第五章：数组"><a href="#第五章：数组" class="headerlink" title="第五章：数组"></a>第五章：数组</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素。</p><h3 id="特点1：数组中的每个数据元素都是相同的数据类型。"><a href="#特点1：数组中的每个数据元素都是相同的数据类型。" class="headerlink" title="特点1：数组中的每个数据元素都是相同的数据类型。"></a>特点1：数组中的每个数据元素都是相同的数据类型。</h3><h3 id="特点2：数组是由连续的内存位置组成。"><a href="#特点2：数组是由连续的内存位置组成。" class="headerlink" title="特点2：数组是由连续的内存位置组成。"></a>特点2：数组是由连续的内存位置组成。</h3><hr><h2 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h2><p>二维数组就是在一维数组上，多加一个维度。</p><h3 id="5-3-2-二维数组数组名"><a href="#5-3-2-二维数组数组名" class="headerlink" title="5.3.2 二维数组数组名"></a>5.3.2 二维数组数组名</h3><p>· 查看二维数组所占内存空间 · 获取二维数组首地址 <strong>示例</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//二维数组数组名</span></span><br><span class="line">    <span class="type">int</span> iArray[<span class="number">2</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">21</span>,<span class="number">23</span>,<span class="number">45</span>,<span class="number">87</span>&#125;,</span><br><span class="line">                        &#123;<span class="number">64</span>,<span class="number">31</span>,<span class="number">64</span>,<span class="number">54</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组总占空间：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(iArray) &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组一行占用空间：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(iArray[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组元素大小：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(iArray[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组行数：&quot;</span>&lt;&lt; <span class="keyword">sizeof</span>(iArray)/ <span class="keyword">sizeof</span>(iArray[<span class="number">0</span>]) &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组列数：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(iArray[<span class="number">0</span>])/<span class="keyword">sizeof</span>(iArray[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取地址符</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组首地址 十进制：&quot;</span> &lt;&lt; (<span class="type">int</span>)iArray&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第一行地址 十进制：&quot;</span> &lt;&lt; (<span class="type">int</span>)iArray[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第二行地址 十进制：&quot;</span> &lt;&lt; (<span class="type">int</span>)iArray[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意：获取元素地址需加 取值符 &amp;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第一个元素地址 十进制：&quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;iArray[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;二维数组第二个元素地址 十进制：&quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;iArray[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以上代码编译执行结果如下：</strong> <img src="http://image.camcad.cn/2020/05/202005220946248-1024x409.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程32：数组-二维数组</title>
      <link href="/post/a5caedcb.html"/>
      <url>/post/a5caedcb.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第五章：数组"><a href="#第五章：数组" class="headerlink" title="第五章：数组"></a>第五章：数组</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素。</p><h3 id="特点1：数组中的每个数据元素都是相同的数据类型。"><a href="#特点1：数组中的每个数据元素都是相同的数据类型。" class="headerlink" title="特点1：数组中的每个数据元素都是相同的数据类型。"></a>特点1：数组中的每个数据元素都是相同的数据类型。</h3><h3 id="特点2：数组是由连续的内存位置组成。"><a href="#特点2：数组是由连续的内存位置组成。" class="headerlink" title="特点2：数组是由连续的内存位置组成。"></a>特点2：数组是由连续的内存位置组成。</h3><hr><h2 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h2><p>二维数组就是在一维数组上，多加一个维度。</p><h3 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">二维数组定义的四种方式： </span><br><span class="line"><span class="number">1</span>、数据类型 数组名\[ 行数 \]\[ 列数 \]; </span><br><span class="line"><span class="number">2</span>、数据类型 数据名\[ \]\[ 列数 \] = &#123;数据<span class="number">1</span>,数据<span class="number">2</span>数据<span class="number">3</span>,数据<span class="number">4</span>&#125;; </span><br><span class="line"><span class="number">3</span>、数据类型 数组名\[ 行数 \]\[ 列数 \]=&#123; 数据<span class="number">1</span>,数据<span class="number">2</span>,数据<span class="number">3</span>,数据<span class="number">4</span>,&#125;; </span><br><span class="line"><span class="number">4</span>、数据类型 数组名\[ 行数 \]\[ 列数 \]=&#123;&#123;数据<span class="number">1</span>,数据<span class="number">2</span>&#125;,&#123;数据<span class="number">3</span>,数据<span class="number">4</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h3 id="建议：以上4种定义方式，利用第四种更加直观，提高代码的可读性。"><a href="#建议：以上4种定义方式，利用第四种更加直观，提高代码的可读性。" class="headerlink" title="建议：以上4种定义方式，利用第四种更加直观，提高代码的可读性。"></a>建议：以上4种定义方式，利用第四种更加直观，提高代码的可读性。</h3><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//1、数据类型 数组名[行数][列数];</span></span><br><span class="line">    <span class="type">int</span> iArray01[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">    iArray01[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">    iArray01[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line">    iArray01[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    iArray01[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">40</span>;</span><br><span class="line">    iArray01[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">50</span>;</span><br><span class="line">    iArray01[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//总数 = sizeof(iArray01)/sizeof(int) </span></span><br><span class="line">    <span class="comment">//行数 = (sizeof(iArray01) / sizeof(int))/ (sizeof(iArray01[0]) / sizeof(int))    </span></span><br><span class="line">    <span class="comment">//列数 = sizeof(iArray01[0]) / sizeof(int)    </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环打印所有元素值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; (<span class="built_in">sizeof</span>(iArray01) / <span class="built_in">sizeof</span>(<span class="type">int</span>)) / (<span class="built_in">sizeof</span>(iArray01[<span class="number">0</span>]) / <span class="built_in">sizeof</span>(<span class="type">int</span>)); i++)      <span class="comment">//行数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="built_in">sizeof</span>(iArray01[<span class="number">0</span>]) / <span class="built_in">sizeof</span>(<span class="type">int</span>); j++)       <span class="comment">//列数</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; iArray01[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、数据类型 数据名[][列数] = &#123; 数据1,数据2数据3,数据4 &#125;;</span></span><br><span class="line">    <span class="type">int</span> iArray02[][<span class="number">4</span>] = &#123; <span class="number">11</span>,<span class="number">23</span>,<span class="number">52</span>,<span class="number">36</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环打印所有元素值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; (<span class="built_in">sizeof</span>(iArray02) / <span class="built_in">sizeof</span>(<span class="type">int</span>)) / (<span class="built_in">sizeof</span>(iArray02[<span class="number">0</span>]) / <span class="built_in">sizeof</span>(<span class="type">int</span>)); i++)      <span class="comment">//行数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="built_in">sizeof</span>(iArray02[<span class="number">0</span>]) / <span class="built_in">sizeof</span>(<span class="type">int</span>); j++)       <span class="comment">//列数</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; iArray02[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、数据类型 数组名[行数][列数] = &#123; 数据1,数据2,数据3,数据4, &#125;;</span></span><br><span class="line">    <span class="type">int</span> iArray03[<span class="number">2</span>][<span class="number">2</span>] = &#123; <span class="number">21</span>,<span class="number">23</span>,<span class="number">84</span>,<span class="number">78</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环打印所有元素值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; (<span class="built_in">sizeof</span>(iArray03) / <span class="built_in">sizeof</span>(<span class="type">int</span>)) / (<span class="built_in">sizeof</span>(iArray03[<span class="number">0</span>]) / <span class="built_in">sizeof</span>(<span class="type">int</span>)); i++)      <span class="comment">//行数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="built_in">sizeof</span>(iArray03[<span class="number">0</span>]) / <span class="built_in">sizeof</span>(<span class="type">int</span>); j++)       <span class="comment">//列数</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; iArray03[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、数据类型 数组名[行数][列数] = &#123; &#123;数据1,数据2&#125;,&#123;数据3,数据4&#125; &#125;;</span></span><br><span class="line">    <span class="type">int</span> iArray04[<span class="number">2</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">78</span>,<span class="number">21</span>,<span class="number">45</span>,<span class="number">232</span>&#125; ,</span><br><span class="line">                            &#123;<span class="number">56</span>,<span class="number">32</span>,<span class="number">78</span>,<span class="number">54</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环打印所有元素值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; (<span class="built_in">sizeof</span>(iArray04) / <span class="built_in">sizeof</span>(<span class="type">int</span>)) / (<span class="built_in">sizeof</span>(iArray04[<span class="number">0</span>]) / <span class="built_in">sizeof</span>(<span class="type">int</span>)); i++)      <span class="comment">//行数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="built_in">sizeof</span>(iArray04[<span class="number">0</span>]) / <span class="built_in">sizeof</span>(<span class="type">int</span>); j++)       <span class="comment">//列数</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; iArray04[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程31：数组-一维数组（冒泡排序）</title>
      <link href="/post/3920124c.html"/>
      <url>/post/3920124c.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第五章：数组"><a href="#第五章：数组" class="headerlink" title="第五章：数组"></a>第五章：数组</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素。</p><h3 id="特点1：数组中的每个数据元素都是相同的数据类型。"><a href="#特点1：数组中的每个数据元素都是相同的数据类型。" class="headerlink" title="特点1：数组中的每个数据元素都是相同的数据类型。"></a>特点1：数组中的每个数据元素都是相同的数据类型。</h3><h3 id="特点2：数组是由连续的内存位置组成。"><a href="#特点2：数组是由连续的内存位置组成。" class="headerlink" title="特点2：数组是由连续的内存位置组成。"></a>特点2：数组是由连续的内存位置组成。</h3><hr><h2 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h2><h3 id="5-2-3-冒泡排序"><a href="#5-2-3-冒泡排序" class="headerlink" title="5.2.3 冒泡排序"></a>5.2.3 冒泡排序</h3><p><strong>作用：</strong>最常用的排序算法，对数组内元素进行排序。 1、比较相邻的元素，如果第一比第二个大，就交换他们两个。 2、对每一对相邻元素做风一样的工作，执行完毕后，就许多的他们两个。 3、重复以上步骤，每次比较次数-1，直到不需要比较。 <strong>示例：</strong>将数组{ 4，2，8，0，5，7，1，3，9 }进行升序排序。 <strong>原理：</strong> <img src="http://image.camcad.cn/2020/05/202005220428049-1024x370.jpg"> <strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//将数组&#123; 4，2，8，0，5，7，1，3，9 &#125;进行升序排序。</span></span><br><span class="line">    <span class="type">int</span> arr[<span class="number">9</span>] = &#123; <span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//外层循环轮数为: 元素总数-1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(<span class="type">int</span>)<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//内层循环轮数为： 元素总数-外层循环数-1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(<span class="type">int</span>)-i<span class="number">-1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//如果第一个元素大于第二个元素，交换两个数字</span></span><br><span class="line">                <span class="type">int</span> temp = arr[j];      <span class="comment">//临时储存</span></span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印最后结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程30：数组-一维数组（一维数组数组名）</title>
      <link href="/post/4796245.html"/>
      <url>/post/4796245.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第五章：数组"><a href="#第五章：数组" class="headerlink" title="第五章：数组"></a>第五章：数组</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素。</p><h3 id="特点1：数组中的每个数据元素都是相同的数据类型。"><a href="#特点1：数组中的每个数据元素都是相同的数据类型。" class="headerlink" title="特点1：数组中的每个数据元素都是相同的数据类型。"></a>特点1：数组中的每个数据元素都是相同的数据类型。</h3><h3 id="特点2：数组是由连续的内存位置组成。"><a href="#特点2：数组是由连续的内存位置组成。" class="headerlink" title="特点2：数组是由连续的内存位置组成。"></a>特点2：数组是由连续的内存位置组成。</h3><hr><h2 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h2><h3 id="5-2-2-一维数组数组名"><a href="#5-2-2-一维数组数组名" class="headerlink" title="5.2.2 一维数组数组名"></a>5.2.2 一维数组数组名</h3><p>一维数组名称的<strong>用途：</strong> 1、可以统计整个数组在内存中的长度。 2、可以获取数组在内存中的首地址。</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1、可以统计整个数组在内存中的长度。</span></span><br><span class="line">    <span class="type">int</span> iNum01[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;整个数组占用内存空间为：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(iNum01) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;每个元素占用内存空间为：&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(iNum01[<span class="number">0</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组中元素个数为：&quot;</span>&lt;&lt; <span class="keyword">sizeof</span>(iNum01) / <span class="keyword">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、可以获取数组在内存中的首地址。</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组内存首地址为：&quot;</span> &lt;&lt; (<span class="type">int</span>)iNum01 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意：获取数组中指定元素地址需加取值符 &amp; 符号。</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;数组中第一元素地址为：&quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;iNum01[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组名是常量，不可以进行赋值操作。</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意1：获取数组中指定元素地址需加取值符-amp-符号。"><a href="#注意1：获取数组中指定元素地址需加取值符-amp-符号。" class="headerlink" title="注意1：获取数组中指定元素地址需加取值符 &amp; 符号。"></a>注意1：获取数组中指定元素地址需加取值符 &amp; 符号。</h3><h3 id="注意2：数组名是常量，不可以进行赋值操作。"><a href="#注意2：数组名是常量，不可以进行赋值操作。" class="headerlink" title="注意2：数组名是常量，不可以进行赋值操作。"></a>注意2：数组名是常量，不可以进行赋值操作。</h3><h2 id="练习案例："><a href="#练习案例：" class="headerlink" title="练习案例："></a>练习案例：</h2><h3 id="练习案例1：五只小猪称体重"><a href="#练习案例1：五只小猪称体重" class="headerlink" title="练习案例1：五只小猪称体重"></a>练习案例1：五只小猪称体重</h3><p><strong>案例描述：</strong> 在一个数组中记录了五只小猪的体重，如：int arr[5]&#x3D;{300,350,200,400,250}; 找出并打印最重的小猪体重。 <strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>] = &#123; <span class="number">300</span>,<span class="number">350</span>,<span class="number">200</span>,<span class="number">400</span>,<span class="number">250</span> &#125;;</span><br><span class="line">    <span class="type">int</span> iNum = <span class="number">0</span>,iNumber=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(arr)/<span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i]&gt;iNum)</span><br><span class="line">        &#123;</span><br><span class="line">            iNum = arr[i];</span><br><span class="line">            iNumber = i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小猪&quot;</span>&lt;&lt; iNumber &lt;&lt;<span class="string">&quot;号 = &quot;</span>&lt;&lt;iNum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习案例2：数组元素逆置"><a href="#练习案例2：数组元素逆置" class="headerlink" title="练习案例2：数组元素逆置"></a>练习案例2：数组元素逆置</h3><p><strong>案例描述：</strong>请声明5个元素的数组，并且将元素逆置。 （如原数组元素为：11，21，31，41，51；逆置后输出结果为：51，41，31，21，11）</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>] = &#123; <span class="number">11</span>,<span class="number">21</span>,<span class="number">31</span>,<span class="number">41</span>,<span class="number">51</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> iStart = <span class="number">0</span>;     <span class="comment">//起始下标</span></span><br><span class="line">    <span class="type">int</span> iEnd = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) - <span class="number">1</span>;    <span class="comment">//结束下标</span></span><br><span class="line">    <span class="type">int</span> iNum = <span class="number">0</span>;       <span class="comment">//元素暂存</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (iStart &lt; iEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//实现元素互换</span></span><br><span class="line">        iNum = arr[iEnd];</span><br><span class="line">        arr[iEnd] = arr[iStart];</span><br><span class="line">        arr[iStart] = iNum;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下标更新</span></span><br><span class="line">        iStart++;</span><br><span class="line">        iEnd--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程29：数组-一维数组（一维数组的定义方式）</title>
      <link href="/post/a644770e.html"/>
      <url>/post/a644770e.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第五章：数组"><a href="#第五章：数组" class="headerlink" title="第五章：数组"></a>第五章：数组</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素。</p><h3 id="特点1：数组中的每个数据元素都是相同的数据类型。"><a href="#特点1：数组中的每个数据元素都是相同的数据类型。" class="headerlink" title="特点1：数组中的每个数据元素都是相同的数据类型。"></a>特点1：数组中的每个数据元素都是相同的数据类型。</h3><h3 id="特点2：数组是由连续的内存位置组成。"><a href="#特点2：数组是由连续的内存位置组成。" class="headerlink" title="特点2：数组是由连续的内存位置组成。"></a>特点2：数组是由连续的内存位置组成。</h3><hr><h2 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h2><h3 id="5-2-1-一维数组"><a href="#5-2-1-一维数组" class="headerlink" title="5.2.1 一维数组"></a>5.2.1 一维数组</h3><p>一维数组定义的三种方式： 1、数据类型 数组名[ 数组长度 ]; 2、数据类型 数组名[ 数组长度 ] &#x3D; { 值1, 值2…}; 3、数据类型 数组名[ ] &#x3D; { 值1,值2…}; <strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、数据类型 数组名[数组长度];</span></span><br><span class="line">    <span class="type">int</span> iNum01[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给数组中的元素进行赋值</span></span><br><span class="line">    <span class="comment">//注意：数组元素的下标是从0开始索引</span></span><br><span class="line">    iNum01[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">    iNum01[<span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问数组里面的元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; iNum01[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; iNum01[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、数据类型 数组名[数组长度] = &#123; 值1, 值2... &#125;;</span></span><br><span class="line">    <span class="type">int</span> iNum02[<span class="number">2</span>] = &#123;<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问数组里面的元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; iNum02[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; iNum02[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、数据类型 数组名[] = &#123; 值1,值2... &#125;;</span></span><br><span class="line">    <span class="type">int</span> iNum03[] = &#123; <span class="number">50</span>,<span class="number">60</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问数组里面的元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; iNum03[<span class="number">0</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; iNum03[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结1：数组名的命名规范与变量名命名规范一致，不要和变量名重名。"><a href="#总结1：数组名的命名规范与变量名命名规范一致，不要和变量名重名。" class="headerlink" title="总结1：数组名的命名规范与变量名命名规范一致，不要和变量名重名。"></a>总结1：数组名的命名规范与变量名命名规范一致，不要和变量名重名。</h3><h3 id="总结2：数组元素的下标是从0开始索引。"><a href="#总结2：数组元素的下标是从0开始索引。" class="headerlink" title="总结2：数组元素的下标是从0开始索引。"></a>总结2：数组元素的下标是从0开始索引。</h3>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程28：程序流程结构-跳转语句（goto语句）</title>
      <link href="/post/576f3422.html"/>
      <url>/post/576f3422.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第四章：程序流程结构"><a href="#第四章：程序流程结构" class="headerlink" title="第四章：程序流程结构"></a>第四章：程序流程结构</h1><h2 id="4-3-跳转结构"><a href="#4-3-跳转结构" class="headerlink" title="4.3 跳转结构"></a>4.3 跳转结构</h2><h3 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h3><p><strong>作用：</strong>可以无条件跳转语句。 <strong>语法：</strong>goto 标记; 标记:</p><p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转标记的位置。</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">goto</span> out;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    out:</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意：在程序中不建议使用goto语句，以免造成程序流程混乱。"><a href="#注意：在程序中不建议使用goto语句，以免造成程序流程混乱。" class="headerlink" title="注意：在程序中不建议使用goto语句，以免造成程序流程混乱。"></a>注意：在程序中不建议使用goto语句，以免造成程序流程混乱。</h3>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程27：程序流程结构-跳转语句（continue语句）</title>
      <link href="/post/7c12f79e.html"/>
      <url>/post/7c12f79e.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第四章：程序流程结构"><a href="#第四章：程序流程结构" class="headerlink" title="第四章：程序流程结构"></a>第四章：程序流程结构</h1><h2 id="4-3-跳转结构"><a href="#4-3-跳转结构" class="headerlink" title="4.3 跳转结构"></a>4.3 跳转结构</h2><h3 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h3><p><strong>作用：</strong>在循环语句中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环。 <strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//continue语句</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果是奇数输出。偶数不输出</span></span><br><span class="line">        <span class="keyword">if</span> (i%<span class="number">2</span> == <span class="number">0</span>)   </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意：continue并没有使整个循环终止，面break会跳出循环。"><a href="#注意：continue并没有使整个循环终止，面break会跳出循环。" class="headerlink" title="注意：continue并没有使整个循环终止，面break会跳出循环。"></a>注意：continue并没有使整个循环终止，面break会跳出循环。</h3>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程26：程序流程结构-跳转语句（break语句）</title>
      <link href="/post/ee302b30.html"/>
      <url>/post/ee302b30.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第四章：程序流程结构"><a href="#第四章：程序流程结构" class="headerlink" title="第四章：程序流程结构"></a>第四章：程序流程结构</h1><h2 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h2><h3 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h3><p><strong>作用：</strong>用于跳出选择结构或者循环结构。 <strong>break使用的时机：</strong></p><ul><li>出现switch条件语句中，作用是终止case并跳出switch。</li><li>出现在循环语句中，作用是跳出当前的循环语句。</li><li>出现在嵌套循环中，跳出最近的内层循环语句。 <strong>示例1：</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1、出现switch条件语句中，作用是终止case并跳出switch。</span></span><br><span class="line"><span class="type">int</span> icont = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入座位号：&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="built_in">cin</span> &gt;&gt; icont;<span class="comment">//等待用户输入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (icont)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">85</span>: <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;张三&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//退出switch语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">75</span>: <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;李四&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">65</span>: <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;王五&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">60</span>: <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小三&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>: <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;大一&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//2、出现在循环语句中，作用是跳出当前的循环语句。</span></span><br><span class="line"><span class="keyword">for</span> (size\<span class="type">_t</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ( i==<span class="number">2</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//跳出循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//3、出现在嵌套循环中，跳出最近的内层循环语句。</span></span><br><span class="line"><span class="keyword">for</span> (size\<span class="type">_t</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (size\<span class="type">_t</span> j = <span class="number">1</span>; j &lt; i+<span class="number">1</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (j==<span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//跳出循环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;\*&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; j \* i &lt;&lt; <span class="string">&quot;\\t&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程25：程序流程结构-循环结构（嵌套循环）</title>
      <link href="/post/fb12f7df.html"/>
      <url>/post/fb12f7df.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第四章：程序流程结构"><a href="#第四章：程序流程结构" class="headerlink" title="第四章：程序流程结构"></a>第四章：程序流程结构</h1><h2 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h2><h3 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h3><p><strong>作用：</strong>在循环体中再嵌套一层循环，解决一些实际问题。</p><h3 id="练习案例："><a href="#练习案例：" class="headerlink" title="练习案例："></a>练习案例：</h3><h3 id="案例一："><a href="#案例一：" class="headerlink" title="案例一："></a>案例一：</h3><p>例如我们在屏幕中打印如下所示，就需要利用嵌套循环。 <img src="http://image.camcad.cn/2020/05/2020052107523014.jpg"></p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结：外层执行一次，内层执行一轮。"><a href="#总结：外层执行一次，内层执行一轮。" class="headerlink" title="总结：外层执行一次，内层执行一轮。"></a>总结：外层执行一次，内层执行一轮。</h4><h3 id="案例二："><a href="#案例二：" class="headerlink" title="案例二："></a>案例二：</h3><p><strong>练习案例：</strong>乘法口诀表 <strong>案例描述：</strong>利用嵌套循环，实现九九乘法表。 <img src="http://image.camcad.cn/2020/05/2020052108111218-1024x447.jpg"></p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">1</span>; j &lt; i+<span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; j &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; j * i &lt;&lt; <span class="string">&quot;\t&quot;</span> ;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程24：程序流程结构-循环结构（for循环语句）</title>
      <link href="/post/c0f51a0.html"/>
      <url>/post/c0f51a0.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第四章：程序流程结构"><a href="#第四章：程序流程结构" class="headerlink" title="第四章：程序流程结构"></a>第四章：程序流程结构</h1><h2 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h2><h3 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h3><p><strong>作用：</strong>满足循环条件，执行循环语句。 <strong>语法：</strong>for( 起始表达式; 条件表达式; 未尾循环体 ) { 循环语句; }</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;循环= &quot;</span>&lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/05/2020052106450421.jpg"></p><h4 id="注意：for循环中的表达式，要用分号进行分隔。"><a href="#注意：for循环中的表达式，要用分号进行分隔。" class="headerlink" title="注意：for循环中的表达式，要用分号进行分隔。"></a>注意：for循环中的表达式，要用分号进行分隔。</h4><h4 id="总结：while-do…while-for都是开发中常用的循环语句，for循环结构比较清晰，比较常用。"><a href="#总结：while-do…while-for都是开发中常用的循环语句，for循环结构比较清晰，比较常用。" class="headerlink" title="总结：while,do…while,for都是开发中常用的循环语句，for循环结构比较清晰，比较常用。"></a>总结：while,do…while,for都是开发中常用的循环语句，for循环结构比较清晰，比较常用。</h4><h3 id="练习案例："><a href="#练习案例：" class="headerlink" title="练习案例："></a>练习案例：</h3><p><strong>练习案例：敲桌子</strong> 案例描述：从1开始数到数字100，如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。 <strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = i % <span class="number">10</span>;     <span class="comment">//个位含有7</span></span><br><span class="line">        <span class="type">int</span> b = i%<span class="number">7</span>;        <span class="comment">//数字7倍数</span></span><br><span class="line">        <span class="type">int</span> c = i / <span class="number">10</span>;     <span class="comment">//十位含有7</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a==<span class="number">7</span>  b==<span class="number">0</span>  c==<span class="number">7</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;敲桌子&quot;</span>&lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程23：程序流程结构-循环结构（do...while循环语句）</title>
      <link href="/post/b20f232b.html"/>
      <url>/post/b20f232b.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第四章：程序流程结构"><a href="#第四章：程序流程结构" class="headerlink" title="第四章：程序流程结构"></a>第四章：程序流程结构</h1><h2 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h2><h3 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h3><p><strong>作用：</strong>满足循环条件，执行循环语句。 <strong>语法：</strong>do{ 循环语句 } while( 循环条件 ); <strong>注意：</strong>与while循环语句的区别在于do..while循环会先执行一次循环语句，再判断循环条件。 <img src="http://image.camcad.cn/2020/05/2020052102013271.jpg"> <strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> iNum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;循环=&quot;</span> &lt;&lt; iNum + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        iNum++;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (iNum &lt; <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习案例："><a href="#练习案例：" class="headerlink" title="练习案例："></a>练习案例：</h3><h4 id="练习案例：水仙花数"><a href="#练习案例：水仙花数" class="headerlink" title="练习案例：水仙花数"></a>练习案例：水仙花数</h4><p><strong>案例描述：</strong>水仙花数是指一个3位数，它的每个位上的数字的3次幂之和等于它本身。 例如：1^3 + 5^3 + 3^3 &#x3D; 153 请利用do…while循环语句，求出所有3位数中的水仙花数。 <strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//定义三位数字</span></span><br><span class="line">    <span class="type">int</span> iNum = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从所有三位数字中找到水仙花数输出打印</span></span><br><span class="line">        <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        a = iNum % <span class="number">10</span>;          <span class="comment">//获取数字的个位</span></span><br><span class="line">        b = iNum / <span class="number">10</span> % <span class="number">10</span>;     <span class="comment">//获取数字的十位</span></span><br><span class="line">        c = iNum / <span class="number">100</span>;         <span class="comment">//获取数控的百位</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a*a*a + b*b*b + c*c* c == iNum)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; iNum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        iNum++;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (iNum &lt; <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/05/2020052102473739.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程22：程序流程结构-循环结构（while循环语句）</title>
      <link href="/post/2a571973.html"/>
      <url>/post/2a571973.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第四章：程序流程结构"><a href="#第四章：程序流程结构" class="headerlink" title="第四章：程序流程结构"></a>第四章：程序流程结构</h1><h2 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h2><h3 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h3><p><strong>作用：</strong>满足循环条件，执行循环语句。 <strong>语法：</strong>while(循环条件){循环语句}; <strong>解释：</strong>只要循环条件的结果为真，就执行循环语句。 <img src="http://image.camcad.cn/2020/05/2020052014393427.jpg"> <strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> iNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (iNum &lt; <span class="number">5</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;循环= &quot;</span>&lt;&lt; iNum + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        iNum++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环。"><a href="#注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环。" class="headerlink" title="注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环。"></a>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环。</h4><p>将代码编译执行结果如下： <img src="http://image.camcad.cn/2020/05/2020052014511315.jpg"></p><h2 id="练习案例："><a href="#练习案例：" class="headerlink" title="练习案例："></a>练习案例：</h2><h3 id="while-循环练习案例：猜数字"><a href="#while-循环练习案例：猜数字" class="headerlink" title="while 循环练习案例：猜数字"></a>while 循环练习案例：猜数字</h3><p><strong>案例描述：</strong>系统随机生成一个1~100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。 <strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span>  <span class="comment">//time系统时间头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//添加随机数种子，利用当前系统时间生成随机数，防止每次随机数都一样</span></span><br><span class="line">    srand((<span class="type">unsigned</span> <span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、系统生成随机数</span></span><br><span class="line">    <span class="type">int</span> iNum = rand() % <span class="number">100</span> + <span class="number">1</span>;    <span class="comment">//rand() % 100 + 1 生成 0 + 1 ~ 99 + 1 随机数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、玩家进行猜测</span></span><br><span class="line">    <span class="type">int</span> iVal = <span class="number">0</span>;       <span class="comment">//玩家输入的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; iVal;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (iVal &gt; iNum)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您输入的数值过大，请重新输入！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (iVal &lt; iNum)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;您输入的数值过小，请重新输入！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;恭喜您成功晋级！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;      <span class="comment">//break 可以利用该关键字来退出当前while循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程21：程序流程结构-选择结构（switch语句）</title>
      <link href="/post/fd1e91e2.html"/>
      <url>/post/fd1e91e2.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第四章：程序流程结构"><a href="#第四章：程序流程结构" class="headerlink" title="第四章：程序流程结构"></a>第四章：程序流程结构</h1><h2 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h2><h3 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h3><p><strong>作用：</strong>执行多条件分支语句 <strong>语法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 结果<span class="number">1</span>:  执行语句; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 结果<span class="number">2</span>:  执行语句; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 结果<span class="number">3</span>:  执行语句; <span class="keyword">break</span>;</span><br><span class="line">    ... ... </span><br><span class="line">        <span class="keyword">default</span>: 执行语句; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//点号入座</span></span><br><span class="line">    <span class="comment">// 85号          张三</span></span><br><span class="line">    <span class="comment">// 75号          李四</span></span><br><span class="line">    <span class="comment">// 65号          王五</span></span><br><span class="line">    <span class="comment">// 60号          小三</span></span><br><span class="line">    <span class="comment">// 其他           大一</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入座位号：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="type">int</span> Score = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; Score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (Score)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">85</span>: <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;张三&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">75</span>: <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;李四&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">65</span>: <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;王五&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">60</span>: <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小三&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>: <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;大一&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程20：程序流程结构-选择结构（三目运算符）</title>
      <link href="/post/1e4ffda8.html"/>
      <url>/post/1e4ffda8.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第四章：程序流程结构"><a href="#第四章：程序流程结构" class="headerlink" title="第四章：程序流程结构"></a>第四章：程序流程结构</h1><h2 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h2><h3 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h3><p><strong>作用：</strong>通过三目运算符实现简单的判断。 <strong>语法：</strong>表达式1 ？表达式2 : 表达式3;</p><p><strong>解释：</strong> 如果表达式1的值为真，执行表达式2，并返回表达式2的结果。 如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> A = <span class="number">70</span>, C = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> cCh1 = <span class="string">&#x27;a&#x27;</span>;  <span class="comment">//ASCII码十进制 = 97</span></span><br><span class="line">    <span class="type">char</span> cCh2 = <span class="string">&#x27;A&#x27;</span>;  <span class="comment">//ASCII码十进制 = 65</span></span><br><span class="line"></span><br><span class="line">    C = A &gt; cCh2 ? cCh1 : cCh2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;字符ASCII码十进制 = &quot;</span> &lt;&lt; C &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// C++ 中三目运算符返回的是变量还可以继续赋值。</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    (a &gt; b ? a : b) = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/05/2020052012434125.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程19：程序流程结构-选择结构（if语句）</title>
      <link href="/post/f87d550a.html"/>
      <url>/post/f87d550a.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第四章：程序流程结构"><a href="#第四章：程序流程结构" class="headerlink" title="第四章：程序流程结构"></a>第四章：程序流程结构</h1><p>C&#x2F;C++ 支持最基本的三种程序运行结构 ：顺序结构、选择结构、循环结构。</p><ul><li>顺序结构：程序按顺序执行，不改造跳转。</li><li>选择结构：依据条件是否满足，有选择的执行相应的功能。</li><li>循环结构：依据条件是否满足，循环多次执行某段代码。</li></ul><h2 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h2><h3 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h3><p><strong>作用：</strong>执行满足条件的语句。</p><ul><li>单行格式if语句</li><li>多选格式if语句</li><li>多条件的if语句</li></ul><p><strong>1、单行格式if语句：</strong>if(条件){ 条件满足执行的语句 }; <img src="http://image.camcad.cn/2020/05/2020052005262241.jpg"> <strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> inum01 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; inum01;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (inum01&gt;=<span class="number">600</span>) <span class="comment">//注意：条件后面不要加分号</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;恭喜您考入清华大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/05/2020052005382711.jpg"></p><hr><hr><p><strong>2、多选格式if语句：</strong>if(条件){ 条件满足执行的语句 }else{ 条件不满足执行的语句 }; <img src="http://image.camcad.cn/2020/05/2020052005445277.jpg"> <strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> inum01 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; inum01;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意：条件后面不要加分号</span></span><br><span class="line">    <span class="keyword">if</span> (inum01&gt;=<span class="number">600</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;恭喜您考入清华大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;抱歉，未被录取，请再接再厉&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><hr><p><strong>3、嵌套if语句：</strong>在if语句中，可以嵌套使用if语句，达到更精确的条件判断。</p><ul><li>提示用户输入一个高考考试分数，根据分数做如下判断。</li><li>分数如果大于600分视为考上一本大学，大于500分考上二本大学，大于400分考上三本大学，其余视为未考上本科；</li><li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600分考入人大。 示例：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">  using namespace <span class="built_in">std</span>;</span><br><span class="line">  </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//提示用户输入一个高考考试分数。</span></span><br><span class="line">  <span class="type">int</span> iNum01 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入分数：&quot;</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">          <span class="built_in">cin</span> &gt;&gt; iNum01;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//分数如果大于 600 分视为考上一本大学，大于 500 分考上二本大学，大于 400 分考上三本大学，其余视为未考上本科；</span></span><br><span class="line">  <span class="keyword">if</span> (iNum01 &gt; <span class="number">600</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;恭喜您，成功考入 一本 大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">                  <span class="comment">//在一本分数中，如果大于 700 分，考入北大，大于 650 分，考入清华，大于 600 分考入人大。 </span></span><br><span class="line">                  <span class="keyword">if</span> (iNum01 &gt; <span class="number">700</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;恭喜您，成功获取 北大 录取通知书！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                  <span class="keyword">else</span> <span class="keyword">if</span> (iNum01 &gt; <span class="number">650</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;恭喜您，成功获取 清华 录取通知书！&quot;</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">                  <span class="keyword">else</span> <span class="keyword">if</span> (iNum01 &gt; <span class="number">600</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;恭喜您，成功获取 人大 录取通知书！&quot;</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">          &#125; </span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (iNum01 &gt; <span class="number">500</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;恭喜您，成功考入 二本 大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (iNum01 &gt; <span class="number">400</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;恭喜您，成功考入 三本 大学&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;抱歉，未考入本科，请再接再厉！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">  system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h3 id="练习案例："><a href="#练习案例：" class="headerlink" title="练习案例："></a>练习案例：</h3><p><strong>练习案例：</strong>三只小狗称体重</p><p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重。</p><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重。</span></span><br><span class="line"><span class="type">int</span> A = <span class="number">0</span>, B = <span class="number">0</span>, C = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入小猪A的体重：&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="built_in">cin</span> &gt;&gt; A;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入小猪B的体重：&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="built_in">cin</span> &gt;&gt; B;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入小猪C的体重：&quot;</span> &lt;&lt; <span class="built_in">endl</span>; <span class="built_in">cin</span> &gt;&gt; C;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>      (A &gt; B &amp;&amp; A &gt; C) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小猪A最重&quot;</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (B &gt; A &amp;&amp; B &gt; C) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小猪B最重&quot;</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (C &gt; A &amp;&amp; C &gt; B) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;小猪C最重&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;三只小猪体重相同 或 输入的数值有误！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程18：运算符-逻辑运算符</title>
      <link href="/post/ea417dd8.html"/>
      <url>/post/ea417dd8.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第三章：运算符"><a href="#第三章：运算符" class="headerlink" title="第三章：运算符"></a>第三章：运算符</h1><h2 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h2><p><strong>作用：</strong>用于根据表达式的值返回真值或假值。 逻辑运算符包括以下几个符号：</p><p>假设变量 A 的值为 1，变量 B 的值为 0，则：</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">称为逻辑与运算符。如果两个操作数都非零，则条件为真。</td><td align="center">(A &amp;&amp; B) 为假。</td></tr><tr><td align="center">||</td><td align="center">称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。</td><td align="center">(A B) 为真。</td></tr><tr><td align="center">!</td><td align="center">称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。</td><td align="center">!(A &amp;&amp; B) 为真。</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> iA = <span class="number">1</span>, iB = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &amp;&amp;（与）</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(iA &amp;&amp; iB)\t&quot;</span> &lt;&lt; (iA &amp;&amp; iB) &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// （或）</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(iA  iB)\t&quot;</span> &lt;&lt; (iA  iB) &lt;&lt; <span class="built_in">endl</span>;       <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// !（非）</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;!(iA &amp;&amp; iB)\t&quot;</span> &lt;&lt; !(iA &amp;&amp; iB) &lt;&lt; <span class="built_in">endl</span>;     <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生以下结果： <img src="http://image.camcad.cn/2020/05/2020052002380079.jpg"></p><h3 id="总结：真变假，假变真。"><a href="#总结：真变假，假变真。" class="headerlink" title="总结：真变假，假变真。"></a>总结：真变假，假变真。</h3>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程17：运算符-比较运算符</title>
      <link href="/post/ced67161.html"/>
      <url>/post/ced67161.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第三章：运算符"><a href="#第三章：运算符" class="headerlink" title="第三章：运算符"></a>第三章：运算符</h1><h2 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h2><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值。 比较运算符有以下符号：</p><p>假设变量 A 的值为 10，变量 B 的值为 20，则：</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">=&#x3D;</td><td align="center">检查两个操作数的值是否相等，如果相等则条件为真。</td><td align="center">(A &#x3D;&#x3D; B) 不为真。</td></tr><tr><td align="center">!&#x3D;</td><td align="center">检查两个操作数的值是否相等，如果不相等则条件为真。</td><td align="center">(A !&#x3D; B) 为真。</td></tr><tr><td align="center">&gt;</td><td align="center">检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td><td align="center">(A &gt; B) 不为真。</td></tr><tr><td align="center">&lt;</td><td align="center">检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td><td align="center">(A &lt; B) 为真。</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td><td align="center">(A &gt;&#x3D; B) 不为真。</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td><td align="center">(A &lt;&#x3D; B) 为真。</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> iA = <span class="number">10</span>, iB = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;（iA == iB）\t&quot;</span> &lt;&lt; (iA == iB) &lt;&lt; endl;       <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// !=</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;（iA != iB）\t&quot;</span> &lt;&lt; (iA != iB) &lt;&lt; endl;       <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;（iA &gt; iB）\t&quot;</span> &lt;&lt; (iA &gt; iB) &lt;&lt; endl;       <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;（iA &lt; iB）\t&quot;</span> &lt;&lt; (iA &lt; iB) &lt;&lt; endl;       <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;=</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;（iA &gt;= iB）\t&quot;</span> &lt;&lt; (iA &gt;= iB) &lt;&lt; endl;     <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;=</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;（iA &lt;= iB）\t&quot;</span> &lt;&lt; (iA &lt;= iB) &lt;&lt; endl;     <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生以下结果： <img src="http://image.camcad.cn/2020/05/2020052002153182.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程16：运算符-赋值运算符</title>
      <link href="/post/1a1b9d69.html"/>
      <url>/post/1a1b9d69.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第三章：运算符"><a href="#第三章：运算符" class="headerlink" title="第三章：运算符"></a>第三章：运算符</h1><h2 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h2><p><strong>作用：</strong>用于将表达式的值赋给变量 赋值运算符包括以下几个符号：</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">简单的赋值运算符，把右边操作数的值赋给左边操作数</td><td align="center">C &#x3D; A + B 将把 A + B 的值赋给 C</td></tr><tr><td align="center">+&#x3D;</td><td align="center">加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td><td align="center">C +&#x3D; A 相当于 C &#x3D; C + A</td></tr><tr><td align="center">-&#x3D;</td><td align="center">减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td><td align="center">C -&#x3D; A 相当于 C &#x3D; C - A</td></tr><tr><td align="center">*&#x3D;</td><td align="center">乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td><td align="center">C *&#x3D; A 相当于 C &#x3D; C * A</td></tr><tr><td align="center">&#x2F;&#x3D;</td><td align="center">除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td><td align="center">C &#x2F;&#x3D; A 相当于 C &#x3D; C &#x2F; A</td></tr><tr><td align="center">%&#x3D;</td><td align="center">求模且赋值运算符，求两个操作数的模赋值给左边操作数</td><td align="center">C %&#x3D; A 相当于 C &#x3D; C % A</td></tr><tr><td align="center">&lt;&lt;&#x3D;</td><td align="center">左移且赋值运算符</td><td align="center">C &lt;&lt;&#x3D; 2 等同于 C &#x3D; C &lt;&lt; 2</td></tr><tr><td align="center">&gt;&gt;&#x3D;</td><td align="center">右移且赋值运算符</td><td align="center">C &gt;&gt;&#x3D; 2 等同于 C &#x3D; C &gt;&gt; 2</td></tr><tr><td align="center">&amp;&#x3D;</td><td align="center">按位与且赋值运算符</td><td align="center">C &amp;&#x3D; 2 等同于 C &#x3D; C &amp; 2</td></tr><tr><td align="center">^&#x3D;</td><td align="center">按位异或且赋值运算符</td><td align="center">C ^&#x3D; 2 等同于 C &#x3D; C ^ 2</td></tr><tr><td align="center">|&#x3D;</td><td align="center">按位或且赋值运算符</td><td align="center">C &#x3D; 2 等同于 C &#x3D; C 2</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// +=</span></span><br><span class="line">    <span class="type">int</span> iNum01 = <span class="number">10</span>;</span><br><span class="line">    iNum01 += <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;运算符加等于：\t&quot;</span>&lt;&lt;iNum01 &lt;&lt; endl; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -=</span></span><br><span class="line">    <span class="type">int</span> iNum02 = <span class="number">10</span>;</span><br><span class="line">    iNum02 -= <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;运算符减等于：\t&quot;</span> &lt;&lt; iNum02 &lt;&lt; endl;  <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// *=</span></span><br><span class="line">    <span class="type">int</span> iNum03 = <span class="number">10</span>;</span><br><span class="line">    iNum03 *= <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;运算符乘等于：\t&quot;</span> &lt;&lt; iNum03 &lt;&lt; endl;  <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// /=</span></span><br><span class="line">    <span class="type">int</span> iNum04 = <span class="number">10</span>;</span><br><span class="line">    iNum04 /= <span class="number">5</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;运算符除等于：\t&quot;</span> &lt;&lt; iNum04 &lt;&lt; endl;  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// %=</span></span><br><span class="line">    <span class="type">int</span> iNum05 = <span class="number">10</span>;</span><br><span class="line">    iNum05 %= <span class="number">3</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;运算取模等于：\t&quot;</span> &lt;&lt; iNum05 &lt;&lt; endl;  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;&lt;=</span></span><br><span class="line">    <span class="type">int</span> iNum06=<span class="number">1</span>;   <span class="comment">//数字一的二进制等于：    00110001</span></span><br><span class="line">    iNum06 &lt;&lt;= <span class="number">1</span>; <span class="comment">//左移一位二进制等于：    00110010</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;左移运算等于：\t&quot;</span> &lt;&lt; iNum06 &lt;&lt; endl;  <span class="comment">// 2 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &gt;&gt;=</span></span><br><span class="line">    <span class="type">int</span> iNum07 = <span class="number">6</span>; <span class="comment">//数字六的二进制等于：    00110110</span></span><br><span class="line">    iNum07 &gt;&gt;= <span class="number">1</span>; <span class="comment">//左移一位二进制等于：    00110011</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;右移运算等于：\t&quot;</span> &lt;&lt; iNum07 &lt;&lt; endl;  <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &amp;=</span></span><br><span class="line">    <span class="type">int</span> iNum08 = <span class="number">1</span>;</span><br><span class="line">    iNum08 &amp;= <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n位与 iNum08 &amp; 1 = &quot;</span> &lt;&lt; iNum08 &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ^=</span></span><br><span class="line">    <span class="type">int</span> iNum09 = <span class="number">2</span>;</span><br><span class="line">    iNum09 ^= <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n位异 iNum09 ^ 2 = &quot;</span> &lt;&lt; iNum09 &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// =</span></span><br><span class="line">    <span class="type">int</span> iNum10 = <span class="number">3</span>;</span><br><span class="line">    iNum10 ^= <span class="number">3</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n位或 iNum10 ^ 9 = &quot;</span> &lt;&lt; iNum10 &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生以下结果： <img src="http://image.camcad.cn/2020/05/2020052001462558.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程15：运算符-算术运算符</title>
      <link href="/post/f347932f.html"/>
      <url>/post/f347932f.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第三章：运算符"><a href="#第三章：运算符" class="headerlink" title="第三章：运算符"></a>第三章：运算符</h1><h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h2><p><strong>作用：</strong>用于执行代码的运算。</p><table><thead><tr><th>运算符类型</th><th>作用</th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较，并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr></tbody></table><h2 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h2><p><strong>作用：</strong>用于处理四则运算。</p><p><strong>算术运算符包括以下符号：</strong></p><p>下表显示了 C 语言支持的所有算术运算符。假设变量 <strong>A</strong> 的值为 10，变量 <strong>B</strong> 的值为 20，则：</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">把两个操作数相加</td><td align="center">A + B 将得到 30</td></tr><tr><td align="center">-</td><td align="center">从第一个操作数中减去第二个操作数</td><td align="center">A - B 将得到 -10</td></tr><tr><td align="center">*</td><td align="center">把两个操作数相乘</td><td align="center">A * B 将得到 200</td></tr><tr><td align="center">&#x2F;</td><td align="center">分子除以分母</td><td align="center">B &#x2F; A 将得到 2</td></tr><tr><td align="center">%</td><td align="center">取模运算符，整除后的余数</td><td align="center">B % A 将得到 0</td></tr><tr><td align="center">++</td><td align="center">自增运算符，整数值增加 1</td><td align="center">A++ 将得到 11</td></tr><tr><td align="center">--</td><td align="center">自减运算符，整数值减少 1</td><td align="center">A– 将得到 9</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> A = <span class="number">10</span>, B = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加减乘除</span></span><br><span class="line">cout &lt;&lt; A + B &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; A - B &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; A \* B &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; B / A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取模</span></span><br><span class="line">cout &lt;&lt; B % A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自增</span></span><br><span class="line">A++;</span><br><span class="line">cout &lt;&lt; A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自减</span></span><br><span class="line">A = <span class="number">10</span>;</span><br><span class="line">A--;</span><br><span class="line">cout &lt;&lt; A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>1、前置递增：先让变量+1，然后进行表达式运算。<br>++A;  &#x2F;&#x2F;让变量+1;</p><p>2、后置递增：先进行表达式运算，然后让变量+1。<br>A++;  &#x2F;&#x2F;让变量+1;</p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程14：数据类型-数据的输入</title>
      <link href="/post/fa01f24.html"/>
      <url>/post/fa01f24.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第二章：数据类型"><a href="#第二章：数据类型" class="headerlink" title="第二章：数据类型"></a>第二章：数据类型</h1><h2 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h2><p><strong>作用：</strong>用于从键盘获取数据。</p><p><strong>关键字：</strong>cin</p><p><strong>语法：</strong>cin &gt;&gt; 变量名;</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//整型输入</span></span><br><span class="line"><span class="type">int</span> iNum = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入整型变量值：&quot;</span>&lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; iNum;</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;整型 iNum01= &quot;</span>&lt;&lt;iNum &lt;&lt;<span class="string">&quot;\\n&quot;</span>&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//浮点型输入</span></span><br><span class="line"><span class="type">double</span> dNum = <span class="number">0.0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入浮点型变量值：&quot;</span> &lt;&lt; endl; </span><br><span class="line">        cin &gt;&gt; dNum;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;浮点型 dNum= &quot;</span> &lt;&lt; dNum &lt;&lt; <span class="string">&quot;\\n&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符型输入</span></span><br><span class="line"><span class="type">char</span> cCh;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入字符型变量值：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; cCh;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;字符型 cCh= &quot;</span> &lt;&lt; cCh &lt;&lt; <span class="string">&quot;\\n&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串型输入</span></span><br><span class="line">string sStr=<span class="string">&quot;&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入字符串型变量值：&quot;</span> &lt;&lt; endl; </span><br><span class="line">        cin &gt;&gt; sStr;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;字符串型 sStr= &quot;</span> &lt;&lt; sStr &lt;&lt; <span class="string">&quot;\\n&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程13：数据类型-布尔类型（bool）</title>
      <link href="/post/d38bc2de.html"/>
      <url>/post/d38bc2de.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第二章：数据类型"><a href="#第二章：数据类型" class="headerlink" title="第二章：数据类型"></a>第二章：数据类型</h1><h2 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h2><p><strong>作用：</strong>布尔数据类型代表真或假的值。</p><p>bool类型只有两个值：</p><ul><li>true~真（本质是1）</li><li>false~假（本质是0）</li></ul><p><strong>注意：bool类型 只要是非0的值都为真。</strong></p><p><strong>boo类型占用1个字节大小</strong></p><p><strong>示例:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">cout &lt;&lt; flag &lt;&lt; endl;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">cout &lt;&lt; flag &lt;&lt; endl;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt;<span class="string">&quot;bool 占用内存空间：&quot;</span>&lt;&lt; (<span class="type">int</span>)<span class="built_in">sizeof</span>(<span class="type">bool</span>) &lt;&lt; <span class="string">&quot; 字节&quot;</span> &lt;&lt; endl;  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下： <img src="http://image.camcad.cn/2020/05/2020051906195943.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程12：数据类型-字符串型（char、string）</title>
      <link href="/post/b12d45c4.html"/>
      <url>/post/b12d45c4.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第二章：数据类型"><a href="#第二章：数据类型" class="headerlink" title="第二章：数据类型"></a>第二章：数据类型</h1><h2 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h2><p><strong>作用：</strong>用于表示 一串字符</p><p><strong>两种风格:</strong></p><h3 id="1、C语言风格字符串：char-变量名-x3D-“字符串值”"><a href="#1、C语言风格字符串：char-变量名-x3D-“字符串值”" class="headerlink" title="1、C语言风格字符串：char 变量名[ ] &#x3D; “字符串值”;"></a>1、C语言风格字符串：char 变量名[ ] &#x3D; “字符串值”;</h3><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1、C语言风格字符串：char 变量名\[ \] = &quot;字符串值&quot;;</span></span><br><span class="line"><span class="type">char</span> cChar01\[ \] = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">cout &lt;&lt; cChar01 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：C风格的字符串需要用双引号括起来。</strong></p><h3 id="2、C-风格字符串：string-变量名-x3D-“字符串值”"><a href="#2、C-风格字符串：string-变量名-x3D-“字符串值”" class="headerlink" title="2、C++风格字符串：string 变量名 &#x3D; “字符串值”;"></a>2、C++风格字符串：string 变量名 &#x3D; “字符串值”;</h3><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span><span class="comment">//string字符串使用时，需加头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//2、C++风格字符串：string 变量名 = &quot;字符串值&quot;;</span></span><br><span class="line">string sString01 = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; sString01 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：C++风格字符串，需要加入头文件 #include <string></strong></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程11：数据类型-转义字符</title>
      <link href="/post/d374177.html"/>
      <url>/post/d374177.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第二章：数据类型"><a href="#第二章：数据类型" class="headerlink" title="第二章：数据类型"></a>第二章：数据类型</h1><h2 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h2><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><p>所有的ASCII码都可以用“\”加数字（一般是8进制数字）来表示。而C中定义了一些字母前加”\“来表示常见的那些不能显示的ASCII字符，如\0,\t,\n等，就称为转义字符，因为后面的字符，都不是它本来的ASCII字符意思了。</p><h3 id="转义字符表"><a href="#转义字符表" class="headerlink" title="转义字符表"></a>转义字符表</h3><p>所有的转义字符和所对应的意义：</p><table><thead><tr><th>转义字符</th><th>意义</th><th>ASCII 码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>响铃(BEL)</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td>\n</td><td>换行(LF) ，将当前位置移到下一行开头</td><td>010</td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td>\t</td><td>水平制表(HT) （跳到下一个 TAB 位置）</td><td>009</td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td>\\</td><td>代表一个反斜线字符’&#39;</td><td>092</td></tr><tr><td>\‘</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>\“</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>\?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>空字符(NUL)</td><td>000</td></tr><tr><td>\ddd</td><td>1 到 3 位八进制数所代表的任意字符</td><td>三位八进制</td></tr><tr><td>\xhh</td><td>十六进制所代表的任意字符</td><td>十六进制</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// \\n 换行(LF) ，将当前位置移到下一行开头</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello World\\n&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// \\\\ 代表一个反斜线字符&#x27;\\&#x27;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello\\\\World&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// \\t 水平制表(HT) （跳到下一个TAB位置）</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello\\tWorld&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码编译执行结果如下：</p><p><img src="http://image.camcad.cn/2020/05/2020051903314817.jpg"></p><p>在传值前 通过 java.net.URLEncoder.encode(param1) 编码处理后，可将转义字符转为16进制;</p><table><thead><tr><th>特殊字符</th><th>URL中用途</th><th>转义方式</th></tr></thead><tbody><tr><td>+</td><td>表示空格</td><td>%2B</td></tr><tr><td>(空格)</td><td>应换用加号 + 或%20 表示</td><td>%20</td></tr><tr><td>&#x2F;</td><td>分隔目录和子目录</td><td>%2F</td></tr><tr><td>?</td><td>分隔实际的 URL 和参数</td><td>%3F</td></tr><tr><td>%</td><td>指定特殊字符</td><td>%25</td></tr><tr><td>#</td><td>表示书签</td><td>%23</td></tr><tr><td>&amp;</td><td>URL中指定的参数间的分隔符</td><td>%26</td></tr><tr><td>=</td><td>URL中指定参数的值</td><td>%3D</td></tr><tr><td>!</td><td>URL中指定参数的值</td><td>%21</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程10：数据类型-字符型（char）｜ASCII 编码对照表</title>
      <link href="/post/29c728fa.html"/>
      <url>/post/29c728fa.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第二章：数据类型"><a href="#第二章：数据类型" class="headerlink" title="第二章：数据类型"></a>第二章：数据类型</h1><h2 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h2><p><strong>作用：</strong>字符型变量用于显示单个字符</p><p><strong>语法：</strong>char 变量名 &#x3D; ‘初始值’;</p><h3 id="注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引导。"><a href="#注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引导。" class="headerlink" title="注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引导。"></a>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引导。</h3><h3 id="注意2：单引号内只能有一个字符，不可以是字符串。"><a href="#注意2：单引号内只能有一个字符，不可以是字符串。" class="headerlink" title="注意2：单引号内只能有一个字符，不可以是字符串。"></a>注意2：单引号内只能有一个字符，不可以是字符串。</h3><ul><li>C&#x2F;C++中字符型变量只占用空间1个字节。</li><li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCL编码放入到存储单元。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1、字符型变量创建方式</span></span><br><span class="line"><span class="type">char</span> cChar01 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">cout &lt;&lt; cChar01 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、字符型变量所占用内存空间大小</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;char字符型变量所占用内存：&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、字符型变量常见错误</span></span><br><span class="line"><span class="comment">//char cChar02 = &quot;b&quot;;//创建字符型变量时候，要用单引号</span></span><br><span class="line"><span class="comment">//char cChar02 = &#x27;abcdefg&#x27;;//创建字符型变量时候，单引号内只能有一个字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、字符型变量对应的ASCII编码</span></span><br><span class="line"><span class="comment">// a = 97;</span></span><br><span class="line"><span class="comment">// A = 65;</span></span><br><span class="line"><span class="type">char</span> cChar03 = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">cout &lt;&lt; (<span class="type">int</span>)cChar03 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.camcad.cn/2020/05/2020051901242386.jpg"></p><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><p>  ASCII（American Standard Code for Information Interchange，美国信息互换标准代码，ASCⅡ）是基于拉丁字母的一套电脑编码系统。它主要用于显示现代英语和其他西欧语言。它是现今最通用的单字节编码系统，并等同于国际标准ISO&#x2F;IEC 646。</p><p>ASCII第一次以规范标准的型态发表是在1967年，最后一次更新则是在1986年，至今为止共定义了128个字符，其中33个字符无法显示（这是以现今操作系统为依归，但在DOS模式下可显示出一些诸如笑脸、扑克牌花式等8-bit符号），且这33个字符多数都已是陈废的控制字符，控制字符的用途主要是用来操控已经处理过的文字，在33个字符之外的是95个可显示的字符，包含用键盘敲下空白键所产生的空白字符也算1个可显示字符（显示为空白）。</p><hr><p><strong>ASCII控制字符</strong></p><table><thead><tr><th>二进制</th><th>十进制</th><th>十六进制</th><th>缩写</th><th>名称&#x2F;意义</th></tr></thead><tbody><tr><td>0000 0000</td><td>0</td><td>00</td><td>NUL</td><td>空字符（Null）</td></tr><tr><td>0000 0001</td><td>1</td><td>01</td><td>SOH</td><td>标题开始</td></tr><tr><td>0000 0010</td><td>2</td><td>02</td><td>STX</td><td>本文开始</td></tr><tr><td>0000 0011</td><td>3</td><td>03</td><td>ETX</td><td>本文结束</td></tr><tr><td>0000 0100</td><td>4</td><td>04</td><td>EOT</td><td>传输结束</td></tr><tr><td>0000 0101</td><td>5</td><td>05</td><td>ENQ</td><td>请求</td></tr><tr><td>0000 0110</td><td>6</td><td>06</td><td>ACK</td><td>确认回应</td></tr><tr><td>0000 0111</td><td>7</td><td>07</td><td>BEL</td><td>响铃</td></tr><tr><td>0000 1000</td><td>8</td><td>08</td><td>BS</td><td>退格</td></tr><tr><td>0000 1001</td><td>9</td><td>09</td><td>HT</td><td>水平定位符号</td></tr><tr><td>0000 1010</td><td>10</td><td>0A</td><td>LF</td><td>换行键</td></tr><tr><td>0000 1011</td><td>11</td><td>0B</td><td>VT</td><td>垂直定位符号</td></tr><tr><td>0000 1100</td><td>12</td><td>0C</td><td>FF</td><td>换页键</td></tr><tr><td>0000 1101</td><td>13</td><td>0D</td><td>CR</td><td>归位键</td></tr><tr><td>0000 1110</td><td>14</td><td>0E</td><td>SO</td><td>取消变换（Shift out）</td></tr><tr><td>0000 1111</td><td>15</td><td>0F</td><td>SI</td><td>启用变换（Shift in）</td></tr><tr><td>0001 0000</td><td>16</td><td>10</td><td>DLE</td><td>跳出数据通讯</td></tr><tr><td>0001 0001</td><td>17</td><td>11</td><td>DC1</td><td>设备控制一（XON 启用软件速度控制）</td></tr><tr><td>0001 0010</td><td>18</td><td>12</td><td>DC2</td><td>设备控制二</td></tr><tr><td>0001 0011</td><td>19</td><td>13</td><td>DC3</td><td>设备控制三（XOFF 停用软件速度控制）</td></tr><tr><td>0001 0100</td><td>20</td><td>14</td><td>DC4</td><td>设备控制四</td></tr><tr><td>0001 0101</td><td>21</td><td>15</td><td>NAK</td><td>确认失败回应</td></tr><tr><td>0001 0110</td><td>22</td><td>16</td><td>SYN</td><td>同步用暂停</td></tr><tr><td>0001 0111</td><td>23</td><td>17</td><td>ETB</td><td>区块传输结束</td></tr><tr><td>0001 1000</td><td>24</td><td>18</td><td>CAN</td><td>取消</td></tr><tr><td>0001 1001</td><td>25</td><td>19</td><td>EM</td><td>连接介质中断</td></tr><tr><td>0001 1010</td><td>26</td><td>1A</td><td>SUB</td><td>替换</td></tr><tr><td>0001 1011</td><td>27</td><td>1B</td><td>ESC</td><td>跳出</td></tr><tr><td>0001 1100</td><td>28</td><td>1C</td><td>FS</td><td>文件分割符</td></tr><tr><td>0001 1101</td><td>29</td><td>1D</td><td>GS</td><td>组群分隔符</td></tr><tr><td>0001 1110</td><td>30</td><td>1E</td><td>RS</td><td>记录分隔符</td></tr><tr><td>0001 1111</td><td>31</td><td>1F</td><td>US</td><td>单元分隔符</td></tr><tr><td>0111 1111</td><td>127</td><td>7F</td><td>DEL</td><td>删除</td></tr></tbody></table><p><strong>ASCII可显示字符</strong></p><table><thead><tr><th>二进制</th><th>十进制</th><th>十六进制</th><th>图形</th></tr></thead><tbody><tr><td>0010 0000</td><td>32</td><td>20</td><td>（空格）(␠)</td></tr><tr><td>0010 0001</td><td>33</td><td>21</td><td>!</td></tr><tr><td>0010 0010</td><td>34</td><td>22</td><td>“</td></tr><tr><td>0010 0011</td><td>35</td><td>23</td><td>#</td></tr><tr><td>0010 0100</td><td>36</td><td>24</td><td>$</td></tr><tr><td>0010 0101</td><td>37</td><td>25</td><td>%</td></tr><tr><td>0010 0110</td><td>38</td><td>26</td><td>&amp;</td></tr><tr><td>0010 0111</td><td>39</td><td>27</td><td>‘</td></tr><tr><td>0010 1000</td><td>40</td><td>28</td><td>(</td></tr><tr><td>0010 1001</td><td>41</td><td>29</td><td>)</td></tr><tr><td>0010 1010</td><td>42</td><td>2A</td><td>*</td></tr><tr><td>0010 1011</td><td>43</td><td>2B</td><td>+</td></tr><tr><td>0010 1100</td><td>44</td><td>2C</td><td>,</td></tr><tr><td>0010 1101</td><td>45</td><td>2D</td><td>-</td></tr><tr><td>0010 1110</td><td>46</td><td>2E</td><td>.</td></tr><tr><td>0010 1111</td><td>47</td><td>2F</td><td>&#x2F;</td></tr><tr><td>0011 0000</td><td>48</td><td>30</td><td>0</td></tr><tr><td>0011 0001</td><td>49</td><td>31</td><td>1</td></tr><tr><td>0011 0010</td><td>50</td><td>32</td><td>2</td></tr><tr><td>0011 0011</td><td>51</td><td>33</td><td>3</td></tr><tr><td>0011 0100</td><td>52</td><td>34</td><td>4</td></tr><tr><td>0011 0101</td><td>53</td><td>35</td><td>5</td></tr><tr><td>0011 0110</td><td>54</td><td>36</td><td>6</td></tr><tr><td>0011 0111</td><td>55</td><td>37</td><td>7</td></tr><tr><td>0011 1000</td><td>56</td><td>38</td><td>8</td></tr><tr><td>0011 1001</td><td>57</td><td>39</td><td>9</td></tr><tr><td>0011 1010</td><td>58</td><td>3A</td><td>:</td></tr><tr><td>0011 1011</td><td>59</td><td>3B</td><td>;</td></tr><tr><td>0011 1100</td><td>60</td><td>3C</td><td>&lt;</td></tr><tr><td>0011 1101</td><td>61</td><td>3D</td><td>&#x3D;</td></tr><tr><td>0011 1110</td><td>62</td><td>3E</td><td>&gt;</td></tr><tr><td>0011 1111</td><td>63</td><td>3F</td><td>?</td></tr></tbody></table><table><thead><tr><th>二进制</th><th>十进制</th><th>十六进制</th><th>图形</th></tr></thead><tbody><tr><td>0100 0000</td><td>64</td><td>40</td><td>@</td></tr><tr><td>0100 0001</td><td>65</td><td>41</td><td>A</td></tr><tr><td>0100 0010</td><td>66</td><td>42</td><td>B</td></tr><tr><td>0100 0011</td><td>67</td><td>43</td><td>C</td></tr><tr><td>0100 0100</td><td>68</td><td>44</td><td>D</td></tr><tr><td>0100 0101</td><td>69</td><td>45</td><td>E</td></tr><tr><td>0100 0110</td><td>70</td><td>46</td><td>F</td></tr><tr><td>0100 0111</td><td>71</td><td>47</td><td>G</td></tr><tr><td>0100 1000</td><td>72</td><td>48</td><td>H</td></tr><tr><td>0100 1001</td><td>73</td><td>49</td><td>I</td></tr><tr><td>0100 1010</td><td>74</td><td>4A</td><td>J</td></tr><tr><td>0100 1011</td><td>75</td><td>4B</td><td>K</td></tr><tr><td>0100 1100</td><td>76</td><td>4C</td><td>L</td></tr><tr><td>0100 1101</td><td>77</td><td>4D</td><td>M</td></tr><tr><td>0100 1110</td><td>78</td><td>4E</td><td>N</td></tr><tr><td>0100 1111</td><td>79</td><td>4F</td><td>O</td></tr><tr><td>0101 0000</td><td>80</td><td>50</td><td>P</td></tr><tr><td>0101 0001</td><td>81</td><td>51</td><td>Q</td></tr><tr><td>0101 0010</td><td>82</td><td>52</td><td>R</td></tr><tr><td>0101 0011</td><td>83</td><td>53</td><td>S</td></tr><tr><td>0101 0100</td><td>84</td><td>54</td><td>T</td></tr><tr><td>0101 0101</td><td>85</td><td>55</td><td>U</td></tr><tr><td>0101 0110</td><td>86</td><td>56</td><td>V</td></tr><tr><td>0101 0111</td><td>87</td><td>57</td><td>W</td></tr><tr><td>0101 1000</td><td>88</td><td>58</td><td>X</td></tr><tr><td>0101 1001</td><td>89</td><td>59</td><td>Y</td></tr><tr><td>0101 1010</td><td>90</td><td>5A</td><td>Z</td></tr><tr><td>0101 1011</td><td>91</td><td>5B</td><td>[</td></tr><tr><td>0101 1100</td><td>92</td><td>5C</td><td>|</td></tr><tr><td>0101 1101</td><td>93</td><td>5D</td><td>]</td></tr><tr><td>0101 1110</td><td>94</td><td>5E</td><td>^</td></tr><tr><td>0101 1111</td><td>95</td><td>5F</td><td>_</td></tr></tbody></table><table><thead><tr><th>二进制</th><th>十进制</th><th>十六进制</th><th>图形</th></tr></thead><tbody><tr><td>0110 0000</td><td>96</td><td>60</td><td>&#96;</td></tr><tr><td>0110 0001</td><td>97</td><td>61</td><td>a</td></tr><tr><td>0110 0010</td><td>98</td><td>62</td><td>b</td></tr><tr><td>0110 0011</td><td>99</td><td>63</td><td>c</td></tr><tr><td>0110 0100</td><td>100</td><td>64</td><td>d</td></tr><tr><td>0110 0101</td><td>101</td><td>65</td><td>e</td></tr><tr><td>0110 0110</td><td>102</td><td>66</td><td>f</td></tr><tr><td>0110 0111</td><td>103</td><td>67</td><td>g</td></tr><tr><td>0110 1000</td><td>104</td><td>68</td><td>h</td></tr><tr><td>0110 1001</td><td>105</td><td>69</td><td>i</td></tr><tr><td>0110 1010</td><td>106</td><td>6A</td><td>j</td></tr><tr><td>0110 1011</td><td>107</td><td>6B</td><td>k</td></tr><tr><td>0110 1100</td><td>108</td><td>6C</td><td>l</td></tr><tr><td>0110 1101</td><td>109</td><td>6D</td><td>m</td></tr><tr><td>0110 1110</td><td>110</td><td>6E</td><td>n</td></tr><tr><td>0110 1111</td><td>111</td><td>6F</td><td>o</td></tr><tr><td>0111 0000</td><td>112</td><td>70</td><td>p</td></tr><tr><td>0111 0001</td><td>113</td><td>71</td><td>q</td></tr><tr><td>0111 0010</td><td>114</td><td>72</td><td>r</td></tr><tr><td>0111 0011</td><td>115</td><td>73</td><td>s</td></tr><tr><td>0111 0100</td><td>116</td><td>74</td><td>t</td></tr><tr><td>0111 0101</td><td>117</td><td>75</td><td>u</td></tr><tr><td>0111 0110</td><td>118</td><td>76</td><td>v</td></tr><tr><td>0111 0111</td><td>119</td><td>77</td><td>w</td></tr><tr><td>0111 1000</td><td>120</td><td>78</td><td>x</td></tr><tr><td>0111 1001</td><td>121</td><td>79</td><td>y</td></tr><tr><td>0111 1010</td><td>122</td><td>7A</td><td>z</td></tr><tr><td>0111 1011</td><td>123</td><td>7B</td><td>{</td></tr><tr><td>0111 1100</td><td>124</td><td>7C</td><td></td></tr><tr><td>0111 1101</td><td>125</td><td>7D</td><td>}</td></tr><tr><td>0111 1110</td><td>126</td><td>7E</td><td>~</td></tr></tbody></table><p><strong>ASCII 码大致由以下两部分组成：</strong></p><ul><li>ASCII 控制字符：ASCII 表上十制进数字 <strong>0-31&#x2F;127</strong> 分配给了控制字符，用于控制计算机或一些外围设备。</li><li>ASCII 显示字符：ASCII 表上十制进数字 <strong>32-126</strong> 分配给了能在键盘上输出的字符，当编写或打印文档时就会出现。</li></ul>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程09：数据类型-实型（float、double）</title>
      <link href="/post/d4eac064.html"/>
      <url>/post/d4eac064.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第二章：数据类型"><a href="#第二章：数据类型" class="headerlink" title="第二章：数据类型"></a>第二章：数据类型</h1><p>C&#x2F;C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量或常量分配内存。</p><h2 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h2><p><strong>作用：</strong>实型变量表示浮点型（小数）。</p><p>C&#x2F;C++ 中能够表示实型的类型有两种方式，<strong>两者的区别在于有效的数字范围不同：</strong></p><table><thead><tr><th>数据类型</th><th>占用空间</th><th>有效数字范围</th></tr></thead><tbody><tr><td>float（单精度）</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double（双精度）</td><td>8字节</td><td>15~16位有效数字</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//float（单精度）</span></span><br><span class="line"><span class="type">float</span> fNum = <span class="number">1.341f</span>;</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;float  占用空间= &quot;</span>&lt;&lt; <span class="built_in">sizeof</span>(fNum) &lt;&lt;<span class="string">&quot; 字节&quot;</span>&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//double（双精度）</span></span><br><span class="line"><span class="type">double</span> dNum = <span class="number">1.36424</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;double 占用空间= &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(dNum) &lt;&lt; <span class="string">&quot; 字节&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//科学计数法</span></span><br><span class="line"><span class="type">float</span> fNum02 = <span class="number">4e2</span>;<span class="comment">//4\*10^2 = 400</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;fNum02= &quot;</span> &lt;&lt; fNum02 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> dNum02 = <span class="number">3e-2</span>;<span class="comment">//3\*0.1^2 = 0.03</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;dNum02= &quot;</span> &lt;&lt; dNum02 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://image.camcad.cn/2020/05/2020051815055579.jpg"><img src="http://image.camcad.cn/2020/05/2020051815055579.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程08：sizeof 关键字</title>
      <link href="/post/2f84322d.html"/>
      <url>/post/2f84322d.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第二章：数据类型"><a href="#第二章：数据类型" class="headerlink" title="第二章：数据类型"></a>第二章：数据类型</h1><h2 id="2-2-sizeof-关键字"><a href="#2-2-sizeof-关键字" class="headerlink" title="2.2 sizeof 关键字"></a>2.2 sizeof 关键字</h2><p><strong>作用：</strong>利用sizeof关键字可以统计数据类型所占内存大小。</p><p><strong>语法：</strong>sizeof（数据类型&#x2F;变量）</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Windows10 64位 操作系统\\n&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//short（短整型) -32768~-32767</span></span><br><span class="line"><span class="type">short</span> sNum = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;short(短整型)占用空间= &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">short</span>) &lt;&lt; <span class="string">&quot;字节&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int（整型）-2147483648~2147483647</span></span><br><span class="line"><span class="type">int</span> iNum = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;int(整型)占用空间= &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(iNum) &lt;&lt; <span class="string">&quot;字节&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//long（长整型）-2147483648~2147483647 </span></span><br><span class="line"><span class="type">long</span> lNum = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;long(长整型)占用空间= &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span>) &lt;&lt; <span class="string">&quot;字节&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//long long（长长整型）-9223372036854775808~9223372036854775807</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> llNum = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;long long(长长整型)占用空间= &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">long</span>) &lt;&lt; <span class="string">&quot;字节&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://image.camcad.cn/2020/05/2020051814290662.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程07：数据类型-整型（short、int、long、long long）</title>
      <link href="/post/145d1acc.html"/>
      <url>/post/145d1acc.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第二章：数据类型"><a href="#第二章：数据类型" class="headerlink" title="第二章：数据类型"></a>第二章：数据类型</h1><p>C&#x2F;C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量或常量分配内存。</p><h2 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h2><p><strong>作用：</strong>整型变量表示的是整数类型的数据。</p><p>C&#x2F;C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同：</strong></p><table><thead><tr><th>数据类型</th><th>占用空间</th><th>取值范围</th></tr></thead><tbody><tr><td>short（短整型）</td><td>2字节</td><td>（-2^15~2^15-1）</td></tr><tr><td>int（整型）</td><td>4字节</td><td>（-2^31~2^31-1）</td></tr><tr><td>long（长整型）</td><td>Windows为4字节，Linux为4字节（32位），8字节（64位）</td><td>（-2^31~2^31-1）</td></tr><tr><td>long long（长长整型）</td><td>8字节</td><td>（-2^63~2^63-1）</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\\t\\tWindows10 64位 操作系统&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//short（短整型) -32768~-32767</span></span><br><span class="line"><span class="type">short</span> sNum = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;short(短整型)赋值= &quot;</span> &lt;&lt; sNum &lt;&lt; <span class="string">&quot;\\t\\t占用空间= &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">short</span>) &lt;&lt; <span class="string">&quot;字节&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int（整型）-2147483648~2147483647</span></span><br><span class="line"><span class="type">int</span> iNum = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;int(整型)赋值= &quot;</span> &lt;&lt; iNum &lt;&lt; <span class="string">&quot;\\t\\t占用空间= &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; <span class="string">&quot;字节&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//long（长整型）-2147483648~2147483647 </span></span><br><span class="line"><span class="type">long</span> lNum = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;long(长整型)赋值= &quot;</span> &lt;&lt; lNum &lt;&lt; <span class="string">&quot;\\t\\t占用空间= &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span>) &lt;&lt; <span class="string">&quot;字节&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//long long（长长整型）-9223372036854775808~9223372036854775807</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> llNum = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;long long(长长整型)赋值= &quot;</span> &lt;&lt; llNum &lt;&lt; <span class="string">&quot;\\t\\t占用空间= &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">long</span>) &lt;&lt; <span class="string">&quot;字节&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://image.camcad.cn/2020/05/2020051813090512.jpg"><img src="http://image.camcad.cn/2020/05/2020051813090512.jpg"></a></p><h3 id="整型结论：short-lt-int-lt-x3D-long-lt-x3D-long-long"><a href="#整型结论：short-lt-int-lt-x3D-long-lt-x3D-long-long" class="headerlink" title="整型结论：short &lt; int &lt;&#x3D; long &lt;&#x3D; long long"></a>整型结论：short &lt; int &lt;&#x3D; long &lt;&#x3D; long long</h3>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程06：标识符命名规则</title>
      <link href="/post/6cc951e8.html"/>
      <url>/post/6cc951e8.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第一章：C-初识"><a href="#第一章：C-初识" class="headerlink" title="第一章：C++初识"></a>第一章：C++初识</h1><h2 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h2><p><strong>作用：</strong>C++规定给标识符（变量、常量）命名时，有一套自己的规则。</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><h3 id="建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读。"><a href="#建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读。" class="headerlink" title="建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读。"></a>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读。</h3><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1、标识符不能是关键字</span></span><br><span class="line"><span class="comment">//double int = 10.0;//错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、标识符只能由字母、数字、下划线组成</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> num01 = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> \_2num = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、第一个字符必须为字母或下划线</span></span><br><span class="line"><span class="comment">//int 2num = 20;//错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4、标识符中字母区分大小写</span></span><br><span class="line"><span class="type">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num= &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;num= &quot; &lt;&lt; Num1 &lt;&lt; endl;//错误，num1和Num1不是同一个名称</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程05：C/C++中常用的编程关键字</title>
      <link href="/post/b90c4483.html"/>
      <url>/post/b90c4483.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第一章：C-初识"><a href="#第一章：C-初识" class="headerlink" title="第一章：C++初识"></a>第一章：C++初识</h1><h2 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h2><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p><ul><li><strong>在定义变量或者常量时，不要用关键字</strong></li></ul><p>C&#x2F;C++关键字如下：<br><img src="http://image.camcad.cn/2020/05/2020051711522463.jpg"></p><p><strong>提示：</strong>在给变量或者常量起名时，不要用C++的关键字，否则会产生岐义。</p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程04：常量与变量的区别/变量的使用</title>
      <link href="/post/8fe4479e.html"/>
      <url>/post/8fe4479e.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第一章：C-初识"><a href="#第一章：C-初识" class="headerlink" title="第一章：C++初识"></a>第一章：C++初识</h1><h2 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4 常量"></a>1.4 常量</h2><p><strong>作用：</strong>用于记录程序中不可更改的数据。<br>C++定义常量的两种方式</p><p>1、<code>#define</code> 宏常量：#define 常量名 常量值</p><ul><li>通常在文件上方定义，表示 一个常量。</li></ul><p>2、<code>const</code> 修饰的变量： const 数据类型 常量名 &#x3D; 常量值</p><ul><li>通常在变量定义前加关键字const，修饰该变量为常量，不可修改。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、#define 宏常量：#define 常量名 常量值</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> months 12</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//months=13;//错误，宏常量不可修改。</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;一年有 = &quot;</span> &lt;&lt; months &lt;&lt;<span class="string">&quot; 个月&quot;</span>&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、const 修饰的变量： const 数据类型 常量名 = 常量值</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> iHour = <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int iHour = 25;//错误，const修饰的变量也称为常量。</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;一天有 = &quot;</span> &lt;&lt; iHour &lt;&lt; <span class="string">&quot; 小时&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程03：变量的意义/变量的使用</title>
      <link href="/post/6e88c124.html"/>
      <url>/post/6e88c124.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第一章：C-初识"><a href="#第一章：C-初识" class="headerlink" title="第一章：C++初识"></a>第一章：C++初识</h1><h2 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h2><p><strong>作用：</strong>给一段指定的内存空间起名，方便操作这段内存空间。</p><p><strong>语法：</strong>数据类型 变量名 &#x3D; 初始值；</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//变量的定义</span></span><br><span class="line"><span class="comment">//语法：数据类型 变量名 = 初始值;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> iNum = <span class="number">20</span>;<span class="comment">//数据类型为 整数，变量名为 iNum，初始值 20。</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;iNum= &quot;</span> &lt;&lt; iNum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程02：单行注释/多行注释</title>
      <link href="/post/5a50df31.html"/>
      <url>/post/5a50df31.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第一章：C-初识"><a href="#第一章：C-初识" class="headerlink" title="第一章：C++初识"></a>第一章：C++初识</h1><h2 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 <strong>注释</strong></h2><p><strong>作用：</strong>在代码中做一些说明和解释，方便自己或其他程序员阅读代码（<strong>两种格式</strong>）</p><p>1、<strong>单行注释：</strong> <code>// 描述信息</code>（快捷键 Ctrl+K，Ctrl+C ）</p><ul><li>通常放在一行代码的上方，或者一条语句的未尾，对该行代码说明。</li></ul><p>2、<strong>多行注释：</strong> <code>\* 描述信息\*</code></p><ul><li>通常放在一段代码的上方，对该段代码做整体说明。</li></ul><h3 id="提示：编译器在编译代码时，会忽略注释的内容。"><a href="#提示：编译器在编译代码时，会忽略注释的内容。" class="headerlink" title="提示：编译器在编译代码时，会忽略注释的内容。"></a>提示：编译器在编译代码时，会忽略注释的内容。</h3><p><a href="http://image.camcad.cn/2020/05/202005170445144.jpg"><img src="http://image.camcad.cn/2020/05/202005170445144-1024x401.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++语言 零基础入门教程01：第一个C++程序“HelloWorld”</title>
      <link href="/post/b896bb48.html"/>
      <url>/post/b896bb48.html</url>
      
        <content type="html"><![CDATA[<h3 id="教程目录《C-基础教程》"><a href="#教程目录《C-基础教程》" class="headerlink" title="教程目录《C++基础教程》"></a>教程目录《<a href="https://notes.camcad.cn/post/b2d53884.html">C++基础教程</a>》</h3><h1 id="第一章：C-初识"><a href="#第一章：C-初识" class="headerlink" title="第一章：C++初识"></a>第一章：C++初识</h1><h2 id="1-1-第一个C-程序"><a href="#1-1-第一个C-程序" class="headerlink" title="1.1 第一个C++程序"></a>1.1 第一个C++程序</h2><p>编写一个C++程序总共分为4个步骤</p><ul><li>创建项目</li><li>创建文件</li><li>编写代码</li><li>运行文件</li></ul><h3 id="1-1-1-创建项目"><a href="#1-1-1-创建项目" class="headerlink" title="1.1.1 创建项目"></a>1.1.1 创建项目</h3><p>Visual Studio 是我们用来编写C&#x2F;C++程序的主要工具，我们先将它打开。</p><p><a href="http://image.camcad.cn/2020/05/2020051702465231.jpg"><img src="http://image.camcad.cn/2020/05/2020051702465231-1024x739.jpg"></a><a href="http://image.camcad.cn/2020/05/2020051702461712.jpg"><img src="http://image.camcad.cn/2020/05/2020051702461712-1024x760.jpg"></a></p><h3 id="1-1-2-创建文件"><a href="#1-1-2-创建文件" class="headerlink" title="1.1.2 创建文件"></a>1.1.2 创建文件</h3><p>点击”源文件“–&gt;右键”源文件“–&gt;选择”添加“–&gt;点击“新建项”</p><p><a href="http://image.camcad.cn/2020/05/2020051703011331.jpg"><img src="http://image.camcad.cn/2020/05/2020051703011331-1024x593.jpg"></a></p><h3 id="1-1-3-编写代码"><a href="#1-1-3-编写代码" class="headerlink" title="1.1.3 编写代码"></a>1.1.3 编写代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-4-运行程序"><a href="#1-1-4-运行程序" class="headerlink" title="1.1.4 运行程序"></a>1.1.4 运行程序</h3><p><a href="http://image.camcad.cn/2020/05/2020051703141939.jpg"><img src="http://image.camcad.cn/2020/05/2020051703141939-1024x724.jpg"></a><a href="http://image.camcad.cn/2020/05/2020051703143081.jpg"><img src="http://image.camcad.cn/2020/05/2020051703143081-1024x274.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> C/C++语言 零基础入门教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 蚂蚁Emmet </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
