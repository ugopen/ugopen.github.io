<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识储存库</title>
  
  <subtitle>增长盈利，降本增效&lt;br&gt;逆境求生存，顺境求发展</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-05-14T14:14:30.424Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>蚂蚁Emmet</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows操作系统编译curl源代码</title>
    <link href="http://example.com/post/f151eb4f.html"/>
    <id>http://example.com/post/f151eb4f.html</id>
    <published>2024-05-08T22:24:42.000Z</published>
    <updated>2024-05-14T14:14:30.424Z</updated>
    
    <content type="html"><![CDATA[<p>libcurl-多协议文件传输库。</p><span id="more"></span><h3 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h3><p><a href="https://curl.se/download.html">https://curl.se/download.html</a><br><img src="https://image.camcad.cn/vscode/20240508223504.png" alt="20240508223504"></p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><strong>1、解压刚刚下载的源代码文件</strong></p><p><strong>2、找到<code>VS xxx x64本机工具命令提示符</code></strong><br><img src="https://image.camcad.cn/vscode/20240508223942.png" alt="20240508223942"></p><p><strong>3、执行curl源码目录下的<code>buildconf.bat</code>文件</strong><br><img src="https://image.camcad.cn/vscode/20240508224431.png" alt="20240508224431"></p><p><strong>4、跳转到curl源码目录<code>winbuild</code>文件夹下</strong><br><img src="https://image.camcad.cn/vscode/20240508224250.png" alt="20240508224250"></p><p><strong>5、执行<code>nmake</code>命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmake /f Makefile.vc mode=static VC=12 RTLIBCFG=static MACHINE=x64 ENABLE_WINSSL=no ENABLE_SSPI=no DEBUG=no ENABLE_IDN=no</span><br></pre></td></tr></table></figure><p><code>说明：</code></p><ul><li><p>1、nmake &#x2F;f Makefile.vc：这个命令告诉 nmake（微软的 make 工具）使用 Makefile.vc 文件作为构建脚本。</p></li><li><p>2、mode&#x3D;static：这个参数指定了要编译的库的模式。在这里，它被设置为 static，意味着将生成一个静态库（.lib 文件），而不是一个动态链接库（.dll 文件）。</p></li><li><p>3、VC&#x3D;12：这个参数指定了使用的 Visual C++ 版本。在这里，它被设置为 12，代表 Visual Studio 2013。</p></li><li><p>4、RTLIBCFG&#x3D;static：这个参数指定了运行时库的配置。设置为 static 意味着将使用静态链接的 CRT（C 运行时库）。</p></li><li><p>5、MACHINE&#x3D;x64：这个参数定义了目标平台。在这里，它被设置为 x64，意味着编译的是 64 位版本。</p></li><li><p>6、ENABLE_WINSSL&#x3D;no：这个参数用于指定是否启用 Windows SSL 支持。设置为 no 意味着不启用。</p></li><li><p>7、ENABLE_SSPI&#x3D;no：这个参数用于指定是否启用 Windows SSPI（安全支持提供程序接口）支持。设置为 no 意味着不启用。</p></li><li><p>8、DEBUG&#x3D;no：这个参数用于指定是否生成调试信息。设置为 no 意味着不会生成调试信息。</p></li><li><p>9、ENABLE_IDN&#x3D;no：这个参数用于指定是否启用国际化域名（IDN）支持。设置为 no 意味着不启用。</p></li></ul><p><strong>6、编译完成后，会在源代码目录<code>builds</code>文件夹下生成相应文件</strong><br><img src="https://image.camcad.cn/vscode/20240508225020.png" alt="20240508225020"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;curl/curl.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (lib,<span class="string">&quot;libcurl_a.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (lib,<span class="string">&quot;wldap32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment (lib,<span class="string">&quot;Crypt32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">CURL *curl;</span><br><span class="line">CURLcode res;</span><br><span class="line">curl = curl_easy_init();</span><br><span class="line"><span class="keyword">if</span>(curl) &#123;</span><br><span class="line">  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, <span class="string">&quot;POST&quot;</span>);</span><br><span class="line">  curl_easy_setopt(curl, CURLOPT_URL, <span class="string">&quot;http://caxtoolkit.com:5000/emmet&quot;</span>);</span><br><span class="line">  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, <span class="number">1L</span>);</span><br><span class="line">  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, <span class="string">&quot;http&quot;</span>);</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">curl_slist</span> *<span class="title">headers</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">  headers = curl_slist_append(headers, <span class="string">&quot;Content-Type: application/json&quot;</span>);</span><br><span class="line">  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *data = <span class="string">&quot;&#123;\&quot;id\&quot;:\&quot;emmet.huang@foxmail.com\&quot;,\&quot;ver\&quot;:\&quot;1.0\&quot;&#125;&quot;</span>;</span><br><span class="line">  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);</span><br><span class="line">  res = curl_easy_perform(curl);</span><br><span class="line">  curl_slist_free_all(headers);</span><br><span class="line">&#125;</span><br><span class="line">curl_easy_cleanup(curl);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h3><h4 id="无法解析外部符号"><a href="#无法解析外部符号" class="headerlink" title="无法解析外部符号"></a>无法解析外部符号</h4><p><img src="https://image.camcad.cn/vscode/20240508230516.png" alt="20240508230516"><br><code>解决办法：</code><br>在属性配置中，将 <code>C/C++</code> -&gt; <code>预处理器</code> -&gt; <code>预处理定义</code> 中添加 <code>CURL_STATICLIB</code></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://curl.se/download.html">https://curl.se/download.html</a></p><p><a href="https://www.cnblogs.com/132818Creator/p/14358595.html">libcurl报错 无法解析的外部符号 _imp_read等解决办法</a></p><p><a href="https://www.cnblogs.com/RioTian/p/17563205.html">【LibCurl】C++使用libcurl实现HTTP POST和GET、PUT </a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;libcurl-多协议文件传输库。&lt;/p&gt;</summary>
    
    
    
    <category term="辅助" scheme="http://example.com/categories/%E8%BE%85%E5%8A%A9/"/>
    
    
    <category term="curl" scheme="http://example.com/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习19：上传附件软件包库（Package Registry）</title>
    <link href="http://example.com/post/db503ee.html"/>
    <id>http://example.com/post/db503ee.html</id>
    <published>2024-05-02T17:47:28.000Z</published>
    <updated>2024-05-14T14:14:30.420Z</updated>
    
    <content type="html"><![CDATA[<p>这个配置是自动化流程中用于上传构建包到 GitLab 包注册表的典型示例。</p><span id="more"></span><h3 id="发布包文件"><a href="#发布包文件" class="headerlink" title="发布包文件"></a>发布包文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl --header &quot;JOB-TOKEN: $CI_JOB_TOKEN&quot; </span><br><span class="line">     --upload-file ./patch-muif.zip </span><br><span class="line">     $&#123;CI_API_V4_URL&#125;/projects/:id/packages/generic/:package_name/:package_version/:file_name</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>linux</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl --header <span class="string">&quot;PRIVATE-TOKEN: &lt;your_access_token&gt;&quot;</span> \</span><br><span class="line">     --upload-file path/to/file.txt \</span><br><span class="line">     <span class="string">&quot;https://gitlab.example.com/api/v4/projects/24/packages/generic/my_package/0.0.1/file.txt&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>windows</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upload:</span><br><span class="line">  stage: upload</span><br><span class="line">  script:</span><br><span class="line">    - Invoke-RestMethod -Headers @&#123; <span class="string">&quot;JOB-TOKEN&quot;</span>=<span class="string">&quot;<span class="variable">$CI_JOB_TOKEN</span>&quot;</span> &#125; -InFile path/to/file.txt -uri <span class="string">&quot;<span class="variable">$&#123;CI_API_V4_URL&#125;</span>/projects/<span class="variable">$&#123;CI_PROJECT_ID&#125;</span>/packages/generic/my_package/0.0.1/file.txt&quot;</span> -Method put</span><br></pre></td></tr></table></figure><p><img src="https://image.camcad.cn/vscode/20240502180332.png" alt="20240502180332"></p><figure class="highlight bash"><figcaption><span>.gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">workflow:</span><br><span class="line">  rules:</span><br><span class="line">    - <span class="keyword">if</span>: <span class="string">&#x27;$CI_COMMIT_TAG&#x27;</span></span><br><span class="line">      when: always</span><br><span class="line">    - when: never</span><br><span class="line"></span><br><span class="line">stages:</span><br><span class="line">  - upload</span><br><span class="line"></span><br><span class="line">variables:</span><br><span class="line">  PACKAGE_REGISTRY_URL: <span class="string">&quot;<span class="variable">$&#123;CI_API_V4_URL&#125;</span>/projects/<span class="variable">$&#123;CI_PROJECT_ID&#125;</span>/packages/generic/<span class="variable">$&#123;CI_COMMIT_TAG&#125;</span>/<span class="variable">$&#123;CI_COMMIT_TAG&#125;</span>&quot;</span></span><br><span class="line">  PACKAGE_NAME: <span class="string">&quot;<span class="variable">$&#123;CI_PROJECT_NAME&#125;</span>.zip&quot;</span></span><br><span class="line"></span><br><span class="line">upload_package:</span><br><span class="line">  tags:</span><br><span class="line">    - mydebian</span><br><span class="line">  stage: upload </span><br><span class="line">  script:</span><br><span class="line">    - |</span><br><span class="line">      curl --header <span class="string">&quot;JOB-TOKEN: <span class="variable">$&#123;CI_JOB_TOKEN&#125;</span>&quot;</span> --upload-file <span class="variable">$&#123;CI_PROJECT_DIR&#125;</span>/<span class="variable">$&#123;PACKAGE_NAME&#125;</span> <span class="variable">$&#123;PACKAGE_REGISTRY_URL&#125;</span>/<span class="variable">$&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将Windows运行程序与PowerShell一起使用时，必须在上载和下载阶段使用Invoke-WebRequest或Invoke-RestMethod，而不是curl。</span></span><br><span class="line">    <span class="comment"># - Invoke-RestMethod -Headers @&#123; &quot;JOB-TOKEN&quot;=&quot;$CI_JOB_TOKEN&quot; &#125; -InFile $&#123;CI_PROJECT_DIR&#125;/$&#123;PACKAGE_NAME&#125; -uri $&#123;PACKAGE_REGISTRY_URL&#125;/$&#123;PACKAGE_NAME&#125; -Method put</span></span><br></pre></td></tr></table></figure><p>您的 <code>.gitlab-ci.yml</code> 配置文件定义了一个工作流规则，一个变量部分，以及一个名为 <code>upload_package</code> 的作业。以下是配置的详细说明：</p><h3 id="工作流规则-Workflow-Rules"><a href="#工作流规则-Workflow-Rules" class="headerlink" title="工作流规则 (Workflow Rules)"></a>工作流规则 (Workflow Rules)</h3><ul><li><code>rules</code>：定义了触发 CI&#x2F;CD 流程的条件。<ul><li><code>if: &#39;$CI_COMMIT_TAG&#39;</code>：如果存在一个 Git 标签（<code>$CI_COMMIT_TAG</code>），则满足条件。</li><li><code>when: always</code>：满足上述条件时，总是运行作业。</li><li><code>when: never</code>：对于没有标签的提交，不运行作业。</li></ul></li></ul><h3 id="阶段-Stages"><a href="#阶段-Stages" class="headerlink" title="阶段 (Stages)"></a>阶段 (Stages)</h3><ul><li><code>upload</code>：定义了一个名为 <code>upload</code> 的阶段。</li></ul><h3 id="变量-Variables"><a href="#变量-Variables" class="headerlink" title="变量 (Variables)"></a>变量 (Variables)</h3><ul><li><code>PACKAGE_REGISTRY_URL</code>：定义了包注册表的 URL，其中包含了 GitLab API v4 URL、项目 ID、包的通用路径以及提交标签。</li><li><code>PACKAGE_NAME</code>：定义了要上传的包的名称，这里使用了 <code>$&#123;CI_PROJECT_NAME&#125;</code> 来表示项目名称，并且将文件扩展名设置为 <code>.zip</code>。</li></ul><h3 id="作业-Jobs"><a href="#作业-Jobs" class="headerlink" title="作业 (Jobs)"></a>作业 (Jobs)</h3><ul><li><code>upload_package</code><ul><li><code>tags</code>：指定了作业需要在具有 <code>mydebian</code> 标签的 Runner 上运行。</li><li><code>stage</code>：将作业分配到 <code>upload</code> 阶段。</li><li><code>script</code>：<ul><li><code>curl</code> 命令：<ul><li><code>--header &quot;JOB-TOKEN: $&#123;CI_JOB_TOKEN&#125;&quot;</code>：使用 <code>--header</code> 添加一个 HTTP 头，其中包含了作业令牌，用于认证。</li><li><code>--upload-file $&#123;CI_PROJECT_DIR&#125;/$&#123;PACKAGE_NAME&#125;</code>：指定要上传的文件路径，这里使用了 GitLab 预定义变量 <code>$&#123;CI_PROJECT_DIR&#125;</code> 来获取项目的工作目录，以及上面定义的 <code>PACKAGE_NAME</code>。</li><li><code>$&#123;PACKAGE_REGISTRY_URL&#125;/$&#123;PACKAGE_NAME&#125;</code>：指定上传文件的目标 URL。</li></ul></li></ul></li></ul></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>作业 <code>upload_package</code> 只有在存在 Git 标签时才会运行，这是由工作流规则定义的。</li><li><code>curl</code> 命令用于将指定的包上传到 GitLab 的包注册表。这通常用于将构建的包存储在 GitLab 中，以便于后续的分发和使用。</li><li><code>$&#123;CI_JOB_TOKEN&#125;</code> 是一个敏感变量，用于提供对包注册表的访问权限。请确保 CI&#x2F;CD 流程中的安全设置能够保护这个令牌。</li><li><code>$&#123;CI_COMMIT_TAG&#125;</code> 和 <code>$&#123;CI_COMMIT_TAG_MESSAGE&#125;</code> 是 GitLab 提供的预定义变量，分别包含了当前的标签名和标签信息。</li></ol><p><img src="https://image.camcad.cn/vscode/20240502175445.png" alt="20240502175445"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://docs.gitlab.com/ee/user/packages/generic_packages/index.html#publish-a-generic-package-by-using-cicd">GitLab Generic Packages Repository</a></p><p><a href="https://cloud.tencent.com/developer/article/1768699">【GitLab CI&#x2F;CD】：Releases &amp; Package Registry</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个配置是自动化流程中用于上传构建包到 GitLab 包注册表的典型示例。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="http://example.com/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习18：手动控制部署production环境</title>
    <link href="http://example.com/post/d9e028cf.html"/>
    <id>http://example.com/post/d9e028cf.html</id>
    <published>2024-05-02T16:18:04.000Z</published>
    <updated>2024-05-14T14:14:30.420Z</updated>
    
    <content type="html"><![CDATA[<p>手动控制部署production环境。</p><span id="more"></span><figure class="highlight bash"><figcaption><span>gitalb-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">stages:</span><br><span class="line">  - deploy_to_dev</span><br><span class="line">  - deploy_to_staging</span><br><span class="line">  - deploy_to_production</span><br><span class="line"></span><br><span class="line">.IDeploy:</span><br><span class="line">  tags:</span><br><span class="line">    - mydebian</span><br><span class="line">  variables:</span><br><span class="line">    SERVER_PRIVATE_KEY: <span class="string">&quot;&quot;</span></span><br><span class="line">    SERVER_USER: <span class="string">&quot;&quot;</span></span><br><span class="line">    SERVER_URL: <span class="string">&quot;&quot;</span></span><br><span class="line">    ENV: <span class="string">&quot;&quot;</span></span><br><span class="line">    APP_PORT: <span class="string">&quot;&quot;</span></span><br><span class="line">  before_script:</span><br><span class="line">    - <span class="built_in">eval</span> $(ssh-agent -s)</span><br><span class="line">    - ssh-add &lt;(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$SERVER_PRIVATE_KEY</span>&quot;</span>)</span><br><span class="line">  script:</span><br><span class="line">    - scp -o StrictHostKeyChecking=no ./docker-compose.yml </span><br><span class="line">      <span class="variable">$SERVER_USER</span>@<span class="variable">$SERVER_URL</span>:/<span class="variable">$SERVER_USER</span></span><br><span class="line"></span><br><span class="line">    - ssh -o StrictHostKeyChecking=no <span class="variable">$SERVER_USER</span>@<span class="variable">$SERVER_URL</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">     docker login -u <span class="variable">$CI_REGISTRY_USER</span> -p <span class="variable">$CI_REGISTRY_PASSWORD</span> <span class="variable">$CI_REGISTRY</span> &amp;&amp;</span></span><br><span class="line"><span class="string">     apt-get install docker-compose &amp;&amp;</span></span><br><span class="line"><span class="string">     export COMPOSE_PROJECT_NAME=<span class="variable">$ENV</span> &amp;&amp;</span></span><br><span class="line"><span class="string">     export APP_PORT=<span class="variable">$APP_PORT</span> &amp;&amp;</span></span><br><span class="line"><span class="string">     docker-compose down &amp;&amp;</span></span><br><span class="line"><span class="string">     docker-compose up -d&quot;</span></span><br><span class="line">  environment:</span><br><span class="line">    name: <span class="variable">$ENV</span></span><br><span class="line">    url: http://<span class="variable">$SERVER_URL</span>:<span class="variable">$APP_PORT</span></span><br><span class="line"></span><br><span class="line">ssh_dev:</span><br><span class="line">  stage: deploy_to_dev</span><br><span class="line">  extends: .IDeploy</span><br><span class="line">  variables:</span><br><span class="line">    SERVER_PRIVATE_KEY: <span class="variable">$DEV_SERVER_PRIVATE_KEY</span></span><br><span class="line">    SERVER_USER: <span class="variable">$DEV_SERVER_USER</span></span><br><span class="line">    SERVER_URL: <span class="variable">$DEV_SERVER_URL</span></span><br><span class="line">    ENV: dev</span><br><span class="line">    APP_PORT: 8000</span><br><span class="line"></span><br><span class="line">ssh_staging:</span><br><span class="line">  stage: deploy_to_staging</span><br><span class="line">  extends: .IDeploy</span><br><span class="line">  variables:</span><br><span class="line">    SERVER_PRIVATE_KEY: <span class="variable">$DEV_SERVER_PRIVATE_KEY</span></span><br><span class="line">    SERVER_USER: <span class="variable">$DEV_SERVER_USER</span></span><br><span class="line">    SERVER_URL: <span class="variable">$DEV_SERVER_URL</span></span><br><span class="line">    ENV: staging</span><br><span class="line">    APP_PORT: 8090</span><br><span class="line"></span><br><span class="line">ssh_production:</span><br><span class="line">  stage: deploy_to_production</span><br><span class="line">  needs:</span><br><span class="line">    - job: ssh_staging</span><br><span class="line">  extends: .IDeploy</span><br><span class="line">  when: manual</span><br><span class="line">  variables:</span><br><span class="line">    SERVER_PRIVATE_KEY: <span class="variable">$DEV_SERVER_PRIVATE_KEY</span></span><br><span class="line">    SERVER_USER: <span class="variable">$DEV_SERVER_USER</span></span><br><span class="line">    SERVER_URL: <span class="variable">$DEV_SERVER_URL</span></span><br><span class="line">    ENV: production</span><br><span class="line">    APP_PORT: 80</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  myCat:</span><br><span class="line">    image: registry.camcad.cn:9528/ci-cd/shopping</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;<span class="variable">$&#123;APP_PORT&#125;</span>:8000&quot;</span></span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure><p>您的 <code>.gitlab-ci.yml</code> 配置文件定义了三个部署阶段，每个阶段都旨在部署到不同的环境：开发环境 (<code>deploy_to_dev</code>)、预生产环境 (<code>deploy_to_staging</code>) 和生产环境 (<code>deploy_to_production</code>)。此外，您还定义了一个模板作业 <code>.IDeploy</code>，它被其他具体的部署作业扩展。以下是配置的详细说明：</p><h3 id="阶段-Stages"><a href="#阶段-Stages" class="headerlink" title="阶段 (Stages)"></a>阶段 (Stages)</h3><ul><li><code>deploy_to_dev</code>：部署到开发环境的阶段。</li><li><code>deploy_to_staging</code>：部署到预生产环境的阶段。</li><li><code>deploy_to_production</code>：部署到生产环境的阶段。</li></ul><h3 id="模板作业-Job-Template"><a href="#模板作业-Job-Template" class="headerlink" title="模板作业 (Job Template)"></a>模板作业 (Job Template)</h3><ul><li><code>.IDeploy</code><ul><li><code>tags</code>：指定了作业需要在具有 <code>mydebian</code> 标签的 Runner 上运行。</li><li><code>variables</code>：定义了一组变量，这些变量在模板中被设置为空字符串，它们将在扩展此模板的作业中被覆盖。</li><li><code>before_script</code>：初始化 SSH 代理并添加私钥。</li><li><code>script</code>：执行一系列命令，包括使用 <code>scp</code> 复制 <code>docker-compose.yml</code> 文件，通过 SSH 执行远程服务器上的 Docker 命令。</li><li><code>environment</code>：定义了环境名称和 URL，这些将在作业运行时被使用。</li></ul></li></ul><h3 id="具体作业-Jobs"><a href="#具体作业-Jobs" class="headerlink" title="具体作业 (Jobs)"></a>具体作业 (Jobs)</h3><ul><li><code>ssh_dev</code><ul><li><code>stage</code>：将作业分配到 <code>deploy_to_dev</code> 阶段。</li><li><code>extends</code>：扩展了 <code>.IDeploy</code> 模板作业。</li><li><code>variables</code>：覆盖了模板中定义的变量，为开发环境提供了具体的值。</li></ul></li><li><code>ssh_staging</code><ul><li>类似于 <code>ssh_dev</code>，但是将作业分配到 <code>deploy_to_staging</code> 阶段，并且设置了不同的环境变量，用于预生产环境。</li></ul></li><li><code>ssh_production</code><ul><li><code>stage</code>：将作业分配到 <code>deploy_to_production</code> 阶段。</li><li><code>needs</code>：指定了此作业依赖于 <code>ssh_staging</code> 作业，这意味着 <code>ssh_production</code> 将在 <code>ssh_staging</code> 成功完成后执行。</li><li><code>when: manual</code>：表示这个作业需要手动触发才会运行。</li><li><code>extends</code>：同样扩展了 <code>.IDeploy</code> 模板作业。</li><li><code>variables</code>：覆盖了模板中的变量，但是这里有一个问题：<code>ENV</code> 变量被设置为 <code>staging</code> 而不是 <code>production</code>，这可能是一个配置错误。</li></ul></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><code>SERVER_PRIVATE_KEY</code>、<code>SERVER_USER</code>、<code>SERVER_URL</code>、<code>CI_REGISTRY_USER</code>、<code>CI_REGISTRY_PASSWORD</code> 和 <code>CI_REGISTRY</code> 需要在项目的 CI&#x2F;CD 设置中定义为受保护的变量，以确保安全。</li><li><code>-o StrictHostKeyChecking=no</code> 参数禁用了 SSH 连接时的严格主机密钥检查，这在自动化脚本中很常见，但可能会带来安全风险。</li><li><code>docker login</code> 命令中的 <code>$CI_REGISTRY</code> 应该是您的 Docker Registry 的 URL，确保它已经被正确设置。</li><li><code>needs</code> 关键字用于定义作业之间的依赖关系，确保按照正确的顺序执行部署。</li><li><code>when: manual</code> 关键字用于阻止作业自动运行，需要在 GitLab UI 中手动触发。</li></ol><p>请确保所有的变量都已经被正确设置，并且远程服务器的 Docker 服务已经启动。此外，检查 <code>docker-compose.yml</code> 文件以确保它适用于目标环境，并且所有服务都配置了正确的端口。</p><p><img src="https://image.camcad.cn/vscode/20240502162123.png" alt="20240502162123"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.youtube.com/watch?v=XLaNujWr2Rk&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=23">為你自己學 GitLab CI&#x2F;CD Day 23 - 手動部署 Production 環境</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;手动控制部署production环境。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="http://example.com/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习17：通过模板的方式部署多个服务</title>
    <link href="http://example.com/post/8255c28.html"/>
    <id>http://example.com/post/8255c28.html</id>
    <published>2024-05-02T15:23:08.000Z</published>
    <updated>2024-05-14T14:14:30.420Z</updated>
    
    <content type="html"><![CDATA[<p>这个配置是自动化部署流程中通过 SSH 连接到远程服务器并执行 Docker Compose 命令的典型示例，适用于需要部署到不同环境的场景。</p><span id="more"></span><figure class="highlight bash"><figcaption><span>gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">stages:</span><br><span class="line">  - deploy_to_dev</span><br><span class="line">  - deploy_to_staging</span><br><span class="line"></span><br><span class="line">.IDeploy:</span><br><span class="line">  tags:</span><br><span class="line">    - mydebian</span><br><span class="line">  variables:</span><br><span class="line">    SERVER_PRIVATE_KEY: <span class="string">&quot;&quot;</span></span><br><span class="line">    SERVER_USER: <span class="string">&quot;&quot;</span></span><br><span class="line">    SERVER_URL: <span class="string">&quot;&quot;</span></span><br><span class="line">    ENV: <span class="string">&quot;&quot;</span></span><br><span class="line">    APP_PORT: <span class="string">&quot;&quot;</span></span><br><span class="line">  before_script:</span><br><span class="line">    - <span class="built_in">eval</span> $(ssh-agent -s)</span><br><span class="line">    - ssh-add &lt;(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$SERVER_PRIVATE_KEY</span>&quot;</span>)</span><br><span class="line">  script:</span><br><span class="line">    - scp -o StrictHostKeyChecking=no ./docker-compose.yml </span><br><span class="line">      <span class="variable">$SERVER_USER</span>@<span class="variable">$SERVER_URL</span>:/<span class="variable">$SERVER_USER</span></span><br><span class="line"></span><br><span class="line">    - ssh -o StrictHostKeyChecking=no <span class="variable">$SERVER_USER</span>@<span class="variable">$SERVER_URL</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">     docker login -u <span class="variable">$CI_REGISTRY_USER</span> -p <span class="variable">$CI_REGISTRY_PASSWORD</span> <span class="variable">$CI_REGISTRY</span> &amp;&amp;</span></span><br><span class="line"><span class="string">     apt-get install docker-compose &amp;&amp;</span></span><br><span class="line"><span class="string">     export COMPOSE_PROJECT_NAME=<span class="variable">$ENV</span> &amp;&amp;</span></span><br><span class="line"><span class="string">     export APP_PORT=<span class="variable">$APP_PORT</span> &amp;&amp;</span></span><br><span class="line"><span class="string">     docker-compose down &amp;&amp;</span></span><br><span class="line"><span class="string">     docker-compose up -d&quot;</span></span><br><span class="line">  environment:</span><br><span class="line">    name: <span class="variable">$ENV</span></span><br><span class="line">    url: http://<span class="variable">$SERVER_URL</span>:<span class="variable">$APP_PORT</span></span><br><span class="line"></span><br><span class="line">ssh_dev:</span><br><span class="line">  stage: deploy_to_dev</span><br><span class="line">  extends: .IDeploy</span><br><span class="line">  variables:</span><br><span class="line">    SERVER_PRIVATE_KEY: <span class="variable">$DEV_SERVER_PRIVATE_KEY</span></span><br><span class="line">    SERVER_USER: <span class="variable">$DEV_SERVER_USER</span></span><br><span class="line">    SERVER_URL: <span class="variable">$DEV_SERVER_URL</span></span><br><span class="line">    ENV: dev</span><br><span class="line">    APP_PORT: 8000</span><br><span class="line"></span><br><span class="line">ssh_staging:</span><br><span class="line">  stage: deploy_to_staging</span><br><span class="line">  extends: .IDeploy</span><br><span class="line">  variables:</span><br><span class="line">    SERVER_PRIVATE_KEY: <span class="variable">$DEV_SERVER_PRIVATE_KEY</span></span><br><span class="line">    SERVER_USER: <span class="variable">$DEV_SERVER_USER</span></span><br><span class="line">    SERVER_URL: <span class="variable">$DEV_SERVER_URL</span></span><br><span class="line">    ENV: staging</span><br><span class="line">    APP_PORT: 80</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  myCat:</span><br><span class="line">    image: registry.camcad.cn:9528/ci-cd/shopping</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;<span class="variable">$&#123;APP_PORT&#125;</span>:8000&quot;</span></span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure><p>您的 <code>.gitlab-ci.yml</code> 配置文件定义了两个部署阶段 <code>deploy_to_dev</code> 和 <code>deploy_to_staging</code>，以及一个名为 <code>.IDeploy</code> 的模板作业，它被 <code>ssh_dev</code> 和 <code>ssh_staging</code> 作业扩展。以下是配置的详细说明：</p><h3 id="阶段-Stages"><a href="#阶段-Stages" class="headerlink" title="阶段 (Stages)"></a>阶段 (Stages)</h3><ul><li><code>deploy_to_dev</code>：定义了一个名为 <code>deploy_to_dev</code> 的阶段，通常用于部署到开发环境。</li><li><code>deploy_to_staging</code>：定义了一个名为 <code>deploy_to_staging</code> 的阶段，用于部署到预生产环境。</li></ul><h3 id="模板作业-Job-Template"><a href="#模板作业-Job-Template" class="headerlink" title="模板作业 (Job Template)"></a>模板作业 (Job Template)</h3><ul><li><code>.IDeploy</code><ul><li><code>tags</code>：指定了作业需要在具有 <code>mydebian</code> 标签的 Runner 上运行。</li><li><code>variables</code>：定义了一些变量，这些变量在模板中被设置为空字符串或空值，它们将在扩展此模板的作业中被覆盖。</li><li><code>before_script</code>：初始化 SSH 代理并添加私钥。</li><li><code>script</code>：执行一系列命令，包括使用 <code>scp</code> 复制 <code>docker-compose.yml</code> 文件，通过 SSH 执行远程服务器上的 Docker 命令。</li><li><code>environment</code>：定义了环境名称和 URL，这些将在作业运行时被使用。</li></ul></li></ul><h3 id="作业-Jobs"><a href="#作业-Jobs" class="headerlink" title="作业 (Jobs)"></a>作业 (Jobs)</h3><ul><li><code>ssh_dev</code><ul><li><code>stage</code>：将作业分配到 <code>deploy_to_dev</code> 阶段。</li><li><code>extends</code>：扩展了 <code>.IDeploy</code> 模板作业。</li><li><code>variables</code>：覆盖了模板中定义的变量，为开发环境提供了具体的值。</li></ul></li><li><code>ssh_staging</code><ul><li>类似于 <code>ssh_dev</code>，但是将作业分配到 <code>deploy_to_staging</code> 阶段，并且设置了不同的环境变量，用于预生产环境。</li></ul></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><code>SERVER_PRIVATE_KEY</code>、<code>SERVER_USER</code>、<code>SERVER_URL</code>、<code>CI_REGISTRY_USER</code>、<code>CI_REGISTRY_PASSWORD</code> 和 <code>CI_REGISTRY</code> 需要在项目的 CI&#x2F;CD 设置中定义为受保护的变量，以确保安全。</li><li><code>-o StrictHostKeyChecking=no</code> 参数禁用了 SSH 连接时的严格主机密钥检查，这在自动化脚本中很常见，但可能会带来安全风险。</li><li><code>docker-compose down</code> 命令会停止并删除所有服务及其网络，这可能会导致数据丢失，因此请确保这是预期的行为。</li><li><code>export COMPOSE_PROJECT_NAME=$ENV</code> 和 <code>export APP_PORT=$APP_PORT</code> 命令设置了环境变量，这些变量需要在 <code>docker-compose.yml</code> 文件中被正确使用。<br><img src="https://image.camcad.cn/vscode/20240502153253.png" alt="20240502153253"><br><img src="https://image.camcad.cn/vscode/20240502154604.png" alt="20240502154604"></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.docker.com/compose/compose-file/">New to Docker Compose?</a></p><p><a href="https://docs.docker.com/compose/environment-variables/envvars/">Set or change pre-defined environment variables in Docker Compose</a></p><p><a href="https://www.youtube.com/watch?v=k9XmJTh0vk4&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=21">為你自己學 GitLab CI&#x2F;CD Day 21 - 部署 Staging 伺服器</a></p><p><a href="https://www.youtube.com/watch?v=yA9awgMzUL8&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=22">為你自己學 GitLab CI&#x2F;CD Day 22 - 整理重複的工作</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这个配置是自动化部署流程中通过 SSH 连接到远程服务器并执行 Docker Compose 命令的典型示例，适用于需要部署到不同环境的场景。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="http://example.com/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习16：部署docker image到服务器上</title>
    <link href="http://example.com/post/497256a2.html"/>
    <id>http://example.com/post/497256a2.html</id>
    <published>2024-05-02T12:19:59.000Z</published>
    <updated>2024-05-14T14:14:30.420Z</updated>
    
    <content type="html"><![CDATA[<p>目的是通过 SSH 连接到远程服务器并执行一系列部署命令。</p><span id="more"></span><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><figcaption><span>gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">stages:</span><br><span class="line">  - deploy</span><br><span class="line"></span><br><span class="line">ssh_server:</span><br><span class="line">  stage: deploy</span><br><span class="line">  tags:</span><br><span class="line">    - mydebian</span><br><span class="line">  before_script:</span><br><span class="line">    - <span class="built_in">eval</span> $(ssh-agent -s)</span><br><span class="line">    - ssh-add &lt;(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$DEV_SERVER_PRIVATE_KEY</span>&quot;</span>)</span><br><span class="line">  script:</span><br><span class="line">    - scp -o StrictHostKeyChecking=no ./docker-compose.yml</span><br><span class="line">     <span class="variable">$DEV_SERVER_USER</span>@<span class="variable">$DEV_SERVER_URL</span>:/<span class="variable">$DEV_SERVER_USER</span></span><br><span class="line">    - ssh -o StrictHostKeyChecking=no <span class="variable">$DEV_SERVER_USER</span>@<span class="variable">$DEV_SERVER_URL</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">     docker login -u <span class="variable">$CI_REGISTRY_USER</span> -p <span class="variable">$CI_REGISTRY_PASSWORD</span> <span class="variable">$CI_REGISTRY</span> &amp;&amp;</span></span><br><span class="line"><span class="string">     apt-get install docker-compose &amp;&amp;</span></span><br><span class="line"><span class="string">     docker-compose down &amp;&amp;</span></span><br><span class="line"><span class="string">     docker-compose up -d</span></span><br><span class="line"><span class="string">     &quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  myCat:</span><br><span class="line">    image: registry.camcad.cn:9528/ci-cd/shopping</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;80:8000&quot;</span></span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure><h3 id="阶段-Stages"><a href="#阶段-Stages" class="headerlink" title="阶段 (Stages)"></a>阶段 (Stages)</h3><ul><li><code>deploy</code>：定义了一个名为 <code>deploy</code> 的阶段，通常用于部署过程中。</li></ul><h3 id="作业-Jobs"><a href="#作业-Jobs" class="headerlink" title="作业 (Jobs)"></a>作业 (Jobs)</h3><ul><li><code>ssh_server</code><ul><li><code>stage</code>：将作业分配到 <code>deploy</code> 阶段。</li><li><code>tags</code>：指定了作业需要在具有 <code>mydebian</code> 标签的 Runner 上运行。</li></ul></li></ul><h3 id="before-script"><a href="#before-script" class="headerlink" title="before_script"></a>before_script</h3><ul><li><code>eval $(ssh-agent -s)</code>：初始化 SSH 代理。</li><li><code>ssh-add &lt;(echo &quot;$DEV_SERVER_PRIVATE_KEY&quot;)</code>：将远程服务器的私钥添加到 SSH 代理中，以便后续的 SSH 连接可以使用该私钥进行认证。</li></ul><h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><ul><li><code>scp -o StrictHostKeyChecking=no ./docker-compose.yml $DEV_SERVER_USER@$DEV_SERVER_URL:/$DEV_SERVER_USER</code>：使用 <code>scp</code> 命令将本地的 <code>docker-compose.yml</code> 文件复制到远程服务器的指定用户目录下。</li><li><code>ssh -o StrictHostKeyChecking=no $DEV_SERVER_USER@$DEV_SERVER_URL &quot;...&quot;</code>：通过 SSH 连接到远程服务器并执行多个命令：<ul><li><code>docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY</code>：使用 GitLab 提供的用户名和密码登录到 GitLab Container Registry。</li><li><code>apt-get install docker-compose</code>：在远程服务器上安装 Docker Compose。</li><li><code>docker-compose down</code>：停止并删除所有由 <code>docker-compose.yml</code> 定义的容器、网络和卷。</li><li><code>docker-compose up -d</code>：在后台启动（或重启）所有服务。</li></ul></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>请确保所有使用的环境变量（如 <code>$DEV_SERVER_PRIVATE_KEY</code>, <code>$DEV_SERVER_USER</code>, <code>$DEV_SERVER_URL</code>, <code>$CI_REGISTRY_USER</code>, <code>$CI_REGISTRY_PASSWORD</code>, <code>$CI_REGISTRY</code>）都已经在 GitLab CI&#x2F;CD 变量中正确设置。</li><li>使用 <code>-o StrictHostKeyChecking=no</code> 可以避免 SSH 连接时的主机密钥检查，这在自动化脚本中很常见，但可能会带来安全风险，因为它允许连接到未知的主机。</li><li>请确保远程服务器的 Docker 服务已经启动，因为 <code>docker-compose</code> 命令依赖于 Docker 服务。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.docker.com/compose/compose-file/">New to Docker Compose?</a></p><p><a href="https://www.youtube.com/watch?v=eZ_ht6IRUx4&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=20">為你自己學 GitLab CI&#x2F;CD Day 20 - 部署 Image 到伺服器上</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;目的是通过 SSH 连接到远程服务器并执行一系列部署命令。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="http://example.com/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习15：使用SSH连接服务器</title>
    <link href="http://example.com/post/3e2c2269.html"/>
    <id>http://example.com/post/3e2c2269.html</id>
    <published>2024-05-02T00:26:29.000Z</published>
    <updated>2024-05-14T14:14:30.420Z</updated>
    
    <content type="html"><![CDATA[<p>该作业的目的是通过 SSH 连接到一个远程服务器并执行命令。</p><span id="more"></span><h3 id="生成ssh-keygen"><a href="#生成ssh-keygen" class="headerlink" title="生成ssh-keygen"></a>生成ssh-keygen</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f 存放位置</span><br><span class="line"></span><br><span class="line">ssh-keygen -f ~/.ssh/gitlab-ci-cd</span><br></pre></td></tr></table></figure><p><strong>1、将私钥（PRIVATE KEY）添加到CI-CD环境变量中</strong><br><strong>2、将公钥（PUBLIC KEY）添加到被连接服务器<code>~/.ssh/authorized_keys</code>文件中</strong></p><h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p><img src="https://image.camcad.cn/vscode/20240502003921.png" alt="20240502003921"></p><h3 id="gitlab-ci-yml-脚本"><a href="#gitlab-ci-yml-脚本" class="headerlink" title="gitlab-ci.yml 脚本"></a>gitlab-ci.yml 脚本</h3><figure class="highlight bash"><figcaption><span>gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">stages:</span><br><span class="line">  - connection</span><br><span class="line"></span><br><span class="line">ssh_server:</span><br><span class="line">  stage: connection</span><br><span class="line">  tags:</span><br><span class="line">    - mydebian</span><br><span class="line">  before_script:</span><br><span class="line">    - <span class="built_in">eval</span> $(ssh-agent -s)</span><br><span class="line">    - ssh-add &lt;(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$DEV_SERVER_PRIVATE_KEY</span>&quot;</span>)</span><br><span class="line">  script:</span><br><span class="line">    - ssh -o StrictHostKeyChecking=no <span class="variable">$DEV_SERVER_USER</span>@<span class="variable">$DEV_SERVER_URL</span> <span class="string">&quot;ls -al&quot;</span></span><br></pre></td></tr></table></figure><p>以下是配置的详细说明：</p><ol><li><p><code>stages</code>: 定义了一个名为 <code>connection</code> 的阶段，这个名称可以根据实际情况自定义。</p></li><li><p><code>ssh_server</code>: 定义了一个作业，它将在 <code>connection</code> 阶段执行。</p></li><li><p><code>tags</code>: 指定了作业需要在具有 <code>mydebian</code> 标签的 Runner 上运行。这意味着只有配置了 <code>mydebian</code> 标签的 GitLab Runner 会执行这个作业。</p></li><li><p><code>before_script</code>:</p><ul><li><code>eval $(ssh-agent -s)</code>: 初始化一个新的 SSH 会话并启动 SSH 代理。<code>eval</code> 命令用于执行由 <code>ssh-agent -s</code> 生成的命令，<code>-s</code> 参数表示在启动时不输出任何信息。</li><li><code>ssh-add &lt;(echo &quot;$DEV_SERVER_PRIVATE_KEY&quot;)</code>: 将 SSH 私钥添加到 SSH 代理中。这里使用了进程替换 <code>&lt;()</code> 来传递私钥内容，避免了将私钥写入文件，增加了安全性。</li></ul></li><li><p><code>script</code>:</p><ul><li><code>ssh -o StrictHostKeyChecking=no $DEV_SERVER_USER@$DEV_SERVER_URL &quot;ls -al&quot;</code>: 通过 SSH 连接到远程服务器并执行 <code>ls -al</code> 命令。这里使用了 <code>-o StrictHostKeyChecking=no</code> 选项来禁用严格的主机键检查，这样做可以避免在首次连接时出现警告或错误，但在生产环境中可能会带来安全风险，因为它允许连接到未验证的主机。</li></ul></li></ol><p>请注意以下几点：</p><ul><li>确保 <code>DEV_SERVER_PRIVATE_KEY</code>、<code>DEV_SERVER_USER</code> 和 <code>DEV_SERVER_URL</code> 这些环境变量已经在项目的 CI&#x2F;CD 设置中被正确配置，并且它们是受保护的，以防止敏感信息泄露。</li><li>禁用 <code>StrictHostKeyChecking</code> 可以简化自动化脚本，但请确保您信任目标主机，或者在生产环境中使用更安全的 SSH 配置。</li><li>作业中的 <code>ssh-agent</code> 和 <code>ssh-add</code> 命令依赖于 Runner 机器上安装了 SSH 客户端和相关的密钥管理工具。<br><img src="https://image.camcad.cn/vscode/20240502005618.png" alt="20240502005618"></li></ul><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>错误信息 <code>/root/.ssh/config line 9: garbage at end of line</code>指出在 SSH 配置文件 <code>/root/.ssh/config</code> 的第 9 行存在一些无法识别的内容。这通常是因为该行的格式不正确或者包含了不必要的字符。<br><img src="https://image.camcad.cn/vscode/20240502004939.png" alt="20240502004939"><br><strong>修改 Runner 服务器<code>~/.ssh/config</code>配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、打开你的SSH配置文件，通常是 ~/.ssh/config。</span><br><span class="line"></span><br><span class="line">2、找到第9行并检查末尾是否有任何无效字符，如空格、制表符、注释等。请注意，注释应该始终放在行的开头而不是末尾。</span><br><span class="line"></span><br><span class="line">3、如果有任何无效字符，请将其删除并保存文件。</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.youtube.com/watch?v=5r8cd1ygtR0&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=19">為你自己學 GitLab CI&#x2F;CD Day 19 - 使用 SSH 連線伺服器</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;该作业的目的是通过 SSH 连接到一个远程服务器并执行命令。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="http://example.com/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习14：使用docker compose</title>
    <link href="http://example.com/post/f916f96d.html"/>
    <id>http://example.com/post/f916f96d.html</id>
    <published>2024-05-01T21:08:51.000Z</published>
    <updated>2024-05-14T14:14:30.420Z</updated>
    
    <content type="html"><![CDATA[<p>Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。它是一个 YAML 文件，通常命名为 <code>docker-compose.yml</code>，用于配置应用程序的服务、网络和卷。通过使用 Docker Compose，你可以轻松地一起启动、停止和管理多个容器，而不需要逐个使用 Docker 命令行。</p><span id="more"></span><figure class="highlight docker"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.9&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  myCat:</span><br><span class="line">    image: registry.camcad.cn:<span class="number">9528</span>/ci-cd/shopping</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line">    restart: always</span><br></pre></td></tr></table></figure><p>您提供的是一个 <code>docker-compose.yml</code> 文件的内容，它用于定义一个 Docker Compose 项目。这个文件遵循版本 <code>3.9</code> 的格式规范，定义了一个名为 <code>myCat</code> 的服务。下面是对您提供的内容的解释：</p><ol><li><p><code>version: &#39;3.9&#39;</code>：指定了 Docker Compose 文件的版本，这有助于 Docker Compose 确定如何解析文件中的其他内容。</p></li><li><p><code>services</code>：这是定义服务的根关键字。在 Docker Compose 中，每个服务基本上对应于一个容器。</p></li><li><p><code>myCat</code>：这是服务的名称，您可以根据需要选择任何名称。</p></li><li><p><code>image: registry.camcad.cn:9528/ci-cd/shopping</code>：指定了服务使用的 Docker 镜像。这里使用的是一个私有仓库的地址，该仓库位于 <code>registry.camcad.cn</code> 上，端口为 <code>9528</code>，镜像的路径是 <code>ci-cd/shopping</code>。</p></li><li><p><code>ports</code>：定义了容器的端口映射。<code>- &quot;8000:8000&quot;</code> 表示将容器内部的 8000 端口映射到宿主机的 8000 端口。这意味着，当容器运行时，您可以通过访问宿主机的 8000 端口来与容器通信。</p></li><li><p><code>restart: always</code>：这是一个重启策略，它指定了容器在退出时应该如何重启。<code>always</code> 表示无论退出状态如何，容器总是重新启动。</p></li></ol><p>要使用这个 <code>docker-compose.yml</code> 文件启动服务，您需要在文件所在的目录下打开命令行或终端，然后运行以下命令：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>这将启动 <code>myCat</code> 服务，并将其绑定到宿主机的 8000 端口。如果您希望在后台运行服务，可以使用 <code>-d</code> 选项：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><code>docker-compose down</code>用于停止、删除容器、网络、卷以及图像，从而清理和重置整个Docker Compose项目。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.docker.com/compose/compose-file/">New to Docker Compose?</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。它是一个 YAML 文件，通常命名为 &lt;code&gt;docker-compose.yml&lt;/code&gt;，用于配置应用程序的服务、网络和卷。通过使用 Docker Compose，你可以轻松地一起启动、停止和管理多个容器，而不需要逐个使用 Docker 命令行。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="http://example.com/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/tags/CI-CD/"/>
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg常用命令</title>
    <link href="http://example.com/post/3c4e255.html"/>
    <id>http://example.com/post/3c4e255.html</id>
    <published>2024-04-29T16:10:06.000Z</published>
    <updated>2024-05-14T14:14:30.424Z</updated>
    
    <content type="html"><![CDATA[<p>FFmpeg是一个非常强大的开源工具，它可以用来处理视频和音频文件。以下是一些常用的FFmpeg命令，这些命令可以帮助你完成各种视频和音频处理任务：</p><span id="more"></span><p><strong>音频转码（m4a转mp3）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;目标文件.m4a&quot;</span> -y -acodec libmp3lame -aq 0 <span class="string">&quot;输出文件.mp3&quot;</span></span><br></pre></td></tr></table></figure><p><strong>转换视频格式</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 output.avi</span><br></pre></td></tr></table></figure><p><strong>提取音频</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i video.mp4 -q:a 0 -map a audio.mp3</span><br></pre></td></tr></table></figure><p><strong>视频截图</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i video.mp4 -ss 00:00:10 -vframes 1 image.jpg</span><br></pre></td></tr></table></figure><p><strong>裁剪视频</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -filter:v <span class="string">&quot;crop=w:h:x:y&quot;</span> output.mp4</span><br></pre></td></tr></table></figure><p><strong>视频合并</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i <span class="string">&quot;concat:part1.mp4|part2.mp4&quot;</span> -c copy final.mp4</span><br></pre></td></tr></table></figure><p><strong>调整视频码率</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -b:v 500k output.mp4</span><br></pre></td></tr></table></figure><p><strong>视频转GIF</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -ss 00:00:10 -t 00:00:05 -s 320x240 -pix_fmt rgb24 out.gif</span><br></pre></td></tr></table></figure><p><strong>视频减速播放</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -filter:v <span class="string">&quot;setpts=0.5*PTS&quot;</span> output.mp4</span><br></pre></td></tr></table></figure><p><strong>视频旋转</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vf <span class="string">&quot;transpose=1&quot;</span> output.mp4</span><br></pre></td></tr></table></figure><p><strong>视频加水印</strong>：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -i watermark.png -filter_complex <span class="string">&quot;overlay=10:10&quot;</span> output.mp4</span><br></pre></td></tr></table></figure><br><strong>视频压缩</strong>：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vf <span class="string">&quot;scale=-2:720&quot;</span> -c:a copy -c:v libx264 -crf 23 output.mp4</span><br></pre></td></tr></table></figure><br><strong>音频视频同步</strong>：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i desynchronized_video.mp4 -af <span class="string">&quot;adelay=-0.5&quot;</span> synchronized.mp4</span><br></pre></td></tr></table></figure><br><strong>提取视频的某个时间段</strong>：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -ss 00:00:10 -t 00:01:00 -c copy output.mp4</span><br></pre></td></tr></table></figure><br><strong>视频帧率调整</strong>：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -r 30 output.mp4</span><br></pre></td></tr></table></figure><br><strong>音频通道转换</strong>：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mp3 -ac 2 output.mp3</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;FFmpeg是一个非常强大的开源工具，它可以用来处理视频和音频文件。以下是一些常用的FFmpeg命令，这些命令可以帮助你完成各种视频和音频处理任务：&lt;/p&gt;</summary>
    
    
    
    <category term="辅助" scheme="http://example.com/categories/%E8%BE%85%E5%8A%A9/"/>
    
    
    <category term="ffmpeg" scheme="http://example.com/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习13：自动递增docker image版本</title>
    <link href="http://example.com/post/e57fb111.html"/>
    <id>http://example.com/post/e57fb111.html</id>
    <published>2024-04-28T23:54:09.000Z</published>
    <updated>2024-05-14T14:14:30.420Z</updated>
    
    <content type="html"><![CDATA[<p>Gitlab实现Container Registry上传的image自动递增版本号。</p><span id="more"></span><figure class="highlight yaml"><figcaption><span>.gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">publish</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build_docker_image:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mydebian</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="string">jq</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">export</span> <span class="string">IMAGE_VERSION=$(jq</span> <span class="string">-r</span> <span class="string">&#x27;.version&#x27;</span> <span class="string">deno.json)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">export</span> <span class="string">CUT_COMMIT_SHA=$(echo</span> <span class="string">$CI_COMMIT_SHA</span> <span class="string">|</span> <span class="string">cut</span> <span class="string">-c</span> <span class="number">1</span><span class="number">-8</span><span class="string">)</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-f</span> <span class="string">./DockerFile</span> <span class="string">.</span> <span class="string">-t</span> <span class="string">$CI_REGISTRY_IMAGE:$IMAGE_VERSION-build-$CUT_COMMIT_SHA</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">tag</span> <span class="string">$CI_REGISTRY_IMAGE:$IMAGE_VERSION-build-$CUT_COMMIT_SHA</span> <span class="string">$CI_REGISTRY_IMAGE:latest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">push-to-registry:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">publish</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mydebian</span></span><br><span class="line">  <span class="attr">needs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job:</span> <span class="string">build_docker_image</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">export</span> <span class="string">IMAGE_VERSION=$(jq</span> <span class="string">-r</span> <span class="string">&#x27;.version&#x27;</span> <span class="string">deno.json)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">export</span> <span class="string">CUT_COMMIT_SHA=$(echo</span> <span class="string">$CI_COMMIT_SHA</span> <span class="string">|</span> <span class="string">cut</span> <span class="string">-c</span> <span class="number">1</span><span class="number">-8</span><span class="string">)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">$CI_REGISTRY_USER</span> <span class="string">-p</span> <span class="string">$CI_REGISTRY_PASSWORD</span> <span class="string">$CI_REGISTRY</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$CI_REGISTRY_IMAGE:$IMAGE_VERSION-build-$CUT_COMMIT_SHA</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$CI_REGISTRY_IMAGE:latest</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>deno.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;V0.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    ......</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这个配置定义了两个阶段（<code>build</code> 和 <code>publish</code>）以及两个与之相关的作业（<code>build_docker_image</code> 和 <code>push-to-registry</code>）。下面是对您提供的配置的解释：</p><h3 id="阶段-Stages"><a href="#阶段-Stages" class="headerlink" title="阶段 (Stages)"></a>阶段 (Stages)</h3><ul><li><code>stages</code>: 定义了 CI&#x2F;CD 流水线中的不同阶段。在这个例子中，有两个阶段：<code>build</code> 和 <code>publish</code>。</li></ul><h3 id="作业-build-docker-image"><a href="#作业-build-docker-image" class="headerlink" title="作业: build_docker_image"></a>作业: build_docker_image</h3><ul><li><code>stage</code>: 指定作业属于哪个阶段，在这种情况下是 <code>build</code>。</li><li><code>tags</code>: 指定了运行此作业所需的标签，这里使用的是 <code>mydebian</code>，对应于具有 Debian 操作系统的特定 Runner。</li><li><code>before_script</code>: 在执行 <code>script</code> 部分命令之前运行的脚本。这里安装了 <code>jq</code> 工具，用于解析 JSON，并设置了两个环境变量 <code>IMAGE_VERSION</code> 和 <code>CUT_COMMIT_SHA</code>。</li><li><code>script</code>: 定义了作业的实际命令。这里使用了 Docker 来构建一个镜像，并给它打上两个标签：一个是带有版本和短提交哈希的标签，另一个是 <code>latest</code> 标签。</li></ul><h3 id="作业-push-to-registry"><a href="#作业-push-to-registry" class="headerlink" title="作业: push-to-registry"></a>作业: push-to-registry</h3><ul><li><code>stage</code>: 指定作业属于哪个阶段，在这种情况下是 <code>publish</code>。</li><li><code>tags</code>: 同样指定了运行此作业所需的标签。</li><li><code>needs</code>: 定义了此作业的依赖关系，它必须在 <code>build_docker_image</code> 作业完成后才能运行。</li><li><code>before_script</code>: 在执行 <code>script</code> 部分命令之前运行的脚本。这里设置了与 <code>build_docker_image</code> 作业相同的环境变量，并执行了 Docker 登录命令。</li><li><code>script</code>: 定义了将镜像推送到容器镜像仓库的命令。</li></ul><p>这个配置文件的目的是自动化 Docker 镜像的构建和推送过程。首先，它会构建一个新的 Docker 镜像，然后，如果 <code>build_docker_image</code> 作业成功，<code>push-to-registry</code> 作业将会把镜像推送到配置的容器镜像仓库。</p><p>请注意，这个配置依赖于一些环境变量，如 <code>CI_REGISTRY_IMAGE</code>, <code>CI_COMMIT_SHA</code>, <code>CI_REGISTRY_USER</code>, <code>CI_REGISTRY_PASSWORD</code> 等，这些通常由 CI 系统提供。</p><p><img src="https://image.camcad.cn/vscode/20240429000219.png" alt="20240429000219"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.gitlab.com/ee/ci/variables/predefined_variables.html">Predefined CI&#x2F;CD variables reference</a></p><p><a href="https://semver.org/lang/zh-CN/">语义化版本控制规范（SemVer）</a></p><p><a href="https://www.youtube.com/watch?v=jG3Ne543Ua0&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=17">為你自己學 GitLab CI&#x2F;CD Day 17 - 專案演練 part 4 自動遞增 Image 版號</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Gitlab实现Container Registry上传的image自动递增版本号。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="http://example.com/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习12：将工程推上Gitlab Container Registry</title>
    <link href="http://example.com/post/4df39e.html"/>
    <id>http://example.com/post/4df39e.html</id>
    <published>2024-04-28T21:39:26.000Z</published>
    <updated>2024-05-14T14:14:30.420Z</updated>
    
    <content type="html"><![CDATA[<p>GitLab Container Registry 是 GitLab 提供的一个内置功能，它允许用户在 GitLab 的项目中直接存储和管理 Docker 镜像。每个项目都可以拥有自己的空间来存储其 Docker 镜像，这使得开发者可以轻松地与团队成员共享镜像，并且可以在 CI&#x2F;CD 管道中使用这些镜像进行自动化测试和部署。</p><span id="more"></span><figure class="highlight yaml"><figcaption><span>.gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">publish</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build_docker_image:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mydebian</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-f</span> <span class="string">./DockerFile</span> <span class="string">.</span> <span class="string">-t</span> <span class="string">$CI_REGISTRY_IMAGE:V0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">push-to-registry:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">publish</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mydebian</span></span><br><span class="line">  <span class="attr">needs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job:</span> <span class="string">build_docker_image</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">$CI_REGISTRY_USER</span> <span class="string">-p</span> <span class="string">$CI_REGISTRY_PASSWORD</span> <span class="string">$CI_REGISTRY</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">$CI_REGISTRY_IMAGE:V0.0.1</span></span><br></pre></td></tr></table></figure><p><a href="https://docs.gitlab.com/ee/ci/variables/predefined_variables.html">gitlab 预定义的CI&#x2F;CD变量参考</a></p><ul><li>1、<code>docker build</code>命令来构建一个Docker镜像。</li><li>2、<code>docker login</code>命令来登录到 GitLab Container Registry 中。</li><li>3、<code>docker push</code>命令将构建好的镜像推送到 GitLab Container Registry 中。</li></ul><p><strong>CI_REGISTRY_IMAGE</strong>：它指向当前项目的容器镜像仓库地址。<br><strong>CI_REGISTRY_USER</strong>：它用于指定容器镜像仓库的用户名。<br><strong>CI_REGISTRY_PASSWORD</strong>：这个变量用于存储访问 GitLab Container Registry 所需的密码。<br><strong>CI_REGISTRY</strong>：它代表了当前项目的容器镜像仓库的URL。</p><p><img src="https://image.camcad.cn/vscode/20240428215815.png" alt="20240428215815"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.gitlab.com/ee/ci/variables/predefined_variables.html">Predefined CI&#x2F;CD variables reference</a></p><p><a href="https://www.youtube.com/watch?v=ffl6KQcwh-M&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=16">為你自己學 GitLab CI&#x2F;CD Day 16 - 專案演練 part 3 推上 Docker Registry</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;GitLab Container Registry 是 GitLab 提供的一个内置功能，它允许用户在 GitLab 的项目中直接存储和管理 Docker 镜像。每个项目都可以拥有自己的空间来存储其 Docker 镜像，这使得开发者可以轻松地与团队成员共享镜像，并且可以在 CI&amp;#x2F;CD 管道中使用这些镜像进行自动化测试和部署。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="http://example.com/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习11：把工程打包成docker image</title>
    <link href="http://example.com/post/d092dd69.html"/>
    <id>http://example.com/post/d092dd69.html</id>
    <published>2024-04-26T21:20:12.000Z</published>
    <updated>2024-05-14T14:14:30.420Z</updated>
    
    <content type="html"><![CDATA[<p>Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><span id="more"></span><h3 id="decker基础操作"><a href="#decker基础操作" class="headerlink" title="decker基础操作"></a>decker基础操作</h3><p><a href="https://notes.camcad.cn/post/c1d6c914.html">https://notes.camcad.cn/post/c1d6c914.html</a></p><h3 id="gitlab-ci-yml"><a href="#gitlab-ci-yml" class="headerlink" title="gitlab-ci.yml"></a>gitlab-ci.yml</h3><figure class="highlight yml"><figcaption><span>gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">testing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">run_tests:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">denoland/deno:latest</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">deno</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build_docker_image:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mydebian</span></span><br><span class="line">  <span class="attr">needs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job:</span> <span class="string">run_tests</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-f</span> <span class="string">./DockerFile</span> <span class="string">.</span> <span class="string">-t</span> <span class="string">hellocat</span></span><br></pre></td></tr></table></figure><h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><figure class="highlight docker"><figcaption><span>DockerFile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> denoland/deno:alpine-<span class="number">1.26</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> deno cache main.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;run&quot;</span>,<span class="string">&quot;--allow-all&quot;</span>,<span class="string">&quot;main.ts&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p><strong>FROM</strong>：这里使用了Deno的Alpine版本 1.26.0 作为基础。<br><strong>WORKDIR</strong>：设置工作目录为<code>/app</code>，之后的指令将在这个目录下执行。<br><strong>COPY</strong>：将当前目录中的所有文件复制到容器中的<code>/app</code>目录下。<br><strong>EXPOSE</strong>：指定容器将监听的端口号为 8000。<br><strong>RUN</strong>：在容器中运行<code>deno cache</code>命令<br><strong>CMD</strong>：指定容器启动时的默认命令。在这里，它运行了<code>main.ts</code>文件，并且使用了<code>--allow-all</code>参数，表示允许所有的权限请求。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.youtube.com/watch?v=8d26a90UR9s&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=15">為你自己學 GitLab CI&#x2F;CD Day 15 - 專案演練 part 2 把專案打包成 Docker Image</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="http://example.com/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="http://example.com/post/c1d6c914.html"/>
    <id>http://example.com/post/c1d6c914.html</id>
    <published>2024-04-23T22:37:02.000Z</published>
    <updated>2024-05-14T14:14:30.424Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 是一个开源的容器化平台，它允许开发者将应用及其依赖打包到一个轻量级、可移植的容器中，然后可以在任何支持 Docker 的系统上运行。</p><span id="more"></span><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p><a href="https://docs.docker.com/desktop/install/windows-install/">https://docs.docker.com/desktop/install/windows-install/</a></p><p><a href="https://docs.docker.com/engine/install/debian/">https://docs.docker.com/engine/install/debian/</a></p><p><strong>方式一：自定义安装路径</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Start-Process -FilePath &#x27;Docker Desktop Installer.exe&#x27; -Wait -ArgumentList &quot;install --installation-dir=D:\ProgramData\Docker&quot;</span><br></pre></td></tr></table></figure><p><strong>方式二：创建符号链接</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mklink /j &quot;C:\Program Files\Docker&quot; &quot;D:\ProgramData\Docker&quot;</span><br></pre></td></tr></table></figure><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install docker.io</span><br><span class="line">$ sudo systemctl start docker</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">查看是否安装成功</span><br><span class="line"> </span><br><span class="line">$ docker -v</span><br><span class="line">Docker version 17.12.1-ce, build 7390fc6</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p><strong>docker login</strong>: 登录到 Docker Hub。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login -u 用户 -p 密码 服务器:端口</span><br></pre></td></tr></table></figure><p><strong>docker build</strong>：使用 Dockerfile 创建一个镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker build -t my_image .</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker build -f DockerFile文件路径 . -t 镜像名称</span></span><br><span class="line">docker build -f ./DockerFile . -t hellocat</span><br></pre></td></tr></table></figure><p><code>-t</code> 允许你为镜像指定一个标签，<code>.</code> 表示当前目录。</p><p><strong>docker run</strong>：运行一个容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name my_container my_image</span><br><span class="line"></span><br><span class="line">docker run -p 本地端口:容器端口 镜像名称</span><br></pre></td></tr></table></figure><p><code>-d</code> 表示以 detached 模式运行容器，<code>--name</code> 允许你为容器指定一个名字，而 <code>my_image</code> 是你要使用的镜像。</p><p><strong>docker stop</strong>：停止一个或多个正在运行的容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker stop my_container</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止所有的容器</span></span><br><span class="line">docker stop $(docker ps -aq)</span><br></pre></td></tr></table></figure><p><strong>docker start</strong>：启动一个或多个已经被停止的容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start my_container</span><br></pre></td></tr></table></figure><p><strong>docker rm</strong>：删除一个或多个容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> my_container</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有的容器</span></span><br><span class="line">docker <span class="built_in">rm</span> $(docker ps -aq)</span><br></pre></td></tr></table></figure><p><strong>docker rmi</strong>：删除一个或多个镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rmi my_image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有的镜像</span></span><br><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><p><strong>docker ps</strong>：列出当前正在运行的容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><strong>docker images</strong>：列出本地主机上的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><strong>docker images | grep my_image</strong>：查询名称镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images | grep my_image</span><br></pre></td></tr></table></figure><p><strong>docker pull</strong>：从镜像仓库拉取一个镜像或仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull my_image</span><br></pre></td></tr></table></figure><p><strong>docker push</strong>：将一个镜像或仓库推送到镜像仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push my_image</span><br></pre></td></tr></table></figure><p><strong>docker exec</strong>：在运行的容器中执行命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it my_container /bin/bash</span><br></pre></td></tr></table></figure><p><code>-it</code> 参数让 Docker 提供一个交互式终端。</p><p><strong>docker logs</strong>：获取容器的日志。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs my_container</span><br></pre></td></tr></table></figure><p><strong>docker network</strong>：管理 Docker 网络设置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p><strong>docker volume</strong>：管理 Docker 数据卷。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create my_volume</span><br></pre></td></tr></table></figure><p><strong>docker-compose</strong>：使用 Docker Compose 工具管理多容器 Docker 应用程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装软件</span></span><br><span class="line">sudo apt-get install docker-compose</span><br><span class="line"></span><br><span class="line">docker-compose up</span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于停止、删除容器、网络、卷以及图像，从而清理和重置整个Docker Compose项目。</span></span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><p><code>-d</code> 表示后台运行。</p><p> <strong>docker builder prune</strong>：清理 Docker 构建缓存。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker builder prune</span><br></pre></td></tr></table></figure><h3 id="附加权限"><a href="#附加权限" class="headerlink" title="附加权限"></a>附加权限</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usermod -aG docker gitlab-runner</span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><p><img src="https://image.camcad.cn/vscode/20240425210824.png" alt="20240425210824"></p><h3 id="使用-i-port-来显示与指定端口相关的网络信息"><a href="#使用-i-port-来显示与指定端口相关的网络信息" class="headerlink" title="使用-i:port 来显示与指定端口相关的网络信息"></a>使用-i:port 来显示与指定端口相关的网络信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsof -i :端口</span><br><span class="line"></span><br><span class="line">lsof -i :9000</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.docker.com/reference/cli/docker/">https://docs.docker.com/reference/cli/docker/</a></p><p><a href="https://docs.docker.com/">https://docs.docker.com/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Docker 是一个开源的容器化平台，它允许开发者将应用及其依赖打包到一个轻量级、可移植的容器中，然后可以在任何支持 Docker 的系统上运行。&lt;/p&gt;</summary>
    
    
    
    <category term="辅助" scheme="http://example.com/categories/%E8%BE%85%E5%8A%A9/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习10：debian系统注册gitlab runner</title>
    <link href="http://example.com/post/ec1e8394.html"/>
    <id>http://example.com/post/ec1e8394.html</id>
    <published>2024-04-22T22:50:52.000Z</published>
    <updated>2024-05-14T14:14:30.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装GitLab-Runner"><a href="#安装GitLab-Runner" class="headerlink" title="安装GitLab Runner"></a>安装GitLab Runner</h3><p><a href="https://docs.gitlab.com/runner/install/linux-repository.html">https://docs.gitlab.com/runner/install/linux-repository.html</a><br>使用官方GitLab存储库安装GitLab Runner。<br>For Debian&#x2F;Ubuntu&#x2F;Mint:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -L &quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh&quot; | sudo bash</span><br><span class="line"></span><br><span class="line">sudo apt-get install gitlab-runner</span><br></pre></td></tr></table></figure><span id="more"></span><p>For RHEL&#x2F;CentOS&#x2F;Fedora:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -L &quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh&quot; | sudo bash</span><br><span class="line"></span><br><span class="line">sudo yum install gitlab-runner</span><br></pre></td></tr></table></figure><h3 id="查询软件是否存在"><a href="#查询软件是否存在" class="headerlink" title="查询软件是否存在"></a>查询软件是否存在</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which gitlab-runner</span><br></pre></td></tr></table></figure><h3 id="注册runner"><a href="#注册runner" class="headerlink" title="注册runner"></a>注册runner</h3><p><a href="https://docs.gitlab.com/runner/register/">https://docs.gitlab.com/runner/register/</a><br>runner注册是将runner与一个或多个GitLab实例链接起来的过程。您必须注册runner，以便它可以从GitLab实例中获取作业。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner register</span><br></pre></td></tr></table></figure><p><img src="https://image.camcad.cn/vscode/20240422231307.png" alt="20240422231307"><br><img src="https://image.camcad.cn/vscode/20240422231432.png" alt="20240422231432"></p><h3 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner help</span><br></pre></td></tr></table></figure><h3 id="启动Runner"><a href="#启动Runner" class="headerlink" title="启动Runner"></a>启动Runner</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner start</span><br></pre></td></tr></table></figure><h3 id="查看Runner状态"><a href="#查看Runner状态" class="headerlink" title="查看Runner状态"></a>查看Runner状态</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner status</span><br></pre></td></tr></table></figure><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight yml"><figcaption><span>gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">testing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">image:</span> <span class="string">alpine:latest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;构建项目...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_unit_testing:</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mydebian</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">uname</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hostname</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;单元测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;上线部署...&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://image.camcad.cn/vscode/20240422233617.png" alt="20240422233617"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.youtube.com/watch?v=wRXBztn6OkE&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=11">為你自己學 GitLab CI&#x2F;CD Day 11 - 在本機的 GitLab Runner</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;安装GitLab-Runner&quot;&gt;&lt;a href=&quot;#安装GitLab-Runner&quot; class=&quot;headerlink&quot; title=&quot;安装GitLab Runner&quot;&gt;&lt;/a&gt;安装GitLab Runner&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/runner/install/linux-repository.html&quot;&gt;https://docs.gitlab.com/runner/install/linux-repository.html&lt;/a&gt;&lt;br&gt;使用官方GitLab存储库安装GitLab Runner。&lt;br&gt;For Debian&amp;#x2F;Ubuntu&amp;#x2F;Mint:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -L &amp;quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh&amp;quot; | sudo bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install gitlab-runner&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="gitlab" scheme="http://example.com/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习09：gitlab runner与executor</title>
    <link href="http://example.com/post/ae4a6896.html"/>
    <id>http://example.com/post/ae4a6896.html</id>
    <published>2024-04-21T14:51:23.000Z</published>
    <updated>2024-05-14T14:14:30.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h3><p><a href="https://docs.gitlab.com/runner/">https://docs.gitlab.com/runner/</a><br><a href="https://docs.gitlab.com/runner/">GitLab Runner</a>是一个与GitLab CI&#x2F;CD一起在管道中运行作业的应用程序。它可以在不同的操作系统和平台上运行，例如 Linux、Windows 和 macOS，并且可以通过 Docker 和 Kubernetes 等容器化技术运行。</p><span id="more"></span><p>Runner 主要负责接收作业并在本地或远程执行它们。在运行作业时，Runner 可以使用不同的执行器（executor）来提供作业执行环境。执行器定义了作业将被执行的方式，例如在本地机器上运行、在 Docker 容器中运行或者在 Kubernetes 集群中运行。</p><h3 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h3><p><a href="https://docs.gitlab.com/runner/executors/">https://docs.gitlab.com/runner/executors/</a><br>GitLab Runner实现了许多可用于在不同环境中运行构建的执行器。</p><h3 id="以下是-GitLab-Runner-支持的一些Executor："><a href="#以下是-GitLab-Runner-支持的一些Executor：" class="headerlink" title="以下是 GitLab Runner 支持的一些Executor："></a>以下是 GitLab Runner 支持的一些Executor：</h3><p><img src="https://image.camcad.cn/vscode/20240421204523.png" alt="20240421204523"><br><strong>Shell Executor</strong>：Shell 执行器是最简单的执行器，它在 Runner 所在的本地机器上执行作业脚本。这种执行器不需要额外的配置，但是它的扩展性有限，因为它只能在单个机器上运行。<br><strong>Docker Executor</strong>：Docker 执行器将作业运行在 Docker 容器中，允许作业在隔离的环境中执行。这种执行器使得作业的环境更加可控，并且可以方便地运行在不同的操作系统和软件环境中。<br><strong>Kubernetes Executor</strong>：Kubernetes 执行器允许作业在 Kubernetes 集群中运行，这使得作业可以在自动扩展的容器环境中执行，并且可以更好地利用集群资源。<br><strong>SSH Executor</strong>：SSH 执行器允许作业通过 SSH 连接到远程服务器，并在远程服务器上执行作业脚本。这种执行器适用于需要在特定的远程环境中执行作业的场景。</p><h3 id="转轮执行流程"><a href="#转轮执行流程" class="headerlink" title="转轮执行流程"></a>转轮执行流程</h3><p>此图显示了如何注册运行程序以及如何请求和处理作业。它还显示了哪些操作使用注册、身份验证和作业令牌。<br><img src="https://image.camcad.cn/vscode/20240421203718.png" alt="20240421203718"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.gitlab.com/runner/">https://docs.gitlab.com/runner/</a><br><a href="https://www.youtube.com/watch?v=WOnldT1FRoI&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=10">為你自己學 GitLab CI&#x2F;CD Day 10 - Runner 與 Executor</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Runner&quot;&gt;&lt;a href=&quot;#Runner&quot; class=&quot;headerlink&quot; title=&quot;Runner&quot;&gt;&lt;/a&gt;Runner&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/runner/&quot;&gt;https://docs.gitlab.com/runner/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://docs.gitlab.com/runner/&quot;&gt;GitLab Runner&lt;/a&gt;是一个与GitLab CI&amp;#x2F;CD一起在管道中运行作业的应用程序。它可以在不同的操作系统和平台上运行，例如 Linux、Windows 和 macOS，并且可以通过 Docker 和 Kubernetes 等容器化技术运行。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="http://example.com/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习08：gitlab ci与docker image</title>
    <link href="http://example.com/post/57c50fa4.html"/>
    <id>http://example.com/post/57c50fa4.html</id>
    <published>2024-04-21T13:14:45.000Z</published>
    <updated>2024-05-14T14:14:30.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在GitLab CI&#x2F;CD的配置文件（.gitlab-ci.yml）中，<code>image</code>关键字用于指定作业所需的Docker镜像。这个镜像将作为作业运行环境的基础。</p><span id="more"></span><h3 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h3><p><a href="https://hub.docker.com/">Docker Hub</a>是一个公共的Docker镜像注册中心，用于存储、分享和管理Docker镜像。它是Docker官方提供的服务之一，提供了一个集中的平台，供开发者和运维人员发布、发现和拉取Docker镜像。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight yml"><figcaption><span>gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">testing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">image:</span> <span class="string">alpine:latest</span>  <span class="comment"># 全局Docker镜像</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;构建项目...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_unit_testing:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;单元测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_ruby:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">ruby:3.3.0-alpine3.19</span>  <span class="comment"># 局部指定Ruby镜像</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ruby</span> <span class="string">-v</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ruby</span> <span class="string">-e</span> <span class="string">&quot;puts &#x27;emmet --&gt; Hello, Ruby!&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;上线部署...&quot;</span></span><br></pre></td></tr></table></figure><h3 id="全局指定Docker镜像"><a href="#全局指定Docker镜像" class="headerlink" title="全局指定Docker镜像"></a>全局指定Docker镜像</h3><p><strong>image: alpine:latest</strong>：这行指定了全局Docker镜像，意味着所有作业都将在<code>alpine:latest</code>镜像中运行，除非在作业级别中指定了其他镜像。<br><img src="https://image.camcad.cn/vscode/20240421132007.png" alt="20240421132007"></p><h3 id="局部指定Docker镜像"><a href="#局部指定Docker镜像" class="headerlink" title="局部指定Docker镜像"></a>局部指定Docker镜像</h3><p><strong>image: ruby:3.3.0-alpine3.19</strong>：这行指定了局部的Ruby镜像，用于在该作业中运行Ruby相关的脚本。<br><img src="https://image.camcad.cn/vscode/20240421132153.png" alt="20240421132153"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过这样的配置，您可以灵活地指定全局和局部的Docker镜像，以确保作业在正确的环境中运行。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.youtube.com/watch?v=tcW7rSh_gGI&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=9">為你自己學 GitLab CI&#x2F;CD Day 09 - GitLab CI 與 Docker Image</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;在GitLab CI&amp;#x2F;CD的配置文件（.gitlab-ci.yml）中，&lt;code&gt;image&lt;/code&gt;关键字用于指定作业所需的Docker镜像。这个镜像将作为作业运行环境的基础。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="http://example.com/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习07：使用变量</title>
    <link href="http://example.com/post/78e6172.html"/>
    <id>http://example.com/post/78e6172.html</id>
    <published>2024-04-20T14:07:23.000Z</published>
    <updated>2024-05-14T14:14:30.420Z</updated>
    
    <content type="html"><![CDATA[<p>在GitLab CI&#x2F;CD中，您可以使用几种方法来定义和使用变量。这些方法可以帮助您在CI&#x2F;CD流水线中传递参数、配置环境和保护敏感信息。以下是一些常见的方法：</p><span id="more"></span><figure class="highlight yaml"><figcaption><span>gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">testing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflow:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_PIPELINE_SOURCE</span> <span class="string">==</span> <span class="string">&quot;merge_request_event&quot;</span>  <span class="comment"># 仅当合并请求事件时执行</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">always</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">when:</span> <span class="string">never</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">G_NAME:</span> <span class="string">&quot;全局变量&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$&#123;G_NAME&#125;--&gt;此变量为全局变量&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_test:</span></span><br><span class="line">  <span class="attr">variables:</span></span><br><span class="line">    <span class="attr">NAME:</span> <span class="string">&quot;局部变量&quot;</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$&#123;NAME&#125;--&gt;此变量为局部变量&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$&#123;G_NAME&#125;--&gt;此变量为全局变量&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_unit_testing:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$&#123;MY_PROJECT_VARIABLE&#125;--&gt;此变量在gitlab项目中定义&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$&#123;CI_JOB_NAME&#125;--&gt;此变量为系统变量&quot;</span></span><br></pre></td></tr></table></figure><h3 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h3><p>这个GitLab CI&#x2F;CD配置文件中的workflow部分定义了一系列规则（rules），用于确定何时执行流水线中的作业（jobs）。这些规则基于不同的条件来定义流水线的行为。<br><strong>1、第一条规则:</strong></p><ul><li><code>if: $CI_PIPELINE_SOURCE == &quot;merge_request_event&quot;</code>：这个条件判断了CI&#x2F;CD流水线的来源是否为合并请求事件。当流水线是由合并请求事件触发时，这个条件将会被满足。</li><li><code>when: always</code>：当第一个条件满足时，这个规则将会触发作业执行。when: always表示无论其他条件如何，作业都应该被执行。</li></ul><p><strong>2、第二条规则:</strong></p><ul><li><code>when: never</code>：这个规则明确地指定了作业永远不会被执行。无论其他条件如何，这个作业都不会被触发执行。</li></ul><h3 id="变量（Variables）"><a href="#变量（Variables）" class="headerlink" title="变量（Variables）"></a>变量（Variables）</h3><ul><li><code>G_NAME</code>：定义了一个全局变量，可以在整个流水线中使用。</li><li><code>NAME</code>：定义了一个局部变量，只能在指定的作业中使用。</li><li><code>MY_PROJECT_VARIABLE</code>：定义了一个项目变量，可以在项目中使用。</li><li><code>CI_COMMIT_BRANCH</code>：系统定义的变量，获取提交分支名称。</li><li><code>CI_JOB_NAME</code>：系统定义的变量，获取当前工作名称。</li></ul><h3 id="项目变量"><a href="#项目变量" class="headerlink" title="项目变量"></a>项目变量</h3><p><img src="https://image.camcad.cn/vscode/20240420154114.png" alt="20240420154114"></p><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><p><a href="https://docs.gitlab.com/ee/ci/variables/predefined_variables.html">https://docs.gitlab.com/ee/ci/variables/predefined_variables.html</a></p><p><img src="https://image.camcad.cn/vscode/20240420145625.png" alt="20240420145625"></p><h3 id="合并请求时，事件触发"><a href="#合并请求时，事件触发" class="headerlink" title="合并请求时，事件触发"></a>合并请求时，事件触发</h3><p><img src="https://image.camcad.cn/vscode/20240420145356.png" alt="20240420145356"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.youtube.com/watch?v=7MLKzgCJAE4&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=8">為你自己學 GitLab CI&#x2F;CD Day 08 - 環境變數</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在GitLab CI&amp;#x2F;CD中，您可以使用几种方法来定义和使用变量。这些方法可以帮助您在CI&amp;#x2F;CD流水线中传递参数、配置环境和保护敏感信息。以下是一些常见的方法：&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="http://example.com/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习06：指定分支</title>
    <link href="http://example.com/post/812131ff.html"/>
    <id>http://example.com/post/812131ff.html</id>
    <published>2024-04-20T13:46:00.000Z</published>
    <updated>2024-05-14T14:14:30.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用only关键字"><a href="#使用only关键字" class="headerlink" title="使用only关键字"></a>使用<code>only</code>关键字</h2><p>在GitLab CI&#x2F;CD配置文件（.gitlab-ci.yml）中，可以使用<code>only</code>关键字来指定作业（job）在哪些分支上执行。这样可以控制作业在哪些分支上触发执行，而在其他分支上不执行。这对于限制作业的执行范围或者针对特定分支进行不同的处理非常有用。</p><span id="more"></span><p>以下是使用<code>only</code>关键字的示例：</p><figure class="highlight yaml"><figcaption><span>gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">testing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;构建项目...&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">./emmet_run.sh</span> <span class="comment"># 给脚本赋予执行权限</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./emmet_run.sh</span>          <span class="comment"># 执行脚本</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;开发测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_unit_testing:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;单元测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_deploy:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;上线部署...&quot;</span></span><br></pre></td></tr></table></figure><h4 id="dev分支脚本执行"><a href="#dev分支脚本执行" class="headerlink" title="dev分支脚本执行"></a>dev分支脚本执行</h4><p><img src="https://image.camcad.cn/vscode/20240420135042.png" alt="20240420135042"></p><h4 id="main分支脚本执行"><a href="#main分支脚本执行" class="headerlink" title="main分支脚本执行"></a>main分支脚本执行</h4><p><img src="https://image.camcad.cn/vscode/20240420135113.png" alt="20240420135113"></p><h2 id="except关键字"><a href="#except关键字" class="headerlink" title="except关键字"></a><code>except</code>关键字</h2><p>Gitlab CI&#x2F;CD配置文件<code>.gitlab-ci.yml</code>中，<code>only</code>关键字用于指定在哪些分支上执行作业。与之相对应的是<code>except</code>关键字，它的作用是排除在指定的分支上执行作业。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.youtube.com/watch?v=_H0v2qz21N0&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=7">為你自己學 GitLab CI&#x2F;CD Day 07 - 指定分支</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;使用only关键字&quot;&gt;&lt;a href=&quot;#使用only关键字&quot; class=&quot;headerlink&quot; title=&quot;使用only关键字&quot;&gt;&lt;/a&gt;使用&lt;code&gt;only&lt;/code&gt;关键字&lt;/h2&gt;&lt;p&gt;在GitLab CI&amp;#x2F;CD配置文件（.gitlab-ci.yml）中，可以使用&lt;code&gt;only&lt;/code&gt;关键字来指定作业（job）在哪些分支上执行。这样可以控制作业在哪些分支上触发执行，而在其他分支上不执行。这对于限制作业的执行范围或者针对特定分支进行不同的处理非常有用。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="http://example.com/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习05：执行外部脚本</title>
    <link href="http://example.com/post/4ff7be47.html"/>
    <id>http://example.com/post/4ff7be47.html</id>
    <published>2024-04-19T20:59:53.000Z</published>
    <updated>2024-05-14T14:14:30.420Z</updated>
    
    <content type="html"><![CDATA[<p>在GitLab CI&#x2F;CD中，您可以执行外部脚本作为作业的一部分。这可以通过使用shell executor来实现。下面是一些常见的方法：</p><span id="more"></span><p><code>注意：</code>记得给脚本文本添加执行权限。</p><figure class="highlight yaml"><figcaption><span>.gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">testing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;构建项目...&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">./emmet_run.sh</span> <span class="comment"># 给脚本赋予执行权限</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./emmet_run.sh</span>          <span class="comment"># 执行脚本</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;开发测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_unit_testing:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;单元测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;上线部署...&quot;</span></span><br></pre></td></tr></table></figure><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight shell"><figcaption><span>emmet_run.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br><span class="line">hostname</span><br><span class="line">ls -al</span><br></pre></td></tr></table></figure><h4 id="以上脚本执行结果"><a href="#以上脚本执行结果" class="headerlink" title="以上脚本执行结果"></a>以上脚本执行结果</h4><p><img src="https://image.camcad.cn/vscode/20240419211958.png" alt="20240419211958"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.youtube.com/watch?v=p8JgCDeMpYU&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=6">為你自己學 GitLab CI&#x2F;CD Day 06 - 執行外部檔案</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在GitLab CI&amp;#x2F;CD中，您可以执行外部脚本作为作业的一部分。这可以通过使用shell executor来实现。下面是一些常见的方法：&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="http://example.com/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习04：工作阶段和相依性</title>
    <link href="http://example.com/post/9c8d76a5.html"/>
    <id>http://example.com/post/9c8d76a5.html</id>
    <published>2024-04-19T20:27:28.000Z</published>
    <updated>2024-05-14T14:14:30.420Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>.gitlab-ci.yml</code>文件中，<code>stages</code>关键字用于定义CI&#x2F;CD流水线中的各个阶段。CI&#x2F;CD流水线是一系列的阶段，每个阶段可以包含一个或多个作业（jobs），用于完成特定的任务。<code>stages</code>关键字允许您明确指定流水线中的各个阶段，以便组织和控制作业的执行顺序。</p><span id="more"></span> <figure class="highlight yml"><figcaption><span>.gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">testing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;构建项目...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;开发测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_unit_testing:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;单元测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;上线部署...&quot;</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，我们定义了三个阶段：<code>build</code>、<code>testing</code>和<code>deploy</code>。每个阶段可以包含一个或多个作业，这些作业将按照定义的顺序执行。</p><h4 id="build阶段"><a href="#build阶段" class="headerlink" title="build阶段"></a>build阶段</h4><p><img src="https://image.camcad.cn/vscode/20240419204816.png" alt="20240419204816"></p><h4 id="testing阶段"><a href="#testing阶段" class="headerlink" title="testing阶段"></a>testing阶段</h4><p><img src="https://image.camcad.cn/vscode/20240419204840.png" alt="20240419204840"></p><h4 id="deploy阶段"><a href="#deploy阶段" class="headerlink" title="deploy阶段"></a>deploy阶段</h4><p><img src="https://image.camcad.cn/vscode/20240419204845.png" alt="20240419204845"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.youtube.com/watch?v=eHGwioHmJfM&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=5">為你自己學 GitLab CI&#x2F;CD Day 05 - 工作階段以及相依性</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;文件中，&lt;code&gt;stages&lt;/code&gt;关键字用于定义CI&amp;#x2F;CD流水线中的各个阶段。CI&amp;#x2F;CD流水线是一系列的阶段，每个阶段可以包含一个或多个作业（jobs），用于完成特定的任务。&lt;code&gt;stages&lt;/code&gt;关键字允许您明确指定流水线中的各个阶段，以便组织和控制作业的执行顺序。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="http://example.com/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习03：定义执行任务开始和结束要运行的脚本</title>
    <link href="http://example.com/post/8671d331.html"/>
    <id>http://example.com/post/8671d331.html</id>
    <published>2024-04-10T23:25:24.000Z</published>
    <updated>2024-05-14T14:14:30.420Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>.gitlab-ci.yml</code>文件中，可以使用<code>before_script</code>和<code>after_script</code>指令来定义在执行任务前和任务后要运行的脚本。<br>这些脚本可以在每个作业（job）的开始和结束时执行，用于执行一些共享的准备工作或清理工作。</p><p><strong>before_script</strong>：在每个作业执行之前运行的脚本。通常用于设置环境、安装依赖项等操作。<code>before_script</code>中定义的命令会在作业的脚本之前执行。</p><p><strong>after_script</strong>：在每个作业执行完毕后运行的脚本。通常用于清理工作，如关闭服务、收集日志等。<code>after_script</code>中定义的命令会在作业的脚本之后执行。</p><span id="more"></span><figure class="highlight yaml"><figcaption><span>.gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;构建项目...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">unit_testing:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;单元测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;上线部署...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;执行任务前处理...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;执行任务后处理...&quot;</span></span><br></pre></td></tr></table></figure><h4 id="bulid"><a href="#bulid" class="headerlink" title="bulid:"></a>bulid:</h4><p><img src="https://image.camcad.cn/vscode/20240410235016.png" alt="20240410235016"></p><h4 id="unit-testing"><a href="#unit-testing" class="headerlink" title="unit_testing:"></a>unit_testing:</h4><p><img src="https://image.camcad.cn/vscode/20240410235228.png" alt="20240410235228"></p><h4 id="deploy"><a href="#deploy" class="headerlink" title="deploy:"></a>deploy:</h4><p><img src="https://image.camcad.cn/vscode/20240410235131.png" alt="20240410235131"></p><p><strong>注意</strong>：以上脚本工作流为乱序。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.youtube.com/watch?v=yFw5zoABS8M&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=4">為你自己學 GitLab CI&#x2F;CD Day 04 - 新增 Pipeline Job</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;文件中，可以使用&lt;code&gt;before_script&lt;/code&gt;和&lt;code&gt;after_script&lt;/code&gt;指令来定义在执行任务前和任务后要运行的脚本。&lt;br&gt;这些脚本可以在每个作业（job）的开始和结束时执行，用于执行一些共享的准备工作或清理工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;before_script&lt;/strong&gt;：在每个作业执行之前运行的脚本。通常用于设置环境、安装依赖项等操作。&lt;code&gt;before_script&lt;/code&gt;中定义的命令会在作业的脚本之前执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;after_script&lt;/strong&gt;：在每个作业执行完毕后运行的脚本。通常用于清理工作，如关闭服务、收集日志等。&lt;code&gt;after_script&lt;/code&gt;中定义的命令会在作业的脚本之后执行。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="http://example.com/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="http://example.com/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="http://example.com/tags/CI-CD/"/>
    
  </entry>
  
</feed>
