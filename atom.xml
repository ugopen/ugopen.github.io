<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蚂蚁Emmet</title>
  
  <subtitle>逆境求生存，顺境求发展</subtitle>
  <link href="https://notes.camcad.cn/atom.xml" rel="self"/>
  
  <link href="https://notes.camcad.cn/"/>
  <updated>2023-07-11T12:39:06.405Z</updated>
  <id>https://notes.camcad.cn/</id>
  
  <author>
    <name>蚂蚁Emmet</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>firefox剪切板无法粘贴设置</title>
    <link href="https://notes.camcad.cn/post/ce9787df.html"/>
    <id>https://notes.camcad.cn/post/ce9787df.html</id>
    <published>2023-06-06T20:16:24.000Z</published>
    <updated>2023-07-11T12:39:06.405Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>无法从浏览器的剪贴板中读取，请确保你已授予此网站从剪贴板中读取的访问权限。</p><span id="more"></span><h3 id="firefox配置"><a href="#firefox配置" class="headerlink" title="firefox配置"></a>firefox配置</h3><p>在地址栏输入<code>about:config</code>回车，输入<code>clipboard</code>关键字搜索，再将<code>dom.events.asyncClipboard.readText</code>和<code>dom.events.testing.asyncClipboard</code>状态设置为<code>true</code>。</p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dom.events.asyncClipboard.readTexttrue</span><br><span class="line">dom.events.testing.asyncClipboardtrue</span><br></pre></td></tr></table></figure><p><img src="http://image.camcad.cn/2023/06/firefox%20clipboard.bmp" alt="firefox clipboard"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;无法从浏览器的剪贴板中读取，请确保你已授予此网站从剪贴板中读取的访问权限。&lt;/p&gt;</summary>
    
    
    
    <category term="疑难杂症" scheme="https://notes.camcad.cn/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
    <category term="firefox" scheme="https://notes.camcad.cn/tags/firefox/"/>
    
  </entry>
  
  <entry>
    <title>NX二次开发-Error detected during FMS operation</title>
    <link href="https://notes.camcad.cn/post/d9970f4.html"/>
    <id>https://notes.camcad.cn/post/d9970f4.html</id>
    <published>2023-06-06T19:55:54.000Z</published>
    <updated>2023-07-11T12:39:06.397Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>C#开发的克隆应用，TC与NX集成环境下克隆，开启日志后，程序执行结束后弹出错误。<br><code>注：C++相同应用代码并没有此类问题出现。</code><br><img src="http://image.camcad.cn/2023/06/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91-Teamcenter%20Error.png" alt="NX二次开发-Teamcenter Error"><br><img src="http://image.camcad.cn/2023/06/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91-Error%20detected%20during%20FMS%20operation.png" alt="NX二次开发-Error detected during FMS operation"></p><span id="more"></span><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>由于指定的日志文件后缀不符合要求所致，将日志的后缀设置成<code>.clone</code>即可。<br><img src="http://image.camcad.cn/2023/06/nx_cloning_log_file.jpg" alt="nx_cloning_log_file"></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><img src="http://image.camcad.cn/2023/06/uf_clone_set_logfile.jpg" alt="uf_clone_set_logfile"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">constants</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> CloneLogFilename = <span class="string">&quot;\\nxclone.clone&quot;</span>;       <span class="comment">// 克隆日志文件 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 空运行</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.m_dryrun)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> getEnv = Environment.GetEnvironmentVariable(<span class="string">&quot;temp&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> filename = getEnv + constants.CloneLogFilename;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.m_clone.SetLogfile(filename);</span><br><span class="line">    <span class="keyword">this</span>.m_clone.SetDryrun(<span class="keyword">this</span>.m_dryrun);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;C#开发的克隆应用，TC与NX集成环境下克隆，开启日志后，程序执行结束后弹出错误。&lt;br&gt;&lt;code&gt;注：C++相同应用代码并没有此类问题出现。&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://image.camcad.cn/2023/06/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91-Teamcenter%20Error.png&quot; alt=&quot;NX二次开发-Teamcenter Error&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://image.camcad.cn/2023/06/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91-Error%20detected%20during%20FMS%20operation.png&quot; alt=&quot;NX二次开发-Error detected during FMS operation&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="疑难杂症" scheme="https://notes.camcad.cn/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
    <category term="NX二次开发" scheme="https://notes.camcad.cn/tags/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>NX外部模式-发布技术数据包/三维PDF</title>
    <link href="https://notes.camcad.cn/post/771521dc.html"/>
    <id>https://notes.camcad.cn/post/771521dc.html</id>
    <published>2023-04-29T18:54:58.000Z</published>
    <updated>2023-07-11T12:39:06.397Z</updated>
    
    <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>NX本地模式下发布技术数据包&#x2F;三维PDF，在使用发布应用程序<code>PublishTDPNative.exe</code>前，需要在系统环境变量名称为<code>Path</code>中增加NX安装目录下<code>NXBIN</code>的绝对路径。</p><span id="more"></span><h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h3><h4 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h4><p>在系统环境变量名称为<code>Path</code>中增加NX安装目录下<code>NXBIN</code>的绝对路径，便于本地模式启动NX相关依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">E:\Program Files\Siemens\NX1953\NXBIN</span><br></pre></td></tr></table></figure><h4 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h4><p>在NX安装目录下找到<code>TDP</code>文件夹，NX1953的<code>TDP</code>目录结构如下（不同NX版本可能有所不同）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3dpdf</span><br><span class="line">application</span><br><span class="line">batch</span><br><span class="line">batch example</span><br><span class="line">localization</span><br><span class="line">manifest</span><br><span class="line">startup</span><br><span class="line">templates</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h4><p>打开<code>batch</code>文件夹，并且执行发布数据包&#x2F;三维PDF应用<code>PublishTDPNative.exe</code>，在当前目录下使用系统终端，执行操作命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\PublishTDPNative.exe -config_file=&quot;E:\Program Files\Siemens\NX1953\TDP\batch example\PublishTDPNativeOptions3DPDF.xml&quot;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Windows PowerShell</span><br><span class="line">版权所有（C） Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">安装最新的 PowerShell，了解新功能和改进！https://aka.ms/PSWindows</span><br><span class="line"></span><br><span class="line">PS E:\Program Files\Siemens\NX1953\TDP\batch&gt; .\PublishTDPNative.exe -config_file=&quot;E:\Program Files\Siemens\NX1953\TDP\batch example\PublishTDPNativeOptions3DPDF.xml&quot;</span><br><span class="line"></span><br><span class="line">Translator Log File created at: C:\TEMP\TDP_ExamplePart.log</span><br><span class="line">[PK_BODY_change_partition returned: 1088]</span><br><span class="line">PS E:\Program Files\Siemens\NX1953\TDP\batch&gt;</span><br></pre></td></tr></table></figure><h2 id="技术文档"><a href="#技术文档" class="headerlink" title="技术文档"></a>技术文档</h2><figure class="highlight xml"><figcaption><span>PublishTDPREADME.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1) 简介</span><br><span class="line">此目录中提供的批处理模式可执行文件是从NX命令提示符中连续发布多个技术数据包的程序。</span><br><span class="line"></span><br><span class="line">2) 提供的文件</span><br><span class="line">PublishTDPNative.exe - 用于本地NX TDP发布的批处理模式可执行文件</span><br><span class="line">PublishTDPNativeOptions.xsd - 用于验证本地NX TDP批处理XML配置文件的XML模式</span><br><span class="line">PublishTDPTeamcenter.exe - 用于管理模式NX TDP发布的批处理模式可执行文件</span><br><span class="line">PublishTDPTeamcenterOptions.xsd - 用于验证管理模式NX TDP批处理XML配置文件的XML模式</span><br><span class="line"></span><br><span class="line">此外，还提供了示例配置文件和零件。这些可以在目录“%UGII_BASE_DIR%\TDP\batch example\”中找到。</span><br><span class="line"></span><br><span class="line">PublishTDPNativeOptions3DPDF.xml - 用于在本地NX中发布3D PDF TDP的示例XML配置文件</span><br><span class="line">PublishTDPNativeOptionsJTPDF.xml - 用于在本地NX中发布JT加PDF TDP的示例XML配置文件</span><br><span class="line">parts.txt - 用于发布示例中使用的样本数据集文件</span><br><span class="line">attachments.txt - 用于发布示例中使用的样本附件列表文件</span><br><span class="line"></span><br><span class="line">2) 用法</span><br><span class="line">(3A) 在本地NX中发布技术数据包</span><br><span class="line"></span><br><span class="line">要在本地NX中发布TDP，必须首先创建一个XML配置文件，以供批处理程序使用。要创建XML配置文件，可以使用XML模式定义文件“PublishTDPNativeOptions.xsd”查看必须指定什么。</span><br><span class="line"></span><br><span class="line">要在数据集文件中指定零件文件，请使用标准操作系统格式。</span><br><span class="line">示例：C:\partfile\abc.prt</span><br><span class="line"></span><br><span class="line">要在附件列表文件中指定附件，请使用标准操作系统格式。</span><br><span class="line">示例：C:\attachments\attachment1.prt</span><br><span class="line">示例：C:\attachments\attachment1.JPG</span><br><span class="line"></span><br><span class="line">参数 变量 说明</span><br><span class="line">-config_file [filepath] - 指定XML配置文件的本地磁盘位置</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">从NX命令提示符，以下命令</span><br><span class="line">PublishTDPNative -config_file=&quot;C:\TDP\PublishTDPNativeOptions3DPDF.xml&quot;</span><br><span class="line"></span><br><span class="line">...根据以下指定发布所有TDP：</span><br><span class="line">XML配置文件：“C:\TDP\PublishTDPNativeOptions3DPDF.xml”</span><br></pre></td></tr></table></figure><h3 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h3><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab"><a href="#tab-1">主文件</a></li><li class="tab"><a href="#tab-2">附件文件</a></li><li class="tab"><a href="#tab-3">图档文件</a></li></ul><div class="tab-content"><div class="tab-pane" id="tab-1"><p><code>注意</code>本地模式需要设置3DPDF输出目录例如：<code>&lt;output_directory&gt;c:\temp\&lt;/output_directory&gt;</code>，在主流程文件中设置。</p><p>NX模板文件：<code>${UGII_BASE_DIR}\tdp\templates\A4_Size_part_portrait_3dpdf.prt</code></p><h4 id="主流程文件"><a href="#主流程文件" class="headerlink" title="主流程文件"></a>主流程文件</h4><figure class="highlight xml"><figcaption><span>PublishTDPNativeOptions3DPDF.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">=======================================================================</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    Copyright 2018 Siemens Product Lifecycle Management Software Inc.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        All Rights Reserved.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">=======================================================================</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    This is the sample XML configuration file used with native TDP batch</span></span><br><span class="line"><span class="comment">    processing to publish a 3D PDF TDP.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    The XML file is validated against PublishTDPNativeOptions.xsd. The XML </span></span><br><span class="line"><span class="comment">    standard can be found in http://www.w3.org/XML/Schema.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">=======================================================================</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">native_run</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  The following run will publish a 3D PDF TDP with:</span></span><br><span class="line"><span class="comment">    - A set of parts defined in $&#123;UGII_BASE_DIR&#125;\tdp\batch example\parts.txt</span></span><br><span class="line"><span class="comment">    - A template part at $&#123;UGII_BASE_DIR&#125;\tdp\templates\A4_Size_part_portrait_3dpdf.prt</span></span><br><span class="line"><span class="comment">    - No output directory specified. This will use the output directory specified in</span></span><br><span class="line"><span class="comment">        the NX customer default. This directory MUST have write access.</span></span><br><span class="line"><span class="comment">    - With all views published</span></span><br><span class="line"><span class="comment">    - With no STEP attachment</span></span><br><span class="line"><span class="comment">    - With a password of 123456</span></span><br><span class="line"><span class="comment">    - With text pairs: Part Number: 1-A</span></span><br><span class="line"><span class="comment">                       Description: Bracket</span></span><br><span class="line"><span class="comment">                       Revision: A</span></span><br><span class="line"><span class="comment">                       Design Date: 01/01/2019</span></span><br><span class="line"><span class="comment">                       Designer: John Doe</span></span><br><span class="line"><span class="comment">    - With attachments defined in $&#123;UGII_BASE_DIR&#125;\tdp\batch example\attachments.txt</span></span><br><span class="line"><span class="comment">    - With no JT attachment</span></span><br><span class="line"><span class="comment">    - With model accuracy at Maximum</span></span><br><span class="line"><span class="comment">    - With no compression to the model</span></span><br><span class="line"><span class="comment">    - With overridden background and pmi color</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">publish_3DPDF</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataset</span>&gt;</span>$&#123;UGII_BASE_DIR&#125;\tdp\batch example\parts.txt<span class="tag">&lt;/<span class="name">dataset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template_part</span>&gt;</span>$&#123;UGII_BASE_DIR&#125;\tdp\templates\A4_Size_part_portrait_3dpdf.prt<span class="tag">&lt;/<span class="name">template_part</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- this configuration file uses the output directory specified by NX customer default --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- to override the NX customer default, you may specify an &lt;output_directory&gt; like the example below:</span></span><br><span class="line"><span class="comment">         &lt;output_directory&gt;C:\TDP\Output&lt;/output_directory&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">output_directory</span>&gt;</span>c:\temp\<span class="tag">&lt;/<span class="name">output_directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">views</span>&gt;</span>All Views<span class="tag">&lt;/<span class="name">views</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">generate_step</span>&gt;</span>false<span class="tag">&lt;/<span class="name">generate_step</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">texts</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Part Number<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1-A<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Bracket<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Revision<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>A<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Design Date<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>01/01/2019<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Designer<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">texts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attachment_list</span>&gt;</span>$&#123;UGII_BASE_DIR&#125;\tdp\batch example\attachments.txt<span class="tag">&lt;/<span class="name">attachment_list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">generate_jt</span>&gt;</span>false<span class="tag">&lt;/<span class="name">generate_jt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">accuracy</span>&gt;</span>Maximum<span class="tag">&lt;/<span class="name">accuracy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">compression</span>&gt;</span>false<span class="tag">&lt;/<span class="name">compression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">override_properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">override_colors</span>&gt;</span>true<span class="tag">&lt;/<span class="name">override_colors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">background_color</span>&gt;</span>1<span class="tag">&lt;/<span class="name">background_color</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pmi_color</span>&gt;</span>216<span class="tag">&lt;/<span class="name">pmi_color</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">override_properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">publish_3DPDF</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">native_run</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight xml"><figcaption><span>attachments.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;UGII_BASE_DIR&#125;\tdp\batch example\TDP_ExamplePart.jpg</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><figure class="highlight xml"><figcaption><span>parts.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;UGII_BASE_DIR&#125;\tdp\batch example\TDP_ExamplePart.prt</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;NX本地模式下发布技术数据包&amp;#x2F;三维PDF，在使用发布应用程序&lt;code&gt;PublishTDPNative.exe&lt;/code&gt;前，需要在系统环境变量名称为&lt;code&gt;Path&lt;/code&gt;中增加NX安装目录下&lt;code&gt;NXBIN&lt;/code&gt;的绝对路径。&lt;/p&gt;</summary>
    
    
    
    
    <category term="NX" scheme="https://notes.camcad.cn/tags/NX/"/>
    
  </entry>
  
  <entry>
    <title>NX二次开发：C#调用C++界面获取值</title>
    <link href="https://notes.camcad.cn/post/6cvc59ff.html"/>
    <id>https://notes.camcad.cn/post/6cvc59ff.html</id>
    <published>2023-04-25T14:54:03.000Z</published>
    <updated>2023-07-11T12:39:06.393Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-函数定义"><a href="#C-函数定义" class="headerlink" title="C++函数定义"></a>C++函数定义</h3><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> DllExport <span class="type">char</span>* g_value = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">DllExport <span class="type">char</span>* <span class="title">returnCSharpValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">g_value = <span class="string">&quot;C++返回给C#的值&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> g_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">DllExport <span class="type">void</span>  <span class="title">ufusr</span><span class="params">(<span class="type">char</span> *param, <span class="type">int</span> *retcod, <span class="type">int</span> param_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tc_select_action *thetc_select_action = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">UF_UGMGR_initialize</span>(<span class="number">0</span>, <span class="literal">nullptr</span>);</span><br><span class="line">        thetc_select_action = <span class="keyword">new</span> <span class="built_in">tc_select_action</span>();</span><br><span class="line">        <span class="comment">// The following method shows the dialog immediately</span></span><br><span class="line">        thetc_select_action-&gt;<span class="built_in">Show</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">UF_UGMGR_terminate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(exception&amp; ex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//---- Enter your exception handling code here -----</span></span><br><span class="line">        tc_select_action::theUI-&gt;<span class="built_in">NXMessageBox</span>()-&gt;<span class="built_in">Show</span>(<span class="string">&quot;Block Styler&quot;</span>, NXOpen::NXMessageBox::DialogTypeError, ex.<span class="built_in">what</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(thetc_select_action != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> thetc_select_action;</span><br><span class="line">        thetc_select_action = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="C-函数定义-1"><a href="#C-函数定义-1" class="headerlink" title="C#函数定义"></a>C#函数定义</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口定义</span></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;tc_select_action.dll&quot;</span>, EntryPoint = <span class="string">&quot;ufusr&quot;</span>, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">cplusplusUfusr</span>(<span class="params"><span class="built_in">string</span> param, <span class="built_in">int</span>[] retcod, <span class="built_in">int</span> param_len</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数定义</span></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;tc_select_action.dll&quot;</span>, EntryPoint = <span class="string">&quot;returnCSharpValue&quot;</span>, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">getCplusplusValue</span>()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开C++界面</span></span><br><span class="line">cplusplusUfusr(<span class="literal">null</span>, <span class="literal">null</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用C++内部函数</span></span><br><span class="line">IntPtr pCplusplusValue = getCplusplusValue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转成ANSI字符串</span></span><br><span class="line"><span class="built_in">string</span> cplusplusValue = Marshal.PtrToStringAnsi(pCplusplusValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印显示</span></span><br><span class="line">UFSession.GetUFSession().Ui.OpenListingWindow();</span><br><span class="line">UFSession.GetUFSession().Ui.WriteListingWindow(cplusplusValue);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;C-函数定义&quot;&gt;&lt;a href=&quot;#C-函数定义&quot; class=&quot;headerlink&quot; title=&quot;C++函数定义&quot;&gt;&lt;/a&gt;C++函数定义&lt;/h3&gt;</summary>
    
    
    
    <category term="NX二次开发" scheme="https://notes.camcad.cn/categories/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="C++" scheme="https://notes.camcad.cn/tags/C/"/>
    
    <category term="NX二次开发" scheme="https://notes.camcad.cn/tags/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
    <category term="C#" scheme="https://notes.camcad.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>NX二次开发：第一个C#程序</title>
    <link href="https://notes.camcad.cn/post/5bdc59ff.html"/>
    <id>https://notes.camcad.cn/post/5bdc59ff.html</id>
    <published>2023-04-20T14:53:03.000Z</published>
    <updated>2023-07-11T12:39:06.393Z</updated>
    
    <content type="html"><![CDATA[<p>创建第一个NX二次开发C#程序，然后<code>Ctrl + u</code>的方式调用C#通过编译生成的<code>.dll</code>动态链接文件。</p><span id="more"></span><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> NXOpen;</span><br><span class="line"><span class="keyword">using</span> NXOpen.UF;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Emmet</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Session theSession;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Emmet theEmmet;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emmet</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            theSession = Session.GetSession();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NXOpen.NXException ex)</span><br><span class="line">        &#123;</span><br><span class="line">             UI.GetUI().NXMessageBox.Show(<span class="string">&quot;Message&quot;</span>, NXMessageBox.DialogType.Error, ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> retValue = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// TO-DO</span></span><br><span class="line">            UFSession theUFSession = UFSession.GetUFSession();</span><br><span class="line">            theUFSession.Ui.DisplayMessage(<span class="string">&quot;Hello World!&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NXOpen.NXException ex)</span><br><span class="line">        &#123;</span><br><span class="line">             UI.GetUI().NXMessageBox.Show(<span class="string">&quot;Message&quot;</span>, NXMessageBox.DialogType.Error, ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">GetUnloadOption</span>(<span class="params"><span class="built_in">string</span> arg</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;创建第一个NX二次开发C#程序，然后&lt;code&gt;Ctrl + u&lt;/code&gt;的方式调用C#通过编译生成的&lt;code&gt;.dll&lt;/code&gt;动态链接文件。&lt;/p&gt;</summary>
    
    
    
    <category term="NX二次开发" scheme="https://notes.camcad.cn/categories/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="NX二次开发" scheme="https://notes.camcad.cn/tags/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
    <category term="C#" scheme="https://notes.camcad.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式20：组合模式（Composite）</title>
    <link href="https://notes.camcad.cn/post/7bc400cd.html"/>
    <id>https://notes.camcad.cn/post/7bc400cd.html</id>
    <published>2021-07-25T15:00:14.000Z</published>
    <updated>2023-07-11T12:39:06.405Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“数据结构“模式"><a href="#“数据结构“模式" class="headerlink" title="“数据结构“模式"></a>“数据结构“模式</h2><p>常常有一些组件在内部具有特定的数据结构，如果让客户程序依赖这些特定的数据结构，将极大地破坏组件的复用，这时候，将这些特定数据结构封装在内部，在外部提供统一的接口，来实现与特定数据结构无关的访问，是一种行之有效的解决方案。</p><span id="more"></span><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>Composite</li><li>Iterator</li><li>Chain of Resposibility</li></ul><h1 id="Composite模式"><a href="#Composite模式" class="headerlink" title="Composite模式"></a>Composite模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件在某些情况下，客户代码过多地依赖于对象容器复杂的内部实现结构，对象容器内部实现结构（而非抽象接口)的变化将引起客户代码的频繁变化，带来了代码的维护性、扩展性等弊端。</li><li>2）如何将“客户代码与复杂的对象容器结构”解耦?让对象容器自己来实现自身的复杂结构,从而使得客户代码就像处理简单对象一样来处理复杂的对象容器?</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>将对象组合成树形结构以表示“部分-整体”的层次结构。Composite使得用户对单个对象和组合对象的使用具有一致性（稳定)。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071704463967.jpg"><img src="http://image.camcad.cn/2021/07/2021071704463967.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Composite模式采用树形结构来实现普遍存在的对象容器，从而将“一对多”的关系转化为”一对一“的关系，使得客户代码可以一致地(复用)处理对象和对象容器，无需关心处理的是单个的对象，还是组合的对象容器。</li><li>2）将“客户代码与复杂的对象容器结构”解耦是Composite的核心思想，解耦之后，客户代码将与纯粹的抽象接口——而非对象容器的内部实现结构——发生依赖，从而更能“应对变化”。</li><li>3）Composite模式在具体实现中，可以让父对象中的子对象反向追溯;如果父对象有频繁的遍历需求，可使用缓存技巧来改善效率。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">组合模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight c++"><figcaption><span>main_composite.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;src/composite.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ConcreteCompany *root = <span class="keyword">new</span> <span class="built_in">ConcreteCompany</span>(<span class="string">&quot;北京总公司&quot;</span>);</span><br><span class="line">    <span class="function">std::shared_ptr&lt;Company&gt; <span class="title">hr</span><span class="params">(<span class="keyword">new</span> HRDepartment(<span class="string">&quot;总公司人力资源部&quot;</span>))</span></span>;</span><br><span class="line">    <span class="function">std::shared_ptr&lt;Company&gt; <span class="title">fd</span><span class="params">(<span class="keyword">new</span> FinanceDepartment(<span class="string">&quot;总公司财务部&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    root-&gt;<span class="built_in">add</span>(hr);</span><br><span class="line">    root-&gt;<span class="built_in">add</span>(fd);</span><br><span class="line"></span><br><span class="line">    <span class="function">std::shared_ptr&lt;ConcreteCompany&gt; <span class="title">comp</span><span class="params">(<span class="keyword">new</span> ConcreteCompany(<span class="string">&quot;上海华东分公司&quot;</span>))</span></span>;</span><br><span class="line">    hr.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">HRDepartment</span>(<span class="string">&quot;华东分公司人力资源部&quot;</span>));</span><br><span class="line">    fd.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">FinanceDepartment</span>(<span class="string">&quot;华东分公司财务部&quot;</span>));</span><br><span class="line">    comp-&gt;<span class="built_in">add</span>(hr);</span><br><span class="line">    comp-&gt;<span class="built_in">add</span>(fd);</span><br><span class="line">    root-&gt;<span class="built_in">add</span>(comp);</span><br><span class="line"></span><br><span class="line">    <span class="function">std::shared_ptr&lt;ConcreteCompany&gt; <span class="title">comp1</span><span class="params">(<span class="keyword">new</span> ConcreteCompany(<span class="string">&quot;南京办事处&quot;</span>))</span></span>;</span><br><span class="line">    hr.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">HRDepartment</span>(<span class="string">&quot;南京办事处人力资源部&quot;</span>));</span><br><span class="line">    fd.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">FinanceDepartment</span>(<span class="string">&quot;南京办事处财务部&quot;</span>));</span><br><span class="line">    comp1-&gt;<span class="built_in">add</span>(hr);</span><br><span class="line">    comp1-&gt;<span class="built_in">add</span>(fd);</span><br><span class="line">    comp-&gt;<span class="built_in">add</span>(comp1);</span><br><span class="line"></span><br><span class="line">    <span class="function">std::shared_ptr&lt;ConcreteCompany&gt; <span class="title">comp2</span><span class="params">(<span class="keyword">new</span> ConcreteCompany(<span class="string">&quot;华南办事处&quot;</span>))</span></span>;</span><br><span class="line">    hr.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">HRDepartment</span>(<span class="string">&quot;华南办事处人力资源部&quot;</span>));</span><br><span class="line">    fd.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">FinanceDepartment</span>(<span class="string">&quot;华南办事处财务部&quot;</span>));</span><br><span class="line">    comp2-&gt;<span class="built_in">add</span>(hr);</span><br><span class="line">    comp2-&gt;<span class="built_in">add</span>(fd);</span><br><span class="line">    comp-&gt;<span class="built_in">add</span>(comp2);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\n结构图&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    root-&gt;<span class="built_in">display</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\n职责&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    root-&gt;<span class="built_in">lineOfDuty</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>composite.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _TEMPLATE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _TEMPLATE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__ \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__ \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                              \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__ \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class company;</span></span></span><br><span class="line"><span class="string"><span class="meta">class ConcreteCompany;</span></span></span><br><span class="line"><span class="string"><span class="meta">class HRDepartment;</span></span></span><br><span class="line"><span class="string"><span class="meta">class FinanceDepartment;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Company</span></span></span><br><span class="line"><span class="string"><span class="meta">&#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">protected:</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Company() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  Company(std::string name)</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = name;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void add(std::shared_ptr&lt;Company&gt; c) = 0;    // 增加</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void remove(std::shared_ptr&lt;Company&gt; c) = 0; // 移除</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void display(int nDepth) = 0;                // 显示</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void lineOfDuty() = 0;                       // 履行职责</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~Company() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 树枝节点</span></span></span><br><span class="line"><span class="string"><span class="meta">class ConcreteCompany : public Company</span></span></span><br><span class="line"><span class="string"><span class="meta">&#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::list&lt;std::shared_ptr&lt;Company&gt;&gt; m_children;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  ConcreteCompany() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  ConcreteCompany(std::string name)</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = name;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 增加</span></span></span><br><span class="line"><span class="string"><span class="meta">  void add(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_children.push_back(std::move(c));</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 移除</span></span></span><br><span class="line"><span class="string"><span class="meta">  void remove(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_children.remove(c);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 显示</span></span></span><br><span class="line"><span class="string"><span class="meta">  void display(int nDepth) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    std::string sVlaue = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (auto i = 0; i &lt; nDepth; i++)</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      sVlaue += &quot;</span>-<span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    sVlaue += this-&gt;m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; sVlaue &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    for (const auto &amp;v : this-&gt;m_children)</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      if (v != nullptr)</span></span></span><br><span class="line"><span class="string"><span class="meta">      &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        v-&gt;display(nDepth + 2);</span></span></span><br><span class="line"><span class="string"><span class="meta">      &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 履行职责</span></span></span><br><span class="line"><span class="string"><span class="meta">  void lineOfDuty() override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (const auto &amp;v : this-&gt;m_children)</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      if (v != nullptr)</span></span></span><br><span class="line"><span class="string"><span class="meta">      &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        v-&gt;lineOfDuty();</span></span></span><br><span class="line"><span class="string"><span class="meta">      &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 人力资源部</span></span></span><br><span class="line"><span class="string"><span class="meta">class HRDepartment : public Company</span></span></span><br><span class="line"><span class="string"><span class="meta">&#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  HRDepartment(std::string name)</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = name;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 增加</span></span></span><br><span class="line"><span class="string"><span class="meta">  void add(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 移除</span></span></span><br><span class="line"><span class="string"><span class="meta">  void remove(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 显示</span></span></span><br><span class="line"><span class="string"><span class="meta">  void display(int nDepth) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::string sVlaue = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (auto i = 0; i &lt; nDepth; i++)</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      sVlaue += &quot;</span>-<span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    sVlaue += this-&gt;m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; sVlaue &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 履行职责</span></span></span><br><span class="line"><span class="string"><span class="meta">  void lineOfDuty() override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 员工招聘培训管理<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 财务部</span></span></span><br><span class="line"><span class="string"><span class="meta">class FinanceDepartment : public Company</span></span></span><br><span class="line"><span class="string"><span class="meta">&#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  FinanceDepartment(std::string name)</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = name;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 增加</span></span></span><br><span class="line"><span class="string"><span class="meta">  void add(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 移除</span></span></span><br><span class="line"><span class="string"><span class="meta">  void remove(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 显示</span></span></span><br><span class="line"><span class="string"><span class="meta">  void display(int nDepth) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::string sVlaue = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (auto i = 0; i &lt; nDepth; i++)</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      sVlaue += &quot;</span>-<span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    sVlaue += this-&gt;m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; sVlaue &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 履行职责</span></span></span><br><span class="line"><span class="string"><span class="meta">  void lineOfDuty() override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 公司财务收支管理<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _TEMPLATE_H_</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;list&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Component</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void process() = 0;</span><br><span class="line">    virtual ~Component()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//树节点</span><br><span class="line">class Composite : public Component&#123;</span><br><span class="line"></span><br><span class="line">    string name;</span><br><span class="line">    list&lt;Component*&gt; elements;</span><br><span class="line">public:</span><br><span class="line">    Composite(const string &amp; s) : name(s) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    void add(Component* element) &#123;</span><br><span class="line">        elements.push_back(element);</span><br><span class="line">    &#125;</span><br><span class="line">    void remove(Component* element)&#123;</span><br><span class="line">        elements.remove(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void process()&#123;</span><br><span class="line"></span><br><span class="line">        //1. process current node</span><br><span class="line"></span><br><span class="line">        //2. process leaf nodes</span><br><span class="line">        for (auto &amp;e : elements)</span><br><span class="line">            e-&gt;process(); //多态调用</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//叶子节点</span><br><span class="line">class Leaf : public Component&#123;</span><br><span class="line">    string name;</span><br><span class="line">public:</span><br><span class="line">    Leaf(string s) : name(s) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    void process()&#123;</span><br><span class="line">        //process current node</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void Invoke(Component &amp; c)&#123;</span><br><span class="line">    //...</span><br><span class="line">    c.process();</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Composite root(&quot;root&quot;);</span><br><span class="line">    Composite treeNode1(&quot;treeNode1&quot;);</span><br><span class="line">    Composite treeNode2(&quot;treeNode2&quot;);</span><br><span class="line">    Composite treeNode3(&quot;treeNode3&quot;);</span><br><span class="line">    Composite treeNode4(&quot;treeNode4&quot;);</span><br><span class="line">    Leaf leat1(&quot;left1&quot;);</span><br><span class="line">    Leaf leat2(&quot;left2&quot;);</span><br><span class="line"></span><br><span class="line">    root.add(&amp;treeNode1);</span><br><span class="line">    treeNode1.add(&amp;treeNode2);</span><br><span class="line">    treeNode2.add(&amp;leaf1);</span><br><span class="line"></span><br><span class="line">    root.add(&amp;treeNode3);</span><br><span class="line">    treeNode3.add(&amp;treeNode4);</span><br><span class="line">    treeNode4.add(&amp;leaf2);</span><br><span class="line"></span><br><span class="line">    Invoke(root);</span><br><span class="line">    Invoke(leaf2);</span><br><span class="line">    Invoke(treeNode3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“数据结构“模式&quot;&gt;&lt;a href=&quot;#“数据结构“模式&quot; class=&quot;headerlink&quot; title=&quot;“数据结构“模式&quot;&gt;&lt;/a&gt;“数据结构“模式&lt;/h2&gt;&lt;p&gt;常常有一些组件在内部具有特定的数据结构，如果让客户程序依赖这些特定的数据结构，将极大地破坏组件的复用，这时候，将这些特定数据结构封装在内部，在外部提供统一的接口，来实现与特定数据结构无关的访问，是一种行之有效的解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式18：状态模式（State）</title>
    <link href="https://notes.camcad.cn/post/1c464225.html"/>
    <id>https://notes.camcad.cn/post/1c464225.html</id>
    <published>2021-07-25T12:27:53.000Z</published>
    <updated>2023-07-11T12:39:06.405Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“状态变化”模式"><a href="#“状态变化”模式" class="headerlink" title="“状态变化”模式"></a>“状态变化”模式</h2><p>在组件构建过程中，某些对象的状态经常面临变化，如何对这些变化进行有效的管理?同时又维持高层模块的稳定?“状态变化”模式为这一问题提供了一种解决方案。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）State</li><li>2）Memento<span id="more"></span></li></ul><h1 id="State状态模式"><a href="#State状态模式" class="headerlink" title="State状态模式"></a>State状态模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，某些对象的状态如果改变，其行为也会随之而发生变化，比如文档处于只读状态，其支持的行为和读写状态支持的行为就可能完全不同。</li><li>2）如何在运行时根据对象的状态来透明地更改对象的行为?而不会为对象操作和状态转化之间引入紧耦合?</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>允许一个对象在其内部状态改变时改变它的行为。从而使对象看起来似乎修改了其行为。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071515360928.jpg"><img src="http://image.camcad.cn/2021/07/2021071515360928.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）State模式将所有与一个特定状态相关的行为都放入一个State的子类对象中，在对象状态切换时，切换相应的对象，但同时维持State的接口，这样实现了具体操作与状态转换之间的解耦。</li><li>2）为不同的状态引入不同的对象使得状态转换变得更加明确，而且可以保证不会出现状态不一致的情况，因为转换是原子性的——即要么彻底转换过来，要么不转换。</li><li>3）如果State对象没有实例变量，那么各个上下文可以共享同一个State对象，从而节省对象开销。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">状态模式</a></li><li class="tab"><a href="#tab-2">进阶模式</a></li><li class="tab"><a href="#tab-3">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight c++"><figcaption><span>main_state.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;src/state.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Work emergencyProjects;</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">9</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">10</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">12</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">13</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">14</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">17</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">19</span>);</span><br><span class="line">  <span class="comment">//  emergencyProjects.setTaskFinish(true);</span></span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">22</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>state.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _STATE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _STATE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class State;</span></span></span><br><span class="line"><span class="string"><span class="meta">class Work;</span></span></span><br><span class="line"><span class="string"><span class="meta">class ForenoonState;</span></span></span><br><span class="line"><span class="string"><span class="meta">class NoonState;</span></span></span><br><span class="line"><span class="string"><span class="meta">class AfternonnState;</span></span></span><br><span class="line"><span class="string"><span class="meta">class EveningState;</span></span></span><br><span class="line"><span class="string"><span class="meta">class SleepingState;</span></span></span><br><span class="line"><span class="string"><span class="meta">class RestState;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void writeProgram(Work *w) = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~State() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Work &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  double m_hour;</span></span></span><br><span class="line"><span class="string"><span class="meta">  bool m_finish;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;State&gt; m_current;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void init() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_finish = false;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_hour = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  Work();</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void setHour(double h) &#123; this-&gt;m_hour = h; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  double getHour() &#123; return this-&gt;m_hour; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void setTaskFinish(bool finish) &#123; this-&gt;m_finish = finish; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  bool getTaskFinish() &#123; return this-&gt;m_finish; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void setState(std::unique_ptr&lt;State&gt; s) &#123; this-&gt;m_current = std::move(s); &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram() &#123; this-&gt;m_current-&gt;writeProgram(this); &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 上午工作状态</span></span></span><br><span class="line"><span class="string"><span class="meta">class ForenoonState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 中午工作状态</span></span></span><br><span class="line"><span class="string"><span class="meta">class NoonState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 下午工作状态</span></span></span><br><span class="line"><span class="string"><span class="meta">class AfternoonState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 加班工作状态</span></span></span><br><span class="line"><span class="string"><span class="meta">class EveningState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 睡觉</span></span></span><br><span class="line"><span class="string"><span class="meta">class SleepingState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 下班</span></span></span><br><span class="line"><span class="string"><span class="meta">class RestState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void ForenoonState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  if (w-&gt;getHour() &lt; 12) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour()</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; &quot;</span>点 上午工作，精神百倍<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125; else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;setState(std::unique_ptr&lt;State&gt;(new NoonState()));</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;writeProgram();</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void NoonState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  if (w-&gt;getHour() &lt; 13) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour()</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; &quot;</span>点 饿了,午饭；犯困,午休<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125; else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;setState(std::unique_ptr&lt;State&gt;(new AfternoonState()));</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;writeProgram();</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void AfternoonState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  if (w-&gt;getHour() &lt; 17) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour()</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; &quot;</span>点 下午状态还不错，继续努力<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125; else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;setState(std::unique_ptr&lt;State&gt;(new EveningState()));</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;writeProgram();</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void EveningState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  if (w-&gt;getTaskFinish()) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;setState(std::unique_ptr&lt;State&gt;(new RestState()));</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;writeProgram();</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125; else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (w-&gt;getHour() &lt; 21) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour()</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;&lt; &quot;</span>点 加班哦,疲累之极<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125; else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      w-&gt;setState(std::unique_ptr&lt;State&gt;(new SleepingState));</span></span></span><br><span class="line"><span class="string"><span class="meta">      w-&gt;writeProgram();</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void SleepingState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour() &lt;&lt; &quot;</span>点 不行了,睡着了<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void RestState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour() &lt;&lt; &quot;</span>点 下班回家了<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">Work::Work() &#123; this-&gt;m_current.reset(new ForenoonState()); &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _STATE_H_</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkState</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    NetworkState* pNext;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Operation1</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Operation2</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Operation3</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">NetworkState</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenState</span> :<span class="keyword">public</span> NetworkState&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> NetworkState* m_instance;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> NetworkState* <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_instance == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            m_instance = <span class="keyword">new</span> <span class="built_in">OpenState</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m_instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//**********</span></span><br><span class="line">        pNext = CloseState::<span class="built_in">getInstance</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//..........</span></span><br><span class="line">        pNext = ConnectState::<span class="built_in">getInstance</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//$$$$$$$$$$</span></span><br><span class="line">        pNext = OpenState::<span class="built_in">getInstance</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CloseState</span>:<span class="keyword">public</span> NetworkState&#123; &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkProcessor</span>&#123;</span><br><span class="line"></span><br><span class="line">    NetworkState* pState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NetworkProcessor</span>(NetworkState* pState)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;pState = pState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        pState-&gt;<span class="built_in">Operation1</span>();</span><br><span class="line">        pState = pState-&gt;pNext;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        pState-&gt;<span class="built_in">Operation2</span>();</span><br><span class="line">        pState = pState-&gt;pNext;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        pState-&gt;<span class="built_in">Operation3</span>();</span><br><span class="line">        pState = pState-&gt;pNext;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">NetworkState</span></span><br><span class="line">&#123;</span><br><span class="line">    Network_Open,</span><br><span class="line">    Network_Close,</span><br><span class="line">    Network_Connect,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkProcessor</span>&#123;</span><br><span class="line"></span><br><span class="line">    NetworkState state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state == Network_Open)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//**********</span></span><br><span class="line">            state = Network_Close;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == Network_Close)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//..........</span></span><br><span class="line">            state = Network_Connect;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == Network_Connect)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//$$$$$$$$$$</span></span><br><span class="line">            state = Network_Open;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">Operation2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (state == Network_Open)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//**********</span></span><br><span class="line">            state = Network_Connect;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == Network_Close)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//.....</span></span><br><span class="line">            state = Network_Open;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == Network_Connect)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//$$$$$$$$$$</span></span><br><span class="line">            state = Network_Close;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">Operation3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“状态变化”模式&quot;&gt;&lt;a href=&quot;#“状态变化”模式&quot; class=&quot;headerlink&quot; title=&quot;“状态变化”模式&quot;&gt;&lt;/a&gt;“状态变化”模式&lt;/h2&gt;&lt;p&gt;在组件构建过程中，某些对象的状态经常面临变化，如何对这些变化进行有效的管理?同时又维持高层模块的稳定?“状态变化”模式为这一问题提供了一种解决方案。&lt;/p&gt;
&lt;h2 id=&quot;典型模式&quot;&gt;&lt;a href=&quot;#典型模式&quot; class=&quot;headerlink&quot; title=&quot;典型模式&quot;&gt;&lt;/a&gt;典型模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）State&lt;/li&gt;
&lt;li&gt;2）Memento</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="C++" scheme="https://notes.camcad.cn/tags/C/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式16：适配器（Adapter）</title>
    <link href="https://notes.camcad.cn/post/a3de17af.html"/>
    <id>https://notes.camcad.cn/post/a3de17af.html</id>
    <published>2021-07-25T10:47:35.000Z</published>
    <updated>2023-07-11T12:39:06.405Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“接口隔离”模式"><a href="#“接口隔离”模式" class="headerlink" title="“接口隔离”模式"></a>“接口隔离”模式</h2><p>在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。</p><span id="more"></span><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Facade</li><li>2）Proxy</li><li>3）Adapter</li><li>4）Mediator</li></ul><h1 id="Adapter适配器"><a href="#Adapter适配器" class="headerlink" title="Adapter适配器"></a>Adapter适配器</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件系统中，由于应用环境的变化，常常需要将一些现存的对象”放在新的环境中应用，但是新环境要求的接口是这些现存对象所不满足的。</li><li>2）如何应对这种“迁移的变化”?如何既能利用现有对象的良好实现，同时又能满足新的应用环境所要求的接口?</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>将一个类的接口转换成客户希望的另一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071313322691.jpg"><img src="http://image.camcad.cn/2021/07/2021071313322691.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Adapter模式主要应用于“希望复用一些现存的类，但是接口又与复用环境要求不一致的情况”，在遗留代码复用、类库迁移等方面非常有用。</li><li>2）GoF 23定义了两种Adapter模式的实现结构∶对象适配器和类适配器。但类适配器采用“多继承”的实现方式，一般不推荐使用。对象适配器采用“对象组合”的方式，更符合松耦合精神。</li><li>3）Adapter模式可以实现的非常灵活，不必拘泥于Gof23中定义的两种结构。例如，完全可以将Adapter模式中的“现存对象”作为新的接口方法参数，来达到适配的目的。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">适配器模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight c++"><figcaption><span>main_adapter.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;src/adapter.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::cout &lt;&lt; FILELINE &lt;&lt; <span class="string">&quot;ubuntu系统,vscode结合cmake、gdb自动化生成脚本示例&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="function">std::unique_ptr&lt;Player&gt; <span class="title">a</span><span class="params">(<span class="keyword">new</span> Forwards(<span class="string">&quot;张三&quot;</span>))</span></span>;</span><br><span class="line">  a-&gt;<span class="built_in">attack</span>();</span><br><span class="line"></span><br><span class="line">  <span class="function">std::unique_ptr&lt;Player&gt; <span class="title">b</span><span class="params">(<span class="keyword">new</span> Guards(<span class="string">&quot;李四&quot;</span>))</span></span>;</span><br><span class="line">  b-&gt;<span class="built_in">attack</span>();</span><br><span class="line">  a-&gt;<span class="built_in">defense</span>();</span><br><span class="line"></span><br><span class="line">  <span class="function">std::unique_ptr&lt;Player&gt; <span class="title">c</span><span class="params">(<span class="keyword">new</span> Translator(<span class="string">&quot;姚明&quot;</span>))</span></span>;</span><br><span class="line">  c-&gt;<span class="built_in">attack</span>();</span><br><span class="line">  b-&gt;<span class="built_in">defense</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>adapter.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _ADAPTER_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _ADAPTER_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 球员</span></span></span><br><span class="line"><span class="string"><span class="meta">class Player &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">protected:</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  // 进攻</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void attack() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 防守</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void defense() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~Player() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 前锋</span></span></span><br><span class="line"><span class="string"><span class="meta">class Forwards : public Player &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Forwards(std::string name) &#123; this-&gt;m_name = name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 进攻</span></span></span><br><span class="line"><span class="string"><span class="meta">  void attack() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>前锋 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 进攻<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 防守</span></span></span><br><span class="line"><span class="string"><span class="meta">  void defense() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>前锋 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 防守<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 后卫</span></span></span><br><span class="line"><span class="string"><span class="meta">class Guards : public Player &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Guards(std::string name) &#123; this-&gt;m_name = name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 进攻</span></span></span><br><span class="line"><span class="string"><span class="meta">  void attack() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>后卫 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 进攻<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 防守</span></span></span><br><span class="line"><span class="string"><span class="meta">  void defense() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>后卫 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 防守<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 外籍中锋</span></span></span><br><span class="line"><span class="string"><span class="meta">class ForeignCenter &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void setName(std::string name) &#123; this-&gt;m_name = name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void attack() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>外籍中锋 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 进攻<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void defend() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>外籍中锋 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 防守<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 翻译者</span></span></span><br><span class="line"><span class="string"><span class="meta">class Translator : public Player &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;ForeignCenter&gt; m_foreignCenter;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Translator(std::string name) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_foreignCenter.reset(new ForeignCenter());</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_foreignCenter-&gt;setName(name);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 进攻</span></span></span><br><span class="line"><span class="string"><span class="meta">  void attack() override &#123; this-&gt;m_foreignCenter-&gt;attack(); &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 防守</span></span></span><br><span class="line"><span class="string"><span class="meta">  void defense() override &#123; this-&gt;m_foreignCenter-&gt;defend(); &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _ADAPTER_H_</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">//目标接口（新接口）</span><br><span class="line">class ITarget&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void process()=0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//遗留接口（老接口）</span><br><span class="line">class IAdaptee&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void foo(int data)=0;</span><br><span class="line">    virtual int bar()=0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//遗留类型</span><br><span class="line">class OldClass: public IAdaptee&#123;</span><br><span class="line">    //....</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//对象适配器</span><br><span class="line">class Adapter: public ITarget&#123; //继承</span><br><span class="line">protected:</span><br><span class="line">    IAdaptee* pAdaptee;//组合</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    Adapter(IAdaptee* pAdaptee)&#123;</span><br><span class="line">        this-&gt;pAdaptee=pAdaptee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual void process()&#123;</span><br><span class="line">        int data=pAdaptee-&gt;bar();</span><br><span class="line">        pAdaptee-&gt;foo(data);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//类适配器</span><br><span class="line">class Adapter: public ITarget,</span><br><span class="line">               protected OldClass&#123; //多继承</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    IAdaptee* pAdaptee=new OldClass();</span><br><span class="line"></span><br><span class="line">    ITarget* pTarget=new Adapter(pAdaptee);</span><br><span class="line">    pTarget-&gt;process();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class stack&#123;</span><br><span class="line">    deqeue container;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class queue&#123;</span><br><span class="line">    deqeue container;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“接口隔离”模式&quot;&gt;&lt;a href=&quot;#“接口隔离”模式&quot; class=&quot;headerlink&quot; title=&quot;“接口隔离”模式&quot;&gt;&lt;/a&gt;“接口隔离”模式&lt;/h2&gt;&lt;p&gt;在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式15：代理模式（Proxy）</title>
    <link href="https://notes.camcad.cn/post/c80aa8ba.html"/>
    <id>https://notes.camcad.cn/post/c80aa8ba.html</id>
    <published>2021-07-25T10:47:09.000Z</published>
    <updated>2023-07-11T12:39:06.405Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“接口隔离”模式"><a href="#“接口隔离”模式" class="headerlink" title="“接口隔离”模式"></a>“接口隔离”模式</h2><p>在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Facade</li><li>2）Proxy</li><li>3）Adapter</li><li>4）Mediator<span id="more"></span></li></ul><h1 id="Proxy代理模式"><a href="#Proxy代理模式" class="headerlink" title="Proxy代理模式"></a>Proxy代理模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在面向对象系统中，有些对象由于某种原因（比如对象创建的开销很大，或者某些操作需要安全控制，或者需要进程外的访问等），直接访问会给使用者、或者系统结构带来很多麻烦。</li><li>2）如何在不失去透明操作对象的同时来管理&#x2F;控制这些对象特有的复杂性?增加一层间接层是软件开发中常见的解决方式。</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>为其他对象提供一种代理以控制（隔离，使用接口）对这个对象的访问。——《设计模式》Gof</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071312330560.jpg"><img src="http://image.camcad.cn/2021/07/2021071312330560.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）“增加一层间接层”是软件系统中对许多复杂问题的一种常见解决方法。在面向对象系统中，直接使用某些对象会带来很多问题，作为间接层的proxy对象便是解决这一问题的常用手段。</li><li>2）具体proxy设计模式的实现方法、实现粒度都相差很大，有些可能对单个对象做细粒度的控制，如copy-on-write技术，有些可能对组件模块提供抽象代理层,在架构层次对对象做proxy。</li><li>3）Proxy并不一定要求保持接口完整的一致性，只要能够实现间接控制，有时候损及一些透明性是可以接受的。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">代理模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight c++"><figcaption><span>main_proxy.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./src/proxy.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  std::shared_ptr&lt;Schoolgirl&gt; sg = std::<span class="built_in">make_shared</span>&lt;Schoolgirl&gt;(<span class="string">&quot;li li&quot;</span>);</span><br><span class="line">  std::shared_ptr&lt;Pursuit&gt; pur = std::<span class="built_in">make_shared</span>&lt;Pursuit&gt;(sg);</span><br><span class="line">  std::shared_ptr&lt;GiveGift&gt; gg = std::<span class="built_in">make_shared</span>&lt;Proxy&gt;(pur);</span><br><span class="line"></span><br><span class="line">  gg-&gt;<span class="built_in">giveDolls</span>();</span><br><span class="line">  gg-&gt;<span class="built_in">giveFlowers</span>();</span><br><span class="line">  gg-&gt;<span class="built_in">giveChocolate</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>proxy.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _PROXY_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _PROXY_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Schoolgirl &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Schoolgirl() &#123; this-&gt;m_name = &quot;</span><span class="string">&quot;; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  Schoolgirl(std::string name) &#123; this-&gt;m_name = name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string getName() &#123; return this-&gt;m_name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class GiveGift &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void giveDolls() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void giveFlowers() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void giveChocolate() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~GiveGift() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Pursuit : public GiveGift &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::shared_ptr&lt;Schoolgirl&gt; m_schoolgirl;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Pursuit() &#123; this-&gt;m_schoolgirl = nullptr; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  Pursuit(std::shared_ptr&lt;Schoolgirl&gt; schoolgirl) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_schoolgirl = schoolgirl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveDolls() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_schoolgirl != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_schoolgirl-&gt;getName() &lt;&lt; &quot;</span>: give dolls<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveFlowers() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_schoolgirl != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_schoolgirl-&gt;getName() &lt;&lt; &quot;</span>: give flowers<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveChocolate() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_schoolgirl != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_schoolgirl-&gt;getName()</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;&lt; &quot;</span>: give chocolate<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Proxy : public GiveGift &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::shared_ptr&lt;Pursuit&gt; m_pursuit;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Proxy() &#123; this-&gt;m_pursuit = nullptr; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  Proxy(std::shared_ptr&lt;Pursuit&gt; pursuit) &#123; this-&gt;m_pursuit = pursuit; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveDolls() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_pursuit != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      this-&gt;m_pursuit-&gt;giveDolls();</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveFlowers() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_pursuit != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      this-&gt;m_pursuit-&gt;giveFlowers();</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveChocolate() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_pursuit != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      this-&gt;m_pursuit-&gt;giveChocolate();</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // __PROXY_H_</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><h4 id="client-cpp"><a href="#client-cpp" class="headerlink" title="client.cpp"></a>client.cpp</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class ISubject&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void process();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class RealSubject: public ISubject&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void process()&#123;</span><br><span class="line">        //....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ClientApp&#123;</span><br><span class="line"></span><br><span class="line">    ISubject* subject;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    ClientApp()&#123;</span><br><span class="line">        subject=new RealSubject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void DoTask()&#123;</span><br><span class="line">        //...</span><br><span class="line">        subject-&gt;process();</span><br><span class="line"></span><br><span class="line">        //....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="proxy-cpp"><a href="#proxy-cpp" class="headerlink" title="proxy.cpp"></a>proxy.cpp</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class ISubject&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void process();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//Proxy的设计</span><br><span class="line">class SubjectProxy: public ISubject&#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    virtual void process()&#123;</span><br><span class="line">        //对RealSubject的一种间接访问</span><br><span class="line">        //....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ClientApp&#123;</span><br><span class="line"></span><br><span class="line">    ISubject* subject;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    ClientApp()&#123;</span><br><span class="line">        subject=new SubjectProxy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void DoTask()&#123;</span><br><span class="line">        //...</span><br><span class="line">        subject-&gt;process();</span><br><span class="line"></span><br><span class="line">        //....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“接口隔离”模式&quot;&gt;&lt;a href=&quot;#“接口隔离”模式&quot; class=&quot;headerlink&quot; title=&quot;“接口隔离”模式&quot;&gt;&lt;/a&gt;“接口隔离”模式&lt;/h2&gt;&lt;p&gt;在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。&lt;/p&gt;
&lt;h2 id=&quot;典型模式&quot;&gt;&lt;a href=&quot;#典型模式&quot; class=&quot;headerlink&quot; title=&quot;典型模式&quot;&gt;&lt;/a&gt;典型模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）Facade&lt;/li&gt;
&lt;li&gt;2）Proxy&lt;/li&gt;
&lt;li&gt;3）Adapter&lt;/li&gt;
&lt;li&gt;4）Mediator</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式14：门面模式（Facade）</title>
    <link href="https://notes.camcad.cn/post/6600c949.html"/>
    <id>https://notes.camcad.cn/post/6600c949.html</id>
    <published>2021-07-24T20:58:12.000Z</published>
    <updated>2023-07-11T12:39:06.405Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“接口隔离”模式"><a href="#“接口隔离”模式" class="headerlink" title="“接口隔离”模式"></a>“接口隔离”模式</h2><p>在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Facade</li><li>2）Proxy</li><li>3）Adapter</li><li>4）Mediator<span id="more"></span></li></ul><h1 id="Facade门面模式"><a href="#Facade门面模式" class="headerlink" title="Facade门面模式"></a>Facade门面模式</h1><h2 id="系统间耦合的复杂度"><a href="#系统间耦合的复杂度" class="headerlink" title="系统间耦合的复杂度"></a>系统间耦合的复杂度</h2><p><a href="http://image.camcad.cn/2021/07/2021071213401496.jpg"><img src="http://image.camcad.cn/2021/07/2021071213401496.jpg"></a></p><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）上述A方案的问题在于组件的客户和组件中各种复杂的子系统有了过多的耦合，随着外部客户程序和各子系统的演化，这种过多的耦 合面临很多变化的挑战。</li><li>2）如何简化外部客户程序和系统间的交互接口？如何将外部客户程序的演化和内部子系统的变化之间的依赖相互解耦？</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>为子系统中的一组接口提供一个一致（稳定）的界面Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用（复用）。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/202107121346375.jpg"><img src="http://image.camcad.cn/2021/07/202107121346375-1024x388.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）从客户程序的角度来看，Facade模式简化了整个组件系统的接口，对于组件内部与外部客户程序来说，达到了一种“解耦”的效果——内部子系统的任何变化不会影响到Facade接口的变化。</li><li>2）Facade设计模式更注重从架构的层次去看整个系统，而不是单个类的层次。Facade很多时候更是一种架构设计模式。</li><li>3）Facade设计模式并非一个集装箱，可以任意地放进任何多个对象。Facade模式中组件的内部应该是“相互耦合关系比较大的一系列组件”，而不是一个简单的功能集合。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight c++"><figcaption><span>main_facade.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;src/facade.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::unique_ptr&lt;Facade&gt; <span class="title">f</span><span class="params">(<span class="keyword">new</span> Facade())</span></span>;</span><br><span class="line">    f-&gt;<span class="built_in">methodA</span>();</span><br><span class="line">    f-&gt;<span class="built_in">methodB</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>facade.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _FACADE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _FACADE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class SubSystemOne &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodOne() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>Subsystem method one<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class SubSystemTwo &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodTwo() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>Subsystem method two<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class SubSystemThree &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodThree() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>Subsystem method Three<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class SubSystemFour &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodFour() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>Subsystem method Four<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Facade &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;SubSystemOne&gt; one;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;SubSystemTwo&gt; two;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;SubSystemThree&gt; three;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;SubSystemFour&gt; four;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodA() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; &quot;</span>=== methodA ===<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;one-&gt;methodOne();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;two-&gt;methodTwo();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;four-&gt;methodFour();</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; &quot;</span>\n<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodB() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; &quot;</span>=== methodB ===<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;one-&gt;methodOne();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;three-&gt;methodThree();</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; &quot;</span>\n<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  Facade() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;init();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;one.reset(new SubSystemOne());</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;two.reset(new SubSystemTwo());</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;three.reset(new SubSystemThree());</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;four.reset(new SubSystemFour());</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">private:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void init() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;one = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;two = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;three = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;four = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _FACADE_H_</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“接口隔离”模式&quot;&gt;&lt;a href=&quot;#“接口隔离”模式&quot; class=&quot;headerlink&quot; title=&quot;“接口隔离”模式&quot;&gt;&lt;/a&gt;“接口隔离”模式&lt;/h2&gt;&lt;p&gt;在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。&lt;/p&gt;
&lt;h2 id=&quot;典型模式&quot;&gt;&lt;a href=&quot;#典型模式&quot; class=&quot;headerlink&quot; title=&quot;典型模式&quot;&gt;&lt;/a&gt;典型模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）Facade&lt;/li&gt;
&lt;li&gt;2）Proxy&lt;/li&gt;
&lt;li&gt;3）Adapter&lt;/li&gt;
&lt;li&gt;4）Mediator</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="C++" scheme="https://notes.camcad.cn/tags/C/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式10：原型模式（Prototype）</title>
    <link href="https://notes.camcad.cn/post/663bd6c2.html"/>
    <id>https://notes.camcad.cn/post/663bd6c2.html</id>
    <published>2021-07-24T12:17:34.000Z</published>
    <updated>2023-07-11T12:39:06.405Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="“对象创建”模式"><a href="#“对象创建”模式" class="headerlink" title="“对象创建”模式"></a>“对象创建”模式</h1><p>通过“对象创建” 模式绕开new，来避免对象创建（new）过程中所导致的紧耦合（依赖具体类），从而支持对象创建的稳定。它是接口抽象之后的第一步工作。</p><span id="more"></span><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Factory Method</li><li>2）Abstract Factory</li><li>3）Prototype</li><li>4）Builder</li></ul><h1 id="Prototype原型模式"><a href="#Prototype原型模式" class="headerlink" title="Prototype原型模式"></a>Prototype原型模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件系统中，经常面临着“某些结构复杂的对象”的创建工作，由于需要的变化，这些对象经常面临着剧烈的变化，但是它们却拥有比较稳定一致的接口。</li><li>2）如何应对这种变化？如何向“客户程序”（使用这些对象的程序）“隔离出”这些易变对象“，从而使得”依赖这些易变对象的客户程序“不随着需求改变而改变。</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>使用原型实例指定创建对象的种类，然后通过拷贝这些原型来创建新的对象。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021070814140816.jpg"><img src="http://image.camcad.cn/2021/07/2021070814140816.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Prototype模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些 “易变类：拥有”稳定的接口“。</li><li>2）Prototype模式对于”如何创建易变类的实体对象”采用“原型克隆”的方法来做，它使得我们可以非常灵活地动态创建“拥有某些稳定接口”的新对象——所需工作仅仅是注册一个新类的对象（即原型），然后在任何需要的地方Clone。</li><li>3）Prototype模式中的Clone方法可以利用某些框架中的序列化来实现深拷贝。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">原型模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight c++"><figcaption><span>main_prototype.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./src/prototype.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">std::unique_ptr&lt;Resume&gt; <span class="title">tmp</span><span class="params">(<span class="keyword">new</span> Resume(<span class="string">&quot;emmet&quot;</span>))</span></span>;</span><br><span class="line">  tmp-&gt;<span class="built_in">setPersonalInfo</span>(<span class="string">&quot;man&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">  std::unique_ptr&lt;Resume&gt; a = <span class="literal">nullptr</span>;</span><br><span class="line">  std::unique_ptr&lt;Resume&gt; b = <span class="literal">nullptr</span>;</span><br><span class="line">  std::unique_ptr&lt;Resume&gt; c = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">  a = tmp-&gt;<span class="built_in">clone</span>();</span><br><span class="line">  b = tmp-&gt;<span class="built_in">clone</span>();</span><br><span class="line">  c = tmp-&gt;<span class="built_in">clone</span>();</span><br><span class="line"></span><br><span class="line">  a-&gt;<span class="built_in">setWorkExperience</span>(<span class="string">&quot;2016-2017&quot;</span>, <span class="string">&quot;huaihua city&quot;</span>);</span><br><span class="line"></span><br><span class="line">  b-&gt;<span class="built_in">setPersonalInfo</span>(<span class="string">&quot;woman&quot;</span>, <span class="number">19</span>);</span><br><span class="line">  b-&gt;<span class="built_in">setWorkExperience</span>(<span class="string">&quot;2017-2018&quot;</span>, <span class="string">&quot;beijing&quot;</span>);</span><br><span class="line"></span><br><span class="line">  c-&gt;<span class="built_in">setPersonalInfo</span>(<span class="string">&quot;man&quot;</span>, <span class="number">20</span>);</span><br><span class="line">  c-&gt;<span class="built_in">setWorkExperience</span>(<span class="string">&quot;2018-2019&quot;</span>, <span class="string">&quot;guang zhou&quot;</span>);</span><br><span class="line"></span><br><span class="line">  a-&gt;<span class="built_in">display</span>();</span><br><span class="line">  b-&gt;<span class="built_in">display</span>();</span><br><span class="line">  c-&gt;<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>prototype.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _PROTOTYPE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _PROTOTYPE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 工作经历</span></span></span><br><span class="line"><span class="string"><span class="meta">class WorkExperience &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_workDate;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_company;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void setWorkDate(std::string workDate) &#123; this-&gt;m_workDate = workDate; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void setCompany(std::string company) &#123; this-&gt;m_company = company; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string getWorkDate() &#123; return this-&gt;m_workDate; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string getCompany() &#123; return this-&gt;m_company; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  WorkExperience() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_workDate = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_company = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 简历</span></span></span><br><span class="line"><span class="string"><span class="meta">class Resume &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  WorkExperience m_work;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_sex;</span></span></span><br><span class="line"><span class="string"><span class="meta">  int *m_age;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Resume(std::string name) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = name;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_sex = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_age = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  Resume(const Resume &amp;r) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_work = r.m_work;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = r.m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_sex = r.m_sex;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_age = new int(*r.m_age);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void setPersonalInfo(std::string sex, int age) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_sex = sex;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_age = new int(age);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void setWorkExperience(std::string workDate, std::string company) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_work.setWorkDate(workDate);</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_work.setCompany(company);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void display() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>name: <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span>  <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; &quot;</span>sex: <span class="string">&quot; &lt;&lt; this-&gt;m_sex &lt;&lt; &quot;</span>  <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; &quot;</span>age: <span class="string">&quot; &lt;&lt; *this-&gt;m_age &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>work date: <span class="string">&quot; &lt;&lt; this-&gt;m_work.getWorkDate() &lt;&lt; &quot;</span>  <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; &quot;</span>company: <span class="string">&quot; &lt;&lt; this-&gt;m_work.getCompany() &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;Resume&gt; clone() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::unique_ptr&lt;Resume&gt; ret = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    ret.reset(new Resume(*this));</span></span></span><br><span class="line"><span class="string"><span class="meta">    return ret;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~Resume() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_age != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      delete this-&gt;m_age;</span></span></span><br><span class="line"><span class="string"><span class="meta">      this-&gt;m_age = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _PROTOTYPE_H_</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><h3 id="Client-cpp"><a href="#Client-cpp" class="headerlink" title="Client.cpp"></a>Client.cpp</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class MainForm : public Form</span><br><span class="line">&#123;</span><br><span class="line">    ISplitter*  prototype;//原型对象</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    MainForm(ISplitter*  prototype)&#123;</span><br><span class="line">        this-&gt;prototype=prototype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Button1_Click()&#123;</span><br><span class="line"></span><br><span class="line">        ISplitter * splitter=</span><br><span class="line">            prototype-&gt;clone(); //克隆原型</span><br><span class="line"></span><br><span class="line">        splitter-&gt;split();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Prototype-cpp"><a href="#Prototype-cpp" class="headerlink" title="Prototype.cpp"></a>Prototype.cpp</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//抽象类</span><br><span class="line">class ISplitter&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void split()=0;</span><br><span class="line">    virtual ISplitter* clone()=0; //通过克隆自己来创建对象</span><br><span class="line"></span><br><span class="line">    virtual ~ISplitter()&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="ConcretePrototype-cpp"><a href="#ConcretePrototype-cpp" class="headerlink" title="ConcretePrototype.cpp"></a>ConcretePrototype.cpp</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//具体类</span><br><span class="line">class BinarySplitter : public ISplitter&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual ISplitter* clone()&#123;</span><br><span class="line">        return new BinarySplitter(*this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class TxtSplitter: public ISplitter&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual ISplitter* clone()&#123;</span><br><span class="line">        return new TxtSplitter(*this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class PictureSplitter: public ISplitter&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual ISplitter* clone()&#123;</span><br><span class="line">        return new PictureSplitter(*this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class VideoSplitter: public ISplitter&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual ISplitter* clone()&#123;</span><br><span class="line">        return new VideoSplitter(*this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;“对象创建”模式&quot;&gt;&lt;a href=&quot;#“对象创建”模式&quot; class=&quot;headerlink&quot; title=&quot;“对象创建”模式&quot;&gt;&lt;/a&gt;“对象创建”模式&lt;/h1&gt;&lt;p&gt;通过“对象创建” 模式绕开new，来避免对象创建（new）过程中所导致的紧耦合（依赖具体类），从而支持对象创建的稳定。它是接口抽象之后的第一步工作。&lt;/p&gt;</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式08：工厂方法（Factory Method）</title>
    <link href="https://notes.camcad.cn/post/d39d84e.html"/>
    <id>https://notes.camcad.cn/post/d39d84e.html</id>
    <published>2021-07-23T15:33:01.000Z</published>
    <updated>2023-07-11T12:39:06.405Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="“对象创建”模式"><a href="#“对象创建”模式" class="headerlink" title="“对象创建”模式"></a>“对象创建”模式</h1><p>通过“对象创建” 模式绕开new，来避免对象创建（new）过程中所导致的紧耦合（依赖具体类），从而支持对象创建的稳定。它是接口抽象之后的第一步工作。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Factory Method</li><li>2）Abstract Factory</li><li>3）Prototype</li><li>4）Builder<span id="more"></span></li></ul><h1 id="Factory-Method工厂方法"><a href="#Factory-Method工厂方法" class="headerlink" title="Factory Method工厂方法"></a>Factory Method工厂方法</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件系统中，经常面临着创建对象的工作；由于需求的变化，需要创建的对象的具体类型经常变化。</li><li>2）如何应对这种变化？如何绕过常规的对象创建方法(new)，提供一种“封装机制”来避免客户程序和这种“具体对象创建工作”的紧耦合？</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。 Factory Method使得一个类的实例化延迟（目的：解耦，手段：虚函数）到子类。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021070614221082.jpg"><img src="http://image.camcad.cn/2021/07/2021070614221082.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Factory Method模式用于隔离类对象的使用者和具体类型之间的耦合关系。面对一个经常变化的具体类型，紧耦合关系(new)会导致软件的脆弱。</li><li>2）Factory Method模式通过面向对象的手法，将所要创建的具体对象工作延迟到子类，从而实现一种扩展（而非更改）的策略，较好地解决了这种紧耦合关系。</li><li>3）Factory Method模式解决“单个对象”的需求变化。缺点在于要求创建方法&#x2F;参数相同。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">工厂方法模式</a></li><li class="tab"><a href="#tab-2">进阶模式</a></li><li class="tab"><a href="#tab-3">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight c++"><figcaption><span>main_factoryMethod.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./src/factory_method.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  std::shared_ptr&lt;IFactory&gt; uf = <span class="literal">nullptr</span>;</span><br><span class="line">  std::shared_ptr&lt;ILeiFeng&gt; lf = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">  uf = std::<span class="built_in">make_shared</span>&lt;UndergraduateFactory&gt;();</span><br><span class="line">  lf = uf-&gt;<span class="built_in">createLeiFeng</span>();</span><br><span class="line">  lf-&gt;<span class="built_in">sweep</span>();</span><br><span class="line">  lf-&gt;<span class="built_in">wash</span>();</span><br><span class="line">  lf-&gt;<span class="built_in">buyRice</span>();</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  uf = std::<span class="built_in">make_shared</span>&lt;VolunteerFactory&gt;();</span><br><span class="line">  lf = uf-&gt;<span class="built_in">createLeiFeng</span>();</span><br><span class="line">  lf-&gt;<span class="built_in">sweep</span>();</span><br><span class="line">  lf-&gt;<span class="built_in">wash</span>();</span><br><span class="line">  lf-&gt;<span class="built_in">buyRice</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>factory_method.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _FACTORY_METHOD_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _FACTORY_METHOD_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class ILeiFeng &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void sweep() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void wash() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void buyRice() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~ILeiFeng() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class IFactory &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual std::shared_ptr&lt;ILeiFeng&gt; createLeiFeng() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~IFactory()&#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Undergraduate : public ILeiFeng &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Undergraduate(std::string name) &#123; this-&gt;m_name = name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void sweep() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span>: undergraduate sweep<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void wash() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span>: undergraduate wash<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void buyRice() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span>: undergraduate buyRice<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Volunteer : public ILeiFeng &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Volunteer(std::string name) &#123; this-&gt;m_name = name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void sweep() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span>: Volunteer sweep<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void wash() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span>: Volunteer wash<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void buyRice() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span>: Volunteer buyRice<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class UndergraduateFactory : public IFactory &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::shared_ptr&lt;ILeiFeng&gt; createLeiFeng() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    return std::make_shared&lt;Undergraduate&gt;(&quot;</span>student<span class="string">&quot;);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class VolunteerFactory : public IFactory &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::shared_ptr&lt;ILeiFeng&gt; createLeiFeng() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    return std::make_shared&lt;Volunteer&gt;(&quot;</span>volunteer<span class="string">&quot;);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _FACTORY_METHOD_H_</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainForm</span> : <span class="keyword">public</span> Form</span><br><span class="line">&#123;</span><br><span class="line">    SplitterFactory*  factory;<span class="comment">//工厂</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MainForm</span>(SplitterFactory*  factory)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;factory=factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Button1_Click</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ISplitter * splitter=</span><br><span class="line">            factory-&gt;<span class="built_in">CreateSplitter</span>(); <span class="comment">//多态new</span></span><br><span class="line"></span><br><span class="line">        splitter-&gt;<span class="built_in">split</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ISplitter</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">split</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">ISplitter</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SplitterFactory</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">SplitterFactory</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySplitter</span> : <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TxtSplitter</span>: <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PictureSplitter</span>: <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoSplitter</span>: <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySplitterFactory</span>: <span class="keyword">public</span> SplitterFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">BinarySplitter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TxtSplitterFactory</span>: <span class="keyword">public</span> SplitterFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">TxtSplitter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PictureSplitterFactory</span>: <span class="keyword">public</span> SplitterFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">PictureSplitter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoSplitterFactory</span>: <span class="keyword">public</span> SplitterFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ISplitter* <span class="title">CreateSplitter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">VideoSplitter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainForm</span> : <span class="keyword">public</span> Form</span><br><span class="line">&#123;</span><br><span class="line">    TextBox* txtFilePath;</span><br><span class="line">    TextBox* txtFileNumber;</span><br><span class="line">    ProgressBar* progressBar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Button1_Click</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ISplitter * splitter=</span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">BinarySplitter</span>();<span class="comment">//依赖具体类</span></span><br><span class="line"></span><br><span class="line">        splitter-&gt;<span class="built_in">split</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ISplitter</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">split</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">ISplitter</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySplitter</span> : <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TxtSplitter</span>: <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PictureSplitter</span>: <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoSplitter</span>: <span class="keyword">public</span> ISplitter&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;“对象创建”模式&quot;&gt;&lt;a href=&quot;#“对象创建”模式&quot; class=&quot;headerlink&quot; title=&quot;“对象创建”模式&quot;&gt;&lt;/a&gt;“对象创建”模式&lt;/h1&gt;&lt;p&gt;通过“对象创建” 模式绕开new，来避免对象创建（new）过程中所导致的紧耦合（依赖具体类），从而支持对象创建的稳定。它是接口抽象之后的第一步工作。&lt;/p&gt;
&lt;h2 id=&quot;典型模式&quot;&gt;&lt;a href=&quot;#典型模式&quot; class=&quot;headerlink&quot; title=&quot;典型模式&quot;&gt;&lt;/a&gt;典型模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）Factory Method&lt;/li&gt;
&lt;li&gt;2）Abstract Factory&lt;/li&gt;
&lt;li&gt;3）Prototype&lt;/li&gt;
&lt;li&gt;4）Builder</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="C++" scheme="https://notes.camcad.cn/tags/C/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式06：装饰模式（Decorator）</title>
    <link href="https://notes.camcad.cn/post/1da0e9fd.html"/>
    <id>https://notes.camcad.cn/post/1da0e9fd.html</id>
    <published>2021-07-23T08:08:39.000Z</published>
    <updated>2023-07-11T12:39:06.405Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="“单一职责”模式："><a href="#“单一职责”模式：" class="headerlink" title="“单一职责”模式："></a>“单一职责”模式：</h1><p>在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码，这时候的关键是划清责任。</p><h3 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h3><ul><li>1）Decorator</li><li>2）Bridge<span id="more"></span></li></ul><h1 id="Decorator装饰模式"><a href="#Decorator装饰模式" class="headerlink" title="Decorator装饰模式"></a>Decorator装饰模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在某些情况下我们可能会“过度地使用继承来扩展对象的功能”，由于继承为类型引入的静态特质，使得这种扩展方式缺乏灵活性；并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀。</li><li>2）如何使“对象功能的扩展”能够根据需要来动态地实现？同时避免“扩展功能的增多”带来的子类膨胀问题？从而使得任何“功能扩展变化”所导致的影响将为最低？</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>动态（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（继承）更为灵活（消除重复代码 &amp; 减少子类个数）。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021070414100964.jpg"><img src="http://image.camcad.cn/2021/07/2021070414100964.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）通过采用组合而非继承的手法， Decorator模式实现了在运行时动态扩展对象功能的能力，而且可以根据需要扩展多个功能。避免了使用继承带来的“灵活性差”和“多子类衍生问题”。</li><li>2）Decorator类在接口上表现为is-a Component的继承关系，即Decorator类继承了Component类所具有的接口。但在实现上又表现为has-a Component的组合关系，即Decorator类又使用了另外一个Component类。</li><li>3）Decorator模式的目的并非解决“多子类衍生的多继承”问题， Decorator模式应用的要点在于解决“主体类在多个方向上的扩展功能”——是为“装饰”的含义。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">装饰模式</a></li><li class="tab"><a href="#tab-2">进阶模式</a></li><li class="tab"><a href="#tab-3">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><h3 id="main-decorator-cpp"><a href="#main-decorator-cpp" class="headerlink" title="main_decorator.cpp"></a><code>main_decorator.cpp</code></h3><figure class="highlight c++"><figcaption><span>main_decorator.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./src/decorator.cpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  ConcreteComponent *cc = <span class="keyword">new</span> <span class="built_in">ConcreteComponent</span>();</span><br><span class="line"></span><br><span class="line">  ConcreteDecoratorA *ca = <span class="keyword">new</span> <span class="built_in">ConcreteDecoratorA</span>();</span><br><span class="line"></span><br><span class="line">  ConcreteDecoratorB *cb = <span class="keyword">new</span> <span class="built_in">ConcreteDecoratorB</span>();</span><br><span class="line"></span><br><span class="line">  ca-&gt;<span class="built_in">setComponent</span>(cc);</span><br><span class="line"></span><br><span class="line">  cb-&gt;<span class="built_in">setComponent</span>(ca);</span><br><span class="line"></span><br><span class="line">  cb-&gt;<span class="built_in">operation</span>();</span><br><span class="line"></span><br><span class="line">  cb-&gt;<span class="built_in">destroy</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="decorator-cpp"><a href="#decorator-cpp" class="headerlink" title="decorator.cpp"></a><code>decorator.cpp</code></h3><figure class="highlight c++"><figcaption><span>decorator.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _DECORATOR_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _DECORATOR_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE <span class="string">&quot;file: &quot;</span> <span class="string">&lt;&lt; __EMMETFILE__ &lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Component &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void operation() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~Component() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void destroy() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    auto *tmp = this;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (tmp != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      delete tmp;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class ConcreteComponent : public Component &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void operation() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>concreteComponent operation<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Decorator : public Component &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">protected:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Component *m_component;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Decorator() &#123; this-&gt;m_component = nullptr; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~Decorator() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void operation() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_component != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      this-&gt;m_component-&gt;operation();</span></span></span><br><span class="line"><span class="string"><span class="meta">      this-&gt;m_component-&gt;destroy();</span></span></span><br><span class="line"><span class="string"><span class="meta">      this-&gt;m_component = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void setComponent(Component *component) &#123; this-&gt;m_component = component; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class ConcreteDecoratorA : public Decorator &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void operation() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_component-&gt;operation();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_component-&gt;destroy();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_component = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>concreteDecoratorA operation<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;addedBehavior();</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">private:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void addedBehavior() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>private: addedBehavior<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class ConcreteDecoratorB : public Decorator &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void operation() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_component-&gt;operation();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_component-&gt;destroy();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_component = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>concreteDecoratorB operation<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _DECORATOR_H_</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stream</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>：</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Stream</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileStream</span>: <span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写文件流</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkStream</span> :<span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写网络流</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MemoryStream</span> :<span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写内存流</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CryptoStream</span>: <span class="keyword">public</span> Stream &#123;</span><br><span class="line"></span><br><span class="line">    Stream* stream;<span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CryptoStream</span>(Stream* stm):<span class="built_in">stream</span>(stm)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream-&gt;<span class="built_in">Read</span>(number);<span class="comment">//读文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream::<span class="built_in">Seek</span>(position);<span class="comment">//定位文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream::<span class="built_in">Write</span>(data);<span class="comment">//写文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BufferedStream</span> : <span class="keyword">public</span> Stream&#123;</span><br><span class="line"></span><br><span class="line">    Stream* stream;<span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BufferedStream</span>(Stream* stm):<span class="built_in">stream</span>(stm)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Process</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//运行时装配</span></span><br><span class="line">    FileStream* s1=<span class="keyword">new</span> <span class="built_in">FileStream</span>();</span><br><span class="line">    CryptoStream* s2=<span class="keyword">new</span> <span class="built_in">CryptoStream</span>(s1);</span><br><span class="line"></span><br><span class="line">    BufferedStream* s3=<span class="keyword">new</span> <span class="built_in">BufferedStream</span>(s1);</span><br><span class="line"></span><br><span class="line">    BufferedStream* s4=<span class="keyword">new</span> <span class="built_in">BufferedStream</span>(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="装饰模式（优化）-DEMO"><a href="#装饰模式（优化）-DEMO" class="headerlink" title="装饰模式（优化）_DEMO"></a>装饰模式（优化）_DEMO</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stream</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>：</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Stream</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileStream</span>: <span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写文件流</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkStream</span> :<span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写网络流</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MemoryStream</span> :<span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写内存流</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展操作</span></span><br><span class="line"></span><br><span class="line">DecoratorStream: <span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Stream* stream;<span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">DecoratorStream</span>(Stream * stm):<span class="built_in">stream</span>(stm)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CryptoStream</span>: <span class="keyword">public</span> DecoratorStream &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CryptoStream</span>(Stream* stm):<span class="built_in">DecoratorStream</span>(stm)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream-&gt;<span class="built_in">Read</span>(number);<span class="comment">//读文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream::<span class="built_in">Seek</span>(position);<span class="comment">//定位文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        stream::<span class="built_in">Write</span>(data);<span class="comment">//写文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BufferedStream</span> : <span class="keyword">public</span> DecoratorStream&#123;</span><br><span class="line"></span><br><span class="line">    Stream* stream;<span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BufferedStream</span>(Stream* stm):<span class="built_in">DecoratorStream</span>(stm)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Process</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//运行时装配</span></span><br><span class="line">    FileStream* s1=<span class="keyword">new</span> <span class="built_in">FileStream</span>();</span><br><span class="line"></span><br><span class="line">    CryptoStream* s2=<span class="keyword">new</span> <span class="built_in">CryptoStream</span>(s1);</span><br><span class="line"></span><br><span class="line">    BufferedStream* s3=<span class="keyword">new</span> <span class="built_in">BufferedStream</span>(s1);</span><br><span class="line"></span><br><span class="line">    BufferedStream* s4=<span class="keyword">new</span> <span class="built_in">BufferedStream</span>(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stream</span>&#123;</span><br><span class="line"><span class="keyword">public</span>：</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Stream</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主体类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileStream</span>: <span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkStream</span> :<span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MemoryStream</span> :<span class="keyword">public</span> Stream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//读内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//定位内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(<span class="type">char</span> data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//写内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CryptoFileStream</span> :<span class="keyword">public</span> FileStream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Read</span>(number);<span class="comment">//读文件流</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Seek</span>(position);<span class="comment">//定位文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Write</span>(data);<span class="comment">//写文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CryptoNetworkStream</span> : :<span class="keyword">public</span> NetworkStream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        NetworkStream::<span class="built_in">Read</span>(number);<span class="comment">//读网络流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        NetworkStream::<span class="built_in">Seek</span>(position);<span class="comment">//定位网络流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        NetworkStream::<span class="built_in">Write</span>(data);<span class="comment">//写网络流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CryptoMemoryStream</span> : <span class="keyword">public</span> MemoryStream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        MemoryStream::<span class="built_in">Read</span>(number);<span class="comment">//读内存流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        MemoryStream::<span class="built_in">Seek</span>(position);<span class="comment">//定位内存流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        MemoryStream::<span class="built_in">Write</span>(data);<span class="comment">//写内存流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BufferedFileStream</span> : <span class="keyword">public</span> FileStream&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BufferedNetworkStream</span> : <span class="keyword">public</span> NetworkStream&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BufferedMemoryStream</span> : <span class="keyword">public</span> MemoryStream&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CryptoBufferedFileStream</span> :<span class="keyword">public</span> FileStream&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">char</span> <span class="title">Read</span><span class="params">(<span class="type">int</span> number)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        <span class="comment">//额外的缓冲操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Read</span>(number);<span class="comment">//读文件流</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Seek</span><span class="params">(<span class="type">int</span> position)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        <span class="comment">//额外的缓冲操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Seek</span>(position);<span class="comment">//定位文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        <span class="comment">//额外的缓冲操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Write</span><span class="params">(byte data)</span></span>&#123;</span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        <span class="comment">//额外的缓冲操作...</span></span><br><span class="line">        FileStream::<span class="built_in">Write</span>(data);<span class="comment">//写文件流</span></span><br><span class="line">        <span class="comment">//额外的加密操作...</span></span><br><span class="line">        <span class="comment">//额外的缓冲操作...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Process</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//编译时装配</span></span><br><span class="line">    CryptoFileStream *fs1 = <span class="keyword">new</span> <span class="built_in">CryptoFileStream</span>();</span><br><span class="line"></span><br><span class="line">    BufferedFileStream *fs2 = <span class="keyword">new</span> <span class="built_in">BufferedFileStream</span>();</span><br><span class="line"></span><br><span class="line">    CryptoBufferedFileStream *fs3 =<span class="keyword">new</span> <span class="built_in">CryptoBufferedFileStream</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;“单一职责”模式：&quot;&gt;&lt;a href=&quot;#“单一职责”模式：&quot; class=&quot;headerlink&quot; title=&quot;“单一职责”模式：&quot;&gt;&lt;/a&gt;“单一职责”模式：&lt;/h1&gt;&lt;p&gt;在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码，这时候的关键是划清责任。&lt;/p&gt;
&lt;h3 id=&quot;典型模式&quot;&gt;&lt;a href=&quot;#典型模式&quot; class=&quot;headerlink&quot; title=&quot;典型模式&quot;&gt;&lt;/a&gt;典型模式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1）Decorator&lt;/li&gt;
&lt;li&gt;2）Bridge</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="C++" scheme="https://notes.camcad.cn/tags/C/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式05：观察者模式（Observer / Event）</title>
    <link href="https://notes.camcad.cn/post/4919115d.html"/>
    <id>https://notes.camcad.cn/post/4919115d.html</id>
    <published>2021-07-23T08:08:02.000Z</published>
    <updated>2023-07-11T12:39:06.405Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="Observer-观察者模式"><a href="#Observer-观察者模式" class="headerlink" title="Observer 观察者模式"></a>Observer 观察者模式</h1><h2 id="“组件协作”模式"><a href="#“组件协作”模式" class="headerlink" title="“组件协作”模式"></a>“组件协作”模式</h2><ul><li><p>1）现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。</p></li><li><p>2）典型模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Template Method</span><br><span class="line">Strategy</span><br><span class="line">Observer / Event</span><br></pre></td></tr></table></figure></li></ul><span id="more"></span><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，我们需要为某些对象建立一种“通知依赖关系” ——一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知。如果这样的依赖关系过于紧密，将使软件不能很好地抵御变化。</li><li>2）使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系。从而实现软件体系结构的松耦合。</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>定义对象间的一种一对多（变化）的依赖关系，以便当一个对象(Subject)的状态发生改变时，所有依赖于它的对象都得到通知并自动更新。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/06/2021062915011927.jpg"><img src="http://image.camcad.cn/2021/06/2021062915011927-1024x383.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）使用面向对象的抽象，Observer模式使得我们可以独立地改变目标与观察者，从而使二者之间的依赖关系达致松耦合。</li><li>2）目标发送通知时，无需指定观察者，通知（可以携带通知信息作为参数）会自动传播。</li><li>3）观察者自己决定是否需要订阅通知，目标对象对此一无所知。</li><li>4）Observer模式是基于事件的UI框架中非常常用的设计模式，也是MVC模式的一个重要组成部分。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">观察者模式</a></li><li class="tab"><a href="#tab-2">进阶模式</a></li><li class="tab"><a href="#tab-3">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><h3 id="main-observer-cpp"><a href="#main-observer-cpp" class="headerlink" title="main_observer.cpp"></a><code>main_observer.cpp</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;src/observer.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;\n--------boss separator----------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 胡汉</span></span><br><span class="line">  <span class="function">std::shared_ptr&lt;Boss&gt; <span class="title">boss</span><span class="params">(<span class="keyword">new</span> Boss())</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 看投票的同事</span></span><br><span class="line">  <span class="function">std::shared_ptr&lt;TVObserver&gt; <span class="title">colleague1</span><span class="params">(<span class="keyword">new</span> TVObserver(<span class="string">&quot;li li&quot;</span>, boss))</span></span>;</span><br><span class="line">  <span class="function">std::shared_ptr&lt;StockObserver&gt; <span class="title">colleague2</span><span class="params">(<span class="keyword">new</span> StockObserver(<span class="string">&quot;hu hu&quot;</span>, boss))</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 增加同事</span></span><br><span class="line">  boss-&gt;<span class="built_in">attach</span>(colleague1);</span><br><span class="line">  boss-&gt;<span class="built_in">attach</span>(colleague2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 老板回来</span></span><br><span class="line">  boss-&gt;<span class="built_in">setState</span>(<span class="string">&quot;I Hu Han is back again.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发出通知</span></span><br><span class="line">  boss-&gt;<span class="built_in">notify</span>();</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;\n--------detach separator----------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除同事</span></span><br><span class="line">  boss-&gt;<span class="built_in">detach</span>(colleague1);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发出通知</span></span><br><span class="line">  boss-&gt;<span class="built_in">notify</span>();</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;\n\n--------secretary separator----------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 前台秘书</span></span><br><span class="line">  <span class="function">std::shared_ptr&lt;Secretary&gt; <span class="title">secretary</span><span class="params">(<span class="keyword">new</span> Secretary())</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">std::shared_ptr&lt;StockObserver&gt; <span class="title">colleague3</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="keyword">new</span> StockObserver(<span class="string">&quot;huang min&quot;</span>, secretary))</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">std::shared_ptr&lt;TVObserver&gt; <span class="title">colleague4</span><span class="params">(<span class="keyword">new</span> TVObserver(<span class="string">&quot;emmet&quot;</span>, secretary))</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 增加同事</span></span><br><span class="line">  secretary-&gt;<span class="built_in">attach</span>(colleague3);</span><br><span class="line">  secretary-&gt;<span class="built_in">attach</span>(colleague4);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 领导回来了</span></span><br><span class="line">  secretary-&gt;<span class="built_in">setState</span>(<span class="string">&quot;The leader is back.&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发出通知</span></span><br><span class="line">  secretary-&gt;<span class="built_in">notify</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="observer-cpp"><a href="#observer-cpp" class="headerlink" title="observer.cpp"></a><code>observer.cpp</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _OBSERVER_A_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _OBSERVER_A_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 通知者接口</span></span></span><br><span class="line"><span class="string"><span class="meta">class Subject;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 抽象观察者</span></span></span><br><span class="line"><span class="string"><span class="meta">class Observer &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">protected:</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::shared_ptr&lt;Subject&gt; m_subject;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Observer() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_subject = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void update() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~Observer() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 通知者接口</span></span></span><br><span class="line"><span class="string"><span class="meta">class Subject &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::list&lt;std::shared_ptr&lt;Observer&gt;&gt; m_observers;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">protected:</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_state;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Subject() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_state = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_observers.clear();</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 增加</span></span></span><br><span class="line"><span class="string"><span class="meta">  void attach(std::shared_ptr&lt;Observer&gt; observer) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_observers.push_back(std::move(observer));</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 减少</span></span></span><br><span class="line"><span class="string"><span class="meta">  void detach(std::shared_ptr&lt;Observer&gt; observer) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_observers.remove(observer);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 通知</span></span></span><br><span class="line"><span class="string"><span class="meta">  void notify() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (const auto &amp;o : this-&gt;m_observers) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      if (o != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        o-&gt;update();</span></span></span><br><span class="line"><span class="string"><span class="meta">      &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void setState(std::string state) = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string getState() &#123; return this-&gt;m_state; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~Subject() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 老板</span></span></span><br><span class="line"><span class="string"><span class="meta">class Boss : public Subject &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  // 状态</span></span></span><br><span class="line"><span class="string"><span class="meta">  void setState(std::string state) override &#123; this-&gt;m_state = state; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 前台秘书</span></span></span><br><span class="line"><span class="string"><span class="meta">class Secretary : public Subject &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  // 状态</span></span></span><br><span class="line"><span class="string"><span class="meta">  void setState(std::string state) override &#123; this-&gt;m_state = state; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 看股票的同事</span></span></span><br><span class="line"><span class="string"><span class="meta">class StockObserver : public Observer &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  StockObserver(std::string name, std::shared_ptr&lt;Subject&gt; sub) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = name;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_subject.swap(sub);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void update() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_subject-&gt;getState() &lt;&lt; &quot;</span>  \<span class="string">&quot;&quot;</span></span></span><br><span class="line">              &lt;&lt; <span class="keyword">this</span>-&gt;m_name &lt;&lt; <span class="string">&quot;\&quot;  &quot;</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot;Close the stock market and keep working.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 看TV的同事</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TVObserver</span> : <span class="keyword">public</span> Observer &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">TVObserver</span>(std::string name, std::shared_ptr&lt;Subject&gt; sub) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_subject.<span class="built_in">swap</span>(sub);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; FILELINE &lt;&lt; <span class="keyword">this</span>-&gt;m_subject-&gt;<span class="built_in">getState</span>() &lt;&lt; <span class="string">&quot;  \&quot;&quot;</span></span><br><span class="line">              &lt;&lt; <span class="keyword">this</span>-&gt;m_name &lt;&lt; <span class="string">&quot;\&quot;  &quot;</span></span><br><span class="line">              &lt;&lt; <span class="string">&quot;Turn off the TV and continue working.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// _OBSERVER_A_H_</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><h4 id="文件一"><a href="#文件一" class="headerlink" title="文件一"></a>文件一</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class MainForm : public Form, public IProgress</span><br><span class="line">&#123;</span><br><span class="line">    TextBox* txtFilePath;</span><br><span class="line">    TextBox* txtFileNumber;</span><br><span class="line"></span><br><span class="line">    ProgressBar* progressBar;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    void Button1_Click()&#123;</span><br><span class="line"></span><br><span class="line">        string filePath = txtFilePath-&gt;getText();</span><br><span class="line">        int number = atoi(txtFileNumber-&gt;getText().c_str());</span><br><span class="line"></span><br><span class="line">        ConsoleNotifier cn;</span><br><span class="line"></span><br><span class="line">        FileSplitter splitter(filePath, number);</span><br><span class="line"></span><br><span class="line">        splitter.addIProgress(this); //订阅通知</span><br><span class="line">        splitter.addIProgress(&amp;cn)； //订阅通知</span><br><span class="line"></span><br><span class="line">        splitter.split();</span><br><span class="line"></span><br><span class="line">        splitter.removeIProgress(this);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual void DoProgress(float value)&#123;</span><br><span class="line">        progressBar-&gt;setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ConsoleNotifier : public IProgress &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void DoProgress(float value)&#123;</span><br><span class="line">        cout &lt;&lt; &quot;.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="文件二"><a href="#文件二" class="headerlink" title="文件二"></a>文件二</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">class IProgress&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void DoProgress(float value)=0;</span><br><span class="line">    virtual ~IProgress()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class FileSplitter</span><br><span class="line">&#123;</span><br><span class="line">    string m_filePath;</span><br><span class="line">    int m_fileNumber;</span><br><span class="line"></span><br><span class="line">    List&lt;IProgress*&gt;  m_iprogressList; // 抽象通知机制，支持多个观察者</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    FileSplitter(const string&amp; filePath, int fileNumber) :</span><br><span class="line">        m_filePath(filePath), </span><br><span class="line">        m_fileNumber(fileNumber)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void split()&#123;</span><br><span class="line"></span><br><span class="line">        //1.读取大文件</span><br><span class="line"></span><br><span class="line">        //2.分批次向小文件中写入</span><br><span class="line">        for (int i = 0; i &lt; m_fileNumber; i++)&#123;</span><br><span class="line">            //...</span><br><span class="line"></span><br><span class="line">            float progressValue = m_fileNumber;</span><br><span class="line">            progressValue = (i + 1) / progressValue;</span><br><span class="line">            onProgress(progressValue);//发送通知</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void addIProgress(IProgress* iprogress)&#123;</span><br><span class="line">        m_iprogressList.push_back(iprogress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void removeIProgress(IProgress* iprogress)&#123;</span><br><span class="line">        m_iprogressList.remove(iprogress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">protected:</span><br><span class="line">    virtual void onProgress(float value)&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;IProgress*&gt;::iterator itor=m_iprogressList.begin();</span><br><span class="line"></span><br><span class="line">        while (itor != m_iprogressList.end() )</span><br><span class="line">            (*itor)-&gt;DoProgress(value); //更新进度条</span><br><span class="line">            itor++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><h4 id="文件一"><a href="#文件一" class="headerlink" title="文件一"></a>文件一</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class MainForm : public Form</span><br><span class="line">&#123;</span><br><span class="line">    TextBox* txtFilePath;</span><br><span class="line">    TextBox* txtFileNumber;</span><br><span class="line">    ProgressBar* progressBar;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    void Button1_Click()&#123;</span><br><span class="line"></span><br><span class="line">        string filePath = txtFilePath-&gt;getText();</span><br><span class="line">        int number = atoi(txtFileNumber-&gt;getText().c_str());</span><br><span class="line"></span><br><span class="line">        FileSplitter splitter(filePath, number, progressBar);</span><br><span class="line"></span><br><span class="line">        splitter.split();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="文件二"><a href="#文件二" class="headerlink" title="文件二"></a>文件二</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class FileSplitter</span><br><span class="line">&#123;</span><br><span class="line">    string m_filePath;</span><br><span class="line">    int m_fileNumber;</span><br><span class="line">    ProgressBar* m_progressBar;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    FileSplitter(const string&amp; filePath, int fileNumber, ProgressBar* progressBar) :</span><br><span class="line">        m_filePath(filePath), </span><br><span class="line">        m_fileNumber(fileNumber),</span><br><span class="line">        m_progressBar(progressBar)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void split()&#123;</span><br><span class="line"></span><br><span class="line">        //1.读取大文件</span><br><span class="line"></span><br><span class="line">        //2.分批次向小文件中写入</span><br><span class="line">        for (int i = 0; i &lt; m_fileNumber; i++)&#123;</span><br><span class="line">            //...</span><br><span class="line">            float progressValue = m_fileNumber;</span><br><span class="line">            progressValue = (i + 1) / progressValue;</span><br><span class="line">            m_progressBar-&gt;setValue(progressValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Observer-观察者模式&quot;&gt;&lt;a href=&quot;#Observer-观察者模式&quot; class=&quot;headerlink&quot; title=&quot;Observer 观察者模式&quot;&gt;&lt;/a&gt;Observer 观察者模式&lt;/h1&gt;&lt;h2 id=&quot;“组件协作”模式&quot;&gt;&lt;a href=&quot;#“组件协作”模式&quot; class=&quot;headerlink&quot; title=&quot;“组件协作”模式&quot;&gt;&lt;/a&gt;“组件协作”模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1）现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2）典型模式&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Template Method&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Strategy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observer / Event&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="C++" scheme="https://notes.camcad.cn/tags/C/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式04：策略模式（Strategy）</title>
    <link href="https://notes.camcad.cn/post/fecc2092.html"/>
    <id>https://notes.camcad.cn/post/fecc2092.html</id>
    <published>2021-07-22T16:02:03.000Z</published>
    <updated>2023-07-11T12:39:06.405Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="一、“组件协作”模式"><a href="#一、“组件协作”模式" class="headerlink" title="一、“组件协作”模式"></a>一、“组件协作”模式</h1><h4 id="现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。"><a href="#现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。" class="headerlink" title="现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。"></a>现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。</h4><h4 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h4><ul><li>1）Template Method</li><li>2）Strategy</li><li>3）Observer &#x2F; Event</li></ul><span id="more"></span><h1 id="二、Strategy-策略模式"><a href="#二、Strategy-策略模式" class="headerlink" title="二、Strategy 策略模式"></a>二、Strategy 策略模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，某些对象使用的算法可能多种多样，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂；而且有时候支持不使用的算法也是一个性能负担。</li><li>2）如何在运行时根据需要透明地更改对象的算法？将算法与对象本身解耦，从而避免上述问题？</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><ul><li>1）定义一系列算法，把它们一个个封装起来，并且使它们可互相替换（变化）。该模式使得算法可独立于使用它的客户程序(稳定)而变化（扩展，子类化）。——《设计模式》GoF</li></ul><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/06/202106271301403.jpg"><img src="http://image.camcad.cn/2021/06/202106271301403-1024x308.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Strategy及其子类为组件提供了一系列可重用的算法，从而可以使得类型在运行时方便地根据需要在各个算法之间进行切换。</li><li>2）Strategy模式提供了用条件判断语句以外的另一种选择，消除条件判断语句，就是在解耦合。含有许多条件判断语句的代码通常都需要Strategy模式。</li><li>3）如果Strategy对象没有实例变量，那么各个上下文可以共享同一个Strategy对象，从而节省对象开销。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">策略模式</a></li><li class="tab"><a href="#tab-2">进阶模式</a></li><li class="tab"><a href="#tab-3">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><h3 id="main-strategy-cpp"><a href="#main-strategy-cpp" class="headerlink" title="main_strategy.cpp"></a><code>main_strategy.cpp</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./src/strategy.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> pay = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> type;</span><br><span class="line"></span><br><span class="line">  type = SelectedItemType::Normal;</span><br><span class="line">  <span class="function">CashContext <span class="title">cc</span><span class="params">(type)</span></span>;</span><br><span class="line">  pay = cc.<span class="built_in">getResult</span>(<span class="number">500</span>);</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;type: &quot;</span> &lt;&lt; type &lt;&lt; <span class="string">&quot;  pay: &quot;</span> &lt;&lt; pay &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  type = SelectedItemType::Rebate;</span><br><span class="line">  cc.<span class="built_in">setType</span>(type);</span><br><span class="line">  pay = cc.<span class="built_in">getResult</span>(<span class="number">500</span>);</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;type: &quot;</span> &lt;&lt; type &lt;&lt; <span class="string">&quot;  pay: &quot;</span> &lt;&lt; pay &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  type = SelectedItemType::Return;</span><br><span class="line">  cc.<span class="built_in">setType</span>(type);</span><br><span class="line">  pay = cc.<span class="built_in">getResult</span>(<span class="number">500</span>);</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;type: &quot;</span> &lt;&lt; type &lt;&lt; <span class="string">&quot;  pay: &quot;</span> &lt;&lt; pay &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strategy-cpp"><a href="#strategy-cpp" class="headerlink" title="strategy.cpp"></a><code>strategy.cpp</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _STRATEGY_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _STRATEGY_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CashSuper</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">acceptCash</span><span class="params">(<span class="type">const</span> <span class="type">double</span> money)</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">CashSuper</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CashSuper *tmp = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (tmp != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">SelectedItemType</span> &#123; Normal = <span class="number">0</span>, Rebate, Return &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CashNormal</span> : <span class="keyword">public</span> CashSuper &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">acceptCash</span><span class="params">(<span class="type">const</span> <span class="type">double</span> money)</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> money; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CashRebate</span> : <span class="keyword">public</span> CashSuper &#123;</span><br><span class="line">  <span class="type">double</span> m_moneyRebate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">CashRebate</span>(<span class="type">const</span> <span class="type">double</span> moneyRebate) &#123; <span class="keyword">this</span>-&gt;m_moneyRebate = moneyRebate; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">acceptCash</span><span class="params">(<span class="type">const</span> <span class="type">double</span> money)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (money * <span class="keyword">this</span>-&gt;m_moneyRebate);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CashReturn</span> : <span class="keyword">public</span> CashSuper &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> m_moneyCondition;</span><br><span class="line">  <span class="type">double</span> m_moneyRebate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">CashReturn</span>(<span class="type">const</span> <span class="type">double</span> moneyCondition, <span class="type">const</span> <span class="type">double</span> moneyRebate) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_moneyCondition = moneyCondition;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_moneyRebate = moneyRebate;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">acceptCash</span><span class="params">(<span class="type">const</span> <span class="type">double</span> money)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> result = money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (money &gt;= <span class="keyword">this</span>-&gt;m_moneyCondition) &#123;</span><br><span class="line">      result =</span><br><span class="line">          money - ::<span class="built_in">floor</span>(money / <span class="keyword">this</span>-&gt;m_moneyCondition) * <span class="keyword">this</span>-&gt;m_moneyRebate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CashContext</span> &#123;</span><br><span class="line">  CashSuper *m_CashSuper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">CashContext</span>(<span class="type">int</span> type) &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_CashSuper = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setType</span>(type);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setType</span><span class="params">(<span class="type">int</span> type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_CashSuper != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;m_CashSuper;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m_CashSuper = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> SelectedItemType::Normal: &#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m_CashSuper = <span class="keyword">new</span> <span class="built_in">CashNormal</span>();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> SelectedItemType::Rebate: &#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m_CashSuper = <span class="keyword">new</span> <span class="built_in">CashRebate</span>(<span class="number">0.95</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> SelectedItemType::Return: &#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;m_CashSuper = <span class="keyword">new</span> <span class="built_in">CashReturn</span>(<span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span>: &#123;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;This instance is not yet implemented!&quot;</span></span><br><span class="line">                &lt;&lt; <span class="string">&quot; --&gt; \&quot;&quot;</span> &lt;&lt; type &lt;&lt; <span class="string">&quot;\&quot;&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">getResult</span><span class="params">(<span class="type">const</span> <span class="type">double</span> money)</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> result = <span class="number">0</span>;</span><br><span class="line">    result = <span class="keyword">this</span>-&gt;m_CashSuper-&gt;<span class="built_in">acceptCash</span>(money);</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_CashSuper-&gt;<span class="built_in">destroy</span>();</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_CashSuper = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//  _STRATEGY_H_</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><h3 id="策略模式-DEMO"><a href="#策略模式-DEMO" class="headerlink" title="策略模式_DEMO"></a>策略模式_DEMO</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TaxStrategy</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Calculate</span><span class="params">(<span class="type">const</span> Context&amp; context)</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">TaxStrategy</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CNTax</span> : <span class="keyword">public</span> TaxStrategy&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Calculate</span><span class="params">(<span class="type">const</span> Context&amp; context)</span></span>&#123;</span><br><span class="line">        <span class="comment">//***********</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">USTax</span> : <span class="keyword">public</span> TaxStrategy&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Calculate</span><span class="params">(<span class="type">const</span> Context&amp; context)</span></span>&#123;</span><br><span class="line">        <span class="comment">//***********</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DETax</span> : <span class="keyword">public</span> TaxStrategy&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Calculate</span><span class="params">(<span class="type">const</span> Context&amp; context)</span></span>&#123;</span><br><span class="line">        <span class="comment">//***********</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展</span></span><br><span class="line"><span class="comment">//*********************************</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FRTax</span> : <span class="keyword">public</span> TaxStrategy&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">Calculate</span><span class="params">(<span class="type">const</span> Context&amp; context)</span></span>&#123;</span><br><span class="line">        <span class="comment">//.........</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SalesOrder</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TaxStrategy* strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SalesOrder</span>(StrategyFactory* strategyFactory)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;strategy = strategyFactory-&gt;<span class="built_in">NewStrategy</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">SalesOrder</span>()&#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>-&gt;strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">double</span> <span class="title">CalculateTax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="function">Context <span class="title">context</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> val = </span><br><span class="line">            strategy-&gt;<span class="built_in">Calculate</span>(context); <span class="comment">//多态调用</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><h3 id="普通模式-DEMO"><a href="#普通模式-DEMO" class="headerlink" title="普通模式_DEMO"></a>普通模式_DEMO</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">TaxBase</span> &#123;</span><br><span class="line">    CN_Tax,</span><br><span class="line">    US_Tax,</span><br><span class="line">    DE_Tax,</span><br><span class="line">    FR_Tax       <span class="comment">//更改</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SalesOrder</span>&#123;</span><br><span class="line">    TaxBase tax;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">CalculateTax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tax == CN_Tax)&#123;</span><br><span class="line">            <span class="comment">//CN***********</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tax == US_Tax)&#123;</span><br><span class="line">            <span class="comment">//US***********</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tax == DE_Tax)&#123;</span><br><span class="line">            <span class="comment">//DE***********</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tax == FR_Tax)&#123;  <span class="comment">//更改</span></span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;一、“组件协作”模式&quot;&gt;&lt;a href=&quot;#一、“组件协作”模式&quot; class=&quot;headerlink&quot; title=&quot;一、“组件协作”模式&quot;&gt;&lt;/a&gt;一、“组件协作”模式&lt;/h1&gt;&lt;h4 id=&quot;现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。&quot;&gt;&lt;a href=&quot;#现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。&quot; class=&quot;headerlink&quot; title=&quot;现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。&quot;&gt;&lt;/a&gt;现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。&lt;/h4&gt;&lt;h4 id=&quot;典型模式&quot;&gt;&lt;a href=&quot;#典型模式&quot; class=&quot;headerlink&quot; title=&quot;典型模式&quot;&gt;&lt;/a&gt;典型模式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;1）Template Method&lt;/li&gt;
&lt;li&gt;2）Strategy&lt;/li&gt;
&lt;li&gt;3）Observer &amp;#x2F; Event&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="C++" scheme="https://notes.camcad.cn/tags/C/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式03：模板方法（Template Method）</title>
    <link href="https://notes.camcad.cn/post/1850cb09.html"/>
    <id>https://notes.camcad.cn/post/1850cb09.html</id>
    <published>2021-07-22T16:01:30.000Z</published>
    <updated>2023-07-11T12:39:06.405Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="GOF-23模式分类"><a href="#GOF-23模式分类" class="headerlink" title="GOF-23模式分类"></a>GOF-23模式分类</h1><h3 id="从目的来看"><a href="#从目的来看" class="headerlink" title="从目的来看"></a>从目的来看</h3><ul><li>1）创建型（Creational）模式：将对象的部分创建工作延迟到子类或者其他对象，从而应对需求变化为对象创建时具体类型实现引来的冲击。</li><li>2）结构型（Structural）模式：通过类继承或者对象组合获得更灵活的结构，从而应对需求变化为对象的结构带来的冲击。</li><li>3）行为型（Behavioral）模式：通过类继承或者对象组合来划分类与对象间的职责，从而应对需求变化为多个交互的对象带来的冲击。<span id="more"></span></li></ul><h3 id="从范围来看"><a href="#从范围来看" class="headerlink" title="从范围来看"></a>从范围来看</h3><ul><li>1）类模式处理类与子类的静态关系。</li><li>2）对象模式处理对象间的动态关系。</li></ul><h2 id="从封装变化角度对模式分类"><a href="#从封装变化角度对模式分类" class="headerlink" title="从封装变化角度对模式分类"></a>从封装变化角度对模式分类</h2><h3 id="组件协作"><a href="#组件协作" class="headerlink" title="组件协作"></a>组件协作</h3><ul><li>1）Template Method</li><li>2）Observer &#x2F; Event</li><li>3）Strategy</li></ul><h3 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h3><ul><li>1）Decorator</li><li>2）Bridge</li></ul><h3 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h3><ul><li>1）Factory Method</li><li>2）Abstract Factory</li><li>3）Prototype</li><li>4）Builder</li></ul><h3 id="对象性能"><a href="#对象性能" class="headerlink" title="对象性能"></a>对象性能</h3><ul><li>1）Singleton</li><li>2）Flyweight</li></ul><h3 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h3><ul><li>1）Façade</li><li>2）Proxy</li><li>3）Mediator</li><li>4）Adapter</li></ul><h3 id="状态变化"><a href="#状态变化" class="headerlink" title="状态变化"></a>状态变化</h3><ul><li>1）Memento</li><li>2）State</li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li>1）Composite</li><li>2）Iterator</li><li>3）Chain of Resposibility</li></ul><h3 id="行为变化"><a href="#行为变化" class="headerlink" title="行为变化"></a>行为变化</h3><ul><li>1）Command</li><li>2）Visitor</li></ul><h3 id="领域问题"><a href="#领域问题" class="headerlink" title="领域问题"></a>领域问题</h3><ul><li>1）Interpreter</li></ul><h2 id="重构获得模式-Refactoring-to-Patterns"><a href="#重构获得模式-Refactoring-to-Patterns" class="headerlink" title="重构获得模式 Refactoring to Patterns"></a>重构获得模式 Refactoring to Patterns</h2><h3 id="1）面向对象设计模式是“好的面向对象设计”，所谓“好的面向对象设计”指是那些可以满足-“应对变化，提高复用”的设计-。"><a href="#1）面向对象设计模式是“好的面向对象设计”，所谓“好的面向对象设计”指是那些可以满足-“应对变化，提高复用”的设计-。" class="headerlink" title="1）面向对象设计模式是“好的面向对象设计”，所谓“好的面向对象设计”指是那些可以满足 “应对变化，提高复用”的设计 。"></a>1）面向对象设计模式是“好的面向对象设计”，所谓“好的面向对象设计”指是那些可以满足 “应对变化，提高复用”的设计 。</h3><h3 id="2）现代软件设计的特征是“需求的频繁变化”。设计模式的要点是-“寻找变化点，然后在变化点处应用设计模式，从而来更好地应对需求的变化”-“什么时候、什么地点应用设计模式”比“理解设计模式结构本身”更为重要。"><a href="#2）现代软件设计的特征是“需求的频繁变化”。设计模式的要点是-“寻找变化点，然后在变化点处应用设计模式，从而来更好地应对需求的变化”-“什么时候、什么地点应用设计模式”比“理解设计模式结构本身”更为重要。" class="headerlink" title="2）现代软件设计的特征是“需求的频繁变化”。设计模式的要点是 “寻找变化点，然后在变化点处应用设计模式，从而来更好地应对需求的变化”.“什么时候、什么地点应用设计模式”比“理解设计模式结构本身”更为重要。"></a>2）现代软件设计的特征是“需求的频繁变化”。设计模式的要点是 “寻找变化点，然后在变化点处应用设计模式，从而来更好地应对需求的变化”.“什么时候、什么地点应用设计模式”比“理解设计模式结构本身”更为重要。</h3><h3 id="3）设计模式的应用不宜先入为主，一上来就使用设计模式是对设计模式的最大误用。没有一步到位的设计模式。敏捷软件开发实践提倡的“Refactoring-to-Patterns”是目前普遍公认的最好的使用设计模式的方法。"><a href="#3）设计模式的应用不宜先入为主，一上来就使用设计模式是对设计模式的最大误用。没有一步到位的设计模式。敏捷软件开发实践提倡的“Refactoring-to-Patterns”是目前普遍公认的最好的使用设计模式的方法。" class="headerlink" title="3）设计模式的应用不宜先入为主，一上来就使用设计模式是对设计模式的最大误用。没有一步到位的设计模式。敏捷软件开发实践提倡的“Refactoring to Patterns”是目前普遍公认的最好的使用设计模式的方法。"></a>3）设计模式的应用不宜先入为主，一上来就使用设计模式是对设计模式的最大误用。没有一步到位的设计模式。敏捷软件开发实践提倡的“Refactoring to Patterns”是目前普遍公认的最好的使用设计模式的方法。</h3><h2 id="重构关键技法"><a href="#重构关键技法" class="headerlink" title="重构关键技法"></a>重构关键技法</h2><ul><li>1）静态–&gt;动态</li><li>2）早绑定–&gt;晚绑定</li><li>3）继承–&gt;组合</li><li>4）编译时依赖–&gt;运行时依赖</li><li>5）紧耦合–&gt;松耦合</li></ul><h2 id="“组件协作”模式"><a href="#“组件协作”模式" class="headerlink" title="“组件协作”模式"></a>“组件协作”模式</h2><h3 id="现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。"><a href="#现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。" class="headerlink" title="现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。"></a>现代软件专业分工之后的第一个结果是“框架与应用程序的划分”，“组件协作”模式通过晚期绑定，来实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式。</h3><h3 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h3><ul><li>1）Template Method</li><li>2）Observer &#x2F; Event</li><li>3）Strategy</li></ul><h1 id="Template-Method-模式"><a href="#Template-Method-模式" class="headerlink" title="Template Method 模式"></a>Template Method 模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因（比如框架与应用之间的关系）而无法和任务的整体结构同时实现。</li><li>2）如何在确定稳定操作结构的前提下，来灵活应对各个子步骤的变化或者晚期实现需求？</li></ul><h2 id="结构化软件设计流程"><a href="#结构化软件设计流程" class="headerlink" title="结构化软件设计流程"></a>结构化软件设计流程</h2><p><a href="http://image.camcad.cn/2021/06/202106241408419.jpg"><img src="http://image.camcad.cn/2021/06/202106241408419-1024x530.jpg"></a></p><h2 id="面向对象软件设计流程"><a href="#面向对象软件设计流程" class="headerlink" title="面向对象软件设计流程"></a>面向对象软件设计流程</h2><p><a href="http://image.camcad.cn/2021/06/2021062414093955.jpg"><img src="http://image.camcad.cn/2021/06/2021062414093955-1024x528.jpg"></a></p><h2 id="早绑定与晚绑定"><a href="#早绑定与晚绑定" class="headerlink" title="早绑定与晚绑定"></a>早绑定与晚绑定</h2><p><a href="http://image.camcad.cn/2021/06/2021062414144750.jpg"><img src="http://image.camcad.cn/2021/06/2021062414144750-1024x480.jpg"></a></p><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>定义一个操作中的算法的骨架 (稳定)，而将一些步骤延迟(变化)到子类中。Template Method使得子类可以不改变(复用)一个算法的结构即可重定义(override 重写)该算法的某些特定步骤。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/06/2021062414164999.jpg"><img src="http://image.camcad.cn/2021/06/2021062414164999.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Template Method模式是一种非常基础性的设计模式，在面向对象系统中有着大量的应用。它用最简洁的机制（虚函数的多态性）为很多应用程序框架提供了灵活的扩展点，是代码复用方面的基本实现结构。</li><li>2）除了可以灵活应对子步骤的变化外，“不要调用我，让我来调用你”的反向控制结构是Template Method的典型应用。</li><li>3）在具体实现方面，被Template Method调用的虚方法可以具有实现，也可以没有任何实现（抽象方法、纯虚方法），但一般推荐将它们设置为protected方法。</li></ul><h2 id="结构化软件设计流程—lib-cpp"><a href="#结构化软件设计流程—lib-cpp" class="headerlink" title="结构化软件设计流程—lib.cpp"></a>结构化软件设计流程—lib.cpp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//程序库开发人员</span><br><span class="line">class Library&#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    void Step1()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Step3()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Step5()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="结构化软件设计流程—app-cpp"><a href="#结构化软件设计流程—app-cpp" class="headerlink" title="结构化软件设计流程—app.cpp"></a>结构化软件设计流程—app.cpp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//应用程序开发人员</span><br><span class="line">class Application&#123;</span><br><span class="line">public:</span><br><span class="line">    bool Step2()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Step4()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Library lib();</span><br><span class="line">    Application app();</span><br><span class="line"></span><br><span class="line">    lib.Step1();</span><br><span class="line"></span><br><span class="line">    if (app.Step2())&#123;</span><br><span class="line">        lib.Step3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; 4; i++)&#123;</span><br><span class="line">        app.Step4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lib.Step5();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象软件设计流程—lib-cpp"><a href="#面向对象软件设计流程—lib-cpp" class="headerlink" title="面向对象软件设计流程—lib.cpp"></a>面向对象软件设计流程—lib.cpp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//程序库开发人员</span><br><span class="line">class Library&#123;</span><br><span class="line">public:</span><br><span class="line">    //稳定 template method</span><br><span class="line">    void Run()&#123;</span><br><span class="line"></span><br><span class="line">        Step1();</span><br><span class="line"></span><br><span class="line">        if (Step2()) &#123; //支持变化 ==&gt; 虚函数的多态调用</span><br><span class="line">            Step3(); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; 4; i++)&#123;</span><br><span class="line">            Step4(); //支持变化 ==&gt; 虚函数的多态调用</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Step5();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    virtual ~Library()&#123; &#125;</span><br><span class="line"></span><br><span class="line">protected:</span><br><span class="line"></span><br><span class="line">    void Step1() &#123; //稳定</span><br><span class="line">        //.....</span><br><span class="line">    &#125;</span><br><span class="line">    void Step3() &#123;//稳定</span><br><span class="line">        //.....</span><br><span class="line">    &#125;</span><br><span class="line">    void Step5() &#123; //稳定</span><br><span class="line">        //.....</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual bool Step2() = 0;//变化</span><br><span class="line">    virtual void Step4() =0; //变化</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="面向对象软件设计流程—app-cpp"><a href="#面向对象软件设计流程—app-cpp" class="headerlink" title="面向对象软件设计流程—app.cpp"></a>面向对象软件设计流程—app.cpp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//应用程序开发人员</span><br><span class="line">class Application : public Library &#123;</span><br><span class="line">protected:</span><br><span class="line">    virtual bool Step2()&#123;</span><br><span class="line">        //... 子类重写实现</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual void Step4() &#123;</span><br><span class="line">        //... 子类重写实现</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">    &#123;</span><br><span class="line">        Library* pLib=new Application();</span><br><span class="line">        lib-&gt;Run();</span><br><span class="line"></span><br><span class="line">        delete pLib;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;GOF-23模式分类&quot;&gt;&lt;a href=&quot;#GOF-23模式分类&quot; class=&quot;headerlink&quot; title=&quot;GOF-23模式分类&quot;&gt;&lt;/a&gt;GOF-23模式分类&lt;/h1&gt;&lt;h3 id=&quot;从目的来看&quot;&gt;&lt;a href=&quot;#从目的来看&quot; class=&quot;headerlink&quot; title=&quot;从目的来看&quot;&gt;&lt;/a&gt;从目的来看&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1）创建型（Creational）模式：将对象的部分创建工作延迟到子类或者其他对象，从而应对需求变化为对象创建时具体类型实现引来的冲击。&lt;/li&gt;
&lt;li&gt;2）结构型（Structural）模式：通过类继承或者对象组合获得更灵活的结构，从而应对需求变化为对象的结构带来的冲击。&lt;/li&gt;
&lt;li&gt;3）行为型（Behavioral）模式：通过类继承或者对象组合来划分类与对象间的职责，从而应对需求变化为多个交互的对象带来的冲击。</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="C++" scheme="https://notes.camcad.cn/tags/C/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式02：面向对象设计原则</title>
    <link href="https://notes.camcad.cn/post/a61819da.html"/>
    <id>https://notes.camcad.cn/post/a61819da.html</id>
    <published>2021-07-22T16:00:34.000Z</published>
    <updated>2023-07-11T12:39:06.405Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="为什么要面向对象设计-有什么好处"><a href="#为什么要面向对象设计-有什么好处" class="headerlink" title="为什么要面向对象设计,有什么好处?"></a>为什么要面向对象设计,有什么好处?</h2><ul><li>1）为什么？——变化是复用的天敌！</li><li>2）面向对象设计最大的优势在于<code>抵御变化</code>。<span id="more"></span></li></ul><h2 id="重新认识面向对象"><a href="#重新认识面向对象" class="headerlink" title="重新认识面向对象"></a>重新认识面向对象</h2><h3 id="理解隔离变化"><a href="#理解隔离变化" class="headerlink" title="理解隔离变化"></a>理解隔离变化</h3><ul><li>1）从宏观层面来看，面向对象的构建方式更能适应软件的变化，能将变化所带来的影响减为最小。</li></ul><h3 id="各司其职"><a href="#各司其职" class="headerlink" title="各司其职"></a>各司其职</h3><ul><li>1）从微观层面来看，面向对象的方式更强调各个类的“责任”。</li><li>2）由于需求变化导致的新增类型不应该影响原来类型的实现——是所谓各负其责。</li></ul><h3 id="对象是什么？"><a href="#对象是什么？" class="headerlink" title="对象是什么？"></a>对象是什么？</h3><ul><li>1）从语言实现层面来看，对象封装了代码和数据。</li><li>2）从规格层面讲，对象是一系列可被使用的公共接口。</li><li>3）从概念层面讲，对象是某种拥有责任的抽象。</li></ul><h2 id="面向对象设计八大原则"><a href="#面向对象设计八大原则" class="headerlink" title="面向对象设计八大原则"></a>面向对象设计八大原则</h2><h3 id="依赖倒置原则（DIP）"><a href="#依赖倒置原则（DIP）" class="headerlink" title="依赖倒置原则（DIP）"></a>依赖倒置原则（DIP）</h3><ul><li>1）高层模块(稳定)不应该依赖于低层模块(变化)，二者都应该依赖于抽象(稳定) 。</li><li>2）抽象(稳定)不应该依赖于实现细节(变化) ，实现细节应该依赖于抽象(稳定)。</li></ul><h3 id="开放封闭原则（ocp）"><a href="#开放封闭原则（ocp）" class="headerlink" title="开放封闭原则（ocp）"></a>开放封闭原则（ocp）</h3><ul><li>1）对扩展开放，对更改封闭。</li><li>2）类模块应该是可扩展的，但是不可修改。</li></ul><h3 id="单一职责原则（SRP）"><a href="#单一职责原则（SRP）" class="headerlink" title="单一职责原则（SRP）"></a>单一职责原则（SRP）</h3><ul><li>1）一个类应该仅有一个引起它变化的原因。</li><li>2）变化的方向隐含着类的责任。</li></ul><h3 id="Liskov替换原则（LSP）"><a href="#Liskov替换原则（LSP）" class="headerlink" title="Liskov替换原则（LSP）"></a>Liskov替换原则（LSP）</h3><ul><li>1）子类必须能够替换它们的基类(IS-A)。</li><li>2）继承表达类型抽象。</li></ul><h3 id="接口隔离原则（ISP）"><a href="#接口隔离原则（ISP）" class="headerlink" title="接口隔离原则（ISP）"></a>接口隔离原则（ISP）</h3><ul><li>1）不应该强迫客户程序依赖它们不用的方法。</li><li>2）接口应该小而完备。</li></ul><h3 id="优先使用对象组合，而不是类继承"><a href="#优先使用对象组合，而不是类继承" class="headerlink" title="优先使用对象组合，而不是类继承"></a>优先使用对象组合，而不是类继承</h3><ul><li>1）类继承通常为“白箱复用”，对象组合通常为“黑箱复用”。</li><li>2）继承在某种程度上破坏了封装性，子类父类耦合度高。</li><li>3）而对象组合则只要求被组合的对象具有良好定义的接口，耦合度低。</li></ul><h3 id="封装变化点"><a href="#封装变化点" class="headerlink" title="封装变化点"></a>封装变化点</h3><ul><li>1）使用封装来创建对象之间的分界层，让设计者可以在分界层的一侧进行修改，而不会对另一侧产生不良的影响，从而实现层次间的松耦合。</li></ul><h3 id="针对接口编程，而不是针对实现编程而编程"><a href="#针对接口编程，而不是针对实现编程而编程" class="headerlink" title="针对接口编程，而不是针对实现编程而编程"></a>针对接口编程，而不是针对实现编程而编程</h3><ul><li>1）不将变量类型声明为某个特定的具体类，而是声明为某个接口。</li><li>2）客户程序无需获知对象的具体类型，只需要知道对象所具有的接口。</li><li>3）减少系统中各部分的依赖关系，从而实现“高内聚、松耦合” 的类型设计方案。</li></ul><h2 id="面向接口设计"><a href="#面向接口设计" class="headerlink" title="面向接口设计"></a>面向接口设计</h2><p><code>接口标准化</code>-–所有强盛的产业，必定有其相关的标准化约定。</p><h3 id="以史为鉴（一）"><a href="#以史为鉴（一）" class="headerlink" title="以史为鉴（一）"></a>以史为鉴（一）</h3><p>秦为什么能够统一六国？——据史书记载和考古发现,秦的兵器不论东西南北,出土地点都有统一的标准,包括剑,戈,弩, 甚至弩机,弩体,箭头都是一样的. 而其他六国则不是。</p><h3 id="以史为鉴（二）"><a href="#以史为鉴（二）" class="headerlink" title="以史为鉴（二）"></a>以史为鉴（二）</h3><p>毕升的活字印刷为什么成为四大发明，推动了人类文明的前进？——毕升之前的雕版印刷将字刻死在木板或石板上，每次印刷不同文章，要刻不同的版。而毕升发明的活字印刷首先在板上刻好字格,然后再刻单独的字模。印刷时，将活的字模“按需索取”放在字格中，不同的排列方法产生不同的文章，而不必重新刻版。</p><h2 id="将设计原则提升为设计经验"><a href="#将设计原则提升为设计经验" class="headerlink" title="将设计原则提升为设计经验"></a>将设计原则提升为设计经验</h2><ul><li>1）设计习语 Design Idioms——Design Idioms 描述与特定编程语言相关的低层模式，技巧，惯用法。</li><li>2）设计模式 Design Patterns——Design Patterns主要描述的是“类与相互通信的对象之间的组织关系，包括它们的角色、职责、协作方式等方面。</li><li>3）架构模式 Architectural Patterns——Architectural Patterns描述系统中与基本结构组织关系密切的高层模式，包括子系统划分，职责，以及如何组织它们之间关系的规则。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么要面向对象设计-有什么好处&quot;&gt;&lt;a href=&quot;#为什么要面向对象设计-有什么好处&quot; class=&quot;headerlink&quot; title=&quot;为什么要面向对象设计,有什么好处?&quot;&gt;&lt;/a&gt;为什么要面向对象设计,有什么好处?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）为什么？——变化是复用的天敌！&lt;/li&gt;
&lt;li&gt;2）面向对象设计最大的优势在于&lt;code&gt;抵御变化&lt;/code&gt;。</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="C++" scheme="https://notes.camcad.cn/tags/C/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式01：设计模式简介</title>
    <link href="https://notes.camcad.cn/post/bc751e30.html"/>
    <id>https://notes.camcad.cn/post/bc751e30.html</id>
    <published>2021-07-22T15:54:33.000Z</published>
    <updated>2023-07-11T12:39:06.405Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h2><p>“每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动”。——Christopher Alexander</p><span id="more"></span><h2 id="GOF设计模式"><a href="#GOF设计模式" class="headerlink" title="GOF设计模式"></a>GOF设计模式</h2><ul><li>历史性著作《设计模式：可复用面向对象软件的基础》一书中描述了23种经典面向对象设计模式，创立了模式在软件设计中的地位。</li><li>由于《设计模式》一书确定了设计模式的地位，通常所说的设计模式隐含地表示“面向对象设计模式”。但这并不意味“设计模式” 就等于“面向对象设计模式”。</li></ul><h2 id="从面向对象谈起"><a href="#从面向对象谈起" class="headerlink" title="从面向对象谈起"></a>从面向对象谈起</h2><p><a href="http://image.camcad.cn/2021/06/2021062213542579.jpg"><img src="http://image.camcad.cn/2021/06/2021062213542579-1024x271.jpg"></a></p><h3 id="1、底层思维：向下，如何把握机器底层从微观理解对象构造。"><a href="#1、底层思维：向下，如何把握机器底层从微观理解对象构造。" class="headerlink" title="1、底层思维：向下，如何把握机器底层从微观理解对象构造。"></a>1、底层思维：向下，如何把握机器底层从微观理解对象构造。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语言构造</span><br><span class="line">编译转换</span><br><span class="line">内存模型</span><br><span class="line">运行时机制</span><br></pre></td></tr></table></figure><h3 id="2、抽象思维：向上，如何将我们的周围世界抽象为程序代码。"><a href="#2、抽象思维：向上，如何将我们的周围世界抽象为程序代码。" class="headerlink" title="2、抽象思维：向上，如何将我们的周围世界抽象为程序代码。"></a>2、抽象思维：向上，如何将我们的周围世界抽象为程序代码。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">面向对象</span><br><span class="line">组件封装</span><br><span class="line">设计模式</span><br><span class="line">架构模式</span><br></pre></td></tr></table></figure><h2 id="深入理解面向对象"><a href="#深入理解面向对象" class="headerlink" title="深入理解面向对象"></a>深入理解面向对象</h2><h3 id="1、向下—深入理解三大面向对象机制"><a href="#1、向下—深入理解三大面向对象机制" class="headerlink" title="1、向下—深入理解三大面向对象机制"></a>1、向下—深入理解三大面向对象机制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">封装---隐藏内部实现</span><br><span class="line">继承---复用现有代码</span><br><span class="line">多态---改写对象行为</span><br></pre></td></tr></table></figure><h3 id="2、向上—深刻把握面向对象机制所带来的抽象意义，理解如何使用这些机制来表达现实世界，掌握什么是“好的面向对象设计”。"><a href="#2、向上—深刻把握面向对象机制所带来的抽象意义，理解如何使用这些机制来表达现实世界，掌握什么是“好的面向对象设计”。" class="headerlink" title="2、向上—深刻把握面向对象机制所带来的抽象意义，理解如何使用这些机制来表达现实世界，掌握什么是“好的面向对象设计”。"></a>2、向上—深刻把握面向对象机制所带来的抽象意义，理解如何使用这些机制来表达现实世界，掌握什么是“好的面向对象设计”。</h3><h2 id="软件设计固有的复杂性"><a href="#软件设计固有的复杂性" class="headerlink" title="软件设计固有的复杂性"></a>软件设计固有的复杂性</h2><p>建筑商从来不会去想给一栋已建好的100层高的楼房底下再新修一个小地下室——这样做花费极大而且注定要失败。然而令人惊奇的是，软件系统的用户在要求作出类似改变时却不会仔细考虑，而且他们认为这只是需要简单编程的事。 ——Object-Oriented Analysis and Design with Applications</p><h2 id="变化—软件设计复杂的根本原因"><a href="#变化—软件设计复杂的根本原因" class="headerlink" title="变化—软件设计复杂的根本原因"></a>变化—软件设计复杂的根本原因</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">客户需求的变化</span><br><span class="line">技术平台的变化</span><br><span class="line">开发团队的变化</span><br><span class="line">市场环境的变化</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h2 id="如何解决复杂性？"><a href="#如何解决复杂性？" class="headerlink" title="如何解决复杂性？"></a>如何解决复杂性？</h2><h3 id="分解—人们面对复杂性有一个常见的做法：即分而治之，将大问题分解为多个小问题，将复杂问题分解为多个简单问题。"><a href="#分解—人们面对复杂性有一个常见的做法：即分而治之，将大问题分解为多个小问题，将复杂问题分解为多个简单问题。" class="headerlink" title="分解—人们面对复杂性有一个常见的做法：即分而治之，将大问题分解为多个小问题，将复杂问题分解为多个简单问题。"></a>分解—人们面对复杂性有一个常见的做法：即分而治之，将大问题分解为多个小问题，将复杂问题分解为多个简单问题。</h3><h3 id="抽象—更高层次来讲，人们处理复杂性有一个通用的技术，即抽象。由于不能掌握全部的复杂对象，我们选择忽视它的非本质细节，而去处理泛化和理想化了的对象模型。"><a href="#抽象—更高层次来讲，人们处理复杂性有一个通用的技术，即抽象。由于不能掌握全部的复杂对象，我们选择忽视它的非本质细节，而去处理泛化和理想化了的对象模型。" class="headerlink" title="抽象—更高层次来讲，人们处理复杂性有一个通用的技术，即抽象。由于不能掌握全部的复杂对象，我们选择忽视它的非本质细节，而去处理泛化和理想化了的对象模型。"></a>抽象—更高层次来讲，人们处理复杂性有一个通用的技术，即抽象。由于不能掌握全部的复杂对象，我们选择忽视它的非本质细节，而去处理泛化和理想化了的对象模型。</h3><hr><h3 id="分解DEMO—头文件"><a href="#分解DEMO—头文件" class="headerlink" title="分解DEMO—头文件"></a>分解DEMO—头文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class Point&#123;</span><br><span class="line">public:</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Line&#123;</span><br><span class="line">public:</span><br><span class="line">    Point start;</span><br><span class="line">    Point end;</span><br><span class="line"></span><br><span class="line">    Line(const Point&amp; start, const Point&amp; end)&#123;</span><br><span class="line">        this-&gt;start = start;</span><br><span class="line">        this-&gt;end = end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Rect&#123;</span><br><span class="line">public:</span><br><span class="line">    Point leftUp;</span><br><span class="line">    int width;</span><br><span class="line">    int height;</span><br><span class="line"></span><br><span class="line">    Rect(const Point&amp; leftUp, int width, int height)&#123;</span><br><span class="line">        this-&gt;leftUp = leftUp;</span><br><span class="line">        this-&gt;width = width;</span><br><span class="line">        this-&gt;height = height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//增加</span><br><span class="line">class Circle&#123;</span><br><span class="line">// ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="分解DEMO—源文件"><a href="#分解DEMO—源文件" class="headerlink" title="分解DEMO—源文件"></a>分解DEMO—源文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">class MainForm : public Form &#123;</span><br><span class="line">private:</span><br><span class="line">    Point p1;</span><br><span class="line">    Point p2;</span><br><span class="line"></span><br><span class="line">    vector&lt;Line&gt; lineVector;</span><br><span class="line">    vector&lt;Rect&gt; rectVector;</span><br><span class="line">    //改变</span><br><span class="line">    vector&lt;Circle&gt; circleVector;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    MainForm()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">protected:</span><br><span class="line"></span><br><span class="line">    virtual void OnMouseDown(const MouseEventArgs&amp; e);</span><br><span class="line">    virtual void OnMouseUp(const MouseEventArgs&amp; e);</span><br><span class="line">    virtual void OnPaint(const PaintEventArgs&amp; e);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void MainForm::OnMouseDown(const MouseEventArgs&amp; e)&#123;</span><br><span class="line">    p1.x = e.X;</span><br><span class="line">    p1.y = e.Y;</span><br><span class="line"></span><br><span class="line">    //...</span><br><span class="line">    Form::OnMouseDown(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainForm::OnMouseUp(const MouseEventArgs&amp; e)&#123;</span><br><span class="line">    p2.x = e.X;</span><br><span class="line">    p2.y = e.Y;</span><br><span class="line"></span><br><span class="line">    if (rdoLine.Checked)&#123;</span><br><span class="line">        Line line(p1, p2);</span><br><span class="line">        lineVector.push_back(line);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (rdoRect.Checked)&#123;</span><br><span class="line">        int width = abs(p2.x - p1.x);</span><br><span class="line">        int height = abs(p2.y - p1.y);</span><br><span class="line">        Rect rect(p1, width, height);</span><br><span class="line">        rectVector.push_back(rect);</span><br><span class="line">    &#125;</span><br><span class="line">    //改变</span><br><span class="line">    else if (...)&#123;</span><br><span class="line">        //...</span><br><span class="line">        circleVector.push_back(circle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //...</span><br><span class="line">    this-&gt;Refresh();</span><br><span class="line"></span><br><span class="line">    Form::OnMouseUp(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainForm::OnPaint(const PaintEventArgs&amp; e)&#123;</span><br><span class="line"></span><br><span class="line">    //针对直线</span><br><span class="line">    for (int i = 0; i &lt; lineVector.size(); i++)&#123;</span><br><span class="line">        e.Graphics.DrawLine(Pens.Red,</span><br><span class="line">            lineVector[i].start.x, </span><br><span class="line">            lineVector[i].start.y,</span><br><span class="line">            lineVector[i].end.x,</span><br><span class="line">            lineVector[i].end.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //针对矩形</span><br><span class="line">    for (int i = 0; i &lt; rectVector.size(); i++)&#123;</span><br><span class="line">        e.Graphics.DrawRectangle(Pens.Red,</span><br><span class="line">            rectVector[i].leftUp,</span><br><span class="line">            rectVector[i].width,</span><br><span class="line">            rectVector[i].height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //改变</span><br><span class="line">    //针对圆形</span><br><span class="line">    for (int i = 0; i &lt; circleVector.size(); i++)&#123;</span><br><span class="line">        e.Graphics.DrawCircle(Pens.Red,</span><br><span class="line">            circleVector[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //...</span><br><span class="line">    Form::OnPaint(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="抽象DEMO—头文件"><a href="#抽象DEMO—头文件" class="headerlink" title="抽象DEMO—头文件"></a>抽象DEMO—头文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">class Shape&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void Draw(const Graphics&amp; g)=0;</span><br><span class="line">    virtual ~Shape() &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Point&#123;</span><br><span class="line">public:</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Line: public Shape&#123;</span><br><span class="line">public:</span><br><span class="line">    Point start;</span><br><span class="line">    Point end;</span><br><span class="line"></span><br><span class="line">    Line(const Point&amp; start, const Point&amp; end)&#123;</span><br><span class="line">        this-&gt;start = start;</span><br><span class="line">        this-&gt;end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //实现自己的Draw，负责画自己</span><br><span class="line">    virtual void Draw(const Graphics&amp; g)&#123;</span><br><span class="line">        g.DrawLine(Pens.Red, </span><br><span class="line">            start.x, start.y,end.x, end.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Rect: public Shape&#123;</span><br><span class="line">public:</span><br><span class="line">    Point leftUp;</span><br><span class="line">    int width;</span><br><span class="line">    int height;</span><br><span class="line"></span><br><span class="line">    Rect(const Point&amp; leftUp, int width, int height)&#123;</span><br><span class="line">        this-&gt;leftUp = leftUp;</span><br><span class="line">        this-&gt;width = width;</span><br><span class="line">        this-&gt;height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //实现自己的Draw，负责画自己</span><br><span class="line">    virtual void Draw(const Graphics&amp; g)&#123;</span><br><span class="line">        g.DrawRectangle(Pens.Red,</span><br><span class="line">            leftUp,width,height);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//增加</span><br><span class="line">class Circle : public Shape&#123;</span><br><span class="line">public:</span><br><span class="line">    //实现自己的Draw，负责画自己</span><br><span class="line">    virtual void Draw(const Graphics&amp; g)&#123;</span><br><span class="line">        g.DrawCircle(Pens.Red,</span><br><span class="line">            ...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="抽象DEMO—源文件"><a href="#抽象DEMO—源文件" class="headerlink" title="抽象DEMO—源文件"></a>抽象DEMO—源文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">class MainForm : public Form &#123;</span><br><span class="line">private:</span><br><span class="line">    Point p1;</span><br><span class="line">    Point p2;</span><br><span class="line"></span><br><span class="line">    //针对所有形状</span><br><span class="line">    vector&lt;Shape*&gt; shapeVector;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    MainForm()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">protected:</span><br><span class="line"></span><br><span class="line">    virtual void OnMouseDown(const MouseEventArgs&amp; e);</span><br><span class="line">    virtual void OnMouseUp(const MouseEventArgs&amp; e);</span><br><span class="line">    virtual void OnPaint(const PaintEventArgs&amp; e);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void MainForm::OnMouseDown(const MouseEventArgs&amp; e)&#123;</span><br><span class="line">    p1.x = e.X;</span><br><span class="line">    p1.y = e.Y;</span><br><span class="line"></span><br><span class="line">    //...</span><br><span class="line">    Form::OnMouseDown(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainForm::OnMouseUp(const MouseEventArgs&amp; e)&#123;</span><br><span class="line">    p2.x = e.X;</span><br><span class="line">    p2.y = e.Y;</span><br><span class="line"></span><br><span class="line">    if (rdoLine.Checked)&#123;</span><br><span class="line">        shapeVector.push_back(new Line(p1,p2));</span><br><span class="line">    &#125;</span><br><span class="line">    else if (rdoRect.Checked)&#123;</span><br><span class="line">        int width = abs(p2.x - p1.x);</span><br><span class="line">        int height = abs(p2.y - p1.y);</span><br><span class="line">        shapeVector.push_back(new Rect(p1, width, height));</span><br><span class="line">    &#125;</span><br><span class="line">    //改变</span><br><span class="line">    else if (...)&#123;</span><br><span class="line">        //...</span><br><span class="line">        shapeVector.push_back(circle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //...</span><br><span class="line">    this-&gt;Refresh();</span><br><span class="line"></span><br><span class="line">    Form::OnMouseUp(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MainForm::OnPaint(const PaintEventArgs&amp; e)&#123;</span><br><span class="line"></span><br><span class="line">    //针对所有形状</span><br><span class="line">    for (int i = 0; i &lt; shapeVector.size(); i++)&#123;</span><br><span class="line"></span><br><span class="line">        shapeVector[i]-&gt;Draw(e.Graphics); //多态调用，各负其责</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //...</span><br><span class="line">    Form::OnPaint(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结：什么是好的软件设计？-–复用"><a href="#总结：什么是好的软件设计？-–复用" class="headerlink" title="总结：什么是好的软件设计？-–复用"></a>总结：<code>什么是好的软件设计？</code>-–复用</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是设计模式&quot;&gt;&lt;a href=&quot;#什么是设计模式&quot; class=&quot;headerlink&quot; title=&quot;什么是设计模式&quot;&gt;&lt;/a&gt;什么是设计模式&lt;/h2&gt;&lt;p&gt;“每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动”。——Christopher Alexander&lt;/p&gt;</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="C++" scheme="https://notes.camcad.cn/tags/C/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程</title>
    <link href="https://notes.camcad.cn/post/13756432.html"/>
    <id>https://notes.camcad.cn/post/13756432.html</id>
    <published>2020-08-06T10:33:44.000Z</published>
    <updated>2023-07-11T12:39:06.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-提高编程"><a href="#C-提高编程" class="headerlink" title="C++提高编程"></a>C++提高编程</h1><p>本阶段主要针对 C++<code>泛型编程</code>和<code>STL</code>技术做详细讲解，探讨 C++更深层的使用。</p><h4 id="第一章：模板"><a href="#第一章：模板" class="headerlink" title="第一章：模板"></a>第一章：模板</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">001</td><td align="left"><a href="https://notes.camcad.cn/post/e472be6d.html">C++提高编程01：模板（模板的概念）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=167">04:56</a></td></tr><tr><td align="center">002</td><td align="left"><a href="https://notes.camcad.cn/post/30168b8d.html">C++提高编程02：模板（函数模板-函数模板的语法）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=168">16:41</a></td></tr><tr><td align="center">003</td><td align="left"><a href="https://notes.camcad.cn/post/760e6263.html">C++提高编程03：模板（函数模板-函数模板注意事项）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=169">09:45</a></td></tr><tr><td align="center">004</td><td align="left"><a href="https://notes.camcad.cn/post/78da7e04.html">C++提高编程04：模板（函数模板-函数模板案例）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=170">12:13</a></td></tr><tr><td align="center">005</td><td align="left"><a href="https://notes.camcad.cn/post/b4e4aa78.html">C++提高编程05：模板（函数模板-普通函数与函数模板的区别）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=171">09:19</a></td></tr><tr><td align="center">006</td><td align="left"><a href="https://notes.camcad.cn/post/27f24ea2.html">C++提高编程06：模板（函数模板-普通函数与函数模板调用规则）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=172">11:59</a></td></tr><tr><td align="center">007</td><td align="left"><a href="https://notes.camcad.cn/post/1e329533.html">C++提高编程07：模板（函数模板-模板的局限性）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=173">12:33</a></td></tr><tr><td align="center">008</td><td align="left"><a href="https://notes.camcad.cn/post/64b85e0c.html">C++提高编程08：模板（类模板-类模板的语法）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=174">06:47</a></td></tr><tr><td align="center">009</td><td align="left"><a href="https://notes.camcad.cn/post/77590297.html">C++提高编程09：模板（类模板- 类模板与函数模板区别）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=175">07:49</a></td></tr><tr><td align="center">010</td><td align="left"><a href="https://notes.camcad.cn/post/c6fb3775.html">C++提高编程10：模板（类模板-类模板中成员函数创建时机）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=176">08:00</a></td></tr><tr><td align="center">011</td><td align="left"><a href="https://notes.camcad.cn/post/b9754251.html">C++提高编程11：模板（类模板-类模板对象做函数参数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=177">13:40</a></td></tr><tr><td align="center">012</td><td align="left"><a href="https://notes.camcad.cn/post/24f7c9.html">C++提高编程12：模板（类模板-类模板与继承）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=178">09:59</a></td></tr><tr><td align="center">013</td><td align="left"><a href="https://notes.camcad.cn/post/bbca2a77.html">C++提高编程13：模板（类模板-类模板成员函数类外实现）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=179">08:28</a></td></tr><tr><td align="center">014</td><td align="left"><a href="https://notes.camcad.cn/post/a5263ddf.html">C++提高编程14：模板（类模板-类模板分文件编写）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=180">13:18</a></td></tr><tr><td align="center">015</td><td align="left"><a href="https://notes.camcad.cn/post/809a0b8.html">C++提高编程15：模板（类模板-类模板与友元）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=181">12:56</a></td></tr><tr><td align="center">016</td><td align="left"><a href="https://notes.camcad.cn/post/a1b304bb.html">C++提高编程16：模板（类模板-类模板案例）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=182">06:37</a></td></tr></tbody></table><h4 id="第二章：C-STL-常用容器"><a href="#第二章：C-STL-常用容器" class="headerlink" title="第二章：C++ STL 常用容器"></a>第二章：C++ STL 常用容器</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">017</td><td align="left"><a href="https://notes.camcad.cn/post/51a145f9.html">C++提高编程17：STL初识（STL的诞生，STL基本概念，STL六大组件，STL中容器、算法、迭代器）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=185">17:43</a></td></tr><tr><td align="center">018</td><td align="left"><a href="https://notes.camcad.cn/post/9ad20f91.html">C++提高编程18：STL初识（容器算法迭代器初识）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=186">14:11</a></td></tr><tr><td align="center">019</td><td align="left"><a href="https://notes.camcad.cn/post/41dab95a.html">C++提高编程19：STL常用容器（string容器-string基本概念）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=189">06:48</a></td></tr><tr><td align="center">020</td><td align="left"><a href="https://notes.camcad.cn/post/4cf03f75.html">C++提高编程20：STL常用容器（string容器-string构造函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=189">00:00</a></td></tr><tr><td align="center">021</td><td align="left"><a href="https://notes.camcad.cn/post/1e20fd3e.html">C++提高编程21：STL常用容器（string容器-string赋值操作）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=190">07:15</a></td></tr><tr><td align="center">022</td><td align="left"><a href="https://notes.camcad.cn/post/688b2f27.html">C++提高编程22：STL常用容器（string容器-string字符串拼接）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=191">11:04</a></td></tr><tr><td align="center">023</td><td align="left"><a href="https://notes.camcad.cn/post/708754f6.html">C++提高编程23：STL常用容器（string容器-string查找和替换）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=192">10:56</a></td></tr><tr><td align="center">024</td><td align="left"><a href="https://notes.camcad.cn/post/35ac6e08.html">C++提高编程24：STL常用容器（string容器- string字符串比较）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=193">05:12</a></td></tr><tr><td align="center">025</td><td align="left"><a href="https://notes.camcad.cn/post/f8fa3b7d.html">C++提高编程25：STL常用容器（string容器- string字符存取）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=194">05:32</a></td></tr><tr><td align="center">026</td><td align="left"><a href="https://notes.camcad.cn/post/fda2c593.html">C++提高编程26：STL常用容器（string容器- string插入和删除）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=195">04:26</a></td></tr><tr><td align="center">027</td><td align="left"><a href="https://notes.camcad.cn/post/4addf364.html">C++提高编程27：STL常用容器（string容器- string子串）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=196">07:19</a></td></tr><tr><td align="center">028</td><td align="left"><a href="https://notes.camcad.cn/post/874b2290.html">C++提高编程28：STL常用容器（vector容器- vector基本概念）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=197">12:06</a></td></tr><tr><td align="center">029</td><td align="left"><a href="https://notes.camcad.cn/post/4a098d18.html">C++提高编程29：STL常用容器（vector容器- vector构造函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=197">00:00</a></td></tr><tr><td align="center">030</td><td align="left"><a href="https://notes.camcad.cn/post/92771253.html">C++提高编程30：STL常用容器（vector容器- vector赋值操作）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=198">05:48</a></td></tr><tr><td align="center">031</td><td align="left"><a href="https://notes.camcad.cn/post/e82d8690.html">C++提高编程31：STL常用容器（vector容器- vector容量和大小）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=199">09:26</a></td></tr><tr><td align="center">032</td><td align="left"><a href="https://notes.camcad.cn/post/e8abcb67.html">C++提高编程32：STL常用容器（vector容器- vector插入和删除）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=200">08:30</a></td></tr><tr><td align="center">033</td><td align="left"><a href="https://notes.camcad.cn/post/7528e38.html">C++提高编程33：STL常用容器（vector容器- vector数据存取）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=201">04:48</a></td></tr><tr><td align="center">034</td><td align="left"><a href="https://notes.camcad.cn/post/ae7f0af0.html">C++提高编程34：STL常用容器（vector容器- vector互换容器）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=202">12:39</a></td></tr><tr><td align="center">035</td><td align="left"><a href="https://notes.camcad.cn/post/d3b74cd4.html">C++提高编程35：STL常用容器（vector容器- vector预留空间）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=203">06:54</a></td></tr><tr><td align="center">036</td><td align="left"><a href="https://notes.camcad.cn/post/2d258b96.html">C++提高编程36：STL常用容器（deque容器-deque容器基本概念）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=204">11:44</a></td></tr><tr><td align="center">037</td><td align="left"><a href="https://notes.camcad.cn/post/3ddb7e7f.html">C++提高编程37：STL常用容器（deque容器-deque构造函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=204">00:00</a></td></tr><tr><td align="center">038</td><td align="left"><a href="https://notes.camcad.cn/post/7bcbbe51.html">C++提高编程38：STL常用容器（deque容器-deque赋值操作）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=205">04:30</a></td></tr><tr><td align="center">039</td><td align="left"><a href="https://notes.camcad.cn/post/ffb738d8.html">C++提高编程39：STL常用容器（deque容器-deque大小操作）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=206">07:09</a></td></tr><tr><td align="center">040</td><td align="left"><a href="https://notes.camcad.cn/post/8feeb365.html">C++提高编程40：STL常用容器（deque容器-deque插入和删除）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=207">13:07</a></td></tr><tr><td align="center">041</td><td align="left"><a href="https://notes.camcad.cn/post/2593a9e0.html">C++提高编程41：STL常用容器（deque容器-deque数据存取）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=208">04:25</a></td></tr><tr><td align="center">042</td><td align="left"><a href="https://notes.camcad.cn/post/f71fb165.html">C++提高编程42：STL常用容器（deque容器-deque排序）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=209">06:53</a></td></tr><tr><td align="center">043</td><td align="left"><a href="https://notes.camcad.cn/post/39e2ef53.html">C++提高编程43：STL常用容器（案例-评委打分）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=210">23:34</a></td></tr><tr><td align="center">044</td><td align="left"><a href="https://notes.camcad.cn/post/55b24c9e.html">C++提高编程44：STL常用容器（stack容器-stack基本概念）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=211">07:08</a></td></tr><tr><td align="center">045</td><td align="left"><a href="https://notes.camcad.cn/post/40b5411f.html">C++提高编程45：STL常用容器（stack容器-stack常用接口）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=212">06:49</a></td></tr><tr><td align="center">046</td><td align="left"><a href="https://notes.camcad.cn/post/8813420.html">C++提高编程46：STL常用容器（queue容器-queue基本概念）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=213">06:41</a></td></tr><tr><td align="center">047</td><td align="left"><a href="https://notes.camcad.cn/post/1d8639a1.html">C++提高编程47：STL常用容器（queue容器-queue常用接口）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=214">08:21</a></td></tr><tr><td align="center">048</td><td align="left"><a href="https://notes.camcad.cn/post/61296b91.html">C++提高编程48：STL常用容器（list容器-list基本概念）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=215">15:02</a></td></tr><tr><td align="center">049</td><td align="left"><a href="https://notes.camcad.cn/post/dd0dea70.html">C++提高编程49：STL常用容器（list容器-list构造函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=216">05:30</a></td></tr><tr><td align="center">050</td><td align="left"><a href="https://notes.camcad.cn/post/95bac996.html">C++提高编程50：STL常用容器（list容器-list赋值和交换）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=217">06:46</a></td></tr><tr><td align="center">051</td><td align="left"><a href="https://notes.camcad.cn/post/91cc4878.html">C++提高编程51：STL常用容器（list容器-list大小操作）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=218">05:24</a></td></tr><tr><td align="center">052</td><td align="left"><a href="https://notes.camcad.cn/post/2aa283e5.html">C++提高编程52：STL常用容器（list容器-list插入和删除）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=219">11:44</a></td></tr><tr><td align="center">053</td><td align="left"><a href="https://notes.camcad.cn/post/7b56759a.html">C++提高编程53：STL常用容器（list容器-list数据存取）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=220">08:28</a></td></tr><tr><td align="center">054</td><td align="left"><a href="https://notes.camcad.cn/post/c17ab38c.html">C++提高编程54：STL常用容器（list容器-list反转和排序）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=221">12:18</a></td></tr><tr><td align="center">055</td><td align="left"><a href="https://notes.camcad.cn/post/d0f75ff3.html">C++提高编程55：STL常用容器（list容器-排序案例）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=222">12:39</a></td></tr><tr><td align="center">056</td><td align="left"><a href="https://notes.camcad.cn/post/b4fb037.html">C++提高编程56：STL常用容器（set&#x2F;multiset容器-set基本概念&#x2F;set构造和赋值）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=223">08:07</a></td></tr><tr><td align="center">057</td><td align="left"><a href="https://notes.camcad.cn/post/2e2675d0.html">C++提高编程57：STL常用容器（set&#x2F;multiset容器-set大小和交换）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=224">06:24</a></td></tr><tr><td align="center">058</td><td align="left"><a href="https://notes.camcad.cn/post/13341423.html">C++提高编程58：STL常用容器（set&#x2F;multiset容器-set插入和删除）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=225">05:52</a></td></tr><tr><td align="center">059</td><td align="left"><a href="https://notes.camcad.cn/post/42c5dc37.html">C++提高编程59：STL常用容器（set&#x2F;multiset容器-set查找和统计）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=226">06:25</a></td></tr><tr><td align="center">060</td><td align="left"><a href="https://notes.camcad.cn/post/2f1836d.html">C++提高编程60：STL常用容器（set&#x2F;multiset容器-set和multiset区别）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=227">08:33</a></td></tr><tr><td align="center">061</td><td align="left"><a href="https://notes.camcad.cn/post/e2e78da9.html">C++提高编程61：STL常用容器（set&#x2F;multiset容器-pair对组创建）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=228">04:15</a></td></tr><tr><td align="center">062</td><td align="left"><a href="https://notes.camcad.cn/post/2a5b6f84.html">C++提高编程62：STL常用容器（set&#x2F;multiset容器-set容器排序）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=229">08:14</a></td></tr><tr><td align="center">063</td><td align="left"><a href="https://notes.camcad.cn/post/752fb09b.html">C++提高编程63：STL常用容器（map&#x2F;multimap容器-map基本概念&#x2F;map构造和赋值）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=231">10:07</a></td></tr><tr><td align="center">064</td><td align="left"><a href="https://notes.camcad.cn/post/99f475b2.html">C++提高编程64：STL常用容器（map&#x2F;multimap容器-map大小和交换）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=232">07:28</a></td></tr><tr><td align="center">065</td><td align="left"><a href="https://notes.camcad.cn/post/16d449a4.html">C++提高编程65：STL常用容器（map&#x2F;multimap容器-map插入和删除）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=233">11:18</a></td></tr><tr><td align="center">066</td><td align="left"><a href="https://notes.camcad.cn/post/f0634711.html">C++提高编程66：STL常用容器（map&#x2F;multimap容器-map查找和统计）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=234">06:58</a></td></tr><tr><td align="center">067</td><td align="left"><a href="https://notes.camcad.cn/post/4fea10f2.html">C++提高编程67：STL常用容器（map&#x2F;multimap容器-map容器排序）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=235">07:15</a></td></tr><tr><td align="center">068</td><td align="left"><a href="https://notes.camcad.cn/post/b4f414d.html">C++提高编程68：STL常用容器（案例-员工分组）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=236">21:58</a></td></tr><tr><td align="center">069</td><td align="left"><a href="https://notes.camcad.cn/post/b9db3b6b.html">C++提高编程69：STL函数对象（函数对象）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=237">11:06</a></td></tr><tr><td align="center">070</td><td align="left"><a href="https://notes.camcad.cn/post/f42f72e5.html">C++提高编程70：STL函数对象（谓词）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=238">08:28</a></td></tr><tr><td align="center">071</td><td align="left"><a href="https://notes.camcad.cn/post/d7fa12cb.html">C++提高编程71：STL函数对象（内建函数对象-内建函数对象意义&#x2F;算术仿函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=240">06:26</a></td></tr><tr><td align="center">072</td><td align="left"><a href="https://notes.camcad.cn/post/234337fe.html">C++提高编程72：STL函数对象（内建函数对象-关系仿函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=241">07:08</a></td></tr><tr><td align="center">073</td><td align="left"><a href="https://notes.camcad.cn/post/bb18a6d3.html">C++提高编程73：STL函数对象（内建函数对象-逻辑仿函数）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=242">07:37</a></td></tr><tr><td align="center">074</td><td align="left"><a href="https://notes.camcad.cn/post/437af6a8.html">C++提高编程74：STL常用算法（常用遍历算法-for_each）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=243">06:30</a></td></tr><tr><td align="center">075</td><td align="left"><a href="https://notes.camcad.cn/post/39184424.html">C++提高编程75：STL常用算法（常用遍历算法-transform）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=244">06:16</a></td></tr><tr><td align="center">076</td><td align="left"><a href="https://notes.camcad.cn/post/4e4670d3.html">C++提高编程76：STL常用算法（常用查找算法）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=245">12:26</a></td></tr><tr><td align="center">077</td><td align="left"><a href="https://notes.camcad.cn/post/c9c5a6ae.html">C++提高编程77：STL常用算法（常用排序算法）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=251">05:31</a></td></tr><tr><td align="center">078</td><td align="left"><a href="https://notes.camcad.cn/post/b764b3e7.html">C++提高编程78：STL常用算法（常用拷贝和替换算法）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=255">04:56</a></td></tr><tr><td align="center">079</td><td align="left"><a href="https://notes.camcad.cn/post/56601927.html">C++提高编程79：STL常用算法（常用算术生成算法）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=259">05:18</a></td></tr><tr><td align="center">080</td><td align="left"><a href="https://notes.camcad.cn/post/dfef9d8b.html">C++提高编程80：STL常用算法（常用集合算法）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=259">10:26</a></td></tr><tr><td align="center">081</td><td align="left"><a href="https://notes.camcad.cn/post/adbe7ef1.html">C++提高编程81：演讲比赛流程管理系统</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=264">08:36</a></td></tr><tr><td align="center">082</td><td align="left"><a href="https://notes.camcad.cn/post/17c061d0.html">C++提高编程82：演讲比赛流程管理系统-头文件&#x2F;源文件</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=264">00:00</a></td></tr><tr><td align="center">083</td><td align="left"><a href="https://notes.camcad.cn//post/d0efdeb2.html">C++面向对象（案列）：机房预约系统(头文件&#x2F;源文件)</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=282">08:03</a></td></tr><tr><td align="center">084</td><td align="left"><a href="https://notes.camcad.cn/post/b0cae4ad.html">C++面向对象（案列）：机房预约系统(头文件&#x2F;源文件)</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1et411b73Z?p=282">00:00</a></td></tr></tbody></table><h3 id="视频转载-bilibili博主《黑马程序员》"><a href="#视频转载-bilibili博主《黑马程序员》" class="headerlink" title="视频转载 bilibili博主《黑马程序员》"></a>视频转载 bilibili博主《<a href="https://space.bilibili.com/37974444?spm_id_from=333.788.b_765f7570696e666f.2">黑马程序员</a>》</h3>]]></content>
    
    
    <summary type="html">C++提高编程目录</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++面向对象（案列）：机房预约系统(头文件/源文件)</title>
    <link href="https://notes.camcad.cn/post/b0cae4ad.html"/>
    <id>https://notes.camcad.cn/post/b0cae4ad.html</id>
    <published>2020-08-06T10:09:17.000Z</published>
    <updated>2023-07-11T12:39:06.401Z</updated>
    
    <content type="html"><![CDATA[<h3 id="教程目录《C-提高编程》"><a href="#教程目录《C-提高编程》" class="headerlink" title="教程目录《C++提高编程》"></a>教程目录《<a href="https://notes.camcad.cn/post/13756432.html">C++提高编程</a>》</h3><h1 id="机房预约系统"><a href="#机房预约系统" class="headerlink" title="机房预约系统"></a>机房预约系统</h1><h2 id="机房预约系统-cpp（源文件）"><a href="#机房预约系统-cpp（源文件）" class="headerlink" title="机房预约系统.cpp（源文件）"></a>机房预约系统.cpp（源文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once;</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&quot;globalFile.h&quot;</span></span><br><span class="line"><span class="meta">#include&quot;Identity.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;fstream&gt;</span></span><br><span class="line"><span class="meta">#include&quot;student.h&quot;</span></span><br><span class="line"><span class="meta">#include&quot;teacher.h&quot;</span></span><br><span class="line"><span class="meta">#include&quot;manager.h&quot;</span></span><br><span class="line"><span class="meta">#include&quot;student.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//登陆功能  参数1：操作的文件名，参数2：类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loginIn</span>(<span class="params"><span class="built_in">string</span> fileName, <span class="built_in">int</span> type</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管理员 子菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">managerMenu</span>(<span class="params">Identity * &amp;p</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生代表 子菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">studentMenu</span>(<span class="params">Identity * &amp;p</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//老师代表 子菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">teacherMenu</span>(<span class="params">Identity * &amp;p</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;     <span class="comment">//用于接收用户的选择</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;====================  欢迎来到《蚂蚁》预约系统  ====================&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的身份：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t           1.学生代表           \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t           2.教    师           \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t           3.管 理 员           \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t           0.退    出           \n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;输入您的选择：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;        <span class="comment">//接收用户选择</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">select</span>)     <span class="comment">//根据用户选择 实现不同接口的功能</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:     <span class="comment">//学生代表</span></span><br><span class="line">            loginIn(STUDENT_FILE, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:     <span class="comment">//教    师</span></span><br><span class="line">            loginIn(TEACHER_FILE, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:     <span class="comment">//管 理 员</span></span><br><span class="line">            loginIn(ADMIN_FILE, <span class="number">3</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:     <span class="comment">//退出系统</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;欢迎下次使用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="literal">default</span>:</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//登录功能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loginIn</span>(<span class="params"><span class="built_in">string</span> fileName, <span class="built_in">int</span> type</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开文件-读操作</span></span><br><span class="line">    ifs.open(fileName, ios::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (!ifs.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件不存在！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        ifs.close();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学号/编号</span></span><br><span class="line">    <span class="built_in">int</span> id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密码</span></span><br><span class="line">    <span class="built_in">string</span> pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>)      <span class="comment">//学生登录</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入学号：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) <span class="comment">//职工登录</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入职工编号：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入用户名：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入密码：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基类创建</span></span><br><span class="line">    Identity *person = NULL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//学生登录验证</span></span><br><span class="line">        <span class="built_in">int</span> fId = <span class="number">0</span>;    <span class="comment">//文件 学号</span></span><br><span class="line">        <span class="built_in">string</span> fName;   <span class="comment">//文件 用户名</span></span><br><span class="line">        <span class="built_in">string</span> fPwd;    <span class="comment">//文件 密码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//与用户输入的信息做对比</span></span><br><span class="line">            <span class="keyword">if</span> (fId == id &amp;&amp; fName == name &amp;&amp; fPwd == pwd)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;学生验证登录成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">                system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">                person = <span class="keyword">new</span> Student(id, name, pwd);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//进入学生身份的子菜单</span></span><br><span class="line">                studentMenu(person);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//教师登录验证</span></span><br><span class="line">        <span class="built_in">int</span> fId = <span class="number">0</span>;    <span class="comment">//文件 编号</span></span><br><span class="line">        <span class="built_in">string</span> fName;   <span class="comment">//文件 用户名</span></span><br><span class="line">        <span class="built_in">string</span> fPwd;    <span class="comment">//文件 密码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (ifs &gt;&gt; fId &amp;&amp; ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//与用户输入的信息做对比</span></span><br><span class="line">            <span class="keyword">if</span> (fId == id &amp;&amp; fName == name &amp;&amp; fPwd == pwd)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;教师验证登录成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">                system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">                person = <span class="keyword">new</span> Teacher(id, name, pwd);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//进入老师身份的子菜单</span></span><br><span class="line">                teacherMenu(person);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//管理员登录验证</span></span><br><span class="line">        <span class="built_in">string</span> fName;   <span class="comment">//文件 用户名</span></span><br><span class="line">        <span class="built_in">string</span> fPwd;    <span class="comment">//文件 密码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (ifs &gt;&gt; fName &amp;&amp; ifs &gt;&gt; fPwd)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//与用户输入的信息做对比</span></span><br><span class="line">            <span class="keyword">if</span> (fName == name &amp;&amp; fPwd == pwd)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;管理员验证登录成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">                system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">                system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">                person = <span class="keyword">new</span> Manager(name, pwd);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//进入管理员身份的子菜单</span></span><br><span class="line">                managerMenu(person);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;验证登录失败！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管理员 子菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">managerMenu</span>(<span class="params">Identity * &amp;p</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//调用 管理员 子菜单</span></span><br><span class="line">        p-&gt;openMenu();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将父类指针 转为子类指针，调用子类里其他接口</span></span><br><span class="line">        Manager *ma = (Manager*)p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收用户选项</span></span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">1</span>)        <span class="comment">//添加账号</span></span><br><span class="line">        &#123;</span><br><span class="line">            ma-&gt;addPerson();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">2</span>)   <span class="comment">//查看账号</span></span><br><span class="line">        &#123;</span><br><span class="line">            ma-&gt;showPerson();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">3</span>)   <span class="comment">//查看机房</span></span><br><span class="line">        &#123;</span><br><span class="line">            ma-&gt;showComputer();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">4</span>)   <span class="comment">//清空预约</span></span><br><span class="line">        &#123;</span><br><span class="line">            ma-&gt;cleanFile();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">0</span>)   <span class="comment">//注销登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            delete p;       <span class="comment">//释放堆区对象</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;注销登录成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生代表 子菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">studentMenu</span>(<span class="params">Identity * &amp;p</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//调用 学生代表 子菜单</span></span><br><span class="line">        p-&gt;openMenu();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将父类指针 转为子类指针，调用子类里其他接口</span></span><br><span class="line">        Student *stu = (Student*)p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收用户选项</span></span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">1</span>)        <span class="comment">//申请预约</span></span><br><span class="line">        &#123;</span><br><span class="line">            stu-&gt;applyOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">2</span>)   <span class="comment">//查看我的预约</span></span><br><span class="line">        &#123;</span><br><span class="line">            stu-&gt;showMyOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">3</span>)   <span class="comment">//查看所有预约</span></span><br><span class="line">        &#123;</span><br><span class="line">            stu-&gt;showAllOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">4</span>)   <span class="comment">//取消预约</span></span><br><span class="line">        &#123;</span><br><span class="line">            stu-&gt;cancelOrder();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">0</span>)   <span class="comment">//注销登录</span></span><br><span class="line">        &#123;</span><br><span class="line">            delete p;       <span class="comment">//释放堆区对象</span></span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;注销登录成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//老师 子菜单</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">teacherMenu</span>(<span class="params">Identity * &amp;p</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//调用 老师 子菜单</span></span><br><span class="line">        p-&gt;openMenu();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将父类指针 转为子类指针，调用子类里其他接口</span></span><br><span class="line">        Teacher *tea = (Teacher*)p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收用户选项</span></span><br><span class="line">        <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span>;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="computerRoom-h（头文件）"><a href="#computerRoom-h（头文件）" class="headerlink" title="computerRoom.h（头文件）"></a>computerRoom.h（头文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//机房类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">computerRoom</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//机房编号</span></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="globalFile-h（头文件）"><a href="#globalFile-h（头文件）" class="headerlink" title="globalFile.h（头文件）"></a>globalFile.h（头文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管理员文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADMIN_FILE &quot;admin.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//学生文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STUDENT_FILE &quot;student.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//教师文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEACHER_FILE &quot;teacher.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//机房信息文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COMPUTER_FILE &quot;computerRoom.txt&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Identity-h（头文件）"><a href="#Identity-h（头文件）" class="headerlink" title="Identity.h（头文件）"></a>Identity.h（头文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once    //防止头文件重复定义</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//身份抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Identity</span>      <span class="comment">//同一特性类</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作菜单 纯虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">openMenu</span>()</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名称</span></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="orderFile-h（头文件）"><a href="#orderFile-h（头文件）" class="headerlink" title="orderFile.h（头文件）"></a>orderFile.h（头文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&quot;globalFile.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;map&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&lt;fstream&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">orderFile</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    orderFile();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新预约记录</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initMap</span>(<span class="params"><span class="built_in">string</span> str</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//临时容器</span></span><br><span class="line">    map&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;m_tempMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录的容器 key---记录的条数 value---具体要求记录的键值对信息</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, map&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; m_OrderData;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="orderFile-cpp（源文件）"><a href="#orderFile-cpp（源文件）" class="headerlink" title="orderFile.cpp（源文件）"></a>orderFile.cpp（源文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &quot;orderFile.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">orderFile::orderFile()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_OrderData.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//预约记录个数</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取文件中的数据 </span></span><br><span class="line">    <span class="built_in">string</span> date;        <span class="comment">//时间</span></span><br><span class="line">    <span class="built_in">string</span> interval;    <span class="comment">//时间段</span></span><br><span class="line">    <span class="built_in">string</span> stuId;       <span class="comment">//学生学号</span></span><br><span class="line">    <span class="built_in">string</span> stuName;     <span class="comment">//学生姓名</span></span><br><span class="line">    <span class="built_in">string</span> roomId;      <span class="comment">//机房编号</span></span><br><span class="line">    <span class="built_in">string</span> status;      <span class="comment">//预约状态</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    <span class="function">ifstream <span class="title">ifs</span>(<span class="params">ORDER_FILE, ios::<span class="keyword">in</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取内容</span></span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; date &amp;&amp; ifs &gt;&gt; interval &amp;&amp; ifs &gt;&gt; stuId &amp;&amp; ifs &gt;&gt;</span><br><span class="line">        stuName &amp;&amp; ifs &gt;&gt; roomId &amp;&amp; ifs &gt;&gt; status)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化临时容器</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_tempMap.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数据放入到临时容器中</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(date);     <span class="comment">//时间</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(interval); <span class="comment">//时间段</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(stuId);        <span class="comment">//学生学号</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(stuName);      <span class="comment">//学生姓名</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(roomId);       <span class="comment">//机房编号</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;initMap(status);       <span class="comment">//预约状态</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数据放入到容器中</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_OrderData.insert(make_pair(<span class="keyword">this</span>-&gt;m_Size, <span class="keyword">this</span>-&gt;m_tempMap));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//预约记录个数</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新预约记录</span></span><br><span class="line"><span class="keyword">void</span> orderFile::updateOrder()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;     <span class="comment">//预约记录0条，直接return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    <span class="function">ofstream <span class="title">ofs</span>(<span class="params">ORDER_FILE, ios::<span class="keyword">out</span>  ios::trunc</span>)</span>;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;date:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;date&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;interval:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;interval&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;stuId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;stuId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;stuName:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;stuName&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;roomId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;roomId&quot;</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        ofs &lt;&lt; <span class="string">&quot;status:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_OrderData[i][<span class="string">&quot;status&quot;</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ofs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="keyword">void</span> orderFile::initMap(<span class="built_in">string</span> str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> tempKey;     <span class="comment">//临时Key值</span></span><br><span class="line">    <span class="built_in">string</span> tempValue;   <span class="comment">//临时Value值</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> start = <span class="number">0</span>;              <span class="comment">//起始位置</span></span><br><span class="line">    <span class="built_in">int</span> pos = str.find(<span class="string">&quot;:&quot;</span>);  <span class="comment">//返回&quot;:&quot;的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//不等于 -1 执行</span></span><br><span class="line">    <span class="keyword">if</span> (pos != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tempKey = str.substr(start, pos);</span><br><span class="line">        tempValue = str.substr(pos + <span class="number">1</span>, str.size() - pos - <span class="number">1</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="manager-h（头文件）"><a href="#manager-h（头文件）" class="headerlink" title="manager.h（头文件）"></a>manager.h（头文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&quot;Identity.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&quot;globalFile.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;fstream&gt;</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&quot;student.h&quot;</span></span><br><span class="line"><span class="meta">#include&quot;teacher.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="meta">#include&quot;computerRoom.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Manager</span> :<span class="title">public</span> <span class="title">Identity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//默认构造</span></span><br><span class="line">    Manager();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造 参数：姓名，密码</span></span><br><span class="line">    Manager(<span class="built_in">string</span> name, <span class="built_in">string</span> pwd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作菜单</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">openMenu</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加帐号</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addPerson</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看帐号</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPerson</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看机房</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showComputer</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cleanFile</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initVector</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学生容器</span></span><br><span class="line">    vector&lt;Student&gt;vStu;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//教师容器</span></span><br><span class="line">    vector&lt;Teacher&gt;vTea;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查重复 参数：（传入id,传入类型）返回值：（true代表有重复，false代表没有重复）</span></span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">checkRepeat</span>(<span class="params"><span class="built_in">int</span> id, <span class="built_in">int</span> type</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//机房容器</span></span><br><span class="line">    vector&lt;computerRoom&gt;vCom;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="manager-cpp（源文件）"><a href="#manager-cpp（源文件）" class="headerlink" title="manager.cpp（源文件）"></a>manager.cpp（源文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&quot;manager.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Manager::Manager()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造 参数：用户名称，用户密码</span></span><br><span class="line">Manager::Manager(<span class="built_in">string</span> name, <span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;initVector();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作菜单</span></span><br><span class="line"><span class="keyword">void</span> Manager::openMenu()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;欢迎管理员：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; 登录&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           1.添加账号           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           2.查看账号           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           3.查看机房           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           4.清空预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           0.注销登录           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加帐号</span></span><br><span class="line"><span class="keyword">void</span> Manager::addPerson()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;     <span class="comment">//接收用户的选择</span></span><br><span class="line">    <span class="built_in">string</span> fileName;    <span class="comment">//文件名称</span></span><br><span class="line">    <span class="built_in">string</span> tip;         <span class="comment">//提示需要输入的ip号</span></span><br><span class="line">    <span class="built_in">string</span> errorTip;    <span class="comment">//重复错误提示</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入添加账号类型：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1.添加学生&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2.添加教师&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fileName = STUDENT_FILE;</span><br><span class="line">            tip = <span class="string">&quot;请输入学号：&quot;</span>;</span><br><span class="line">            errorTip = <span class="string">&quot;学号重复，请重新输入！\n&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fileName = TEACHER_FILE;</span><br><span class="line">            tip = <span class="string">&quot;请输入职工编号：&quot;</span>;</span><br><span class="line">            errorTip = <span class="string">&quot;职工编号重复，请重新输入！\n&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);  </span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);        <span class="comment">//清屏</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>-&gt;openMenu();    <span class="comment">//调用 管理员 子菜单</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    ofstream ofs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开文件-写内容</span></span><br><span class="line">    ofs.open(fileName, ios::<span class="keyword">out</span>  ios::app);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取用户的输入</span></span><br><span class="line">    <span class="built_in">int</span> id;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; tip;  <span class="comment">//学号或职工编号</span></span><br><span class="line">        cin &gt;&gt; id;</span><br><span class="line">        <span class="built_in">bool</span> ret = <span class="keyword">this</span>-&gt;checkRepeat(id, <span class="keyword">select</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ret)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; errorTip;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入用户名：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; name;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入密码：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向文件添加数据</span></span><br><span class="line">    ofs &lt;&lt; id &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; pwd &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ofs.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;initVector();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;添加成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">myPrintClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学生 仿函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span>()(<span class="params">Student &amp;s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;学号：&quot;</span> &lt;&lt; s.m_Id &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; s.m_Name &lt;&lt; <span class="string">&quot;\t密码：&quot;</span> &lt;&lt; s.m_Pwd &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//教师 仿函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span>()(<span class="params">Teacher &amp;t</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;职工编号：&quot;</span> &lt;&lt; t.m_EmpId &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; t.m_Name &lt;&lt; <span class="string">&quot;\t密码：&quot;</span> &lt;&lt; t.m_Pwd &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//机房 仿函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span>()(<span class="params">computerRoom &amp;c</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;机房编号：&quot;</span> &lt;&lt; c.m_Name &lt;&lt; <span class="string">&quot;\t机房最大容量：&quot;</span> &lt;&lt; c.m_Maximum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看帐号</span></span><br><span class="line"><span class="keyword">void</span> Manager::showPerson()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//接收用户的输入</span></span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入您的选择：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1、查看所有学生&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2、查看所有教师&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//遍历学生容器 所有元素</span></span><br><span class="line">            for_each(vStu.begin(), vStu.end(), myPrintClass());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//遍历教师容器 所有元素</span></span><br><span class="line">            for_each(vTea.begin(), vTea.end(), myPrintClass());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入错误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用 管理员 子菜单</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;openMenu();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看机房</span></span><br><span class="line"><span class="keyword">void</span> Manager::showComputer()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;机房信息如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历机房容器 所有元素</span></span><br><span class="line">    for_each(vCom.begin(), vCom.end(), myPrintClass());</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空预约</span></span><br><span class="line"><span class="keyword">void</span> Manager::cleanFile()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建流文件（如果文件存在先删除，再创建)</span></span><br><span class="line">    <span class="function">ofstream <span class="title">ofs</span>(<span class="params">ORDER_FILE, ios::trunc</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ofs.close();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;清空成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="keyword">void</span> Manager::initVector()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;vStu.clear();</span><br><span class="line">    <span class="keyword">this</span>-&gt;vTea.clear();</span><br><span class="line">    <span class="keyword">this</span>-&gt;vCom.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取学生文件中信息</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line">    ifs.open(STUDENT_FILE, ios::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//char ch;</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/判断文件是否存在</span></span><br><span class="line">    <span class="comment">//if (!ifs.is_open())</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; &quot;学生 文件读取失败！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//  ifs.close();</span></span><br><span class="line">    <span class="comment">//  return;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/判断文件是否为空</span></span><br><span class="line">    <span class="comment">//ifs &gt;&gt; ch;</span></span><br><span class="line">    <span class="comment">//if (ifs.eof())</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; &quot;学生 文件为空！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//  ifs.close();</span></span><br><span class="line">    <span class="comment">//  return;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//ifs.putback(ch);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读内容</span></span><br><span class="line">    Student s;</span><br><span class="line">    <span class="comment">//将数据放入到容器中</span></span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; s.m_Id &amp;&amp; ifs &gt;&gt; s.m_Name &amp;&amp; ifs &gt;&gt; s.m_Pwd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;vStu.push_back(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;学生数量为：&quot; &lt;&lt; this-&gt;vStu.size() &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取教师文件中信息</span></span><br><span class="line">    ifs.open(TEACHER_FILE, ios::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/判断文件是否存在</span></span><br><span class="line">    <span class="comment">//if (!ifs.is_open())</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; &quot;教师 文件读取失败！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//  ifs.close();</span></span><br><span class="line">    <span class="comment">//  return;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/判断文件是否为空</span></span><br><span class="line">    <span class="comment">//ifs &gt;&gt; ch;</span></span><br><span class="line">    <span class="comment">//if (ifs.eof())</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; &quot;教师 文件为空！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//  ifs.close();</span></span><br><span class="line">    <span class="comment">//  return;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//ifs.putback(ch);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读内容</span></span><br><span class="line">    Teacher t;</span><br><span class="line">    <span class="comment">//将数据放入到容器中</span></span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; t.m_EmpId &amp;&amp; ifs &gt;&gt; t.m_Name &amp;&amp; ifs &gt;&gt; t.m_Pwd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;vTea.push_back(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;教师数量为：&quot; &lt;&lt; this-&gt;vTea.size() &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取机房文件中信息</span></span><br><span class="line">    ifs.open(COMPUTER_FILE, ios::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/判断文件是否存在</span></span><br><span class="line">    <span class="comment">//if (!ifs.is_open())</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; &quot;机房 文件读取失败！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//  ifs.close();</span></span><br><span class="line">    <span class="comment">//  return;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/判断文件是否为空</span></span><br><span class="line">    <span class="comment">//ifs &gt;&gt; ch;</span></span><br><span class="line">    <span class="comment">//if (ifs.eof())</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//  cout &lt;&lt; &quot;机房 文件为空！&quot; &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//  ifs.close();</span></span><br><span class="line">    <span class="comment">//  return;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//ifs.putback(ch);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读内容</span></span><br><span class="line">    computerRoom c;</span><br><span class="line">    <span class="comment">//将数据放入到容器中</span></span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; c.m_Name &amp;&amp; ifs &gt;&gt; c.m_Maximum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;vCom.push_back(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;机房数量为：&quot; &lt;&lt; this-&gt;vCom.size() &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ifs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="student-h（头文件）"><a href="#student-h（头文件）" class="headerlink" title="student.h（头文件）"></a>student.h（头文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&quot;Identity.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&quot;computerRoom.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include&lt;fstream&gt;</span></span><br><span class="line"><span class="meta">#include&quot;globalFile.h&quot;</span></span><br><span class="line"><span class="meta">#include&quot;orderFile.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Student</span> :<span class="title">public</span> <span class="title">Identity</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认构造</span></span><br><span class="line">    Student();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造  参数：学号、姓名、密码</span></span><br><span class="line">    Student(<span class="built_in">int</span> id, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作菜单</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">openMenu</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申请预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">applyOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看自身的预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showMyOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看所有预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showAllOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取消预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~Student();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学号</span></span><br><span class="line">    <span class="built_in">int</span> m_Id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//容器初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initVector</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//机房容器</span></span><br><span class="line">    vector&lt;computerRoom&gt;vCom;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="student-cpp（源文件）"><a href="#student-cpp（源文件）" class="headerlink" title="student.cpp（源文件）"></a>student.cpp（源文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&quot;student.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Student::Student()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">Student::Student(<span class="built_in">int</span> id, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化属性</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Id = id;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//容器初始化</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;initVector();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作菜单</span></span><br><span class="line"><span class="keyword">void</span> Student::openMenu()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;欢迎学生代表：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; 登录&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           1.申请预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           2.我的预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           3.所有预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           4.取消预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           0.注销登录           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//申请预约</span></span><br><span class="line"><span class="keyword">void</span> Student::applyOrder()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> date = <span class="number">0</span>;           <span class="comment">//周一~周五</span></span><br><span class="line">    <span class="built_in">int</span> interval = <span class="number">0</span>;       <span class="comment">//上午、下午</span></span><br><span class="line">    <span class="built_in">int</span> roomId = <span class="number">0</span>;         <span class="comment">//机房容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;机房开放的时间为周一至周五！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;请输入申请预约的时间：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1、周一&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2、周二&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;3、周三&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;4、周四&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;5、周五&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cin &gt;&gt; date;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> &lt;= date &amp;&amp; date &lt;= <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">            system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用 学生 子菜单</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;openMenu();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入申请预约的时间段：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1、上午&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2、下午&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; interval;</span><br><span class="line">        <span class="keyword">if</span> (interval &gt;= <span class="number">1</span> &amp;&amp; interval &lt;= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请选择机房：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; vCom.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="keyword">this</span>-&gt;vCom[i].m_Name &lt;&lt; <span class="string">&quot;机房 容量：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;vCom[i].m_Maximum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; roomId;</span><br><span class="line">        <span class="keyword">if</span> (roomId &gt;= <span class="number">1</span> &amp;&amp; roomId &lt;= <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    <span class="function">ofstream <span class="title">ofs</span>(<span class="params">ORDER_FILE, ios::<span class="keyword">out</span>  ios::app</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入数据</span></span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;date:&quot;</span> &lt;&lt; date &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;interval:&quot;</span> &lt;&lt; interval &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;stuId:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Id &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;stuName:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;roomId:&quot;</span> &lt;&lt; roomId &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;status:&quot;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;      <span class="comment">//1：审核中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    ofs.close();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;预约成功，审核中&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看自身的预约</span></span><br><span class="line"><span class="keyword">void</span> Student::showMyOrder()</span><br><span class="line">&#123;</span><br><span class="line">    orderFile ord;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ord.m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ord.m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//string 转 int</span></span><br><span class="line">        <span class="comment">//string 利用 .c_str() 转 const char *</span></span><br><span class="line">        <span class="comment">//利用 atoi(const char *) 转 int</span></span><br><span class="line">        <span class="keyword">if</span> (atoi(ord.m_OrderData[i][<span class="string">&quot;stuId&quot;</span>].c_str()) == <span class="keyword">this</span>-&gt;m_Id)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;预约日期：周&quot;</span> &lt;&lt; ord.m_OrderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;   时段：&quot;</span> &lt;&lt; (ord.m_OrderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;   机房编号：&quot;</span> &lt;&lt; ord.m_OrderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1审核中 2已预约 0取消预约 -1预约失败</span></span><br><span class="line">            <span class="built_in">string</span> status = <span class="string">&quot;   状态：&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (ord.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ord.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                status += <span class="string">&quot;已预约&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ord.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;0&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                status += <span class="string">&quot;预约失败&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="keyword">void</span> Student::showAllOrder()</span><br><span class="line">&#123;</span><br><span class="line">    orderFile of;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;、&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;预约日期：周&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t时段：&quot;</span> &lt;&lt; (of.m_OrderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t学号：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t机房编号：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> status = <span class="string">&quot;\t状态：&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;已预约&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;0&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;预约已取消&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;预约失败&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消预约</span></span><br><span class="line"><span class="keyword">void</span> Student::cancelOrder()</span><br><span class="line">&#123;</span><br><span class="line">    orderFile of;</span><br><span class="line">    <span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v;     <span class="comment">//存放在最大容器中的下标编号</span></span><br><span class="line">    <span class="built_in">int</span> index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//先判断自身学号</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Id == atoi(of.m_OrderData[i][<span class="string">&quot;stuId&quot;</span>].c_str()))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//再筛选状态 审核中或预约成功</span></span><br><span class="line">            <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>  of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//放入到容器中</span></span><br><span class="line">                v.push_back(i);</span><br><span class="line"></span><br><span class="line">                cout &lt;&lt; index &lt;&lt; <span class="string">&quot;、&quot;</span>;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;预约日期：周&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;\t时段：&quot;</span> &lt;&lt; (of.m_OrderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;\t机房：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">                <span class="built_in">string</span> status = <span class="string">&quot; \t状态：&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    status += <span class="string">&quot;已预约&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; status &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//记录下标加1</span></span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v.size() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有审核中或已预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;审核中或预约成功的记录可以取消，请输入取消的记录：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入取消预约状态的序号，0 表示返回&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">select</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; <span class="keyword">select</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">select</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">select</span> &lt;= v.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">select</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                of.m_OrderData[v[<span class="keyword">select</span> - <span class="number">1</span>]][<span class="string">&quot;status&quot;</span>] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">                of.updateOrder();</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;已取消预约！&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;输入有误，请重新输入！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">Student::~Student()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器初始化</span></span><br><span class="line"><span class="keyword">void</span> Student::initVector()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化容器</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;vCom.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建流文件</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line">    ifs.open(COMPUTER_FILE, ios::<span class="keyword">in</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建临时接收类</span></span><br><span class="line">    computerRoom com;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    <span class="keyword">while</span> (ifs &gt;&gt; com.m_Name &amp;&amp; ifs &gt;&gt; com.m_Maximum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将读取的信息放入到 容器中</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;vCom.push_back(com);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="teacher-h（头文件）"><a href="#teacher-h（头文件）" class="headerlink" title="teacher.h（头文件）"></a>teacher.h（头文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&quot;Identity.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&quot;orderFile.h&quot;</span></span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Teacher</span> :<span class="title">public</span> <span class="title">Identity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认构造</span></span><br><span class="line">    Teacher();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造 参数：职工编号、姓名、密码</span></span><br><span class="line">    Teacher(<span class="built_in">int</span> empid, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单界面</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">openMenu</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看所有预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showAllOrder</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//审核预约</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">validOrder</span>()</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="teacher-cpp（源文件）"><a href="#teacher-cpp（源文件）" class="headerlink" title="teacher.cpp（源文件）"></a>teacher.cpp（源文件）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&quot;teacher.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认构造</span></span><br><span class="line">Teacher::Teacher()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造 参数：职工编号、姓名、密码</span></span><br><span class="line">Teacher::Teacher(<span class="built_in">int</span> empid, <span class="built_in">string</span> name, <span class="built_in">string</span> pwd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_EmpId = empid;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单界面</span></span><br><span class="line"><span class="keyword">void</span> Teacher::openMenu()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;欢迎教师：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; 登录&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           1.所有预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           2.审核预约           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t                                \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t           0.注销登录           \n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\t\t----------------------------------\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看所有预约</span></span><br><span class="line"><span class="keyword">void</span> Teacher::showAllOrder()</span><br><span class="line">&#123;</span><br><span class="line">    orderFile of;</span><br><span class="line">    <span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;、&quot;</span>;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;预约日期：周&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t时段：&quot;</span> &lt;&lt; (of.m_OrderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t学号&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t姓名&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\t机房&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> status = <span class="string">&quot; \t状态：&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;2&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;已预约&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;0&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;取消预约&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            status += <span class="string">&quot;预约失败&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//审核预约</span></span><br><span class="line"><span class="keyword">void</span> Teacher::validOrder()</span><br><span class="line">&#123;</span><br><span class="line">    orderFile of;</span><br><span class="line">    <span class="keyword">if</span> (of.m_Size == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有预约记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v;</span><br><span class="line">    v.clear();</span><br><span class="line">    <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; of.m_Size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            v.push_back(i);</span><br><span class="line">            cout &lt;&lt; ++index &lt;&lt; <span class="string">&quot;、&quot;</span>;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;预约日期：周&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;date&quot;</span>];</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;\t时段：&quot;</span> &lt;&lt; (of.m_OrderData[i][<span class="string">&quot;interval&quot;</span>] == <span class="string">&quot;1&quot;</span> ? <span class="string">&quot;上午&quot;</span> : <span class="string">&quot;下午&quot;</span>);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;\t学号：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuId&quot;</span>];</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;stuName&quot;</span>];</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;\t机房：&quot;</span> &lt;&lt; of.m_OrderData[i][<span class="string">&quot;roomId&quot;</span>];</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> status = <span class="string">&quot; \t状态：&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (of.m_OrderData[i][<span class="string">&quot;status&quot;</span>] == <span class="string">&quot;1&quot;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                status += <span class="string">&quot;审核中&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; status &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v.size() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;暂时没有审核中的记录！&quot;</span> &lt;&lt; endl;</span><br><span class="line">        system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">机房预约系统(头文件/源文件)</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
