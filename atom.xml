<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蚂蚁Emmet</title>
  
  <subtitle>逆境求生存，顺境求发展</subtitle>
  <link href="https://notes.camcad.cn/atom.xml" rel="self"/>
  
  <link href="https://notes.camcad.cn/"/>
  <updated>2023-04-05T15:26:51.081Z</updated>
  <id>https://notes.camcad.cn/</id>
  
  <author>
    <name>蚂蚁Emmet</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++提高编程70：STL函数对象（谓词）</title>
    <link href="https://notes.camcad.cn/post/f42f72e5.html"/>
    <id>https://notes.camcad.cn/post/f42f72e5.html</id>
    <published>2020-08-02T09:09:36.000Z</published>
    <updated>2023-04-05T15:26:51.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-2-谓词"><a href="#4-2-谓词" class="headerlink" title="4.2 谓词"></a>4.2 谓词</h1><h2 id="4-2-1-谓词概念"><a href="#4-2-1-谓词概念" class="headerlink" title="4.2.1 谓词概念"></a>4.2.1 谓词概念</h2><p><strong>概念：</strong></p><ul><li>返回bool类型的仿函数称为<strong>谓词</strong>。</li><li>如果operator() 接受一个参数，那么叫做一元谓词。</li><li>如果operator() 接受二个参数，那么叫做二元谓词。</li></ul><h2 id="4-2-2-一元谓词"><a href="#4-2-2-一元谓词" class="headerlink" title="4.2.2 一元谓词"></a>4.2.2 一元谓词</h2><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;vector&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//仿函数 返回值类型为bool数据类型，称为谓词。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">GreaterFive</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一元谓词</span></span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">operator</span>()(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> val &gt; <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;::iterator it = find_if(v1.begin(), v1.end(), GreaterFive());</span><br><span class="line">    <span class="keyword">if</span> (it ==v1.end())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;未找到&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;找到大于5的数字为：&quot;</span> &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070203314088-1024x234.jpg"></p><h3 id="总结：参数只有一个的谓词，称为一元谓词。"><a href="#总结：参数只有一个的谓词，称为一元谓词。" class="headerlink" title="总结：参数只有一个的谓词，称为一元谓词。"></a>总结：参数只有一个的谓词，称为一元谓词。</h3><h2 id="4-2-3-二元谓词"><a href="#4-2-3-二元谓词" class="headerlink" title="4.2.3 二元谓词"></a>4.2.3 二元谓词</h2><h3 id="示例代码：-1"><a href="#示例代码：-1" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//二元谓词</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyCompare</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">bool</span>  <span class="title">operator</span>()(<span class="params"><span class="built_in">int</span> v1, <span class="built_in">int</span> v2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印显示</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> vector&lt;<span class="built_in">int</span>&gt; &amp;v1</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::const_iterator it = v1.begin(); it != v1.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    v1.push_back(<span class="number">21</span>);</span><br><span class="line">    v1.push_back(<span class="number">12</span>);</span><br><span class="line">    v1.push_back(<span class="number">45</span>);</span><br><span class="line">    v1.push_back(<span class="number">42</span>);</span><br><span class="line">    v1.push_back(<span class="number">11</span>);</span><br><span class="line">    printVector(<span class="string">&quot;v1 初始化&quot;</span>, v1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//升序</span></span><br><span class="line">    sort(v1.begin(), v1.end());</span><br><span class="line">    printVector(<span class="string">&quot;v1 升序后&quot;</span>, v1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//降序</span></span><br><span class="line">    sort(v1.begin(), v1.end(),MyCompare());</span><br><span class="line">    printVector(<span class="string">&quot;v1 降序后&quot;</span>, v1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070407325976-1024x365.jpg"></p><h3 id="总结：参数有两个的谓词，称为二元谓词。"><a href="#总结：参数有两个的谓词，称为二元谓词。" class="headerlink" title="总结：参数有两个的谓词，称为二元谓词。"></a>总结：参数有两个的谓词，称为二元谓词。</h3>]]></content>
    
    
    <summary type="html">STL函数对象（谓词）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程69：STL函数对象（函数对象）</title>
    <link href="https://notes.camcad.cn/post/b9db3b6b.html"/>
    <id>https://notes.camcad.cn/post/b9db3b6b.html</id>
    <published>2020-08-01T20:19:25.000Z</published>
    <updated>2023-04-05T15:26:51.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第四章：STL函数对象"><a href="#第四章：STL函数对象" class="headerlink" title="第四章：STL函数对象"></a>第四章：STL函数对象</h1><h2 id="4-1-函数对象"><a href="#4-1-函数对象" class="headerlink" title="4.1 函数对象"></a>4.1 函数对象</h2><h3 id="4-1-1-函数对象概念"><a href="#4-1-1-函数对象概念" class="headerlink" title="4.1.1 函数对象概念"></a>4.1.1 函数对象概念</h3><p><strong>概念：</strong></p><ul><li>重载<strong>函数调用操作符</strong>的类，其对象常称为<strong>函数对象</strong>。</li><li><strong>函数对象</strong>使用重载 ( ) 时，行为类似函数调用，也叫<strong>仿函数</strong>。</li></ul><p><strong>本质：</strong></p><ul><li><p>函数对象（仿函数）是一个<strong>类</strong>，不是一个函数。</p><h3 id="4-1-2-函数对象使用"><a href="#4-1-2-函数对象使用" class="headerlink" title="4.1.2 函数对象使用"></a>4.1.2 函数对象使用</h3><p><strong>特点：</strong></p></li><li><p>函数对象在使用时，可以像普通函数那样调用，可以有参数，可以有返回值。</p></li><li><p>函数对象超出普通函数的概念，函数对象可以有自己的状态。</p></li><li><p>函数对象可以作为参数传递。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//仿函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">MyFunc</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    MyFunc()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//仿函数（加法）</span></span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">operator</span>()(<span class="params"><span class="built_in">int</span> v1, <span class="built_in">int</span> v2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> v1 + v2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//仿函数（打印显示）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span>()(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//参数传递（打印显示）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doPrint</span>(<span class="params">MyFunc &amp;p, <span class="built_in">string</span> str</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    p(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//函数对象在使用时，可以像普通函数那样调用，可以有参数，可以有返回值。</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;函数对象在使用时，可以像普通函数那样调用，可以有参数，可以有返回值：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    MyFunc <span class="keyword">add</span>;</span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;add(12, 29)：&quot;</span>&lt;&lt; <span class="keyword">add</span>(<span class="number">12</span>, <span class="number">29</span>) &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;    <span class="comment">//41</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数对象超出普通函数的概念，函数对象可以有自己的状态。</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;函数对象超出普通函数的概念，函数对象可以有自己的状态：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    MyFunc p;</span><br><span class="line">    p(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    p(<span class="string">&quot;Hello C++&quot;</span>);</span><br><span class="line">    p(<span class="string">&quot;Hello C&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;仿函数（打印显示）调用次数为：&quot;</span> &lt;&lt; p.count &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//函数对象可以作为参数传递。</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;函数对象可以作为参数传递：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    MyFunc myPrint;</span><br><span class="line">    doPrint(myPrint, <span class="string">&quot;Heoll C/C++&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070202554644-1024x417.jpg"></p><h3 id="总结：仿函数写法非常灵活，可以作为参数进行传递。"><a href="#总结：仿函数写法非常灵活，可以作为参数进行传递。" class="headerlink" title="总结：仿函数写法非常灵活，可以作为参数进行传递。"></a>总结：仿函数写法非常灵活，可以作为参数进行传递。</h3>]]></content>
    
    
    <summary type="html">STL函数对象（函数对象）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程68：STL常用容器（案例-员工分组）</title>
    <link href="https://notes.camcad.cn/post/b4f414d.html"/>
    <id>https://notes.camcad.cn/post/b4f414d.html</id>
    <published>2020-08-01T17:57:16.000Z</published>
    <updated>2023-04-05T15:26:51.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-10-案例-员工分组"><a href="#3-10-案例-员工分组" class="headerlink" title="3.10 案例-员工分组"></a>3.10 案例-员工分组</h1><h2 id="3-10-1-案例描述"><a href="#3-10-1-案例描述" class="headerlink" title="3.10.1 案例描述"></a>3.10.1 案例描述</h2><ul><li>公司今天招聘了10个员工（ABCDEFGHIJ）,10名员工进入公司之后，需要指派员工在那个部门工作。</li><li>员工信息有：姓名、工资组成；部门分为 ：策划、美术、研发。</li><li>随机给10名员工分配部门和工资。</li><li>通过multimap进行信息的插入key（部门编号）value（员工）。</li><li>分部门显示员工信息。</li></ul><h2 id="10-2-实现步骤"><a href="#10-2-实现步骤" class="headerlink" title="10.2 实现步骤"></a>10.2 实现步骤</h2><ul><li><p>1.创建10名员工，放到vecror容器中。</p></li><li><p>2.遍历vector容器，取出每个员工，进行随机分组。</p></li><li><p>3.分组后，将员工部门编号作为key，具体员工作为value，放入到multimap容器中。</p></li><li><p>4.分部门显示员工信息</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;map&gt;</span></span><br><span class="line"><span class="meta">#include &lt;ctime&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> plan 0      //策划</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fineArts 1  //美术</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> exploit 2   //研发</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//员工类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Worker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Salary;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建员工</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createWorker</span>(<span class="params">vector&lt;Worker&gt; &amp;v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> nameNo = <span class="string">&quot;ABCDEFGHIJ&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建员工</span></span><br><span class="line">        Worker worker;</span><br><span class="line">        worker.m_Name = <span class="string">&quot;员工&quot;</span>;</span><br><span class="line">        worker.m_Name += nameNo[i]; </span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机工资</span></span><br><span class="line">        worker.m_Salary = rand() % <span class="number">5001</span> + <span class="number">6999</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将元素放入到容器中</span></span><br><span class="line">        v.push_back(worker);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setGroup</span>(<span class="params">vector&lt;Worker&gt; &amp;v, multimap&lt;<span class="built_in">int</span>, Worker&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Worker&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//产生随机部门编号</span></span><br><span class="line">        <span class="built_in">int</span> deptId = rand() % <span class="number">3</span>;    <span class="comment">//0 1 2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将员工插入到分组中</span></span><br><span class="line">        m.insert(make_pair(deptId, *it));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分组显示员工信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showWorkerByGourp</span>(<span class="params"> multimap&lt;<span class="built_in">int</span>, Worker&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;策划部门：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    multimap&lt;<span class="built_in">int</span>, Worker&gt;::iterator pos = m.find(plan);</span><br><span class="line">    <span class="built_in">int</span> cosnt = m.count(plan);  <span class="comment">//统计具体人数</span></span><br><span class="line">    <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; pos != m.end() &amp;&amp; index &lt; cosnt; pos++, index++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="string">&quot;\t工资：&quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;美术部门：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    pos = m.find(fineArts);</span><br><span class="line">    cosnt = m.count(fineArts);  <span class="comment">//统计具体人数</span></span><br><span class="line">    index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; pos != m.end() &amp;&amp; index &lt; cosnt; pos++, index++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="string">&quot;\t工资：&quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;研发部门：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    pos = m.find(exploit);</span><br><span class="line">    cosnt = m.count(exploit);   <span class="comment">//统计具体人数</span></span><br><span class="line">    index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; pos != m.end() &amp;&amp; index &lt; cosnt; pos++, index++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; pos-&gt;second.m_Name &lt;&lt; <span class="string">&quot;\t工资：&quot;</span> &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//随机数种子</span></span><br><span class="line">    srand((unsigned <span class="built_in">int</span>)time(NULL));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    vector&lt;Worker&gt; vWorker;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建员工</span></span><br><span class="line">    createWorker(vWorker);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置组</span></span><br><span class="line">    multimap&lt;<span class="built_in">int</span>,Worker&gt; mWorker;</span><br><span class="line">    setGroup(vWorker, mWorker);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分组显示员工信息</span></span><br><span class="line">    showWorkerByGourp(mWorker);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">STL常用容器（案例-员工分组）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程67：STL常用容器（map/multimap容器-map容器排序）</title>
    <link href="https://notes.camcad.cn/post/4fea10f2.html"/>
    <id>https://notes.camcad.cn/post/4fea10f2.html</id>
    <published>2020-08-01T14:49:21.000Z</published>
    <updated>2023-04-05T15:26:51.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-9-6-map容器排序"><a href="#3-9-6-map容器排序" class="headerlink" title="3.9.6 map容器排序"></a>3.9.6 map容器排序</h2><p><strong>学习目标：</strong><br>map容器默认排序规则为按照key值进行 从小到大排序，掌握如何改变排序规则。 </p><p><strong>主要技术点：</strong></p><ul><li>利用仿函数，可以改变排序规则。</li></ul><h2 id="1、示例代码（内置数据类型）"><a href="#1、示例代码（内置数据类型）" class="headerlink" title="1、示例代码（内置数据类型）"></a>1、示例代码（内置数据类型）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;map&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//访函数（降序）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">myCompare</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">operator</span>()(<span class="params"><span class="built_in">int</span> v1, <span class="built_in">int</span> v2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMap</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, myCompare&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, myCompare&gt;::const_iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;键值(key)：&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;\t实值(value)：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, myCompare&gt;m1;</span><br><span class="line">    m1.insert(make_pair(<span class="number">1</span>, <span class="number">22</span>));</span><br><span class="line">    m1.insert(make_pair(<span class="number">4</span>, <span class="number">32</span>));</span><br><span class="line">    m1.insert(make_pair(<span class="number">3</span>, <span class="number">25</span>));</span><br><span class="line">    m1.insert(make_pair(<span class="number">5</span>, <span class="number">11</span>));</span><br><span class="line">    m1.insert(make_pair(<span class="number">2</span>, <span class="number">31</span>));</span><br><span class="line">    printMap(<span class="string">&quot;m1 初始化&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;   </span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070106171534-1024x419.jpg"></p><h2 id="2、示例代码（自定义数据类型）"><a href="#2、示例代码（自定义数据类型）" class="headerlink" title="2、示例代码（自定义数据类型）"></a>2、示例代码（自定义数据类型）</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;map&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="built_in">int</span> age, <span class="built_in">int</span> higjt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Hight = higjt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">    <span class="built_in">int</span> m_Hight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访函数（年龄降序--身高升序）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">myCompare01</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">operator</span>()(<span class="params"><span class="keyword">const</span> <span class="built_in">int</span> &amp;v1, <span class="keyword">const</span> <span class="built_in">int</span> &amp;v2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">myCompare02</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">operator</span>()(<span class="params"><span class="keyword">const</span> Person &amp;v1,<span class="keyword">const</span> Person &amp;v2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v1.m_Age==v2.m_Age)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> v1.m_Hight &lt; v2.m_Hight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v1.m_Age &gt; v2.m_Age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMap01</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> map&lt;<span class="built_in">int</span>, Person, myCompare01&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (map&lt;<span class="built_in">int</span>, Person, myCompare01&gt;::const_iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;键值(key)：&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; it-&gt;second.m_Name </span><br><span class="line">            &lt;&lt; <span class="string">&quot;\t年龄：&quot;</span> &lt;&lt; it-&gt;second.m_Age &lt;&lt; <span class="string">&quot;\t身高：&quot;</span> &lt;&lt; it-&gt;second.m_Hight &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMap02</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> map&lt;Person,<span class="built_in">int</span>, myCompare02&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (map&lt;Person, <span class="built_in">int</span>, myCompare02&gt;::const_iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; it-&gt;first.m_Name &lt;&lt; <span class="string">&quot;\t年龄：&quot;</span> &lt;&lt; it-&gt;first.m_Age</span><br><span class="line">            &lt;&lt; <span class="string">&quot;\t身高：&quot;</span> &lt;&lt; it-&gt;first.m_Hight &lt;&lt; <span class="string">&quot;\t键值(key)：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建元素</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span>(<span class="params"><span class="string">&quot;李四&quot;</span>, <span class="number">20</span>, <span class="number">165</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span>(<span class="params"><span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">182</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span>(<span class="params"><span class="string">&quot;赵六&quot;</span>, <span class="number">26</span>, <span class="number">177</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span>(<span class="params"><span class="string">&quot;小二&quot;</span>, <span class="number">23</span>, <span class="number">165</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span>(<span class="params"><span class="string">&quot;小三&quot;</span>, <span class="number">20</span>, <span class="number">171</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p6</span>(<span class="params"><span class="string">&quot;赵云&quot;</span>, <span class="number">20</span>, <span class="number">155</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, Person, myCompare01&gt;m1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入元素</span></span><br><span class="line">    m1.insert(make_pair(<span class="number">1</span>, p1));</span><br><span class="line">    m1.insert(make_pair(<span class="number">5</span>, p2));</span><br><span class="line">    m1.insert(make_pair(<span class="number">6</span>, p6));</span><br><span class="line">    m1.insert(make_pair(<span class="number">4</span>, p4));</span><br><span class="line">    m1.insert(make_pair(<span class="number">2</span>, p3));</span><br><span class="line">    m1.insert(make_pair(<span class="number">3</span>, p5));</span><br><span class="line"></span><br><span class="line">    printMap01(<span class="string">&quot;m1 初始化&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建元素</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span>(<span class="params"><span class="string">&quot;李四&quot;</span>, <span class="number">20</span>, <span class="number">165</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span>(<span class="params"><span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">182</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span>(<span class="params"><span class="string">&quot;赵六&quot;</span>, <span class="number">26</span>, <span class="number">177</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span>(<span class="params"><span class="string">&quot;小二&quot;</span>, <span class="number">23</span>, <span class="number">165</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span>(<span class="params"><span class="string">&quot;小三&quot;</span>, <span class="number">20</span>, <span class="number">171</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p6</span>(<span class="params"><span class="string">&quot;赵云&quot;</span>, <span class="number">20</span>, <span class="number">155</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    map&lt;Person,<span class="built_in">int</span>, myCompare02&gt;m2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入元素</span></span><br><span class="line">    m2.insert(make_pair(p1,<span class="number">1</span>));</span><br><span class="line">    m2.insert(make_pair(p2,<span class="number">5</span>));</span><br><span class="line">    m2.insert(make_pair(p6,<span class="number">6</span>));</span><br><span class="line">    m2.insert(make_pair(p4,<span class="number">4</span>));</span><br><span class="line">    m2.insert(make_pair(p3,<span class="number">2</span>));</span><br><span class="line">    m2.insert(make_pair(p5,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    printMap02(<span class="string">&quot;m2 初始化&quot;</span>, m2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;   </span><br><span class="line">    test01();</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070106585655-1024x510.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>利用访函数可以指定map容器的排序规则</li><li>对于自定义数据类型，map必须要指定排序规则，同set容器。</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（map/multimap容器-map容器排序）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程66：STL常用容器（map/multimap容器-map查找和统计）</title>
    <link href="https://notes.camcad.cn/post/f0634711.html"/>
    <id>https://notes.camcad.cn/post/f0634711.html</id>
    <published>2020-08-01T09:43:55.000Z</published>
    <updated>2023-04-05T15:26:51.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-9-5-map查找和统计"><a href="#3-9-5-map查找和统计" class="headerlink" title="3.9.5 map查找和统计"></a>3.9.5 map查找和统计</h2><p><strong>功能描述：</strong><br>对map容器进行查找数据以及统计数据 </p><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code> &#x2F;&#x2F;查找key是否存在，若存在，返回该键的元素的迭代器；若不存在，返回map.end();。</li><li><code>count(key);</code> &#x2F;&#x2F;统计key的元素个数</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;map&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMap</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;::const_iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;键值(key)：&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;实值(value)：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//map容器</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;m1;</span><br><span class="line">    m1.insert(make_pair(<span class="number">1</span>, <span class="number">120</span>));</span><br><span class="line">    m1.insert(make_pair(<span class="number">3</span>, <span class="number">110</span>));</span><br><span class="line">    m1.insert(make_pair(<span class="number">2</span>, <span class="number">110</span>));</span><br><span class="line">    m1.insert(make_pair(<span class="number">4</span>, <span class="number">119</span>));</span><br><span class="line">    m1.insert(make_pair(<span class="number">5</span>, <span class="number">103</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//find(key); //查找key是否存在，若存在，返回该键的元素的迭代器；若不存在，返回map.end();。</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;::iterator mit = m1.find(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (mit!=m1.end())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;m1 m1.find(5) 键值(key)：&quot;</span> &lt;&lt; mit-&gt;first &lt;&lt; <span class="string">&quot;\t实值(value)：&quot;</span> &lt;&lt; mit-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;m1 m1.find(5)不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//count(key); //统计key的元素个数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;m1 统计key的元素个数为：&quot;</span> &lt;&lt; m1.count(<span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//multimap容器</span></span><br><span class="line">    multimap&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;m2;</span><br><span class="line">    m2.insert(make_pair(<span class="number">1</span>, <span class="number">120</span>));</span><br><span class="line">    m2.insert(make_pair(<span class="number">3</span>, <span class="number">110</span>));</span><br><span class="line">    m2.insert(make_pair(<span class="number">2</span>, <span class="number">110</span>));</span><br><span class="line">    m2.insert(make_pair(<span class="number">4</span>, <span class="number">119</span>));</span><br><span class="line">    m2.insert(make_pair(<span class="number">2</span>, <span class="number">103</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//find(key); //查找key是否存在，若存在，返回该键的元素的迭代器；若不存在，返回map.end();。</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;::iterator mit = m2.find(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (mit != m2.end())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;m2 m1.find(5) 键值(key)：&quot;</span> &lt;&lt; mit-&gt;first &lt;&lt; <span class="string">&quot;\t实值(value)：&quot;</span> &lt;&lt; mit-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;m2 m2.find(5) 不存在&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//count(key); //统计key的元素个数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;m2 统计key的元素个数为：&quot;</span> &lt;&lt; m2.count(<span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;map容器：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;multimap容器：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070105443961-1024x435.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>查找—find（返回的是迭代器）</li><li>统计—count（对于map，结果为0或者1）</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（map/multimap容器-map查找和统计）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程65：STL常用容器（map/multimap容器-map插入和删除）</title>
    <link href="https://notes.camcad.cn/post/16d449a4.html"/>
    <id>https://notes.camcad.cn/post/16d449a4.html</id>
    <published>2020-07-31T19:30:20.000Z</published>
    <updated>2023-04-05T15:26:51.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-9-4-map插入和删除"><a href="#3-9-4-map插入和删除" class="headerlink" title="3.9.4 map插入和删除"></a>3.9.4 map插入和删除</h2><p><strong>功能描述：</strong><br>map容器进行插入数据和删除数据 </p><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code> &#x2F;&#x2F;在容器中插入元素。</li><li><code>clear();</code> &#x2F;&#x2F;清除所有元素。</li><li><code>erase(pos);</code> &#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg,end);</code> &#x2F;&#x2F;删除区间beg,end的所有元素，返回下一个元素的迭代器。</li><li><code>erase(key);</code> &#x2F;&#x2F;删除容器中值为key的元素</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;map&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMap</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;::const_iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;键值（kay）：&quot;</span> &lt;&lt; (*it).first &lt;&lt; <span class="string">&quot;\t\t实值（value）：&quot;</span> &lt;&lt; (*it).second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;m1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert(elem); //在容器中插入元素。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一种</span></span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">5</span>, <span class="number">11</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种</span></span><br><span class="line">    m1.insert(make_pair(<span class="number">1</span>, <span class="number">41</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三种</span></span><br><span class="line">    m1.insert(map&lt;<span class="built_in">int</span>,<span class="built_in">int</span>&gt;::value_type(<span class="number">4</span>, <span class="number">51</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第四种</span></span><br><span class="line">    m1[<span class="number">2</span>] = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不建议使用索引[]的方式插值，但可以通过索引[]（kay）的方式访问实值（value）</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; m1[2] &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">3</span>, <span class="number">21</span>));</span><br><span class="line">    printMap(<span class="string">&quot;m1 初始化&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(key); //删除容器中值为key的元素</span></span><br><span class="line">    m1.erase(<span class="number">5</span>);</span><br><span class="line">    printMap(<span class="string">&quot;m1 删除容器中值为5（key）的元素&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(pos); //删除pos迭代器所指的元素，返回下一个元素的迭代器。</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;::iterator mit = m1.begin();</span><br><span class="line">    m1.erase(++mit);</span><br><span class="line">    printMap(<span class="string">&quot;m1 删除 mit 迭代器所指的元素&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(beg, end); //删除区间[beg,end]的所有元素，返回下一个元素的迭代器。</span></span><br><span class="line">    m1.erase(++m1.begin(),--m1.end());</span><br><span class="line">    printMap(<span class="string">&quot;m1 删除区间 ++m1.begin(),--m1.end() 的所有元素&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//clear(); //清除所有元素。</span></span><br><span class="line">    m1.clear();</span><br><span class="line">    printMap(<span class="string">&quot;m1 清除所有元素&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070102500314-1024x731.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>不建议使用索引 [ ]的方式插值，但可以通过索引 [ ]（kay）的方式访问实值（value）</li><li>map插入方式很多，记住其一即可</li><li>插入（insert）</li><li>删除（erase）</li><li>清空（clear）</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（map/multimap容器-map插入和删除）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程63：STL常用容器（map/multimap容器-map基本概念/map构造和赋值）</title>
    <link href="https://notes.camcad.cn/post/752fb09b.html"/>
    <id>https://notes.camcad.cn/post/752fb09b.html</id>
    <published>2020-07-31T14:48:59.000Z</published>
    <updated>2023-04-05T15:26:51.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-9-map-x2F-multimap容器"><a href="#3-9-map-x2F-multimap容器" class="headerlink" title="3.9 map&#x2F;multimap容器"></a>3.9 map&#x2F;multimap容器</h1><h2 id="3-9-1-map基本概念"><a href="#3-9-1-map基本概念" class="headerlink" title="3.9.1 map基本概念"></a>3.9.1 map基本概念</h2><p><strong>简介：</strong><br>map中所有元素都是pair。</p><ul><li>pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）。</li><li>所有元素都会根据元素的键值自动排序。</li></ul><p><strong>本质：</strong></p><ul><li>map&#x2F;multimap属于<strong>关联式容器</strong>，底层结构是用二叉树实现。</li></ul><p><strong>优点：</strong></p><ul><li>可以根据key值快速找到value值。</li></ul><p><strong>map和multimap区别：</strong></p><ul><li>map不允许容器中有重复key值元素。</li><li>multimap允许容口中有重复key值元素。</li></ul><h2 id="3-9-2-map构造和赋值"><a href="#3-9-2-map构造和赋值" class="headerlink" title="3.9.2 map构造和赋值"></a>3.9.2 map构造和赋值</h2><p><strong>功能描述：</strong> 对map容器进行构造和赋值操作</p><h3 id="函数原型："><a href="#函数原型：" class="headerlink" title="函数原型："></a>函数原型：</h3><p><strong>构造：</strong></p><ul><li><code>map&lt;T1,T2&gt;mp;</code> &#x2F;&#x2F;map默认构造函数</li><li><code>map(const map &amp;mp);</code> &#x2F;&#x2F;拷贝构造函数 <strong>赋值：</strong></li><li><code>map &amp;operator=(const map &amp;mp)</code> &#x2F;&#x2F;重载等号操作符</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;map&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMap</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;::const_iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;键值：&quot;</span> &lt;&lt; (*it).first &lt;&lt; <span class="string">&quot; 实值：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//map&lt;T1, T2&gt;mp; //map 默认构造函数</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;m1;</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">3</span>, <span class="number">50</span>));</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">5</span>, <span class="number">14</span>));</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">2</span>, <span class="number">17</span>));</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">4</span>, <span class="number">10</span>));</span><br><span class="line">    printMap(<span class="string">&quot;m1 初始化&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//map(const map &amp;mp); //拷贝构造函数</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;m2(m1);</span><br><span class="line">    printMap(<span class="string">&quot;m2 初始化&quot;</span>, m2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//map &amp;operator=(const map &amp;mp) //重载等号操作符</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;m3;</span><br><span class="line">    m3 = m1;</span><br><span class="line">    printMap(<span class="string">&quot;m3 初始化&quot;</span>, m3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/202007010142064-1024x696.jpg"></p><h3 id="总结：map中所有元素都是成对出现，插入数据时候要使用对组。"><a href="#总结：map中所有元素都是成对出现，插入数据时候要使用对组。" class="headerlink" title="总结：map中所有元素都是成对出现，插入数据时候要使用对组。"></a>总结：map中所有元素都是成对出现，插入数据时候要使用对组。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（map/multimap容器-map基本概念/map构造和赋值）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程64：STL常用容器（map/multimap容器-map大小和交换）</title>
    <link href="https://notes.camcad.cn/post/99f475b2.html"/>
    <id>https://notes.camcad.cn/post/99f475b2.html</id>
    <published>2020-07-31T13:40:33.000Z</published>
    <updated>2023-04-05T15:26:51.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-9-3-map大小和交换"><a href="#3-9-3-map大小和交换" class="headerlink" title="3.9.3 map大小和交换"></a>3.9.3 map大小和交换</h2><p><strong>功能描述：</strong></p><ul><li>统计map容器大小以及交换map容器。</li></ul><p><strong>函数原型：</strong></p><ul><li><code>size();</code> &#x2F;&#x2F;返回容器元素的数目</li><li><code>empty();</code> &#x2F;&#x2F;判断容器是否为空</li><li><code>swap(mp);</code> &#x2F;&#x2F;交换两个集合容器</li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码:"></a>示例代码:</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;map&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMap</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; &amp;m</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;::const_iterator it = m.begin(); it != m.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;键值（kay）：&quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;\t\t实值（value）：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;m1;</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">15</span>, <span class="number">220</span>));</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">14</span>, <span class="number">210</span>));</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">13</span>, <span class="number">240</span>));</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">11</span>, <span class="number">250</span>));</span><br><span class="line">    m1.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">12</span>, <span class="number">210</span>));</span><br><span class="line">    printMap(<span class="string">&quot;m1 初始化&quot;</span>, m1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//empty(); //判断容器是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (!m1.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;容器不为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//size(); //返回容器元素的数目</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;m1 容器元素的数目为：&quot;</span> &lt;&lt; m1.size() &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//swap(mp); //交换两个集合容器</span></span><br><span class="line">    map&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;m2;</span><br><span class="line">    m2.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">    m2.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">4</span>, <span class="number">30</span>));</span><br><span class="line">    m2.insert(pair&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;(<span class="number">2</span>, <span class="number">60</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换</span></span><br><span class="line">    m2.swap(m1);</span><br><span class="line">    printMap(<span class="string">&quot;m1 交换后&quot;</span>, m1);</span><br><span class="line">    printMap(<span class="string">&quot;m2 交换后&quot;</span>, m2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/07/2020070102133673-1024x644.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>统计大小（size）</li><li>判断是否为空（empty）</li><li>交换容器（swap）</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（map/multimap容器-map大小和交换）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程62：STL常用容器（set/multiset容器-set容器排序）</title>
    <link href="https://notes.camcad.cn/post/2a5b6f84.html"/>
    <id>https://notes.camcad.cn/post/2a5b6f84.html</id>
    <published>2020-07-31T10:57:18.000Z</published>
    <updated>2023-04-05T15:26:51.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-8-8-set容器排序"><a href="#3-8-8-set容器排序" class="headerlink" title="3.8.8 set容器排序"></a>3.8.8 set容器排序</h2><p><strong>学习目标：</strong><br>set容器默认排序规则从小到大，掌握如何改变排序规则。 </p><p><strong>主要技术点：</strong></p><ul><li>利用仿函数，可以改变排序规则。</li></ul><h3 id="示例代码：set存放内置数据类型"><a href="#示例代码：set存放内置数据类型" class="headerlink" title="示例代码：set存放内置数据类型"></a>示例代码：set存放内置数据类型</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&lt;set&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//仿函数（排序使用）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">myCompaer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">operator</span>()(<span class="params"><span class="built_in">int</span> vla1,<span class="built_in">int</span> vla2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> vla1 &gt; vla2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s1;</span><br><span class="line">    s1.insert(<span class="number">10</span>);</span><br><span class="line">    s1.insert(<span class="number">50</span>);</span><br><span class="line">    s1.insert(<span class="number">20</span>);</span><br><span class="line">    s1.insert(<span class="number">40</span>);</span><br><span class="line">    s1.insert(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1 初始化：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::iterator it = s1.begin(); it != s1.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>, myCompaer&gt;s2;</span><br><span class="line">    s2.insert(<span class="number">10</span>);</span><br><span class="line">    s2.insert(<span class="number">50</span>);</span><br><span class="line">    s2.insert(<span class="number">20</span>);</span><br><span class="line">    s2.insert(<span class="number">40</span>);</span><br><span class="line">    s2.insert(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2 初始化：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::iterator it = s2.begin(); it != s2.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020063004291539-1024x398.jpg"></p><h3 id="总结：利用仿函数可以指定set容器的排序规则。"><a href="#总结：利用仿函数可以指定set容器的排序规则。" class="headerlink" title="总结：利用仿函数可以指定set容器的排序规则。"></a>总结：利用仿函数可以指定set容器的排序规则。</h3><h2 id="示例二：set存放自定义数据类型"><a href="#示例二：set存放自定义数据类型" class="headerlink" title="示例二：set存放自定义数据类型"></a>示例二：set存放自定义数据类型</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include&lt;set&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="built_in">int</span> age, <span class="built_in">int</span> height)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">    <span class="built_in">int</span> m_Height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//仿函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">myCompare</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">operator</span>()(<span class="params"><span class="keyword">const</span> Person &amp;p1, <span class="keyword">const</span> Person &amp;p2</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1.m_Age==p2.m_Age)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> p1.m_Height &lt; p2.m_Height;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p1.m_Age &gt; p2.m_Age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建元素</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span>(<span class="params"><span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">165</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span>(<span class="params"><span class="string">&quot;李四&quot;</span>, <span class="number">22</span>, <span class="number">175</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span>(<span class="params"><span class="string">&quot;王五&quot;</span>, <span class="number">32</span>, <span class="number">169</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span>(<span class="params"><span class="string">&quot;赵六&quot;</span>, <span class="number">20</span>, <span class="number">187</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span>(<span class="params"><span class="string">&quot;小三&quot;</span>, <span class="number">18</span>, <span class="number">167</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p6</span>(<span class="params"><span class="string">&quot;小二&quot;</span>, <span class="number">18</span>, <span class="number">175</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    <span class="keyword">set</span>&lt;Person, myCompare&gt;p;</span><br><span class="line">    p.insert(p1);</span><br><span class="line">    p.insert(p2);</span><br><span class="line">    p.insert(p3);</span><br><span class="line">    p.insert(p4);</span><br><span class="line">    p.insert(p5);</span><br><span class="line">    p.insert(p6);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历打印</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">set</span>&lt;Person, myCompare&gt;::iterator it = p.begin(); it != p.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; <span class="string">&quot; 身高：&quot;</span> &lt;&lt; it-&gt;m_Height &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020063006010928-1024x428.jpg"></p><h3 id="总结：对于自定义数据类型，set必须指定排序规则才可以插入数据。"><a href="#总结：对于自定义数据类型，set必须指定排序规则才可以插入数据。" class="headerlink" title="总结：对于自定义数据类型，set必须指定排序规则才可以插入数据。"></a>总结：对于自定义数据类型，set必须指定排序规则才可以插入数据。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（set/multiset容器-set容器排序）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程61：STL常用容器（set/multiset容器-pair对组创建）</title>
    <link href="https://notes.camcad.cn/post/e2e78da9.html"/>
    <id>https://notes.camcad.cn/post/e2e78da9.html</id>
    <published>2020-07-30T15:58:30.000Z</published>
    <updated>2023-04-05T15:26:51.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-8-7-pair对组创建"><a href="#3-8-7-pair对组创建" class="headerlink" title="3.8.7 pair对组创建"></a>3.8.7 pair对组创建</h2><p><strong>功能描述：</strong><br>成对出现的数据，利用对组可以返回两个数据 </p><p><strong>两种创建方式：</strong></p><ul><li><code>pair&lt;typr,typr&gt;p(value1,value2);</code></li><li><code>pair&lt;typr,typr&gt;p=make_pair(value1,value2);</code></li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="built_in">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//pair&lt;typr, typr&gt;p(value1, value2);</span></span><br><span class="line">    pair&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;p1 (<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p1.first &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p1.second &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//pair&lt;typr, typr&gt;p = make_pair(value1, value2);</span></span><br><span class="line">    <span class="function">Person <span class="title">p</span>(<span class="params"><span class="string">&quot;李四&quot;</span>, <span class="number">18</span></span>)</span>;</span><br><span class="line">    pair&lt;Person, <span class="built_in">double</span>&gt; p2 = make_pair(p, <span class="number">10.1</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p2.first.m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p2.first.m_Age &lt;&lt; <span class="string">&quot; 身高：&quot;</span> &lt;&lt; p2.second &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020063002591277.jpg"></p><h3 id="总结：两种方式都可以创建对组，记住会使用一种即可。"><a href="#总结：两种方式都可以创建对组，记住会使用一种即可。" class="headerlink" title="总结：两种方式都可以创建对组，记住会使用一种即可。"></a>总结：两种方式都可以创建对组，记住会使用一种即可。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（set/multiset容器-pair对组创建）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程60：STL常用容器（set/multiset容器-set和multiset区别）</title>
    <link href="https://notes.camcad.cn/post/2f1836d.html"/>
    <id>https://notes.camcad.cn/post/2f1836d.html</id>
    <published>2020-07-30T14:56:52.000Z</published>
    <updated>2023-04-05T15:26:51.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-8-6-set和multiset区别"><a href="#3-8-6-set和multiset区别" class="headerlink" title="3.8.6 set和multiset区别"></a>3.8.6 set和multiset区别</h2><p><strong>学习目标：</strong><br>掌握set和multiset的区别 </p><p><strong>区别：</strong></p><ul><li>set不可以插入重复数据，而multiset可以。</li><li>set插入数据 的同时会返回插入结果，表示插入是否成功。 multiset不会检测数据，因此可以插入重复数据。</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;set&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMultiset</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> multiset&lt;<span class="built_in">int</span>&gt; &amp;s</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (multiset&lt;<span class="built_in">int</span>&gt;::const_iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//set插入相同元素</span></span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s1;</span><br><span class="line">    pair&lt;<span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::iterator, <span class="built_in">bool</span>&gt; ret1 = s1.insert(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret1.second)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;set 第一次插入元素成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;set 第一次插入元素失败&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    pair&lt;<span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::iterator, <span class="built_in">bool</span>&gt; ret2 = s1.insert(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret2.second)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;set 第二次插入相同元素成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;set 第二次插入相同元素失败&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//multiset插入相同元素</span></span><br><span class="line">    multiset&lt;<span class="built_in">int</span>&gt;m;</span><br><span class="line">    m.insert(<span class="number">10</span>);</span><br><span class="line">    m.insert(<span class="number">10</span>);</span><br><span class="line">    printMultiset(<span class="string">&quot;multiset 初始化&quot;</span>, m);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/202006300229452-1024x291.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>如果不允许插入重复数据可以利用set</li><li>如果需要插入重复数据利用multiset</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（set/multiset容器-set和multiset区别）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程59：STL常用容器（set/multiset容器-set查找和统计）</title>
    <link href="https://notes.camcad.cn/post/42c5dc37.html"/>
    <id>https://notes.camcad.cn/post/42c5dc37.html</id>
    <published>2020-07-30T13:54:57.000Z</published>
    <updated>2023-04-05T15:26:51.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-8-5-set查找和统计"><a href="#3-8-5-set查找和统计" class="headerlink" title="3.8.5 set查找和统计"></a>3.8.5 set查找和统计</h2><p><strong>功能描述：</strong><br>对set容器进行查找数据以及统计数据 </p><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code> &#x2F;&#x2F;查找key是否存在，若存在返回该元素的迭代器，若不存在返回set.end();。</li><li><code>count(key);</code> &#x2F;&#x2F;统计key的元素个数</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;set&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSet</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt; &amp;s</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::const_iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s1;</span><br><span class="line">    s1.insert(<span class="number">30</span>);</span><br><span class="line">    s1.insert(<span class="number">50</span>);</span><br><span class="line">    s1.insert(<span class="number">10</span>);</span><br><span class="line">    s1.insert(<span class="number">20</span>);</span><br><span class="line">    s1.insert(<span class="number">40</span>);</span><br><span class="line">    printSet(<span class="string">&quot;s1 初始化&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//find(key); //查找key是否存在，若存在返回该元素的迭代器，若不存在返回set.end();。</span></span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::iterator it = s1.find(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (it !=s1.end())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;s1.find(10) 元素存在!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;s1.find(10) 元素不存在!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//count(key); //统计key的元素个数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;元素 s1.count(40) 的个数为：&quot;</span> &lt;&lt; s1.count(<span class="number">40</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062908350812-1024x323.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>查找—（返回的是迭代器）</li><li>统计—（对于set,结果为0或者1）</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（set/multiset容器-set查找和统计）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程58：STL常用容器（set/multiset容器-set插入和删除）</title>
    <link href="https://notes.camcad.cn/post/13341423.html"/>
    <id>https://notes.camcad.cn/post/13341423.html</id>
    <published>2020-07-30T13:30:24.000Z</published>
    <updated>2023-04-05T15:26:51.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-8-4-set插入和删除"><a href="#3-8-4-set插入和删除" class="headerlink" title="3.8.4 set插入和删除"></a>3.8.4 set插入和删除</h2><p><strong>功能描述：</strong><br>set容器进行插入数据和删除数据 </p><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code> &#x2F;&#x2F;在容器中插入元素</li><li><code>clear();</code> &#x2F;&#x2F;清除所有元素</li><li><code>erase(pos);</code> &#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器</li><li><code>erase(beg,end);</code> &#x2F;&#x2F;删除区间beg,end的所有元素，返回下一个元素的迭代器</li><li><code>erase(elem);</code> &#x2F;&#x2F;删除容器中值为elem的元素</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;set&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSet</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt; &amp;s</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::const_iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//insert(elem); //在容器中插入元素</span></span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s1;</span><br><span class="line">    s1.insert(<span class="number">30</span>);</span><br><span class="line">    s1.insert(<span class="number">50</span>);</span><br><span class="line">    s1.insert(<span class="number">10</span>);</span><br><span class="line">    s1.insert(<span class="number">20</span>);</span><br><span class="line">    s1.insert(<span class="number">40</span>);</span><br><span class="line">    printSet(<span class="string">&quot;s1 初始化&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(pos); //删除pos迭代器所指的元素，返回下一个元素的迭代器</span></span><br><span class="line">    s1.erase(s1.begin());</span><br><span class="line">    printSet(<span class="string">&quot;s1 删除pos迭代器所指的元素&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(elem); //删除容器中值为elem的元素</span></span><br><span class="line">    s1.erase(<span class="number">40</span>);</span><br><span class="line">    printSet(<span class="string">&quot;s1 删除容器中值为elem的元素&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(beg, end); //删除区间[beg,end]的所有元素，返回下一个元素的迭代器</span></span><br><span class="line">    s1.erase(++s1.begin(), --s1.end());</span><br><span class="line">    printSet(<span class="string">&quot;s1 删除区间[beg,end]的所有元素&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//clear(); //清除所有元素</span></span><br><span class="line">    s1.clear();</span><br><span class="line">    printSet(<span class="string">&quot;s1 清除所有元素&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062907353595-1024x358.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>插入（insert）</li><li>删除（erase）</li><li>清空（clear）</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（set/multiset容器-set插入和删除）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程57：STL常用容器（set/multiset容器-set大小和交换）</title>
    <link href="https://notes.camcad.cn/post/2e2675d0.html"/>
    <id>https://notes.camcad.cn/post/2e2675d0.html</id>
    <published>2020-07-29T19:03:26.000Z</published>
    <updated>2023-04-05T15:26:51.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-8-3-set大小和交换"><a href="#3-8-3-set大小和交换" class="headerlink" title="3.8.3 set大小和交换"></a>3.8.3 set大小和交换</h2><p><strong>功能描述：</strong></p><ul><li>统计set容器大小以及交换set容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>size( );</code> &#x2F;&#x2F;返回容器中元素的数目</li><li><code>empty( );</code> &#x2F;&#x2F;判断容器是否为空</li><li><code>swap( );</code> &#x2F;&#x2F;交换两个集合容器</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;set&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSet</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt; &amp;s</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::const_iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s1;</span><br><span class="line">    s1.insert(<span class="number">30</span>);</span><br><span class="line">    s1.insert(<span class="number">40</span>);</span><br><span class="line">    s1.insert(<span class="number">50</span>);</span><br><span class="line">    s1.insert(<span class="number">10</span>);</span><br><span class="line">    s1.insert(<span class="number">20</span>);</span><br><span class="line">    printSet(<span class="string">&quot;s1 初始化&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//empty(); //判断容器是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (!s1.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;容器不为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//size(); //返回容器中元素的数目</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;容器元素个数：&quot;</span> &lt;&lt; s1.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//swap(); //交换两个集合容器</span></span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s2;</span><br><span class="line">    s2.insert(<span class="number">5</span>);</span><br><span class="line">    s2.insert(<span class="number">9</span>);</span><br><span class="line">    s2.insert(<span class="number">3</span>);</span><br><span class="line">    s2.insert(<span class="number">8</span>);</span><br><span class="line">    printSet(<span class="string">&quot;s2 初始化&quot;</span>, s2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//互换</span></span><br><span class="line">    s2.swap(s1);</span><br><span class="line">    printSet(<span class="string">&quot;s2.swap(s1) s1互换后&quot;</span>, s1);</span><br><span class="line">    printSet(<span class="string">&quot;s2.swap(s1) s2互换后&quot;</span>, s2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062906581786-1024x378.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>统计大小（size）</li><li>判断是否为空（empty）</li><li>交换容器（swap）</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（set/multiset容器-set大小和交换）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程56：STL常用容器（set/multiset容器-set基本概念/set构造和赋值）</title>
    <link href="https://notes.camcad.cn/post/b4fb037.html"/>
    <id>https://notes.camcad.cn/post/b4fb037.html</id>
    <published>2020-07-29T12:25:57.000Z</published>
    <updated>2023-04-05T15:26:51.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-8-set-x2F-multiset容器"><a href="#3-8-set-x2F-multiset容器" class="headerlink" title="3.8 set&#x2F;multiset容器"></a>3.8 set&#x2F;multiset容器</h1><h2 id="3-8-1-set基本概念"><a href="#3-8-1-set基本概念" class="headerlink" title="3.8.1 set基本概念"></a>3.8.1 set基本概念</h2><p><strong>简介：</strong><br>所有元素都会在插入时自动被排序 </p><p><strong>本质：</strong></p><ul><li>set&#x2F;multiset属于关联式容器，底层结构是用二<strong>叉树</strong>实现。</li></ul><p><strong>set和multiset区别：</strong></p><ul><li>set不允许容器中有重复的元素</li><li>multiset允许容器中有重复的元素</li></ul><h2 id="3-8-2-set构造和赋值"><a href="#3-8-2-set构造和赋值" class="headerlink" title="3.8.2 set构造和赋值"></a>3.8.2 set构造和赋值</h2><p>功能描述：创建set容器以及赋值 </p><p><strong>构造：</strong></p><ul><li><code>set&lt;T&gt; st;</code> &#x2F;&#x2F;默认构造函数</li><li><code>set(const set &amp;st);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><p><strong>赋值：</strong></p><ul><li><code>set &amp;operator=（const set &amp;st);</code> &#x2F;&#x2F;重载等号操作符</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;set&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSet</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str,<span class="keyword">const</span> <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt; &amp;s</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;::const_iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s1;</span><br><span class="line">    s1.insert(<span class="number">10</span>);</span><br><span class="line">    s1.insert(<span class="number">30</span>);</span><br><span class="line">    s1.insert(<span class="number">20</span>);</span><br><span class="line">    s1.insert(<span class="number">50</span>);</span><br><span class="line">    s1.insert(<span class="number">20</span>);  <span class="comment">//set容器不允许插入重复值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历容器</span></span><br><span class="line">    <span class="comment">//set容器特点，所有元素插入时候自动被排序</span></span><br><span class="line">    printSet(<span class="string">&quot;s1 初始化&quot;</span>, s1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拷贝构造</span></span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s2(s1);</span><br><span class="line">    printSet(<span class="string">&quot;s2 初始化&quot;</span>, s2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    <span class="keyword">set</span>&lt;<span class="built_in">int</span>&gt;s3;</span><br><span class="line">    s3 = s2;</span><br><span class="line">    printSet(<span class="string">&quot;s3 初始化&quot;</span>, s3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/202006290630433-1024x391.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>set容器插入数据时用insert</li><li>set容器插入数据的数据会自动排序</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（set/multiset容器-set基本概念/set构造和赋值）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
    <category term="C++核心编程" scheme="https://notes.camcad.cn/tags/C-%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程55：STL常用容器（list容器-排序案例）</title>
    <link href="https://notes.camcad.cn/post/d0f75ff3.html"/>
    <id>https://notes.camcad.cn/post/d0f75ff3.html</id>
    <published>2020-07-29T11:35:56.000Z</published>
    <updated>2023-04-05T15:26:51.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-7-8排序案例"><a href="#3-7-8排序案例" class="headerlink" title="3.7.8排序案例"></a>3.7.8排序案例</h2><p><strong>案例描述：</strong>将Preson自定义数据类型进行排序，Person中属性有姓名、年龄、身高。 </p><p><strong>排序规则：</strong>按照年龄进行升序，如果年龄相同按照身高进行降序。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;list&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//人 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="built_in">int</span> age, <span class="built_in">int</span> height)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">    <span class="built_in">int</span> m_Height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> list&lt;Person&gt; &amp;p</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (list&lt;Person&gt;::const_iterator it = p.begin(); it != p.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; <span class="string">&quot; 身高：&quot;</span> &lt;&lt; it-&gt;m_Height &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序规则</span></span><br><span class="line"><span class="function"><span class="built_in">bool</span> <span class="title">comparePerson</span>(<span class="params">Person p1, Person p2</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//按照年龄 升序</span></span><br><span class="line">    <span class="keyword">if</span> (p1.m_Age == p2.m_Age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//年龄相同 按照身高降序</span></span><br><span class="line">        <span class="keyword">return</span> p1.m_Height &gt; p2.m_Height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> p1.m_Age &lt; p2.m_Age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建元素</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span>(<span class="params"><span class="string">&quot;张三&quot;</span>, <span class="number">18</span>, <span class="number">165</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span>(<span class="params"><span class="string">&quot;李四&quot;</span>, <span class="number">20</span>, <span class="number">169</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span>(<span class="params"><span class="string">&quot;王五&quot;</span>, <span class="number">25</span>, <span class="number">170</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span>(<span class="params"><span class="string">&quot;赵六&quot;</span>, <span class="number">23</span>, <span class="number">168</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span>(<span class="params"><span class="string">&quot;小二&quot;</span>, <span class="number">20</span>, <span class="number">172</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p6</span>(<span class="params"><span class="string">&quot;小三&quot;</span>, <span class="number">20</span>, <span class="number">167</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建容器</span></span><br><span class="line">    list&lt;Person&gt;L;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入数据</span></span><br><span class="line">    L.push_back(p1);</span><br><span class="line">    L.push_back(p2);</span><br><span class="line">    L.push_back(p3);</span><br><span class="line">    L.push_back(p4);</span><br><span class="line">    L.push_back(p5);</span><br><span class="line">    L.push_back(p6);</span><br><span class="line"></span><br><span class="line">    printList(<span class="string">&quot;p 初始化&quot;</span>, L);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序后</span></span><br><span class="line">    L.sort(comparePerson);</span><br><span class="line">    printList(<span class="string">&quot;p 排序后&quot;</span>, L);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062903271184-1024x540.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序。</li><li>高级排序只是在排序规则上再进行一次逻辑规则制定，并不复杂。</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（list容器-排序案例）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程54：STL常用容器（list容器-list反转和排序）</title>
    <link href="https://notes.camcad.cn/post/c17ab38c.html"/>
    <id>https://notes.camcad.cn/post/c17ab38c.html</id>
    <published>2020-07-28T20:13:31.000Z</published>
    <updated>2023-04-05T15:26:51.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-7-7-list反转和排序"><a href="#3-7-7-list反转和排序" class="headerlink" title="3.7.7 list反转和排序"></a>3.7.7 list反转和排序</h2><p><strong>功能描述：</strong><br>将容器中的元素反转，以及将容器中的数据进行排序。 </p><p><strong>函数原型：</strong></p><ul><li><code>reverse( );</code> &#x2F;&#x2F;反转链表</li><li><code>sort( );</code> &#x2F;&#x2F;链表排序</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;list&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> list&lt;<span class="built_in">int</span>&gt; &amp;l</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (list&lt;<span class="built_in">int</span>&gt;::const_iterator it = l.begin(); it != l.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//降序函数定义</span></span><br><span class="line"><span class="function"><span class="built_in">bool</span> <span class="title">sortCompare</span>(<span class="params"><span class="built_in">int</span> val1, <span class="built_in">int</span> val2</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//降序：第一个数 大于 第二个数</span></span><br><span class="line">    <span class="keyword">return</span> val1 &gt; val2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//reverse( ); //反转链表</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L1;</span><br><span class="line">    L1.push_back(<span class="number">20</span>);</span><br><span class="line">    L1.push_back(<span class="number">50</span>);</span><br><span class="line">    L1.push_back(<span class="number">60</span>);</span><br><span class="line">    L1.push_back(<span class="number">30</span>);</span><br><span class="line">    printList(<span class="string">&quot;反转前&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反转</span></span><br><span class="line">    L1.reverse();</span><br><span class="line">    printList(<span class="string">&quot;反转后&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//所有不支持随机访问的迭代器容器，不可以用标准算法</span></span><br><span class="line">    <span class="comment">//不支持随机访问迭代器的容器，内部会提供对应的一些算法</span></span><br><span class="line">    <span class="comment">//sort(L1.begin(), L1.end());       //错误</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//sort( ); //链表排序</span></span><br><span class="line">    printList(<span class="string">&quot;排序前&quot;</span>, L1);</span><br><span class="line">    L1.sort();</span><br><span class="line">    printList(<span class="string">&quot;排序后 从小到大 升序&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    L1.sort(sortCompare);</span><br><span class="line">    printList(<span class="string">&quot;排序后 从大到小 降序&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/202006290229562-1024x421.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>反转（reverse）</li><li>排序 升序（sort( )）</li><li>排序 降序（sort( 成员函数 )）</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（list容器-list反转和排序）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程53：STL常用容器（list容器-list数据存取）</title>
    <link href="https://notes.camcad.cn/post/7b56759a.html"/>
    <id>https://notes.camcad.cn/post/7b56759a.html</id>
    <published>2020-07-28T17:47:57.000Z</published>
    <updated>2023-04-05T15:26:51.077Z</updated>
    
    <content type="html"><![CDATA[<p><strong>功能描述：</strong><br>对list容器中数据进行存取 </p><p><strong>函数原型：</strong></p><ul><li><code>front( );</code> &#x2F;&#x2F;返回第一个元素</li><li><code>back( );</code> &#x2F;&#x2F;返回最后一个元素</li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码:"></a>示例代码:</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;list&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> list&lt;<span class="built_in">int</span>&gt; &amp;l</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (list&lt;<span class="built_in">int</span>&gt;::const_iterator it = l.begin(); it != l.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L1;</span><br><span class="line">    L1.push_back(<span class="number">110</span>);</span><br><span class="line">    L1.push_back(<span class="number">120</span>);</span><br><span class="line">    L1.push_back(<span class="number">119</span>);</span><br><span class="line">    L1.push_back(<span class="number">66</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//L1[0]     //不可以用[]访问list容器中的元素</span></span><br><span class="line">    <span class="comment">//L1.at(2)  //不可以用at方式访问list容器中的元素</span></span><br><span class="line">    <span class="comment">//原因：list是本质链表，不是用连接性空间存储数据，迭代器也是不支持随机访问的</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;list 第一个元素为：&quot;</span> &lt;&lt; L1.front() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;list 最后一个元素为：&quot;</span> &lt;&lt; L1.back() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证迭代器是否支持随机访问</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;::iterator it = L1.begin();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否支持双向访问</span></span><br><span class="line">    it++;</span><br><span class="line">    it--;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否支持随机访问</span></span><br><span class="line">    <span class="comment">//it += 2;      //不支持随机访问</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/20200629010639100-1024x431.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>list容器中不可以通过[]或at方式访问数据</li><li>返回第一个元素（front）</li><li>返回最后一个元素（back）</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（list容器-list数据存取）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程52：STL常用容器（list容器-list插入和删除）</title>
    <link href="https://notes.camcad.cn/post/2aa283e5.html"/>
    <id>https://notes.camcad.cn/post/2aa283e5.html</id>
    <published>2020-07-28T09:37:50.000Z</published>
    <updated>2023-04-05T15:26:51.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-7-5-list插入和删除"><a href="#3-7-5-list插入和删除" class="headerlink" title="3.7.5 list插入和删除"></a>3.7.5 list插入和删除</h2><p><strong>功能描述：</strong><br>对list容器进行数据的插入和删除 </p><p><strong>函数原型：</strong></p><ul><li><p><code>push_back(elem);</code> &#x2F;&#x2F;在容器尾部加入一个元素。</p></li><li><p><code>pop_back( );</code> &#x2F;&#x2F;删除容器中最后一个元素。</p></li><li><p><code>push_front(elem);</code> &#x2F;&#x2F;在容器开头插入一个元素。</p></li><li><p><code>pop_front( );</code> &#x2F;&#x2F;从容器开头移除第一个元素。</p></li><li><p><code>insert( pos,elem);</code> &#x2F;&#x2F;在pos位置插入elem元素的拷贝，返回新数据的位置。</p></li><li><p><code>insert(pos,n,elem);</code> &#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。</p></li><li><p><code>insert(pos,beg,end);</code> &#x2F;&#x2F;在pos位置插入beg,end区间的数据，无返回值。</p></li><li><p><code>clear( );</code> &#x2F;&#x2F;移除容器的所有数据</p></li><li><p><code>erase(beg,end);</code> &#x2F;&#x2F;删除beg,end区间的数据，返回下一个数据的位置。</p></li><li><p><code>erase(pos);</code> &#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。</p></li><li><p><code>remove(elem);</code> &#x2F;&#x2F;删除容器中所有与elem值匹配的元素。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;list&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> list&lt;<span class="built_in">int</span>&gt; &amp;lit</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (list&lt;<span class="built_in">int</span>&gt;::const_iterator it = lit.begin(); it != lit.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//push_back(elem); //在容器尾部加入一个元素。</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L1;</span><br><span class="line">    L1.push_back(<span class="number">10</span>);</span><br><span class="line">    L1.push_back(<span class="number">20</span>);</span><br><span class="line">    L1.push_back(<span class="number">30</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 尾插&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//push_front(elem); //在容器开头插入一个元素。</span></span><br><span class="line">    L1.push_front(<span class="number">110</span>);</span><br><span class="line">    L1.push_front(<span class="number">120</span>);</span><br><span class="line">    L1.push_front(<span class="number">119</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 头插&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//pop_back(); //删除容器中最后一个元素。</span></span><br><span class="line">    L1.pop_back();</span><br><span class="line">    printList(<span class="string">&quot;L1 移除最后一个元素&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//pop_front(); //从容器开头移除第一个元素。</span></span><br><span class="line">    L1.pop_front();</span><br><span class="line">    printList(<span class="string">&quot;L1 移除第一个元素&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert(pos, elem); //在 pos 位置插入 elem 元素的拷贝，返回新数据的位置。</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;::iterator it = L1.begin();</span><br><span class="line">    L1.insert(++(++it), <span class="number">66</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 在 ++(++it) 位置插入 66 元素的拷贝&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert(pos, n, elem); //在 pos 位置插入 n 个 elem 数据，无返回值。</span></span><br><span class="line">    L1.insert(L1.end(),<span class="number">2</span>, <span class="number">502</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 在 L1.end() 位置插入 2 个 502 数据&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert(pos, beg, end); //在 pos 位置插入[beg,end]区间的数据，无返回值。</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L2;</span><br><span class="line">    L2.insert(L2.begin(),L1.begin(), L1.end());</span><br><span class="line">    printList(<span class="string">&quot;L2 在 L2.begin() 位置插入 L1.begin(), L1.end() 区间的数据&quot;</span>, L2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(pos); //删除 pos 位置的数据，返回下一个数据的位置。</span></span><br><span class="line">    L1.erase(L1.begin());</span><br><span class="line">    printList(<span class="string">&quot;L1 删除 L1.begin() 位置的数据&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//remove(elem); //删除容器中所有与 elem 值匹配的元素。</span></span><br><span class="line">    L1.<span class="keyword">remove</span>(<span class="number">502</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 删除容器中所有与 502 值匹配的元素&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(beg, end); //删除[beg,end]区间的数据，返回下一个数据的位置。</span></span><br><span class="line">    L1.erase(--it, L1.end());</span><br><span class="line">    printList(<span class="string">&quot;L1 删除 it, L1.end() 区间的数据&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//clear(); //移除容器的所有数据</span></span><br><span class="line">    L2.clear();</span><br><span class="line">    printList(<span class="string">&quot;L2 移除容器的所有数据&quot;</span>, L2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062810293855-1024x370.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>尾插（push_back）</li><li>尾删（pop_back）</li><li>头插（push_front）</li><li>头删（pop_front）</li><li>插入（insert）</li><li>删除（erase）</li><li>移除（remove）</li><li>清空（clear）</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（list容器-list插入和删除）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
    <category term="C++教程" scheme="https://notes.camcad.cn/tags/C-%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程51：STL常用容器（list容器-list大小操作）</title>
    <link href="https://notes.camcad.cn/post/91cc4878.html"/>
    <id>https://notes.camcad.cn/post/91cc4878.html</id>
    <published>2020-07-27T15:00:15.000Z</published>
    <updated>2023-04-05T15:26:51.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-7-4-list大小操作"><a href="#3-7-4-list大小操作" class="headerlink" title="3.7.4 list大小操作"></a>3.7.4 list大小操作</h2><p><strong>功能描述：</strong><br>对list容器的大小进行操作 </p><p><strong>函数原型：</strong></p><ul><li><code>size( );</code> &#x2F;&#x2F;返回容器中元素的个数</li><li><code>empty( );</code> &#x2F;&#x2F;判断容器是否为空</li><li><code>resize(num);</code> &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值填充新位置。 &#x2F;&#x2F;如果容器变短，则未尾超出容器长度的元素被删除。</li><li><code>resize(num,elem);</code> &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。 &#x2F;&#x2F;如果容器变短，则未尾超出容器长度的元素被删除。</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;list&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> list&lt;<span class="built_in">int</span>&gt; &amp;lit</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (list&lt;<span class="built_in">int</span>&gt;::const_iterator it = lit.begin(); it != lit.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        L1.push_back(<span class="number">20</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    printList(<span class="string">&quot;L1 初始化&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//size( ); //返回容器中元素的个数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;L1 容器中元素的个数：&quot;</span> &lt;&lt; L1.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//empty( ); //判断容器是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (!L1.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;容器不为空！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//resize(num); //重新指定容器的长度为 num，若容器变长，则以默认值填充新位置。</span></span><br><span class="line">    L1.resize(<span class="number">7</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 重新指定容器的长度7&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果容器变短，则未尾超出容器长度的元素被删除。</span></span><br><span class="line">    L1.resize(<span class="number">5</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 重新指定容器的长度5&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//resize(num,elem); //重新指定容器的长度为 num，若容器变长，则以 elem 值填充新位置。</span></span><br><span class="line">    L1.resize(<span class="number">8</span>,<span class="number">119</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 重新指定容器的长度8&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果容器变短，则未尾超出容器长度的元素被删除。</span></span><br><span class="line">    L1.resize(<span class="number">4</span>, <span class="number">119</span>);</span><br><span class="line">    printList(<span class="string">&quot;L1 重新指定容器的长度4&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062809101979-1024x376.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>判断是否为空（empty）</li><li>返回元素个数（size）</li><li>重新指定个数（resize）</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（list容器-list大小操作）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
</feed>
