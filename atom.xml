<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蚂蚁Emmet</title>
  
  <subtitle>逆境求生存，顺境求发展</subtitle>
  <link href="https://notes.camcad.cn/atom.xml" rel="self"/>
  
  <link href="https://notes.camcad.cn/"/>
  <updated>2023-07-11T14:46:20.620Z</updated>
  <id>https://notes.camcad.cn/</id>
  
  <author>
    <name>蚂蚁Emmet</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>firefox剪切板无法粘贴设置</title>
    <link href="https://notes.camcad.cn/post/ce9787df.html"/>
    <id>https://notes.camcad.cn/post/ce9787df.html</id>
    <published>2023-06-06T20:16:24.000Z</published>
    <updated>2023-07-11T14:46:20.620Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>无法从浏览器的剪贴板中读取，请确保你已授予此网站从剪贴板中读取的访问权限。</p><span id="more"></span><h3 id="firefox配置"><a href="#firefox配置" class="headerlink" title="firefox配置"></a>firefox配置</h3><p>在地址栏输入<code>about:config</code>回车，输入<code>clipboard</code>关键字搜索，再将<code>dom.events.asyncClipboard.readText</code>和<code>dom.events.testing.asyncClipboard</code>状态设置为<code>true</code>。</p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dom.events.asyncClipboard.readTexttrue</span><br><span class="line">dom.events.testing.asyncClipboardtrue</span><br></pre></td></tr></table></figure><p><img src="http://image.camcad.cn/2023/06/firefox%20clipboard.bmp" alt="firefox clipboard"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;无法从浏览器的剪贴板中读取，请确保你已授予此网站从剪贴板中读取的访问权限。&lt;/p&gt;</summary>
    
    
    
    <category term="疑难杂症" scheme="https://notes.camcad.cn/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
    <category term="firefox" scheme="https://notes.camcad.cn/tags/firefox/"/>
    
  </entry>
  
  <entry>
    <title>NX二次开发-Error detected during FMS operation</title>
    <link href="https://notes.camcad.cn/post/d9970f4.html"/>
    <id>https://notes.camcad.cn/post/d9970f4.html</id>
    <published>2023-06-06T19:55:54.000Z</published>
    <updated>2023-07-11T14:46:20.604Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>C#开发的克隆应用，TC与NX集成环境下克隆，开启日志后，程序执行结束后弹出错误。<br><code>注：C++相同应用代码并没有此类问题出现。</code><br><img src="http://image.camcad.cn/2023/06/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91-Teamcenter%20Error.png" alt="NX二次开发-Teamcenter Error"><br><img src="http://image.camcad.cn/2023/06/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91-Error%20detected%20during%20FMS%20operation.png" alt="NX二次开发-Error detected during FMS operation"></p><span id="more"></span><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>由于指定的日志文件后缀不符合要求所致，将日志的后缀设置成<code>.clone</code>即可。<br><img src="http://image.camcad.cn/2023/06/nx_cloning_log_file.jpg" alt="nx_cloning_log_file"></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><img src="http://image.camcad.cn/2023/06/uf_clone_set_logfile.jpg" alt="uf_clone_set_logfile"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">constants</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> CloneLogFilename = <span class="string">&quot;\\nxclone.clone&quot;</span>;       <span class="comment">// 克隆日志文件 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 空运行</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.m_dryrun)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> getEnv = Environment.GetEnvironmentVariable(<span class="string">&quot;temp&quot;</span>);</span><br><span class="line">    <span class="built_in">string</span> filename = getEnv + constants.CloneLogFilename;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.m_clone.SetLogfile(filename);</span><br><span class="line">    <span class="keyword">this</span>.m_clone.SetDryrun(<span class="keyword">this</span>.m_dryrun);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;C#开发的克隆应用，TC与NX集成环境下克隆，开启日志后，程序执行结束后弹出错误。&lt;br&gt;&lt;code&gt;注：C++相同应用代码并没有此类问题出现。&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://image.camcad.cn/2023/06/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91-Teamcenter%20Error.png&quot; alt=&quot;NX二次开发-Teamcenter Error&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://image.camcad.cn/2023/06/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91-Error%20detected%20during%20FMS%20operation.png&quot; alt=&quot;NX二次开发-Error detected during FMS operation&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="疑难杂症" scheme="https://notes.camcad.cn/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
    <category term="NX二次开发" scheme="https://notes.camcad.cn/tags/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>NX外部模式-发布技术数据包/三维PDF</title>
    <link href="https://notes.camcad.cn/post/771521dc.html"/>
    <id>https://notes.camcad.cn/post/771521dc.html</id>
    <published>2023-04-29T18:54:58.000Z</published>
    <updated>2023-07-11T14:46:20.608Z</updated>
    
    <content type="html"><![CDATA[<h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>NX本地模式下发布技术数据包&#x2F;三维PDF，在使用发布应用程序<code>PublishTDPNative.exe</code>前，需要在系统环境变量名称为<code>Path</code>中增加NX安装目录下<code>NXBIN</code>的绝对路径。</p><span id="more"></span><h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h3><h4 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h4><p>在系统环境变量名称为<code>Path</code>中增加NX安装目录下<code>NXBIN</code>的绝对路径，便于本地模式启动NX相关依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">E:\Program Files\Siemens\NX1953\NXBIN</span><br></pre></td></tr></table></figure><h4 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h4><p>在NX安装目录下找到<code>TDP</code>文件夹，NX1953的<code>TDP</code>目录结构如下（不同NX版本可能有所不同）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3dpdf</span><br><span class="line">application</span><br><span class="line">batch</span><br><span class="line">batch example</span><br><span class="line">localization</span><br><span class="line">manifest</span><br><span class="line">startup</span><br><span class="line">templates</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h4><p>打开<code>batch</code>文件夹，并且执行发布数据包&#x2F;三维PDF应用<code>PublishTDPNative.exe</code>，在当前目录下使用系统终端，执行操作命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\PublishTDPNative.exe -config_file=&quot;E:\Program Files\Siemens\NX1953\TDP\batch example\PublishTDPNativeOptions3DPDF.xml&quot;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Windows PowerShell</span><br><span class="line">版权所有（C） Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">安装最新的 PowerShell，了解新功能和改进！https://aka.ms/PSWindows</span><br><span class="line"></span><br><span class="line">PS E:\Program Files\Siemens\NX1953\TDP\batch&gt; .\PublishTDPNative.exe -config_file=&quot;E:\Program Files\Siemens\NX1953\TDP\batch example\PublishTDPNativeOptions3DPDF.xml&quot;</span><br><span class="line"></span><br><span class="line">Translator Log File created at: C:\TEMP\TDP_ExamplePart.log</span><br><span class="line">[PK_BODY_change_partition returned: 1088]</span><br><span class="line">PS E:\Program Files\Siemens\NX1953\TDP\batch&gt;</span><br></pre></td></tr></table></figure><h2 id="技术文档"><a href="#技术文档" class="headerlink" title="技术文档"></a>技术文档</h2><figure class="highlight xml"><figcaption><span>PublishTDPREADME.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">1) 简介</span><br><span class="line">此目录中提供的批处理模式可执行文件是从NX命令提示符中连续发布多个技术数据包的程序。</span><br><span class="line"></span><br><span class="line">2) 提供的文件</span><br><span class="line">PublishTDPNative.exe - 用于本地NX TDP发布的批处理模式可执行文件</span><br><span class="line">PublishTDPNativeOptions.xsd - 用于验证本地NX TDP批处理XML配置文件的XML模式</span><br><span class="line">PublishTDPTeamcenter.exe - 用于管理模式NX TDP发布的批处理模式可执行文件</span><br><span class="line">PublishTDPTeamcenterOptions.xsd - 用于验证管理模式NX TDP批处理XML配置文件的XML模式</span><br><span class="line"></span><br><span class="line">此外，还提供了示例配置文件和零件。这些可以在目录“%UGII_BASE_DIR%\TDP\batch example\”中找到。</span><br><span class="line"></span><br><span class="line">PublishTDPNativeOptions3DPDF.xml - 用于在本地NX中发布3D PDF TDP的示例XML配置文件</span><br><span class="line">PublishTDPNativeOptionsJTPDF.xml - 用于在本地NX中发布JT加PDF TDP的示例XML配置文件</span><br><span class="line">parts.txt - 用于发布示例中使用的样本数据集文件</span><br><span class="line">attachments.txt - 用于发布示例中使用的样本附件列表文件</span><br><span class="line"></span><br><span class="line">2) 用法</span><br><span class="line">(3A) 在本地NX中发布技术数据包</span><br><span class="line"></span><br><span class="line">要在本地NX中发布TDP，必须首先创建一个XML配置文件，以供批处理程序使用。要创建XML配置文件，可以使用XML模式定义文件“PublishTDPNativeOptions.xsd”查看必须指定什么。</span><br><span class="line"></span><br><span class="line">要在数据集文件中指定零件文件，请使用标准操作系统格式。</span><br><span class="line">示例：C:\partfile\abc.prt</span><br><span class="line"></span><br><span class="line">要在附件列表文件中指定附件，请使用标准操作系统格式。</span><br><span class="line">示例：C:\attachments\attachment1.prt</span><br><span class="line">示例：C:\attachments\attachment1.JPG</span><br><span class="line"></span><br><span class="line">参数 变量 说明</span><br><span class="line">-config_file [filepath] - 指定XML配置文件的本地磁盘位置</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">从NX命令提示符，以下命令</span><br><span class="line">PublishTDPNative -config_file=&quot;C:\TDP\PublishTDPNativeOptions3DPDF.xml&quot;</span><br><span class="line"></span><br><span class="line">...根据以下指定发布所有TDP：</span><br><span class="line">XML配置文件：“C:\TDP\PublishTDPNativeOptions3DPDF.xml”</span><br></pre></td></tr></table></figure><h3 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h3><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab"><a href="#tab-1">主文件</a></li><li class="tab"><a href="#tab-2">附件文件</a></li><li class="tab"><a href="#tab-3">图档文件</a></li></ul><div class="tab-content"><div class="tab-pane" id="tab-1"><p><code>注意</code>本地模式需要设置3DPDF输出目录例如：<code>&lt;output_directory&gt;c:\temp\&lt;/output_directory&gt;</code>，在主流程文件中设置。</p><p>NX模板文件：<code>${UGII_BASE_DIR}\tdp\templates\A4_Size_part_portrait_3dpdf.prt</code></p><h4 id="主流程文件"><a href="#主流程文件" class="headerlink" title="主流程文件"></a>主流程文件</h4><figure class="highlight xml"><figcaption><span>PublishTDPNativeOptions3DPDF.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">=======================================================================</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    Copyright 2018 Siemens Product Lifecycle Management Software Inc.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        All Rights Reserved.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">=======================================================================</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    This is the sample XML configuration file used with native TDP batch</span></span><br><span class="line"><span class="comment">    processing to publish a 3D PDF TDP.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    The XML file is validated against PublishTDPNativeOptions.xsd. The XML </span></span><br><span class="line"><span class="comment">    standard can be found in http://www.w3.org/XML/Schema.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">=======================================================================</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">native_run</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  The following run will publish a 3D PDF TDP with:</span></span><br><span class="line"><span class="comment">    - A set of parts defined in $&#123;UGII_BASE_DIR&#125;\tdp\batch example\parts.txt</span></span><br><span class="line"><span class="comment">    - A template part at $&#123;UGII_BASE_DIR&#125;\tdp\templates\A4_Size_part_portrait_3dpdf.prt</span></span><br><span class="line"><span class="comment">    - No output directory specified. This will use the output directory specified in</span></span><br><span class="line"><span class="comment">        the NX customer default. This directory MUST have write access.</span></span><br><span class="line"><span class="comment">    - With all views published</span></span><br><span class="line"><span class="comment">    - With no STEP attachment</span></span><br><span class="line"><span class="comment">    - With a password of 123456</span></span><br><span class="line"><span class="comment">    - With text pairs: Part Number: 1-A</span></span><br><span class="line"><span class="comment">                       Description: Bracket</span></span><br><span class="line"><span class="comment">                       Revision: A</span></span><br><span class="line"><span class="comment">                       Design Date: 01/01/2019</span></span><br><span class="line"><span class="comment">                       Designer: John Doe</span></span><br><span class="line"><span class="comment">    - With attachments defined in $&#123;UGII_BASE_DIR&#125;\tdp\batch example\attachments.txt</span></span><br><span class="line"><span class="comment">    - With no JT attachment</span></span><br><span class="line"><span class="comment">    - With model accuracy at Maximum</span></span><br><span class="line"><span class="comment">    - With no compression to the model</span></span><br><span class="line"><span class="comment">    - With overridden background and pmi color</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">publish_3DPDF</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataset</span>&gt;</span>$&#123;UGII_BASE_DIR&#125;\tdp\batch example\parts.txt<span class="tag">&lt;/<span class="name">dataset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template_part</span>&gt;</span>$&#123;UGII_BASE_DIR&#125;\tdp\templates\A4_Size_part_portrait_3dpdf.prt<span class="tag">&lt;/<span class="name">template_part</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- this configuration file uses the output directory specified by NX customer default --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- to override the NX customer default, you may specify an &lt;output_directory&gt; like the example below:</span></span><br><span class="line"><span class="comment">         &lt;output_directory&gt;C:\TDP\Output&lt;/output_directory&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">output_directory</span>&gt;</span>c:\temp\<span class="tag">&lt;/<span class="name">output_directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">views</span>&gt;</span>All Views<span class="tag">&lt;/<span class="name">views</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">generate_step</span>&gt;</span>false<span class="tag">&lt;/<span class="name">generate_step</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">texts</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Part Number<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1-A<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>Bracket<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Revision<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>A<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Design Date<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>01/01/2019<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Designer<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">texts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attachment_list</span>&gt;</span>$&#123;UGII_BASE_DIR&#125;\tdp\batch example\attachments.txt<span class="tag">&lt;/<span class="name">attachment_list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">generate_jt</span>&gt;</span>false<span class="tag">&lt;/<span class="name">generate_jt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">accuracy</span>&gt;</span>Maximum<span class="tag">&lt;/<span class="name">accuracy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">compression</span>&gt;</span>false<span class="tag">&lt;/<span class="name">compression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">override_properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">override_colors</span>&gt;</span>true<span class="tag">&lt;/<span class="name">override_colors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">background_color</span>&gt;</span>1<span class="tag">&lt;/<span class="name">background_color</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pmi_color</span>&gt;</span>216<span class="tag">&lt;/<span class="name">pmi_color</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">override_properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">publish_3DPDF</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">native_run</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight xml"><figcaption><span>attachments.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;UGII_BASE_DIR&#125;\tdp\batch example\TDP_ExamplePart.jpg</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><figure class="highlight xml"><figcaption><span>parts.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;UGII_BASE_DIR&#125;\tdp\batch example\TDP_ExamplePart.prt</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h3&gt;&lt;p&gt;NX本地模式下发布技术数据包&amp;#x2F;三维PDF，在使用发布应用程序&lt;code&gt;PublishTDPNative.exe&lt;/code&gt;前，需要在系统环境变量名称为&lt;code&gt;Path&lt;/code&gt;中增加NX安装目录下&lt;code&gt;NXBIN&lt;/code&gt;的绝对路径。&lt;/p&gt;</summary>
    
    
    
    
    <category term="NX" scheme="https://notes.camcad.cn/tags/NX/"/>
    
  </entry>
  
  <entry>
    <title>NX二次开发：C#调用C++界面获取值</title>
    <link href="https://notes.camcad.cn/post/6cvc59ff.html"/>
    <id>https://notes.camcad.cn/post/6cvc59ff.html</id>
    <published>2023-04-25T14:54:03.000Z</published>
    <updated>2023-07-11T14:46:20.604Z</updated>
    
    <content type="html"><![CDATA[<h3 id="C-函数定义"><a href="#C-函数定义" class="headerlink" title="C++函数定义"></a>C++函数定义</h3><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> DllExport <span class="type">char</span>* g_value = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">DllExport <span class="type">char</span>* <span class="title">returnCSharpValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">g_value = <span class="string">&quot;C++返回给C#的值&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> g_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">DllExport <span class="type">void</span>  <span class="title">ufusr</span><span class="params">(<span class="type">char</span> *param, <span class="type">int</span> *retcod, <span class="type">int</span> param_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tc_select_action *thetc_select_action = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">UF_UGMGR_initialize</span>(<span class="number">0</span>, <span class="literal">nullptr</span>);</span><br><span class="line">        thetc_select_action = <span class="keyword">new</span> <span class="built_in">tc_select_action</span>();</span><br><span class="line">        <span class="comment">// The following method shows the dialog immediately</span></span><br><span class="line">        thetc_select_action-&gt;<span class="built_in">Show</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">UF_UGMGR_terminate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(exception&amp; ex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//---- Enter your exception handling code here -----</span></span><br><span class="line">        tc_select_action::theUI-&gt;<span class="built_in">NXMessageBox</span>()-&gt;<span class="built_in">Show</span>(<span class="string">&quot;Block Styler&quot;</span>, NXOpen::NXMessageBox::DialogTypeError, ex.<span class="built_in">what</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(thetc_select_action != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> thetc_select_action;</span><br><span class="line">        thetc_select_action = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="C-函数定义-1"><a href="#C-函数定义-1" class="headerlink" title="C#函数定义"></a>C#函数定义</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口定义</span></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;tc_select_action.dll&quot;</span>, EntryPoint = <span class="string">&quot;ufusr&quot;</span>, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">cplusplusUfusr</span>(<span class="params"><span class="built_in">string</span> param, <span class="built_in">int</span>[] retcod, <span class="built_in">int</span> param_len</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数定义</span></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;tc_select_action.dll&quot;</span>, EntryPoint = <span class="string">&quot;returnCSharpValue&quot;</span>, CallingConvention = CallingConvention.Cdecl)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">getCplusplusValue</span>()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开C++界面</span></span><br><span class="line">cplusplusUfusr(<span class="literal">null</span>, <span class="literal">null</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用C++内部函数</span></span><br><span class="line">IntPtr pCplusplusValue = getCplusplusValue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转成ANSI字符串</span></span><br><span class="line"><span class="built_in">string</span> cplusplusValue = Marshal.PtrToStringAnsi(pCplusplusValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印显示</span></span><br><span class="line">UFSession.GetUFSession().Ui.OpenListingWindow();</span><br><span class="line">UFSession.GetUFSession().Ui.WriteListingWindow(cplusplusValue);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;C-函数定义&quot;&gt;&lt;a href=&quot;#C-函数定义&quot; class=&quot;headerlink&quot; title=&quot;C++函数定义&quot;&gt;&lt;/a&gt;C++函数定义&lt;/h3&gt;</summary>
    
    
    
    <category term="NX二次开发" scheme="https://notes.camcad.cn/categories/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="NX二次开发" scheme="https://notes.camcad.cn/tags/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
    <category term="C++" scheme="https://notes.camcad.cn/tags/C/"/>
    
    <category term="C#" scheme="https://notes.camcad.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>NX二次开发：第一个C#程序</title>
    <link href="https://notes.camcad.cn/post/5bdc59ff.html"/>
    <id>https://notes.camcad.cn/post/5bdc59ff.html</id>
    <published>2023-04-20T14:53:03.000Z</published>
    <updated>2023-07-11T14:46:20.604Z</updated>
    
    <content type="html"><![CDATA[<p>创建第一个NX二次开发C#程序，然后<code>Ctrl + u</code>的方式调用C#通过编译生成的<code>.dll</code>动态链接文件。</p><span id="more"></span><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> NXOpen;</span><br><span class="line"><span class="keyword">using</span> NXOpen.UF;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Emmet</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Session theSession;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Emmet theEmmet;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Emmet</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            theSession = Session.GetSession();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NXOpen.NXException ex)</span><br><span class="line">        &#123;</span><br><span class="line">             UI.GetUI().NXMessageBox.Show(<span class="string">&quot;Message&quot;</span>, NXMessageBox.DialogType.Error, ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> retValue = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// TO-DO</span></span><br><span class="line">            UFSession theUFSession = UFSession.GetUFSession();</span><br><span class="line">            theUFSession.Ui.DisplayMessage(<span class="string">&quot;Hello World!&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NXOpen.NXException ex)</span><br><span class="line">        &#123;</span><br><span class="line">             UI.GetUI().NXMessageBox.Show(<span class="string">&quot;Message&quot;</span>, NXMessageBox.DialogType.Error, ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">GetUnloadOption</span>(<span class="params"><span class="built_in">string</span> arg</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;创建第一个NX二次开发C#程序，然后&lt;code&gt;Ctrl + u&lt;/code&gt;的方式调用C#通过编译生成的&lt;code&gt;.dll&lt;/code&gt;动态链接文件。&lt;/p&gt;</summary>
    
    
    
    <category term="NX二次开发" scheme="https://notes.camcad.cn/categories/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="NX二次开发" scheme="https://notes.camcad.cn/tags/NX%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
    <category term="C#" scheme="https://notes.camcad.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式</title>
    <link href="https://notes.camcad.cn/post/9725cb23.html"/>
    <id>https://notes.camcad.cn/post/9725cb23.html</id>
    <published>2021-07-25T16:06:22.000Z</published>
    <updated>2023-07-11T14:46:20.616Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">001</td><td align="left"><a href="https://notes.camcad.cn/post/bc751e30.html">C++设计模式01：设计模式简介</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=1">43:28</a></td></tr><tr><td align="center">002</td><td align="left"><a href="https://notes.camcad.cn/post/a61819da.html">C++设计模式02：面向对象设计原则</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=2">35:24</a></td></tr></tbody></table><h4 id="组件协作"><a href="#组件协作" class="headerlink" title="组件协作"></a>组件协作</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">003</td><td align="left"><a href="https://notes.camcad.cn/post/1850cb09.html">C++设计模式03：模板方法（Template Method）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=3">44:52</a></td></tr><tr><td align="center">004</td><td align="left"><a href="https://notes.camcad.cn/post/fecc2092.html">C++设计模式04：策略模式（Strategy）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=4">32:21</a></td></tr><tr><td align="center">005</td><td align="left"><a href="https://notes.camcad.cn/post/4919115d.html">C++设计模式05：观察者模式（Observer &#x2F; Event）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=5">48:03</a></td></tr></tbody></table><h4 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">006</td><td align="left"><a href="https://notes.camcad.cn/post/1da0e9fd.html">C++设计模式06：装饰模式（Decorator）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=6">42:24</a></td></tr><tr><td align="center">007</td><td align="left"><a href="https://notes.camcad.cn/post/b0354483.html">C++设计模式07：桥模式（Bridge）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=7">24:39</a></td></tr></tbody></table><h4 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">008</td><td align="left"><a href="https://notes.camcad.cn/post/d39d84e.html">C++设计模式08：工厂方法（Factory Method）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=8">38:45</a></td></tr><tr><td align="center">009</td><td align="left"><a href="https://notes.camcad.cn/post/8f86a457.html">C++设计模式09：抽象工厂（Abstract Factory）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=9">28:18</a></td></tr><tr><td align="center">010</td><td align="left"><a href="https://notes.camcad.cn/post/663bd6c2.html">C++设计模式10：原型模式（Prototype）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=10">17:33</a></td></tr><tr><td align="center">011</td><td align="left"><a href="https://notes.camcad.cn/post/82fc4ef.html">C++设计模式11：构建器（Builder）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=11">22:00</a></td></tr></tbody></table><h4 id="对象性能"><a href="#对象性能" class="headerlink" title="对象性能"></a>对象性能</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">012</td><td align="left"><a href="https://notes.camcad.cn/post/f0c1b62d.html">C++设计模式12：单例模式（Singleton）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=12">31:36</a></td></tr><tr><td align="center">013</td><td align="left"><a href="https://notes.camcad.cn/post/d3dd74d6.html">C++设计模式13：享元模式（Flyweight）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=13">20:06</a></td></tr></tbody></table><h4 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">014</td><td align="left"><a href="https://notes.camcad.cn/post/6600c949.html">C++设计模式14：门面模式（Facade）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=14">16:22</a></td></tr><tr><td align="center">015</td><td align="left"><a href="https://notes.camcad.cn/post/c80aa8ba.html">C++设计模式15：代理模式（Proxy）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=15">17:58</a></td></tr><tr><td align="center">016</td><td align="left"><a href="https://notes.camcad.cn/post/a3de17af.html">C++设计模式16：适配器（Adapter）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=16">23:15</a></td></tr><tr><td align="center">017</td><td align="left"><a href="https://notes.camcad.cn/post/d8b901a7.html">C++设计模式17：中介者（Mediator）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=17">19:13</a></td></tr></tbody></table><h4 id="状态变化"><a href="#状态变化" class="headerlink" title="状态变化"></a>状态变化</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">018</td><td align="left"><a href="https://notes.camcad.cn/post/1c464225.html">C++设计模式18：状态模式（State）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=18">22:24</a></td></tr><tr><td align="center">019</td><td align="left"><a href="https://notes.camcad.cn/post/2b1e6c0c.html">C++设计模式19：备忘录（Memento）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=19">17:42</a></td></tr></tbody></table><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">020</td><td align="left"><a href="https://notes.camcad.cn/post/7bc400cd.html">C++设计模式20：组合模式（Composite）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=20">19:20</a></td></tr><tr><td align="center">021</td><td align="left"><a href="https://notes.camcad.cn/post/5a23ee24.html">C++设计模式21：迭代器（Iterator）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=21">15:21</a></td></tr><tr><td align="center">022</td><td align="left"><a href="https://notes.camcad.cn/post/c4d890cb.html">C++设计模式22：职责链（Chain of Resposibility）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=22">17:40</a></td></tr></tbody></table><h4 id="行为变化"><a href="#行为变化" class="headerlink" title="行为变化"></a>行为变化</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">023</td><td align="left"><a href="https://notes.camcad.cn/post/3842801a.html">C++设计模式23：命令模式（Command）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=23">18:27</a></td></tr><tr><td align="center">024</td><td align="left"><a href="https://notes.camcad.cn/post/fe5f15e1.html">C++设计模式24：访问器（Visitor）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=24">31:42</a></td></tr></tbody></table><h4 id="领域问题"><a href="#领域问题" class="headerlink" title="领域问题"></a>领域问题</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">025</td><td align="left"><a href="https://notes.camcad.cn/post/5a91b797.html">C++设计模式25：解析器（Interpreter）</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=25">30:30</a></td></tr></tbody></table><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><table><thead><tr><th align="center">序号</th><th align="left">名称</th><th align="center">视频</th></tr></thead><tbody><tr><td align="center">026</td><td align="left"><a href="https://notes.camcad.cn/post/b797e8f6.html">C++设计模式26：设计模式总结</a></td><td align="center"><a href="https://www.bilibili.com/video/BV1V5411w7qg?p=26">39:22</a></td></tr></tbody></table><h3 id="视频转载《李建忠-C-设计模式》"><a href="#视频转载《李建忠-C-设计模式》" class="headerlink" title="视频转载《李建忠_C++设计模式》"></a>视频转载《<a href="https://space.bilibili.com/435866355?spm_id_from=333.788.b_765f7570696e666f.2">李建忠_C++设计模式</a>》</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;序号&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;名称&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;视频&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;ce</summary>
      
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式26：设计模式总结</title>
    <link href="https://notes.camcad.cn/post/b797e8f6.html"/>
    <id>https://notes.camcad.cn/post/b797e8f6.html</id>
    <published>2021-07-25T15:04:44.000Z</published>
    <updated>2023-07-11T14:46:20.620Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="设计模式总结"><a href="#设计模式总结" class="headerlink" title="设计模式总结"></a>设计模式总结</h1><h2 id="一个目标"><a href="#一个目标" class="headerlink" title="一个目标"></a>一个目标</h2><p>管理变化，提高复用！</p><h2 id="两种手段"><a href="#两种手段" class="headerlink" title="两种手段"></a>两种手段</h2><p>分解VS.抽象</p><h2 id="八大原则"><a href="#八大原则" class="headerlink" title="八大原则"></a>八大原则</h2><ul><li>依赖倒置原则(DIP )</li><li>开放封闭原则(OCP)</li><li>单一职责原则(SRP )</li><li>Liskov替换原则(LSP)</li><li>接口隔离原则(ISP)</li><li>对象组合优于类继承</li><li>封装变化点</li><li>面向接口编程</li></ul><h2 id="重构技法"><a href="#重构技法" class="headerlink" title="重构技法"></a>重构技法</h2><ul><li>静态–&gt;动态</li><li>早绑定–&gt;晚绑定</li><li>继承–&gt;组合</li><li>编译时依赖–&gt;运行时依赖</li><li>紧耦合–&gt;松耦合</li></ul><h2 id="从封装变化角度对模式分类"><a href="#从封装变化角度对模式分类" class="headerlink" title="从封装变化角度对模式分类"></a>从封装变化角度对模式分类</h2><h3 id="组件协作"><a href="#组件协作" class="headerlink" title="组件协作"></a>组件协作</h3><ul><li>Template Method</li><li>Strategy</li><li>Observer &#x2F; Event</li></ul><h3 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h3><ul><li>Decorator</li><li>Bridge</li></ul><h3 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h3><ul><li>Factory Method</li><li>Abstract Factory</li><li>Prototype</li><li>Builder</li></ul><h3 id="对象性能"><a href="#对象性能" class="headerlink" title="对象性能"></a>对象性能</h3><ul><li>Singleton</li><li>Flyweight</li></ul><h3 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h3><ul><li>Facade</li><li>Proxy</li><li>Mediator</li><li>Adapter</li></ul><h3 id="状态变化"><a href="#状态变化" class="headerlink" title="状态变化:"></a>状态变化:</h3><ul><li>Memento.</li><li>State</li></ul><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><ul><li>Composite</li><li>Iterator</li><li>Chain of Resposibility</li></ul><h3 id="行为变化"><a href="#行为变化" class="headerlink" title="行为变化"></a>行为变化</h3><ul><li>Command</li><li>Visitor</li></ul><h3 id="领域问题"><a href="#领域问题" class="headerlink" title="领域问题"></a>领域问题</h3><ul><li>Interpreter</li></ul><h2 id="C-对象模型"><a href="#C-对象模型" class="headerlink" title="C++对象模型"></a>C++对象模型</h2><p><a href="http://image.camcad.cn/2021/07/2021071813021251.jpg"><img src="http://image.camcad.cn/2021/07/2021071813021251.jpg"></a></p><h2 id="关注变化点和稳定点"><a href="#关注变化点和稳定点" class="headerlink" title="关注变化点和稳定点"></a>关注变化点和稳定点</h2><p><a href="http://image.camcad.cn/2021/07/202107181303079.jpg"><img src="http://image.camcad.cn/2021/07/202107181303079.jpg"></a></p><h2 id="什么时候不用模式"><a href="#什么时候不用模式" class="headerlink" title="什么时候不用模式"></a>什么时候不用模式</h2><ul><li>代码可读性很差时</li><li>需求理解还很浅时</li><li>变化没有显现时</li><li>不是系统的关键依赖点</li><li>项目没有复用价值时</li><li>项目将要发布时</li></ul><h2 id="经验之谈"><a href="#经验之谈" class="headerlink" title="经验之谈"></a>经验之谈</h2><ul><li>不要为模式而模式</li><li>关注抽象类&amp;接口</li><li>理清变化点和稳定点</li><li>审视依赖关系</li><li>要有Framework和Application的区隔思维</li><li>良好的设计是演化的结果</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="C++" scheme="https://notes.camcad.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式25：解析器（Interpreter）</title>
    <link href="https://notes.camcad.cn/post/5a91b797.html"/>
    <id>https://notes.camcad.cn/post/5a91b797.html</id>
    <published>2021-07-25T15:04:10.000Z</published>
    <updated>2023-07-11T14:46:20.620Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“领域规则”模式"><a href="#“领域规则”模式" class="headerlink" title="“领域规则”模式"></a>“领域规则”模式</h2><p>在特定领域中，某些变化虽然频繁，但可以抽象为某种规则。这时候，结合特定领域，将问题抽象为语法规则，从而给出在该领域下的一般性解决方案。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>Interpreter</li></ul><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，如果某一特定领域的问题比较复杂，类似的结构不断重复出现，如果使用普通的编程方式来实现将面临非常频繁的变化。</li><li>2）在这种情况下，将特定领域的问题表达为某种语法规则下的句子，然后构建一个解释器来解释这样的句子，从而达到解决问题的目的。 <a href="http://image.camcad.cn/2021/07/2021071812332490.jpg"><img src="http://image.camcad.cn/2021/07/2021071812332490.jpg"></a><span id="more"></span></li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>给定一个语言，定义它的文法的一种表示，并定义一种解释器，这个解释器使用该表示来解释语言中的句子。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071812355982.jpg"><img src="http://image.camcad.cn/2021/07/2021071812355982.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Interpreter模式的应用场合是Interpreter模式应用中的难点，只有满足“业务规则频繁变化，且类似的结构不断重复出现，并且容易抽象为语法规则的问题“才适合使用Interpreter模式。</li><li>2）使用Interpreter模式来表示方法规则，从而可以使用面向对象技巧来方便地”扩展“文法。</li><li>3）Interpreter模式比较适合简单的文法表示，对于复杂的文法表示，Interpreter模式会产生比较大的类层次结构，需要求助于语法分析生成器这样的标准工具。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">解析器模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"><h2 id="解析器-DEMO"><a href="#解析器-DEMO" class="headerlink" title="解析器_DEMO"></a>解析器_DEMO</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Expression &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual int interpreter(map&lt;char, int&gt; var)=0;</span><br><span class="line">    virtual ~Expression()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//变量表达式</span><br><span class="line">class VarExpression: public Expression &#123;</span><br><span class="line"></span><br><span class="line">    char key;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    VarExpression(const char&amp; key)</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int interpreter(map&lt;char, int&gt; var) override &#123;</span><br><span class="line">        return var[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//符号表达式</span><br><span class="line">class SymbolExpression : public Expression &#123;</span><br><span class="line"></span><br><span class="line">    // 运算符左右两个参数</span><br><span class="line">protected:</span><br><span class="line">    Expression* left;</span><br><span class="line">    Expression* right;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    SymbolExpression( Expression* left,  Expression* right):</span><br><span class="line">        left(left),right(right)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//加法运算</span><br><span class="line">class AddExpression : public SymbolExpression &#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    AddExpression(Expression* left, Expression* right):</span><br><span class="line">        SymbolExpression(left,right)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    int interpreter(map&lt;char, int&gt; var) override &#123;</span><br><span class="line">        return left-&gt;interpreter(var) + right-&gt;interpreter(var);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//减法运算</span><br><span class="line">class SubExpression : public SymbolExpression &#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    SubExpression(Expression* left, Expression* right):</span><br><span class="line">        SymbolExpression(left,right)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    int interpreter(map&lt;char, int&gt; var) override &#123;</span><br><span class="line">        return left-&gt;interpreter(var) - right-&gt;interpreter(var);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Expression*  analyse(string expStr) &#123;</span><br><span class="line"></span><br><span class="line">    stack&lt;Expression*&gt; expStack;</span><br><span class="line">    Expression* left = nullptr;</span><br><span class="line">    Expression* right = nullptr;</span><br><span class="line">    for(int i=0; i&lt;expStr.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        switch(expStr[i])</span><br><span class="line">        &#123;</span><br><span class="line">            case &#x27;+&#x27;:</span><br><span class="line">                // 加法运算</span><br><span class="line">                left = expStack.top();</span><br><span class="line">                right = new VarExpression(expStr[++i]);</span><br><span class="line">                expStack.push(new AddExpression(left, right));</span><br><span class="line">                break;</span><br><span class="line">            case &#x27;-&#x27;:</span><br><span class="line">                // 减法运算</span><br><span class="line">                left = expStack.top();</span><br><span class="line">                right = new VarExpression(expStr[++i]);</span><br><span class="line">                expStack.push(new SubExpression(left, right));</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                // 变量表达式</span><br><span class="line">                expStack.push(new VarExpression(expStr[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Expression* expression = expStack.top();</span><br><span class="line"></span><br><span class="line">    return expression;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void release(Expression* expression)&#123;</span><br><span class="line"></span><br><span class="line">    //释放表达式树的节点内存...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line"></span><br><span class="line">    string expStr = &quot;a+b-c+d-e&quot;;</span><br><span class="line">    map&lt;char, int&gt; var;</span><br><span class="line">    var.insert(make_pair(&#x27;a&#x27;,5));</span><br><span class="line">    var.insert(make_pair(&#x27;b&#x27;,2));</span><br><span class="line">    var.insert(make_pair(&#x27;c&#x27;,1));</span><br><span class="line">    var.insert(make_pair(&#x27;d&#x27;,6));</span><br><span class="line">    var.insert(make_pair(&#x27;e&#x27;,10));</span><br><span class="line"></span><br><span class="line">    Expression* expression= analyse(expStr);</span><br><span class="line"></span><br><span class="line">    int result=expression-&gt;interpreter(var);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;result&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    release(expression);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“领域规则”模式&quot;&gt;&lt;a href=&quot;#“领域规则”模式&quot; class=&quot;headerlink&quot; title=&quot;“领域规则”模式&quot;&gt;&lt;/a&gt;“领域规则”模式&lt;/h2&gt;&lt;p&gt;在特定领域中，某些变化虽然频繁，但可以抽象为某种规则。这时候，结合特定领域，将问题抽象为语法规则，从而给出在该领域下的一般性解决方案。&lt;/p&gt;
&lt;h2 id=&quot;典型模式&quot;&gt;&lt;a href=&quot;#典型模式&quot; class=&quot;headerlink&quot; title=&quot;典型模式&quot;&gt;&lt;/a&gt;典型模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Interpreter&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;动机（Motivation）&quot;&gt;&lt;a href=&quot;#动机（Motivation）&quot; class=&quot;headerlink&quot; title=&quot;动机（Motivation）&quot;&gt;&lt;/a&gt;动机（Motivation）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）在软件构建过程中，如果某一特定领域的问题比较复杂，类似的结构不断重复出现，如果使用普通的编程方式来实现将面临非常频繁的变化。&lt;/li&gt;
&lt;li&gt;2）在这种情况下，将特定领域的问题表达为某种语法规则下的句子，然后构建一个解释器来解释这样的句子，从而达到解决问题的目的。 &lt;a href=&quot;http://image.camcad.cn/2021/07/2021071812332490.jpg&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021071812332490.jpg&quot;&gt;&lt;/a&gt;</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式24：访问器（Visitor）</title>
    <link href="https://notes.camcad.cn/post/fe5f15e1.html"/>
    <id>https://notes.camcad.cn/post/fe5f15e1.html</id>
    <published>2021-07-25T15:03:38.000Z</published>
    <updated>2023-07-11T14:46:20.620Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“行为变化”模式"><a href="#“行为变化”模式" class="headerlink" title="“行为变化”模式"></a>“行为变化”模式</h2><p>在组件的构建过程中，组件行为的变化经常导致组件本身剧烈的变化。“行为变化”模式将组件的行为和组件本身进行解耦，从而支持组件行为的变化，实现两者之间的松耦合。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>Commmand</li><li>Visitor</li></ul><h1 id="Visitor访问器"><a href="#Visitor访问器" class="headerlink" title="Visitor访问器"></a>Visitor访问器</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，由于需求的改变，某些类层次结构中常常需要增加新的行为(方法），如果直接在基类中做这样的更改，将会给子类带来很繁童的变更负担，甚至破坏原有设计。</li><li>2）如何在不更改类层次结构的前提下，在运行时根据需要透明地为类层次结构上的各个类动态添加新的操作,从而避免上述问题?<span id="more"></span></li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>表示一个作用于某对象结构中的各元素的操作。使得可以在不改变（稳定)各元素的类的前提下定义（扩展）作用于这些元素的新操作（变化)。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071707040062.jpg"><img src="http://image.camcad.cn/2021/07/2021071707040062.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Visitor模式通过所谓双重分发（doule dispatch），来实现在不更改（不添加新的操作-编译时），Element类层次结构的前提下，在运行时透明地为类层次结构上的各个类动态添加新的操作（支持变化）。</li><li>2）所谓双重分发即Visitor模式中间包括了两个多态分发（注意其中的多态机制）：第一个为accept方法的多态辨析；第二个为Visitor ElementX方法的多态辨析。</li><li>3）Visitor模式的最大缺点在于扩展类层次结构（增添新的Element子类），会导致Visitor类的改变。因此Vistor模式适用于“Element类层次结构稳定，而其中的操作却经常面临频繁改动”。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">访问器模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"><h2 id="访问器-DEMO"><a href="#访问器-DEMO" class="headerlink" title="访问器_DEMO"></a>访问器_DEMO</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Element</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void Func1() = 0;</span><br><span class="line"></span><br><span class="line">    virtual void Func2(int data)=0;</span><br><span class="line">    virtual void Func3(int data)=0;</span><br><span class="line">    //...</span><br><span class="line"></span><br><span class="line">    virtual ~Element()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ElementA : public Element</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void Func1() override&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Func2(int data) override&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ElementB : public Element</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void Func1() override&#123;</span><br><span class="line">        //***</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void Func2(int data) override &#123;</span><br><span class="line">        //***</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Visitor;</span><br><span class="line"></span><br><span class="line">class Element</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void accept(Visitor&amp; visitor) = 0; //第一次多态辨析</span><br><span class="line"></span><br><span class="line">    virtual ~Element()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ElementA : public Element</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void accept(Visitor &amp;visitor) override &#123;</span><br><span class="line">        visitor.visitElementA(*this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ElementB : public Element</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void accept(Visitor &amp;visitor) override &#123;</span><br><span class="line">        visitor.visitElementB(*this); //第二次多态辨析</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Visitor&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void visitElementA(ElementA&amp; element) = 0;</span><br><span class="line">    virtual void visitElementB(ElementB&amp; element) = 0;</span><br><span class="line"></span><br><span class="line">    virtual ~Visitor()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//==================================</span><br><span class="line"></span><br><span class="line">//扩展1</span><br><span class="line">class Visitor1 : public Visitor&#123;</span><br><span class="line">public:</span><br><span class="line">    void visitElementA(ElementA&amp; element) override&#123;</span><br><span class="line">        cout &lt;&lt; &quot;Visitor1 is processing ElementA&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void visitElementB(ElementB&amp; element) override&#123;</span><br><span class="line">        cout &lt;&lt; &quot;Visitor1 is processing ElementB&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//扩展2</span><br><span class="line">class Visitor2 : public Visitor&#123;</span><br><span class="line">public:</span><br><span class="line">    void visitElementA(ElementA&amp; element) override&#123;</span><br><span class="line">        cout &lt;&lt; &quot;Visitor2 is processing ElementA&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void visitElementB(ElementB&amp; element) override&#123;</span><br><span class="line">        cout &lt;&lt; &quot;Visitor2 is processing ElementB&quot; &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Visitor2 visitor;</span><br><span class="line">    ElementB elementB;</span><br><span class="line">    elementB.accept(visitor);// double dispatch</span><br><span class="line"></span><br><span class="line">    ElementA elementA;</span><br><span class="line">    elementA.accept(visitor);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“行为变化”模式&quot;&gt;&lt;a href=&quot;#“行为变化”模式&quot; class=&quot;headerlink&quot; title=&quot;“行为变化”模式&quot;&gt;&lt;/a&gt;“行为变化”模式&lt;/h2&gt;&lt;p&gt;在组件的构建过程中，组件行为的变化经常导致组件本身剧烈的变化。“行为变化”模式将组件的行为和组件本身进行解耦，从而支持组件行为的变化，实现两者之间的松耦合。&lt;/p&gt;
&lt;h2 id=&quot;典型模式&quot;&gt;&lt;a href=&quot;#典型模式&quot; class=&quot;headerlink&quot; title=&quot;典型模式&quot;&gt;&lt;/a&gt;典型模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Commmand&lt;/li&gt;
&lt;li&gt;Visitor&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Visitor访问器&quot;&gt;&lt;a href=&quot;#Visitor访问器&quot; class=&quot;headerlink&quot; title=&quot;Visitor访问器&quot;&gt;&lt;/a&gt;Visitor访问器&lt;/h1&gt;&lt;h2 id=&quot;动机（Motivation）&quot;&gt;&lt;a href=&quot;#动机（Motivation）&quot; class=&quot;headerlink&quot; title=&quot;动机（Motivation）&quot;&gt;&lt;/a&gt;动机（Motivation）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）在软件构建过程中，由于需求的改变，某些类层次结构中常常需要增加新的行为(方法），如果直接在基类中做这样的更改，将会给子类带来很繁童的变更负担，甚至破坏原有设计。&lt;/li&gt;
&lt;li&gt;2）如何在不更改类层次结构的前提下，在运行时根据需要透明地为类层次结构上的各个类动态添加新的操作,从而避免上述问题?</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式23：命令模式（Command）</title>
    <link href="https://notes.camcad.cn/post/3842801a.html"/>
    <id>https://notes.camcad.cn/post/3842801a.html</id>
    <published>2021-07-25T15:02:55.000Z</published>
    <updated>2023-07-11T14:46:20.620Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“行为变化”模式"><a href="#“行为变化”模式" class="headerlink" title="“行为变化”模式"></a>“行为变化”模式</h2><p>在组件的构建过程中，组件行为的变化经常导致组件本身剧烈的变化。“行为变化”模式将组件的行为和组件本身进行解耦，从而支持组件行为的变化，实现两者之间的松耦合。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>Commmand</li><li>Visitor</li></ul><h1 id="command命令模式"><a href="#command命令模式" class="headerlink" title="command命令模式"></a>command命令模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，“行为请求者”与“行为实现者”通常呈现一种“紧耦合”。但在某些场合——比如需要对行为进行“记录、撤销&#x2F;重做(undo&#x2F;redo)、事务”等处理，这种无法抵御变化的紧耦合是不合适的。</li><li>2）在这种情况下，如何将“行为请求者”与“行为实现者”解耦?将一组行为抽象为对象，可以实现二者之间的松耦合。<span id="more"></span></li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>将一个请求(行为)封装为一个对象，从而使你可用不同的请求对客户进行参数化;对请求排队或记录请求日志，以及支持可撤销的操作。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071706200668.jpg"><img src="http://image.camcad.cn/2021/07/2021071706200668-1024x324.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Command模式的根本目的在于将“行为请求者”与“行为实现者”解耦，在面向对象语言中，常见的实现手段是“将行为抽象为对象”。</li><li>2）实现Command接口的具体命令对象ConcreteCommand有时候根据需要可能会保存一些额外的状态信息。通过使用Composite模式，可以将多个“命令”封装为一个“复合命令”MacroCommand。</li><li>3）Command模式与C++中的函数对象有些类似。但两者定义行为接口的规范有所区别:Command以面向对象中的“接口-实现”来定义行为接口规范，更严格，但有性能损失;C++函数对象以函数签名来定义行为接口规范，更灵活，性能更高。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">命令模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"><h2 id="命令模式-DEMO"><a href="#命令模式-DEMO" class="headerlink" title="命令模式_DEMO"></a>命令模式_DEMO</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Command</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void execute() = 0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ConcreteCommand1 : public Command</span><br><span class="line">&#123;</span><br><span class="line">    string arg;</span><br><span class="line">public:</span><br><span class="line">    ConcreteCommand1(const string &amp; a) : arg(a) &#123;&#125;</span><br><span class="line">    void execute() override</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt; &quot;#1 process...&quot;&lt;&lt;arg&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ConcreteCommand2 : public Command</span><br><span class="line">&#123;</span><br><span class="line">    string arg;</span><br><span class="line">public:</span><br><span class="line">    ConcreteCommand2(const string &amp; a) : arg(a) &#123;&#125;</span><br><span class="line">    void execute() override</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt; &quot;#2 process...&quot;&lt;&lt;arg&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class MacroCommand : public Command</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;Command*&gt; commands;</span><br><span class="line">public:</span><br><span class="line">    void addCommand(Command *c) &#123; commands.push_back(c); &#125;</span><br><span class="line">    void execute() override</span><br><span class="line">    &#123;</span><br><span class="line">        for (auto &amp;c : commands)</span><br><span class="line">        &#123;</span><br><span class="line">            c-&gt;execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    ConcreteCommand1 command1(receiver, &quot;Arg ###&quot;);</span><br><span class="line">    ConcreteCommand2 command2(receiver, &quot;Arg $$$&quot;);</span><br><span class="line"></span><br><span class="line">    MacroCommand macro;</span><br><span class="line">    macro.addCommand(&amp;command1);</span><br><span class="line">    macro.addCommand(&amp;command2);</span><br><span class="line"></span><br><span class="line">    macro.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“行为变化”模式&quot;&gt;&lt;a href=&quot;#“行为变化”模式&quot; class=&quot;headerlink&quot; title=&quot;“行为变化”模式&quot;&gt;&lt;/a&gt;“行为变化”模式&lt;/h2&gt;&lt;p&gt;在组件的构建过程中，组件行为的变化经常导致组件本身剧烈的变化。“行为变化”模式将组件的行为和组件本身进行解耦，从而支持组件行为的变化，实现两者之间的松耦合。&lt;/p&gt;
&lt;h2 id=&quot;典型模式&quot;&gt;&lt;a href=&quot;#典型模式&quot; class=&quot;headerlink&quot; title=&quot;典型模式&quot;&gt;&lt;/a&gt;典型模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Commmand&lt;/li&gt;
&lt;li&gt;Visitor&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;command命令模式&quot;&gt;&lt;a href=&quot;#command命令模式&quot; class=&quot;headerlink&quot; title=&quot;command命令模式&quot;&gt;&lt;/a&gt;command命令模式&lt;/h1&gt;&lt;h2 id=&quot;动机（Motivation）&quot;&gt;&lt;a href=&quot;#动机（Motivation）&quot; class=&quot;headerlink&quot; title=&quot;动机（Motivation）&quot;&gt;&lt;/a&gt;动机（Motivation）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）在软件构建过程中，“行为请求者”与“行为实现者”通常呈现一种“紧耦合”。但在某些场合——比如需要对行为进行“记录、撤销&amp;#x2F;重做(undo&amp;#x2F;redo)、事务”等处理，这种无法抵御变化的紧耦合是不合适的。&lt;/li&gt;
&lt;li&gt;2）在这种情况下，如何将“行为请求者”与“行为实现者”解耦?将一组行为抽象为对象，可以实现二者之间的松耦合。</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式22：职责链（Chain of Resposibility）</title>
    <link href="https://notes.camcad.cn/post/c4d890cb.html"/>
    <id>https://notes.camcad.cn/post/c4d890cb.html</id>
    <published>2021-07-25T15:02:17.000Z</published>
    <updated>2023-07-11T14:46:20.620Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“数据结构“模式"><a href="#“数据结构“模式" class="headerlink" title="“数据结构“模式"></a>“数据结构“模式</h2><p>常常有一些组件在内部具有特定的数据结构，如果让客户程序依赖这些特定的数据结构，将极大地破坏组件的复用，这时候，将这些特定数据结构封装在内部，在外部提供统一的接口，来实现与特定数据结构无关的访问，是一种行之有效的解决方案。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>Composite</li><li>Iterator</li><li>Chain of Resposibility</li></ul><h1 id="Chain-of-Resposibility职责链"><a href="#Chain-of-Resposibility职责链" class="headerlink" title="Chain of Resposibility职责链"></a>Chain of Resposibility职责链</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，一个请求可能被多个对象处理，但是每个请求在运行时只能有一个接受者，如果显式指定，将必不可少地带来请求发送者与接受者的紧耦合。</li><li>2）如何使请求的发送者不需要指定具体的接受者?让请求的接受者自己在运行时决定来处理请求，从而使两者解耦。<span id="more"></span></li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递请求，直到有一个对象处理它为止。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071705453480.jpg"><img src="http://image.camcad.cn/2021/07/2021071705453480.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Chain of Responsibility模式的应用场合在于“一个请求可能有多个接受者，但是最后真正的接受者只有一个”，这时候请求发送者与接受者的耦合有可能出现“变化脆弱”的症状，职责链的自的就是将二者解耦，从而更好地应对变化。</li><li>2）应用了Chain of Responsibility模式后，对象的职责分派将更具灵活性。我们可以在运行时动态添加&#x2F;修改请求的处理职责。</li><li>3）如果请求传递到职责链的末尾仍得不到处理，应该有一个合理的缺省机制。这也是每一个接受对象的责任，而不是发出请求的对象的责任。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">职责链模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"><h2 id="职责链-DEMO"><a href="#职责链-DEMO" class="headerlink" title="职责链_DEMO"></a>职责链_DEMO</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">enum class RequestType</span><br><span class="line">&#123;</span><br><span class="line">    REQ_HANDLER1,</span><br><span class="line">    REQ_HANDLER2,</span><br><span class="line">    REQ_HANDLER3</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Reqest</span><br><span class="line">&#123;</span><br><span class="line">    string description;</span><br><span class="line">    RequestType reqType;</span><br><span class="line">public:</span><br><span class="line">    Reqest(const string &amp; desc, RequestType type) : description(desc), reqType(type) &#123;&#125;</span><br><span class="line">    RequestType getReqType() const &#123; return reqType; &#125;</span><br><span class="line">    const string&amp; getDescription() const &#123; return description; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ChainHandler&#123;</span><br><span class="line"></span><br><span class="line">    ChainHandler *nextChain;</span><br><span class="line">    void sendReqestToNextHandler(const Reqest &amp; req)</span><br><span class="line">    &#123;</span><br><span class="line">        if (nextChain != nullptr)</span><br><span class="line">            nextChain-&gt;handle(req);</span><br><span class="line">    &#125;</span><br><span class="line">protected:</span><br><span class="line">    virtual bool canHandleRequest(const Reqest &amp; req) = 0;</span><br><span class="line">    virtual void processRequest(const Reqest &amp; req) = 0;</span><br><span class="line">public:</span><br><span class="line">    ChainHandler() &#123; nextChain = nullptr; &#125;</span><br><span class="line">    void setNextChain(ChainHandler *next) &#123; nextChain = next; &#125;</span><br><span class="line"></span><br><span class="line">    void handle(const Reqest &amp; req)</span><br><span class="line">    &#123;</span><br><span class="line">        if (canHandleRequest(req))</span><br><span class="line">            processRequest(req);</span><br><span class="line">        else</span><br><span class="line">            sendReqestToNextHandler(req);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Handler1 : public ChainHandler&#123;</span><br><span class="line">protected:</span><br><span class="line">    bool canHandleRequest(const Reqest &amp; req) override</span><br><span class="line">    &#123;</span><br><span class="line">        return req.getReqType() == RequestType::REQ_HANDLER1;</span><br><span class="line">    &#125;</span><br><span class="line">    void processRequest(const Reqest &amp; req) override</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;Handler1 is handle reqest: &quot; &lt;&lt; req.getDescription() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Handler2 : public ChainHandler&#123;</span><br><span class="line">protected:</span><br><span class="line">    bool canHandleRequest(const Reqest &amp; req) override</span><br><span class="line">    &#123;</span><br><span class="line">        return req.getReqType() == RequestType::REQ_HANDLER2;</span><br><span class="line">    &#125;</span><br><span class="line">    void processRequest(const Reqest &amp; req) override</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;Handler2 is handle reqest: &quot; &lt;&lt; req.getDescription() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Handler3 : public ChainHandler&#123;</span><br><span class="line">protected:</span><br><span class="line">    bool canHandleRequest(const Reqest &amp; req) override</span><br><span class="line">    &#123;</span><br><span class="line">        return req.getReqType() == RequestType::REQ_HANDLER3;</span><br><span class="line">    &#125;</span><br><span class="line">    void processRequest(const Reqest &amp; req) override</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; &quot;Handler3 is handle reqest: &quot; &lt;&lt; req.getDescription() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    Handler1 h1;</span><br><span class="line">    Handler2 h2;</span><br><span class="line">    Handler3 h3;</span><br><span class="line">    h1.setNextChain(&amp;h2);</span><br><span class="line">    h2.setNextChain(&amp;h3);</span><br><span class="line"></span><br><span class="line">    Reqest req(&quot;process task ... &quot;, RequestType::REQ_HANDLER3);</span><br><span class="line">    h1.handle(req);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“数据结构“模式&quot;&gt;&lt;a href=&quot;#“数据结构“模式&quot; class=&quot;headerlink&quot; title=&quot;“数据结构“模式&quot;&gt;&lt;/a&gt;“数据结构“模式&lt;/h2&gt;&lt;p&gt;常常有一些组件在内部具有特定的数据结构，如果让客户程序依赖这些特定的数据结构，将极大地破坏组件的复用，这时候，将这些特定数据结构封装在内部，在外部提供统一的接口，来实现与特定数据结构无关的访问，是一种行之有效的解决方案。&lt;/p&gt;
&lt;h2 id=&quot;典型模式&quot;&gt;&lt;a href=&quot;#典型模式&quot; class=&quot;headerlink&quot; title=&quot;典型模式&quot;&gt;&lt;/a&gt;典型模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Composite&lt;/li&gt;
&lt;li&gt;Iterator&lt;/li&gt;
&lt;li&gt;Chain of Resposibility&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Chain-of-Resposibility职责链&quot;&gt;&lt;a href=&quot;#Chain-of-Resposibility职责链&quot; class=&quot;headerlink&quot; title=&quot;Chain of Resposibility职责链&quot;&gt;&lt;/a&gt;Chain of Resposibility职责链&lt;/h1&gt;&lt;h2 id=&quot;动机（Motivation）&quot;&gt;&lt;a href=&quot;#动机（Motivation）&quot; class=&quot;headerlink&quot; title=&quot;动机（Motivation）&quot;&gt;&lt;/a&gt;动机（Motivation）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）在软件构建过程中，一个请求可能被多个对象处理，但是每个请求在运行时只能有一个接受者，如果显式指定，将必不可少地带来请求发送者与接受者的紧耦合。&lt;/li&gt;
&lt;li&gt;2）如何使请求的发送者不需要指定具体的接受者?让请求的接受者自己在运行时决定来处理请求，从而使两者解耦。</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式21：迭代器（Iterator）</title>
    <link href="https://notes.camcad.cn/post/5a23ee24.html"/>
    <id>https://notes.camcad.cn/post/5a23ee24.html</id>
    <published>2021-07-25T15:01:45.000Z</published>
    <updated>2023-07-11T14:46:20.620Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“数据结构“模式"><a href="#“数据结构“模式" class="headerlink" title="“数据结构“模式"></a>“数据结构“模式</h2><p>常常有一些组件在内部具有特定的数据结构，如果让客户程序依赖这些特定的数据结构，将极大地破坏组件的复用，这时候，将这些特定数据结构封装在内部，在外部提供统一的接口，来实现与特定数据结构无关的访问，是一种行之有效的解决方案。</p><span id="more"></span><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>Composite</li><li>Iterator</li><li>Chain of Resposibility</li></ul><h1 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，集合对象内部结构常常变化各异。但对于这些集合对象，我们希望在不暴露其内部结构的同时，可以让外部客户代码透明地访问其中包含的元素;同时这种“透明遍历”也为“同一种算法在多种集合对象上进行操作”提供了可能。</li><li>2）使用面向对象技术将这种遍历机制抽象为“迭代器对象”为“应对变化中的集合对象”提供了一种优雅的方式。</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露（稳定）该对象的内部表示。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071705181644.jpg"><img src="http://image.camcad.cn/2021/07/2021071705181644.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）迭代抽象:访问一个聚合对象的内容而无需暴露它的内部表示。</li><li>2）迭代多态:为遍历不同的集合结构提供一个统一的接口，从而支持同样的算法在不同的集合结构上进行操作。</li><li>3）迭代器的健壮性考虑:遍历的同时更改迭代器所在的集合结构，会导致问题。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">迭代器模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“数据结构“模式&quot;&gt;&lt;a href=&quot;#“数据结构“模式&quot; class=&quot;headerlink&quot; title=&quot;“数据结构“模式&quot;&gt;&lt;/a&gt;“数据结构“模式&lt;/h2&gt;&lt;p&gt;常常有一些组件在内部具有特定的数据结构，如果让客户程序依赖这些特定的数据结构，将极大地破坏组件的复用，这时候，将这些特定数据结构封装在内部，在外部提供统一的接口，来实现与特定数据结构无关的访问，是一种行之有效的解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式20：组合模式（Composite）</title>
    <link href="https://notes.camcad.cn/post/7bc400cd.html"/>
    <id>https://notes.camcad.cn/post/7bc400cd.html</id>
    <published>2021-07-25T15:00:14.000Z</published>
    <updated>2023-07-11T14:46:20.620Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“数据结构“模式"><a href="#“数据结构“模式" class="headerlink" title="“数据结构“模式"></a>“数据结构“模式</h2><p>常常有一些组件在内部具有特定的数据结构，如果让客户程序依赖这些特定的数据结构，将极大地破坏组件的复用，这时候，将这些特定数据结构封装在内部，在外部提供统一的接口，来实现与特定数据结构无关的访问，是一种行之有效的解决方案。</p><span id="more"></span><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>Composite</li><li>Iterator</li><li>Chain of Resposibility</li></ul><h1 id="Composite模式"><a href="#Composite模式" class="headerlink" title="Composite模式"></a>Composite模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件在某些情况下，客户代码过多地依赖于对象容器复杂的内部实现结构，对象容器内部实现结构（而非抽象接口)的变化将引起客户代码的频繁变化，带来了代码的维护性、扩展性等弊端。</li><li>2）如何将“客户代码与复杂的对象容器结构”解耦?让对象容器自己来实现自身的复杂结构,从而使得客户代码就像处理简单对象一样来处理复杂的对象容器?</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>将对象组合成树形结构以表示“部分-整体”的层次结构。Composite使得用户对单个对象和组合对象的使用具有一致性（稳定)。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071704463967.jpg"><img src="http://image.camcad.cn/2021/07/2021071704463967.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Composite模式采用树形结构来实现普遍存在的对象容器，从而将“一对多”的关系转化为”一对一“的关系，使得客户代码可以一致地(复用)处理对象和对象容器，无需关心处理的是单个的对象，还是组合的对象容器。</li><li>2）将“客户代码与复杂的对象容器结构”解耦是Composite的核心思想，解耦之后，客户代码将与纯粹的抽象接口——而非对象容器的内部实现结构——发生依赖，从而更能“应对变化”。</li><li>3）Composite模式在具体实现中，可以让父对象中的子对象反向追溯;如果父对象有频繁的遍历需求，可使用缓存技巧来改善效率。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">组合模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight c++"><figcaption><span>main_composite.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;src/composite.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ConcreteCompany *root = <span class="keyword">new</span> <span class="built_in">ConcreteCompany</span>(<span class="string">&quot;北京总公司&quot;</span>);</span><br><span class="line">    <span class="function">std::shared_ptr&lt;Company&gt; <span class="title">hr</span><span class="params">(<span class="keyword">new</span> HRDepartment(<span class="string">&quot;总公司人力资源部&quot;</span>))</span></span>;</span><br><span class="line">    <span class="function">std::shared_ptr&lt;Company&gt; <span class="title">fd</span><span class="params">(<span class="keyword">new</span> FinanceDepartment(<span class="string">&quot;总公司财务部&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">    root-&gt;<span class="built_in">add</span>(hr);</span><br><span class="line">    root-&gt;<span class="built_in">add</span>(fd);</span><br><span class="line"></span><br><span class="line">    <span class="function">std::shared_ptr&lt;ConcreteCompany&gt; <span class="title">comp</span><span class="params">(<span class="keyword">new</span> ConcreteCompany(<span class="string">&quot;上海华东分公司&quot;</span>))</span></span>;</span><br><span class="line">    hr.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">HRDepartment</span>(<span class="string">&quot;华东分公司人力资源部&quot;</span>));</span><br><span class="line">    fd.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">FinanceDepartment</span>(<span class="string">&quot;华东分公司财务部&quot;</span>));</span><br><span class="line">    comp-&gt;<span class="built_in">add</span>(hr);</span><br><span class="line">    comp-&gt;<span class="built_in">add</span>(fd);</span><br><span class="line">    root-&gt;<span class="built_in">add</span>(comp);</span><br><span class="line"></span><br><span class="line">    <span class="function">std::shared_ptr&lt;ConcreteCompany&gt; <span class="title">comp1</span><span class="params">(<span class="keyword">new</span> ConcreteCompany(<span class="string">&quot;南京办事处&quot;</span>))</span></span>;</span><br><span class="line">    hr.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">HRDepartment</span>(<span class="string">&quot;南京办事处人力资源部&quot;</span>));</span><br><span class="line">    fd.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">FinanceDepartment</span>(<span class="string">&quot;南京办事处财务部&quot;</span>));</span><br><span class="line">    comp1-&gt;<span class="built_in">add</span>(hr);</span><br><span class="line">    comp1-&gt;<span class="built_in">add</span>(fd);</span><br><span class="line">    comp-&gt;<span class="built_in">add</span>(comp1);</span><br><span class="line"></span><br><span class="line">    <span class="function">std::shared_ptr&lt;ConcreteCompany&gt; <span class="title">comp2</span><span class="params">(<span class="keyword">new</span> ConcreteCompany(<span class="string">&quot;华南办事处&quot;</span>))</span></span>;</span><br><span class="line">    hr.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">HRDepartment</span>(<span class="string">&quot;华南办事处人力资源部&quot;</span>));</span><br><span class="line">    fd.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in">FinanceDepartment</span>(<span class="string">&quot;华南办事处财务部&quot;</span>));</span><br><span class="line">    comp2-&gt;<span class="built_in">add</span>(hr);</span><br><span class="line">    comp2-&gt;<span class="built_in">add</span>(fd);</span><br><span class="line">    comp-&gt;<span class="built_in">add</span>(comp2);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\n结构图&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    root-&gt;<span class="built_in">display</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;\n职责&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    root-&gt;<span class="built_in">lineOfDuty</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>composite.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _TEMPLATE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _TEMPLATE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__ \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__ \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                              \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__ \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class company;</span></span></span><br><span class="line"><span class="string"><span class="meta">class ConcreteCompany;</span></span></span><br><span class="line"><span class="string"><span class="meta">class HRDepartment;</span></span></span><br><span class="line"><span class="string"><span class="meta">class FinanceDepartment;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Company</span></span></span><br><span class="line"><span class="string"><span class="meta">&#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">protected:</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Company() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  Company(std::string name)</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = name;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void add(std::shared_ptr&lt;Company&gt; c) = 0;    // 增加</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void remove(std::shared_ptr&lt;Company&gt; c) = 0; // 移除</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void display(int nDepth) = 0;                // 显示</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void lineOfDuty() = 0;                       // 履行职责</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~Company() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 树枝节点</span></span></span><br><span class="line"><span class="string"><span class="meta">class ConcreteCompany : public Company</span></span></span><br><span class="line"><span class="string"><span class="meta">&#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::list&lt;std::shared_ptr&lt;Company&gt;&gt; m_children;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  ConcreteCompany() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  ConcreteCompany(std::string name)</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = name;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 增加</span></span></span><br><span class="line"><span class="string"><span class="meta">  void add(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_children.push_back(std::move(c));</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 移除</span></span></span><br><span class="line"><span class="string"><span class="meta">  void remove(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_children.remove(c);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 显示</span></span></span><br><span class="line"><span class="string"><span class="meta">  void display(int nDepth) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    std::string sVlaue = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (auto i = 0; i &lt; nDepth; i++)</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      sVlaue += &quot;</span>-<span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    sVlaue += this-&gt;m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; sVlaue &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    for (const auto &amp;v : this-&gt;m_children)</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      if (v != nullptr)</span></span></span><br><span class="line"><span class="string"><span class="meta">      &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        v-&gt;display(nDepth + 2);</span></span></span><br><span class="line"><span class="string"><span class="meta">      &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 履行职责</span></span></span><br><span class="line"><span class="string"><span class="meta">  void lineOfDuty() override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (const auto &amp;v : this-&gt;m_children)</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      if (v != nullptr)</span></span></span><br><span class="line"><span class="string"><span class="meta">      &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">        v-&gt;lineOfDuty();</span></span></span><br><span class="line"><span class="string"><span class="meta">      &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 人力资源部</span></span></span><br><span class="line"><span class="string"><span class="meta">class HRDepartment : public Company</span></span></span><br><span class="line"><span class="string"><span class="meta">&#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  HRDepartment(std::string name)</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = name;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 增加</span></span></span><br><span class="line"><span class="string"><span class="meta">  void add(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 移除</span></span></span><br><span class="line"><span class="string"><span class="meta">  void remove(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 显示</span></span></span><br><span class="line"><span class="string"><span class="meta">  void display(int nDepth) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::string sVlaue = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (auto i = 0; i &lt; nDepth; i++)</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      sVlaue += &quot;</span>-<span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    sVlaue += this-&gt;m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; sVlaue &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 履行职责</span></span></span><br><span class="line"><span class="string"><span class="meta">  void lineOfDuty() override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 员工招聘培训管理<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 财务部</span></span></span><br><span class="line"><span class="string"><span class="meta">class FinanceDepartment : public Company</span></span></span><br><span class="line"><span class="string"><span class="meta">&#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  FinanceDepartment(std::string name)</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_name = name;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 增加</span></span></span><br><span class="line"><span class="string"><span class="meta">  void add(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 移除</span></span></span><br><span class="line"><span class="string"><span class="meta">  void remove(std::shared_ptr&lt;Company&gt; c) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 显示</span></span></span><br><span class="line"><span class="string"><span class="meta">  void display(int nDepth) override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::string sVlaue = &quot;</span><span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    for (auto i = 0; i &lt; nDepth; i++)</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      sVlaue += &quot;</span>-<span class="string">&quot;;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">    sVlaue += this-&gt;m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; sVlaue &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 履行职责</span></span></span><br><span class="line"><span class="string"><span class="meta">  void lineOfDuty() override</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 公司财务收支管理<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _TEMPLATE_H_</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;list&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Component</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void process() = 0;</span><br><span class="line">    virtual ~Component()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//树节点</span><br><span class="line">class Composite : public Component&#123;</span><br><span class="line"></span><br><span class="line">    string name;</span><br><span class="line">    list&lt;Component*&gt; elements;</span><br><span class="line">public:</span><br><span class="line">    Composite(const string &amp; s) : name(s) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    void add(Component* element) &#123;</span><br><span class="line">        elements.push_back(element);</span><br><span class="line">    &#125;</span><br><span class="line">    void remove(Component* element)&#123;</span><br><span class="line">        elements.remove(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void process()&#123;</span><br><span class="line"></span><br><span class="line">        //1. process current node</span><br><span class="line"></span><br><span class="line">        //2. process leaf nodes</span><br><span class="line">        for (auto &amp;e : elements)</span><br><span class="line">            e-&gt;process(); //多态调用</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//叶子节点</span><br><span class="line">class Leaf : public Component&#123;</span><br><span class="line">    string name;</span><br><span class="line">public:</span><br><span class="line">    Leaf(string s) : name(s) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    void process()&#123;</span><br><span class="line">        //process current node</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void Invoke(Component &amp; c)&#123;</span><br><span class="line">    //...</span><br><span class="line">    c.process();</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Composite root(&quot;root&quot;);</span><br><span class="line">    Composite treeNode1(&quot;treeNode1&quot;);</span><br><span class="line">    Composite treeNode2(&quot;treeNode2&quot;);</span><br><span class="line">    Composite treeNode3(&quot;treeNode3&quot;);</span><br><span class="line">    Composite treeNode4(&quot;treeNode4&quot;);</span><br><span class="line">    Leaf leat1(&quot;left1&quot;);</span><br><span class="line">    Leaf leat2(&quot;left2&quot;);</span><br><span class="line"></span><br><span class="line">    root.add(&amp;treeNode1);</span><br><span class="line">    treeNode1.add(&amp;treeNode2);</span><br><span class="line">    treeNode2.add(&amp;leaf1);</span><br><span class="line"></span><br><span class="line">    root.add(&amp;treeNode3);</span><br><span class="line">    treeNode3.add(&amp;treeNode4);</span><br><span class="line">    treeNode4.add(&amp;leaf2);</span><br><span class="line"></span><br><span class="line">    Invoke(root);</span><br><span class="line">    Invoke(leaf2);</span><br><span class="line">    Invoke(treeNode3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“数据结构“模式&quot;&gt;&lt;a href=&quot;#“数据结构“模式&quot; class=&quot;headerlink&quot; title=&quot;“数据结构“模式&quot;&gt;&lt;/a&gt;“数据结构“模式&lt;/h2&gt;&lt;p&gt;常常有一些组件在内部具有特定的数据结构，如果让客户程序依赖这些特定的数据结构，将极大地破坏组件的复用，这时候，将这些特定数据结构封装在内部，在外部提供统一的接口，来实现与特定数据结构无关的访问，是一种行之有效的解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式19：备忘录（Memento）</title>
    <link href="https://notes.camcad.cn/post/2b1e6c0c.html"/>
    <id>https://notes.camcad.cn/post/2b1e6c0c.html</id>
    <published>2021-07-25T12:28:24.000Z</published>
    <updated>2023-07-11T14:46:20.620Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“状态变化”模式"><a href="#“状态变化”模式" class="headerlink" title="“状态变化”模式"></a>“状态变化”模式</h2><p>在组件构建过程中，某些对象的状态经常面临变化，如何对这些变化进行有效的管理?同时又维持高层模块的稳定?“状态变化”模式为这一问题提供了一种解决方案。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）State</li><li>2）Memento</li></ul><h1 id="Memento备忘录"><a href="#Memento备忘录" class="headerlink" title="Memento备忘录"></a>Memento备忘录</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，某些对象的状态在转换过程中，可能由于某种需要，要求程序能够回溯到对象之前处于某个点时的状态。如果使用一些公有接口来让其他对象得到对象的状态，便会暴露对象的细节实现。</li><li>2）如何实现对象状态的良好保存与恢复?但同时又不会因此而破坏对象本身的封装性。<span id="more"></span></li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可以将该对象恢复到原先保存的状态。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071615182280.jpg"><img src="http://image.camcad.cn/2021/07/2021071615182280.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）备忘录(Memento）存储原发器(Originator)对象的内部状态，在需要时恢复原发器状态。</li><li>2）Memento模式的核心是信息隐藏，即Originator需要向外接隐藏信息，保持其封装性。但同时又需要将状态保持到外界（Memento）。</li><li>3）由于现代语言运行时（如C#、Java等）都具有相当的对象序列化支持，因此往往采用效率较高、又较容易正确实现的序列化方案来实现Memento模式。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">备忘录模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"><h2 id="备忘录-DEMO"><a href="#备忘录-DEMO" class="headerlink" title="备忘录_DEMO"></a>备忘录_DEMO</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class Memento</span><br><span class="line">&#123;</span><br><span class="line">    string state;</span><br><span class="line">    //..</span><br><span class="line">public:</span><br><span class="line">    Memento(const string &amp; s) : state(s) &#123;&#125;</span><br><span class="line">    string getState() const &#123; return state; &#125;</span><br><span class="line">    void setState(const string &amp; s) &#123; state = s; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Originator</span><br><span class="line">&#123;</span><br><span class="line">    string state;</span><br><span class="line">    //....</span><br><span class="line">public:</span><br><span class="line">    Originator() &#123;&#125;</span><br><span class="line">    Memento createMomento() &#123;</span><br><span class="line">        Memento m(state);</span><br><span class="line">        return m;</span><br><span class="line">    &#125;</span><br><span class="line">    void setMomento(const Memento &amp; m) &#123;</span><br><span class="line">        state = m.getState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Originator orginator;</span><br><span class="line"></span><br><span class="line">    //捕获对象状态，存储到备忘录</span><br><span class="line">    Memento mem = orginator.createMomento();</span><br><span class="line"></span><br><span class="line">    //... 改变orginator状态</span><br><span class="line"></span><br><span class="line">    //从备忘录中恢复</span><br><span class="line">    orginator.setMomento(memento);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“状态变化”模式&quot;&gt;&lt;a href=&quot;#“状态变化”模式&quot; class=&quot;headerlink&quot; title=&quot;“状态变化”模式&quot;&gt;&lt;/a&gt;“状态变化”模式&lt;/h2&gt;&lt;p&gt;在组件构建过程中，某些对象的状态经常面临变化，如何对这些变化进行有效的管理?同时又维持高层模块的稳定?“状态变化”模式为这一问题提供了一种解决方案。&lt;/p&gt;
&lt;h2 id=&quot;典型模式&quot;&gt;&lt;a href=&quot;#典型模式&quot; class=&quot;headerlink&quot; title=&quot;典型模式&quot;&gt;&lt;/a&gt;典型模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）State&lt;/li&gt;
&lt;li&gt;2）Memento&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Memento备忘录&quot;&gt;&lt;a href=&quot;#Memento备忘录&quot; class=&quot;headerlink&quot; title=&quot;Memento备忘录&quot;&gt;&lt;/a&gt;Memento备忘录&lt;/h1&gt;&lt;h2 id=&quot;动机（Motivation）&quot;&gt;&lt;a href=&quot;#动机（Motivation）&quot; class=&quot;headerlink&quot; title=&quot;动机（Motivation）&quot;&gt;&lt;/a&gt;动机（Motivation）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）在软件构建过程中，某些对象的状态在转换过程中，可能由于某种需要，要求程序能够回溯到对象之前处于某个点时的状态。如果使用一些公有接口来让其他对象得到对象的状态，便会暴露对象的细节实现。&lt;/li&gt;
&lt;li&gt;2）如何实现对象状态的良好保存与恢复?但同时又不会因此而破坏对象本身的封装性。</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式18：状态模式（State）</title>
    <link href="https://notes.camcad.cn/post/1c464225.html"/>
    <id>https://notes.camcad.cn/post/1c464225.html</id>
    <published>2021-07-25T12:27:53.000Z</published>
    <updated>2023-07-11T14:46:20.620Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“状态变化”模式"><a href="#“状态变化”模式" class="headerlink" title="“状态变化”模式"></a>“状态变化”模式</h2><p>在组件构建过程中，某些对象的状态经常面临变化，如何对这些变化进行有效的管理?同时又维持高层模块的稳定?“状态变化”模式为这一问题提供了一种解决方案。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）State</li><li>2）Memento<span id="more"></span></li></ul><h1 id="State状态模式"><a href="#State状态模式" class="headerlink" title="State状态模式"></a>State状态模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，某些对象的状态如果改变，其行为也会随之而发生变化，比如文档处于只读状态，其支持的行为和读写状态支持的行为就可能完全不同。</li><li>2）如何在运行时根据对象的状态来透明地更改对象的行为?而不会为对象操作和状态转化之间引入紧耦合?</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>允许一个对象在其内部状态改变时改变它的行为。从而使对象看起来似乎修改了其行为。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071515360928.jpg"><img src="http://image.camcad.cn/2021/07/2021071515360928.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）State模式将所有与一个特定状态相关的行为都放入一个State的子类对象中，在对象状态切换时，切换相应的对象，但同时维持State的接口，这样实现了具体操作与状态转换之间的解耦。</li><li>2）为不同的状态引入不同的对象使得状态转换变得更加明确，而且可以保证不会出现状态不一致的情况，因为转换是原子性的——即要么彻底转换过来，要么不转换。</li><li>3）如果State对象没有实例变量，那么各个上下文可以共享同一个State对象，从而节省对象开销。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">状态模式</a></li><li class="tab"><a href="#tab-2">进阶模式</a></li><li class="tab"><a href="#tab-3">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight c++"><figcaption><span>main_state.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;src/state.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Work emergencyProjects;</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">9</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">10</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">12</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">13</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">14</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">17</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">19</span>);</span><br><span class="line">  <span class="comment">//  emergencyProjects.setTaskFinish(true);</span></span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  emergencyProjects.<span class="built_in">setHour</span>(<span class="number">22</span>);</span><br><span class="line">  emergencyProjects.<span class="built_in">writeProgram</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>state.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _STATE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _STATE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class State;</span></span></span><br><span class="line"><span class="string"><span class="meta">class Work;</span></span></span><br><span class="line"><span class="string"><span class="meta">class ForenoonState;</span></span></span><br><span class="line"><span class="string"><span class="meta">class NoonState;</span></span></span><br><span class="line"><span class="string"><span class="meta">class AfternonnState;</span></span></span><br><span class="line"><span class="string"><span class="meta">class EveningState;</span></span></span><br><span class="line"><span class="string"><span class="meta">class SleepingState;</span></span></span><br><span class="line"><span class="string"><span class="meta">class RestState;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void writeProgram(Work *w) = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~State() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Work &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  double m_hour;</span></span></span><br><span class="line"><span class="string"><span class="meta">  bool m_finish;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;State&gt; m_current;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void init() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_finish = false;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_hour = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  Work();</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void setHour(double h) &#123; this-&gt;m_hour = h; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  double getHour() &#123; return this-&gt;m_hour; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void setTaskFinish(bool finish) &#123; this-&gt;m_finish = finish; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  bool getTaskFinish() &#123; return this-&gt;m_finish; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void setState(std::unique_ptr&lt;State&gt; s) &#123; this-&gt;m_current = std::move(s); &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram() &#123; this-&gt;m_current-&gt;writeProgram(this); &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 上午工作状态</span></span></span><br><span class="line"><span class="string"><span class="meta">class ForenoonState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 中午工作状态</span></span></span><br><span class="line"><span class="string"><span class="meta">class NoonState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 下午工作状态</span></span></span><br><span class="line"><span class="string"><span class="meta">class AfternoonState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 加班工作状态</span></span></span><br><span class="line"><span class="string"><span class="meta">class EveningState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 睡觉</span></span></span><br><span class="line"><span class="string"><span class="meta">class SleepingState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 下班</span></span></span><br><span class="line"><span class="string"><span class="meta">class RestState : public State &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void writeProgram(Work *w) override;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void ForenoonState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  if (w-&gt;getHour() &lt; 12) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour()</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; &quot;</span>点 上午工作，精神百倍<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125; else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;setState(std::unique_ptr&lt;State&gt;(new NoonState()));</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;writeProgram();</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void NoonState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  if (w-&gt;getHour() &lt; 13) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour()</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; &quot;</span>点 饿了,午饭；犯困,午休<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125; else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;setState(std::unique_ptr&lt;State&gt;(new AfternoonState()));</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;writeProgram();</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void AfternoonState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  if (w-&gt;getHour() &lt; 17) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour()</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; &quot;</span>点 下午状态还不错，继续努力<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125; else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;setState(std::unique_ptr&lt;State&gt;(new EveningState()));</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;writeProgram();</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void EveningState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  if (w-&gt;getTaskFinish()) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;setState(std::unique_ptr&lt;State&gt;(new RestState()));</span></span></span><br><span class="line"><span class="string"><span class="meta">    w-&gt;writeProgram();</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125; else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (w-&gt;getHour() &lt; 21) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour()</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;&lt; &quot;</span>点 加班哦,疲累之极<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125; else &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      w-&gt;setState(std::unique_ptr&lt;State&gt;(new SleepingState));</span></span></span><br><span class="line"><span class="string"><span class="meta">      w-&gt;writeProgram();</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void SleepingState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour() &lt;&lt; &quot;</span>点 不行了,睡着了<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">void RestState::writeProgram(Work *w) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>当前时间：<span class="string">&quot; &lt;&lt; w-&gt;getHour() &lt;&lt; &quot;</span>点 下班回家了<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">            &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">Work::Work() &#123; this-&gt;m_current.reset(new ForenoonState()); &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _STATE_H_</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkState</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    NetworkState* pNext;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Operation1</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Operation2</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Operation3</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">NetworkState</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenState</span> :<span class="keyword">public</span> NetworkState&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> NetworkState* m_instance;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> NetworkState* <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_instance == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            m_instance = <span class="keyword">new</span> <span class="built_in">OpenState</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m_instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//**********</span></span><br><span class="line">        pNext = CloseState::<span class="built_in">getInstance</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//..........</span></span><br><span class="line">        pNext = ConnectState::<span class="built_in">getInstance</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//$$$$$$$$$$</span></span><br><span class="line">        pNext = OpenState::<span class="built_in">getInstance</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CloseState</span>:<span class="keyword">public</span> NetworkState&#123; &#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkProcessor</span>&#123;</span><br><span class="line"></span><br><span class="line">    NetworkState* pState;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NetworkProcessor</span>(NetworkState* pState)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;pState = pState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        pState-&gt;<span class="built_in">Operation1</span>();</span><br><span class="line">        pState = pState-&gt;pNext;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        pState-&gt;<span class="built_in">Operation2</span>();</span><br><span class="line">        pState = pState-&gt;pNext;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        pState-&gt;<span class="built_in">Operation3</span>();</span><br><span class="line">        pState = pState-&gt;pNext;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">NetworkState</span></span><br><span class="line">&#123;</span><br><span class="line">    Network_Open,</span><br><span class="line">    Network_Close,</span><br><span class="line">    Network_Connect,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetworkProcessor</span>&#123;</span><br><span class="line"></span><br><span class="line">    NetworkState state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state == Network_Open)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//**********</span></span><br><span class="line">            state = Network_Close;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == Network_Close)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//..........</span></span><br><span class="line">            state = Network_Connect;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == Network_Connect)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//$$$$$$$$$$</span></span><br><span class="line">            state = Network_Open;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">Operation2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (state == Network_Open)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//**********</span></span><br><span class="line">            state = Network_Connect;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == Network_Close)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//.....</span></span><br><span class="line">            state = Network_Open;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (state == Network_Connect)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//$$$$$$$$$$</span></span><br><span class="line">            state = Network_Close;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">Operation3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“状态变化”模式&quot;&gt;&lt;a href=&quot;#“状态变化”模式&quot; class=&quot;headerlink&quot; title=&quot;“状态变化”模式&quot;&gt;&lt;/a&gt;“状态变化”模式&lt;/h2&gt;&lt;p&gt;在组件构建过程中，某些对象的状态经常面临变化，如何对这些变化进行有效的管理?同时又维持高层模块的稳定?“状态变化”模式为这一问题提供了一种解决方案。&lt;/p&gt;
&lt;h2 id=&quot;典型模式&quot;&gt;&lt;a href=&quot;#典型模式&quot; class=&quot;headerlink&quot; title=&quot;典型模式&quot;&gt;&lt;/a&gt;典型模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）State&lt;/li&gt;
&lt;li&gt;2）Memento</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="C++" scheme="https://notes.camcad.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式17：中介者（Mediator）</title>
    <link href="https://notes.camcad.cn/post/d8b901a7.html"/>
    <id>https://notes.camcad.cn/post/d8b901a7.html</id>
    <published>2021-07-25T10:48:39.000Z</published>
    <updated>2023-07-11T14:46:20.620Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“接口隔离”模式"><a href="#“接口隔离”模式" class="headerlink" title="“接口隔离”模式"></a>“接口隔离”模式</h2><p>在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Facade</li><li>2）Proxy</li><li>3）Adapter</li><li>4）Mediator</li></ul><h1 id="Mediator中介者"><a href="#Mediator中介者" class="headerlink" title="Mediator中介者"></a>Mediator中介者</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件构建过程中，经常会出现多个对象互相关联交互的情况，对象之间常常会维持一种复杂的引用关系，如果遇到一些需要的更改，这种直接的引用关系将面临不断的变化。</li><li>2）在这种情况下，我们可使用一个“中介对象”来管理对象间的关联关系，避免相互交互的对象之间的紧耦合引用关系，从而更好地抵御变化。<span id="more"></span></li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>用一个中介对象来封装（封装变化）一系列的对象交互。中介者使各对象不需要显式的相互引用（编译时依赖-&gt;运行时依赖），从而使其耦合松散（管理变化），而且可以独立地改变它们之间的交互。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071514594439.jpg"><img src="http://image.camcad.cn/2021/07/2021071514594439.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）将多个对象间复杂的关联关系解耦，Mediator模式将多个对象间的控制逻辑进行集中管理，变“多个对象互相关联”为“多个对象和一个中介者关联”，简化了系统的维护,抵御了可能的变化。</li><li>2）随着控制逻辑的复杂化，Mediator具体对象的实现可能相当复杂。这时候可以对Mediator对象进行分解处理。</li><li>3）Facade模式是解耦系统间(单向）的对象关联关系;Mediator模式是解耦系统内各个对象之间(双向)的关联关系。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">中介模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“接口隔离”模式&quot;&gt;&lt;a href=&quot;#“接口隔离”模式&quot; class=&quot;headerlink&quot; title=&quot;“接口隔离”模式&quot;&gt;&lt;/a&gt;“接口隔离”模式&lt;/h2&gt;&lt;p&gt;在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。&lt;/p&gt;
&lt;h2 id=&quot;典型模式&quot;&gt;&lt;a href=&quot;#典型模式&quot; class=&quot;headerlink&quot; title=&quot;典型模式&quot;&gt;&lt;/a&gt;典型模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）Facade&lt;/li&gt;
&lt;li&gt;2）Proxy&lt;/li&gt;
&lt;li&gt;3）Adapter&lt;/li&gt;
&lt;li&gt;4）Mediator&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Mediator中介者&quot;&gt;&lt;a href=&quot;#Mediator中介者&quot; class=&quot;headerlink&quot; title=&quot;Mediator中介者&quot;&gt;&lt;/a&gt;Mediator中介者&lt;/h1&gt;&lt;h2 id=&quot;动机（Motivation）&quot;&gt;&lt;a href=&quot;#动机（Motivation）&quot; class=&quot;headerlink&quot; title=&quot;动机（Motivation）&quot;&gt;&lt;/a&gt;动机（Motivation）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）在软件构建过程中，经常会出现多个对象互相关联交互的情况，对象之间常常会维持一种复杂的引用关系，如果遇到一些需要的更改，这种直接的引用关系将面临不断的变化。&lt;/li&gt;
&lt;li&gt;2）在这种情况下，我们可使用一个“中介对象”来管理对象间的关联关系，避免相互交互的对象之间的紧耦合引用关系，从而更好地抵御变化。</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式16：适配器（Adapter）</title>
    <link href="https://notes.camcad.cn/post/a3de17af.html"/>
    <id>https://notes.camcad.cn/post/a3de17af.html</id>
    <published>2021-07-25T10:47:35.000Z</published>
    <updated>2023-07-11T14:46:20.620Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“接口隔离”模式"><a href="#“接口隔离”模式" class="headerlink" title="“接口隔离”模式"></a>“接口隔离”模式</h2><p>在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。</p><span id="more"></span><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Facade</li><li>2）Proxy</li><li>3）Adapter</li><li>4）Mediator</li></ul><h1 id="Adapter适配器"><a href="#Adapter适配器" class="headerlink" title="Adapter适配器"></a>Adapter适配器</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件系统中，由于应用环境的变化，常常需要将一些现存的对象”放在新的环境中应用，但是新环境要求的接口是这些现存对象所不满足的。</li><li>2）如何应对这种“迁移的变化”?如何既能利用现有对象的良好实现，同时又能满足新的应用环境所要求的接口?</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>将一个类的接口转换成客户希望的另一个接口，Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071313322691.jpg"><img src="http://image.camcad.cn/2021/07/2021071313322691.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）Adapter模式主要应用于“希望复用一些现存的类，但是接口又与复用环境要求不一致的情况”，在遗留代码复用、类库迁移等方面非常有用。</li><li>2）GoF 23定义了两种Adapter模式的实现结构∶对象适配器和类适配器。但类适配器采用“多继承”的实现方式，一般不推荐使用。对象适配器采用“对象组合”的方式，更符合松耦合精神。</li><li>3）Adapter模式可以实现的非常灵活，不必拘泥于Gof23中定义的两种结构。例如，完全可以将Adapter模式中的“现存对象”作为新的接口方法参数，来达到适配的目的。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">适配器模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight c++"><figcaption><span>main_adapter.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;src/adapter.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  std::cout &lt;&lt; FILELINE &lt;&lt; <span class="string">&quot;ubuntu系统,vscode结合cmake、gdb自动化生成脚本示例&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  <span class="function">std::unique_ptr&lt;Player&gt; <span class="title">a</span><span class="params">(<span class="keyword">new</span> Forwards(<span class="string">&quot;张三&quot;</span>))</span></span>;</span><br><span class="line">  a-&gt;<span class="built_in">attack</span>();</span><br><span class="line"></span><br><span class="line">  <span class="function">std::unique_ptr&lt;Player&gt; <span class="title">b</span><span class="params">(<span class="keyword">new</span> Guards(<span class="string">&quot;李四&quot;</span>))</span></span>;</span><br><span class="line">  b-&gt;<span class="built_in">attack</span>();</span><br><span class="line">  a-&gt;<span class="built_in">defense</span>();</span><br><span class="line"></span><br><span class="line">  <span class="function">std::unique_ptr&lt;Player&gt; <span class="title">c</span><span class="params">(<span class="keyword">new</span> Translator(<span class="string">&quot;姚明&quot;</span>))</span></span>;</span><br><span class="line">  c-&gt;<span class="built_in">attack</span>();</span><br><span class="line">  b-&gt;<span class="built_in">defense</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>adapter.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _ADAPTER_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _ADAPTER_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 球员</span></span></span><br><span class="line"><span class="string"><span class="meta">class Player &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">protected:</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  // 进攻</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void attack() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 防守</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void defense() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~Player() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 前锋</span></span></span><br><span class="line"><span class="string"><span class="meta">class Forwards : public Player &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Forwards(std::string name) &#123; this-&gt;m_name = name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 进攻</span></span></span><br><span class="line"><span class="string"><span class="meta">  void attack() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>前锋 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 进攻<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 防守</span></span></span><br><span class="line"><span class="string"><span class="meta">  void defense() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>前锋 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 防守<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 后卫</span></span></span><br><span class="line"><span class="string"><span class="meta">class Guards : public Player &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Guards(std::string name) &#123; this-&gt;m_name = name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 进攻</span></span></span><br><span class="line"><span class="string"><span class="meta">  void attack() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>后卫 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 进攻<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 防守</span></span></span><br><span class="line"><span class="string"><span class="meta">  void defense() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>后卫 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 防守<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 外籍中锋</span></span></span><br><span class="line"><span class="string"><span class="meta">class ForeignCenter &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void setName(std::string name) &#123; this-&gt;m_name = name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void attack() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>外籍中锋 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 进攻<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void defend() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>外籍中锋 <span class="string">&quot; &lt;&lt; this-&gt;m_name &lt;&lt; &quot;</span> 防守<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">              &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">// 翻译者</span></span></span><br><span class="line"><span class="string"><span class="meta">class Translator : public Player &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;ForeignCenter&gt; m_foreignCenter;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Translator(std::string name) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_foreignCenter.reset(new ForeignCenter());</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_foreignCenter-&gt;setName(name);</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 进攻</span></span></span><br><span class="line"><span class="string"><span class="meta">  void attack() override &#123; this-&gt;m_foreignCenter-&gt;attack(); &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  // 防守</span></span></span><br><span class="line"><span class="string"><span class="meta">  void defense() override &#123; this-&gt;m_foreignCenter-&gt;defend(); &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _ADAPTER_H_</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">//目标接口（新接口）</span><br><span class="line">class ITarget&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void process()=0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//遗留接口（老接口）</span><br><span class="line">class IAdaptee&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void foo(int data)=0;</span><br><span class="line">    virtual int bar()=0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//遗留类型</span><br><span class="line">class OldClass: public IAdaptee&#123;</span><br><span class="line">    //....</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//对象适配器</span><br><span class="line">class Adapter: public ITarget&#123; //继承</span><br><span class="line">protected:</span><br><span class="line">    IAdaptee* pAdaptee;//组合</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    Adapter(IAdaptee* pAdaptee)&#123;</span><br><span class="line">        this-&gt;pAdaptee=pAdaptee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual void process()&#123;</span><br><span class="line">        int data=pAdaptee-&gt;bar();</span><br><span class="line">        pAdaptee-&gt;foo(data);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//类适配器</span><br><span class="line">class Adapter: public ITarget,</span><br><span class="line">               protected OldClass&#123; //多继承</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    IAdaptee* pAdaptee=new OldClass();</span><br><span class="line"></span><br><span class="line">    ITarget* pTarget=new Adapter(pAdaptee);</span><br><span class="line">    pTarget-&gt;process();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class stack&#123;</span><br><span class="line">    deqeue container;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class queue&#123;</span><br><span class="line">    deqeue container;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“接口隔离”模式&quot;&gt;&lt;a href=&quot;#“接口隔离”模式&quot; class=&quot;headerlink&quot; title=&quot;“接口隔离”模式&quot;&gt;&lt;/a&gt;“接口隔离”模式&lt;/h2&gt;&lt;p&gt;在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。&lt;/p&gt;</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式15：代理模式（Proxy）</title>
    <link href="https://notes.camcad.cn/post/c80aa8ba.html"/>
    <id>https://notes.camcad.cn/post/c80aa8ba.html</id>
    <published>2021-07-25T10:47:09.000Z</published>
    <updated>2023-07-11T14:46:20.620Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“接口隔离”模式"><a href="#“接口隔离”模式" class="headerlink" title="“接口隔离”模式"></a>“接口隔离”模式</h2><p>在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Facade</li><li>2）Proxy</li><li>3）Adapter</li><li>4）Mediator<span id="more"></span></li></ul><h1 id="Proxy代理模式"><a href="#Proxy代理模式" class="headerlink" title="Proxy代理模式"></a>Proxy代理模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在面向对象系统中，有些对象由于某种原因（比如对象创建的开销很大，或者某些操作需要安全控制，或者需要进程外的访问等），直接访问会给使用者、或者系统结构带来很多麻烦。</li><li>2）如何在不失去透明操作对象的同时来管理&#x2F;控制这些对象特有的复杂性?增加一层间接层是软件开发中常见的解决方式。</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>为其他对象提供一种代理以控制（隔离，使用接口）对这个对象的访问。——《设计模式》Gof</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071312330560.jpg"><img src="http://image.camcad.cn/2021/07/2021071312330560.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）“增加一层间接层”是软件系统中对许多复杂问题的一种常见解决方法。在面向对象系统中，直接使用某些对象会带来很多问题，作为间接层的proxy对象便是解决这一问题的常用手段。</li><li>2）具体proxy设计模式的实现方法、实现粒度都相差很大，有些可能对单个对象做细粒度的控制，如copy-on-write技术，有些可能对组件模块提供抽象代理层,在架构层次对对象做proxy。</li><li>3）Proxy并不一定要求保持接口完整的一致性，只要能够实现间接控制，有时候损及一些透明性是可以接受的。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">代理模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight c++"><figcaption><span>main_proxy.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;./src/proxy.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  std::shared_ptr&lt;Schoolgirl&gt; sg = std::<span class="built_in">make_shared</span>&lt;Schoolgirl&gt;(<span class="string">&quot;li li&quot;</span>);</span><br><span class="line">  std::shared_ptr&lt;Pursuit&gt; pur = std::<span class="built_in">make_shared</span>&lt;Pursuit&gt;(sg);</span><br><span class="line">  std::shared_ptr&lt;GiveGift&gt; gg = std::<span class="built_in">make_shared</span>&lt;Proxy&gt;(pur);</span><br><span class="line"></span><br><span class="line">  gg-&gt;<span class="built_in">giveDolls</span>();</span><br><span class="line">  gg-&gt;<span class="built_in">giveFlowers</span>();</span><br><span class="line">  gg-&gt;<span class="built_in">giveChocolate</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>proxy.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _PROXY_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _PROXY_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Schoolgirl &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string m_name;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Schoolgirl() &#123; this-&gt;m_name = &quot;</span><span class="string">&quot;; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  Schoolgirl(std::string name) &#123; this-&gt;m_name = name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  std::string getName() &#123; return this-&gt;m_name; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class GiveGift &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void giveDolls() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void giveFlowers() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual void giveChocolate() = 0;</span></span></span><br><span class="line"><span class="string"><span class="meta">  virtual ~GiveGift() &#123;&#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Pursuit : public GiveGift &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::shared_ptr&lt;Schoolgirl&gt; m_schoolgirl;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Pursuit() &#123; this-&gt;m_schoolgirl = nullptr; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  Pursuit(std::shared_ptr&lt;Schoolgirl&gt; schoolgirl) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;m_schoolgirl = schoolgirl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveDolls() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_schoolgirl != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_schoolgirl-&gt;getName() &lt;&lt; &quot;</span>: give dolls<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveFlowers() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_schoolgirl != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_schoolgirl-&gt;getName() &lt;&lt; &quot;</span>: give flowers<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveChocolate() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_schoolgirl != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      std::cout &lt;&lt; FILELINE &lt;&lt; this-&gt;m_schoolgirl-&gt;getName()</span></span></span><br><span class="line"><span class="string"><span class="meta">                &lt;&lt; &quot;</span>: give chocolate<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Proxy : public GiveGift &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::shared_ptr&lt;Pursuit&gt; m_pursuit;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  Proxy() &#123; this-&gt;m_pursuit = nullptr; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  Proxy(std::shared_ptr&lt;Pursuit&gt; pursuit) &#123; this-&gt;m_pursuit = pursuit; &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveDolls() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_pursuit != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      this-&gt;m_pursuit-&gt;giveDolls();</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveFlowers() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_pursuit != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      this-&gt;m_pursuit-&gt;giveFlowers();</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void giveChocolate() override &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    if (this-&gt;m_pursuit != nullptr) &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">      this-&gt;m_pursuit-&gt;giveChocolate();</span></span></span><br><span class="line"><span class="string"><span class="meta">    &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // __PROXY_H_</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><h4 id="client-cpp"><a href="#client-cpp" class="headerlink" title="client.cpp"></a>client.cpp</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class ISubject&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void process();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class RealSubject: public ISubject&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void process()&#123;</span><br><span class="line">        //....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ClientApp&#123;</span><br><span class="line"></span><br><span class="line">    ISubject* subject;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    ClientApp()&#123;</span><br><span class="line">        subject=new RealSubject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void DoTask()&#123;</span><br><span class="line">        //...</span><br><span class="line">        subject-&gt;process();</span><br><span class="line"></span><br><span class="line">        //....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="proxy-cpp"><a href="#proxy-cpp" class="headerlink" title="proxy.cpp"></a>proxy.cpp</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class ISubject&#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void process();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//Proxy的设计</span><br><span class="line">class SubjectProxy: public ISubject&#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    virtual void process()&#123;</span><br><span class="line">        //对RealSubject的一种间接访问</span><br><span class="line">        //....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class ClientApp&#123;</span><br><span class="line"></span><br><span class="line">    ISubject* subject;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    ClientApp()&#123;</span><br><span class="line">        subject=new SubjectProxy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void DoTask()&#123;</span><br><span class="line">        //...</span><br><span class="line">        subject-&gt;process();</span><br><span class="line"></span><br><span class="line">        //....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“接口隔离”模式&quot;&gt;&lt;a href=&quot;#“接口隔离”模式&quot; class=&quot;headerlink&quot; title=&quot;“接口隔离”模式&quot;&gt;&lt;/a&gt;“接口隔离”模式&lt;/h2&gt;&lt;p&gt;在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。&lt;/p&gt;
&lt;h2 id=&quot;典型模式&quot;&gt;&lt;a href=&quot;#典型模式&quot; class=&quot;headerlink&quot; title=&quot;典型模式&quot;&gt;&lt;/a&gt;典型模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）Facade&lt;/li&gt;
&lt;li&gt;2）Proxy&lt;/li&gt;
&lt;li&gt;3）Adapter&lt;/li&gt;
&lt;li&gt;4）Mediator</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式14：门面模式（Facade）</title>
    <link href="https://notes.camcad.cn/post/6600c949.html"/>
    <id>https://notes.camcad.cn/post/6600c949.html</id>
    <published>2021-07-24T20:58:12.000Z</published>
    <updated>2023-07-11T14:46:20.620Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h2 id="“接口隔离”模式"><a href="#“接口隔离”模式" class="headerlink" title="“接口隔离”模式"></a>“接口隔离”模式</h2><p>在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Facade</li><li>2）Proxy</li><li>3）Adapter</li><li>4）Mediator<span id="more"></span></li></ul><h1 id="Facade门面模式"><a href="#Facade门面模式" class="headerlink" title="Facade门面模式"></a>Facade门面模式</h1><h2 id="系统间耦合的复杂度"><a href="#系统间耦合的复杂度" class="headerlink" title="系统间耦合的复杂度"></a>系统间耦合的复杂度</h2><p><a href="http://image.camcad.cn/2021/07/2021071213401496.jpg"><img src="http://image.camcad.cn/2021/07/2021071213401496.jpg"></a></p><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）上述A方案的问题在于组件的客户和组件中各种复杂的子系统有了过多的耦合，随着外部客户程序和各子系统的演化，这种过多的耦 合面临很多变化的挑战。</li><li>2）如何简化外部客户程序和系统间的交互接口？如何将外部客户程序的演化和内部子系统的变化之间的依赖相互解耦？</li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>为子系统中的一组接口提供一个一致（稳定）的界面Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用（复用）。——《设计模式》GoF</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/202107121346375.jpg"><img src="http://image.camcad.cn/2021/07/202107121346375-1024x388.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）从客户程序的角度来看，Facade模式简化了整个组件系统的接口，对于组件内部与外部客户程序来说，达到了一种“解耦”的效果——内部子系统的任何变化不会影响到Facade接口的变化。</li><li>2）Facade设计模式更注重从架构的层次去看整个系统，而不是单个类的层次。Facade很多时候更是一种架构设计模式。</li><li>3）Facade设计模式并非一个集装箱，可以任意地放进任何多个对象。Facade模式中组件的内部应该是“相互耦合关系比较大的一系列组件”，而不是一个简单的功能集合。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight c++"><figcaption><span>main_facade.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;src/facade.cpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::unique_ptr&lt;Facade&gt; <span class="title">f</span><span class="params">(<span class="keyword">new</span> Facade())</span></span>;</span><br><span class="line">    f-&gt;<span class="built_in">methodA</span>();</span><br><span class="line">    f-&gt;<span class="built_in">methodB</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>facade.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                     Copyright (c) 2023 camcad.cn</span></span><br><span class="line"><span class="comment">                          All rights reserved</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _FACADE_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _FACADE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER) <span class="comment">// windows</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;\\&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// linux</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __EMMETFILE__                                                          \</span></span><br><span class="line"><span class="meta">  (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) ? (strrchr(__FILE__, <span class="string">&#x27;/&#x27;</span>) + 1) : __FILE__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILELINE                                                               \</span></span><br><span class="line"><span class="meta">  <span class="string">&quot;file: &quot;</span> &lt;&lt; __EMMETFILE__ &lt;&lt; <span class="string">&quot;, function: &quot;</span> &lt;&lt; __FUNCTION__                  \</span></span><br><span class="line"><span class="meta">           <span class="string">&lt;&lt; &quot;, line: &quot; &lt;&lt; __LINE__ &lt;&lt; &quot; --&gt;</span> <span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class SubSystemOne &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodOne() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>Subsystem method one<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class SubSystemTwo &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodTwo() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>Subsystem method two<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class SubSystemThree &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodThree() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>Subsystem method Three<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class SubSystemFour &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodFour() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; FILELINE &lt;&lt; &quot;</span>Subsystem method Four<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">class Facade &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;SubSystemOne&gt; one;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;SubSystemTwo&gt; two;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;SubSystemThree&gt; three;</span></span></span><br><span class="line"><span class="string"><span class="meta">  std::unique_ptr&lt;SubSystemFour&gt; four;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">public:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodA() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; &quot;</span>=== methodA ===<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;one-&gt;methodOne();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;two-&gt;methodTwo();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;four-&gt;methodFour();</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; &quot;</span>\n<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  void methodB() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; &quot;</span>=== methodB ===<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;one-&gt;methodOne();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;three-&gt;methodThree();</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">    std::cout &lt;&lt; &quot;</span>\n<span class="string">&quot; &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">  Facade() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;init();</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;one.reset(new SubSystemOne());</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;two.reset(new SubSystemTwo());</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;three.reset(new SubSystemThree());</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;four.reset(new SubSystemFour());</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">private:</span></span></span><br><span class="line"><span class="string"><span class="meta">  void init() &#123;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;one = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;two = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;three = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">    this-&gt;four = nullptr;</span></span></span><br><span class="line"><span class="string"><span class="meta">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="meta">&#125;;</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br><span class="line"><span class="string"><span class="meta">#endif // _FACADE_H_</span></span></span><br><span class="line"><span class="string"><span class="meta"></span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;“接口隔离”模式&quot;&gt;&lt;a href=&quot;#“接口隔离”模式&quot; class=&quot;headerlink&quot; title=&quot;“接口隔离”模式&quot;&gt;&lt;/a&gt;“接口隔离”模式&lt;/h2&gt;&lt;p&gt;在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题，甚至根本无法实现。采用添加一层间接（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。&lt;/p&gt;
&lt;h2 id=&quot;典型模式&quot;&gt;&lt;a href=&quot;#典型模式&quot; class=&quot;headerlink&quot; title=&quot;典型模式&quot;&gt;&lt;/a&gt;典型模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）Facade&lt;/li&gt;
&lt;li&gt;2）Proxy&lt;/li&gt;
&lt;li&gt;3）Adapter&lt;/li&gt;
&lt;li&gt;4）Mediator</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="C++" scheme="https://notes.camcad.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++设计模式13：享元模式（Flyweight）</title>
    <link href="https://notes.camcad.cn/post/d3dd74d6.html"/>
    <id>https://notes.camcad.cn/post/d3dd74d6.html</id>
    <published>2021-07-24T20:57:26.000Z</published>
    <updated>2023-07-11T14:46:20.620Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://image.camcad.cn/2021/07/2021072207573188.png"><img src="http://image.camcad.cn/2021/07/2021072207573188-1024x696.png"></a></p><h1 id="”对象性能“模式"><a href="#”对象性能“模式" class="headerlink" title="”对象性能“模式"></a>”对象性能“模式</h1><p>面向对象很好地解决了 抽象” 的问题，但是必不可免地要付出一定的代价。 对千通常情况来讲，面向对象的成本大都可以忽略不计。 但是某些情况，面向对象所带来的成本必须谨慎处理。</p><h2 id="典型模式"><a href="#典型模式" class="headerlink" title="典型模式"></a>典型模式</h2><ul><li>1）Singleton</li><li>2）Flyweight</li></ul><h1 id="Flyweight-享元模式"><a href="#Flyweight-享元模式" class="headerlink" title="Flyweight 享元模式"></a>Flyweight 享元模式</h1><h2 id="动机（Motivation）"><a href="#动机（Motivation）" class="headerlink" title="动机（Motivation）"></a>动机（Motivation）</h2><ul><li>1）在软件系统采用纯粹对象方案的问题在千大量细粒度的对象会很快充斥在系统中，从而带来很高的运行时代价——主要指内存需求方面的代价。</li><li>2）如何在避免大量细粒度对象问题的同时，让外部客户程序仍然能够透明地使用面向对象的方式来进行操作？<span id="more"></span></li></ul><h2 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h2><p>运用共享技术有效地支持大量细粒度的对象。——《设计模式》Gof</p><h2 id="结构（Structure）"><a href="#结构（Structure）" class="headerlink" title="结构（Structure）"></a>结构（Structure）</h2><p><a href="http://image.camcad.cn/2021/07/2021071212393618.jpg"><img src="http://image.camcad.cn/2021/07/2021071212393618.jpg"></a></p><h2 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h2><ul><li>1）面向对象很好地解决了抽象性的问题，但是作为一个运行在机器中程序实体，我们需要考虑对象的代价问题。Flyweight主要解决面向对象的代价问题，一般不触及面向对象的抽象性问题。</li><li>2）Flyweightw采用对象共享的做法来降低系统中对象的个数，从而降低细粒对象给系统带来的内存压力。在具体实现方面，要注意对象状态的处理。</li><li>3）对象的数量太大从而导致对象内存开销加大——什么样的数量算大？这需要我们仔细的根据具体应用情况进行评估，而不能凭空臆断。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">享元模式</a></li><li class="tab"><a href="#tab-2">普通模式</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"></div><div class="tab-pane" id="tab-2"><h2 id="享元模式-DEMO"><a href="#享元模式-DEMO" class="headerlink" title="享元模式_DEMO"></a>享元模式_DEMO</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class Font &#123;</span><br><span class="line">private:</span><br><span class="line"></span><br><span class="line">    //unique object key</span><br><span class="line">    string key;</span><br><span class="line"></span><br><span class="line">    //object state</span><br><span class="line">    //....</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    Font(const string&amp; key)&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class FontFactory&#123;</span><br><span class="line">private:</span><br><span class="line">    map&lt;string,Font* &gt; fontPool;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    Font* GetFont(const string&amp; key)&#123;</span><br><span class="line"></span><br><span class="line">        map&lt;string,Font*&gt;::iterator item=fontPool.find(key);</span><br><span class="line"></span><br><span class="line">        if(item!=footPool.end())&#123;</span><br><span class="line">            return fontPool[key];</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            Font* font = new Font(key);</span><br><span class="line">            fontPool[key]= font;</span><br><span class="line">            return font;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void clear()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://image.camcad.cn/2021/07/2021072207573188.png&quot;&gt;&lt;img src=&quot;http://image.camcad.cn/2021/07/2021072207573188-1024x696.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;”对象性能“模式&quot;&gt;&lt;a href=&quot;#”对象性能“模式&quot; class=&quot;headerlink&quot; title=&quot;”对象性能“模式&quot;&gt;&lt;/a&gt;”对象性能“模式&lt;/h1&gt;&lt;p&gt;面向对象很好地解决了 抽象” 的问题，但是必不可免地要付出一定的代价。 对千通常情况来讲，面向对象的成本大都可以忽略不计。 但是某些情况，面向对象所带来的成本必须谨慎处理。&lt;/p&gt;
&lt;h2 id=&quot;典型模式&quot;&gt;&lt;a href=&quot;#典型模式&quot; class=&quot;headerlink&quot; title=&quot;典型模式&quot;&gt;&lt;/a&gt;典型模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）Singleton&lt;/li&gt;
&lt;li&gt;2）Flyweight&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Flyweight-享元模式&quot;&gt;&lt;a href=&quot;#Flyweight-享元模式&quot; class=&quot;headerlink&quot; title=&quot;Flyweight 享元模式&quot;&gt;&lt;/a&gt;Flyweight 享元模式&lt;/h1&gt;&lt;h2 id=&quot;动机（Motivation）&quot;&gt;&lt;a href=&quot;#动机（Motivation）&quot; class=&quot;headerlink&quot; title=&quot;动机（Motivation）&quot;&gt;&lt;/a&gt;动机（Motivation）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1）在软件系统采用纯粹对象方案的问题在千大量细粒度的对象会很快充斥在系统中，从而带来很高的运行时代价——主要指内存需求方面的代价。&lt;/li&gt;
&lt;li&gt;2）如何在避免大量细粒度对象问题的同时，让外部客户程序仍然能够透明地使用面向对象的方式来进行操作？</summary>
    
    
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/categories/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++设计模式" scheme="https://notes.camcad.cn/tags/C-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
