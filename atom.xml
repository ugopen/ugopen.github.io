<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蚂蚁Emmet</title>
  
  <subtitle>逆境求生存，顺境求发展</subtitle>
  <link href="https://notes.camcad.cn/atom.xml" rel="self"/>
  
  <link href="https://notes.camcad.cn/"/>
  <updated>2023-04-05T14:42:32.039Z</updated>
  <id>https://notes.camcad.cn/</id>
  
  <author>
    <name>蚂蚁Emmet</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++提高编程50：STL常用容器（list容器-list赋值和交换）</title>
    <link href="https://notes.camcad.cn/post/95bac996.html"/>
    <id>https://notes.camcad.cn/post/95bac996.html</id>
    <published>2020-07-27T12:50:09.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-7-3-list赋值和交换"><a href="#3-7-3-list赋值和交换" class="headerlink" title="3.7.3 list赋值和交换"></a>3.7.3 list赋值和交换</h2><p><strong>功能描述：</strong><br>给list容器进行赋值，以及交换list容器。 </p><p><strong>函数原型：</strong></p><ul><li><code>assign(beg,end);</code> &#x2F;&#x2F;将beg,end区间中的数据拷贝赋值给本身</li><li><code>assign(n,elem);</code> &#x2F;&#x2F;将n个elem拷贝赋值给本身</li><li><code>list &amp;operator=(const list &amp;lit);</code> &#x2F;&#x2F;重载等号操作符</li><li><code>swap(lit);</code> &#x2F;&#x2F;将lit与本身的元素互换</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;list&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> list&lt;<span class="built_in">int</span>&gt; &amp;l</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (list&lt;<span class="built_in">int</span>&gt;::const_iterator it = l.begin(); it != l.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        L1.push_back(<span class="number">10</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    printList(<span class="string">&quot;L1初始化&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//assign(beg,end); //将[beg,end]区间中的数据拷贝赋值给本身</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L2;</span><br><span class="line">    L2.assign(L1.begin(), L1.end());</span><br><span class="line">    printList(<span class="string">&quot;L2初始化&quot;</span>, L2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//assign(n,elem); //将 n 个 elem 拷贝赋值给本身</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L3;</span><br><span class="line">    L3.assign(<span class="number">8</span>, <span class="number">101</span>);</span><br><span class="line">    printList(<span class="string">&quot;L3初始化&quot;</span>, L3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list &amp;operator=(const list &amp;lit); //重载等号操作符</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L4;</span><br><span class="line">    L4 = L1;</span><br><span class="line">    printList(<span class="string">&quot;L4初始化&quot;</span>, L4);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//swap(lit); //将 lit 与本身的元素互换</span></span><br><span class="line">    L2.swap(L3);</span><br><span class="line">    printList(<span class="string">&quot;L2互换后 初始化&quot;</span>, L2);</span><br><span class="line">    printList(<span class="string">&quot;L3互换后 初始化&quot;</span>, L3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/202006280812082-1024x335.jpg"></p><h3 id="总结：list赋值和交换操作能够灵活运用即可。"><a href="#总结：list赋值和交换操作能够灵活运用即可。" class="headerlink" title="总结：list赋值和交换操作能够灵活运用即可。"></a>总结：list赋值和交换操作能够灵活运用即可。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（list容器-list赋值和交换）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程49：STL常用容器（list容器-list构造函数）</title>
    <link href="https://notes.camcad.cn/post/dd0dea70.html"/>
    <id>https://notes.camcad.cn/post/dd0dea70.html</id>
    <published>2020-07-27T06:39:31.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-7-2-list构造函数"><a href="#3-7-2-list构造函数" class="headerlink" title="3.7.2 list构造函数"></a>3.7.2 list构造函数</h2><p><strong>功能描述：</strong><br>创建list容器 </p><p><strong>函数原型：</strong></p><ul><li><code>list&lt;T&gt;lit;</code> &#x2F;&#x2F;list采用模板类实现，对象的默认构造形式。</li><li><code>list(beg,end);</code> &#x2F;&#x2F;构造函数将beg,end区间中的元素拷贝给本身。</li><li><code>list(n,elem);</code> &#x2F;&#x2F;构造函数将n个elem拷贝给本身。</li><li><code>list(const list &amp;lit);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include&lt;list&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> list&lt;<span class="built_in">int</span>&gt; &amp;l</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (list&lt;<span class="built_in">int</span>&gt;::const_iterator it = l.begin(); it != l.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list&lt;T&gt;lit; //list采用模板类实现，对象的默认构造形式。</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt; L1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        L1.push_back(<span class="number">10</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    printList(<span class="string">&quot;L1 初始化&quot;</span>, L1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list(beg, end); //构造函数将[beg,end]区间中的元素拷贝给本身。</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L2(L1.begin(), L1.end());</span><br><span class="line">    printList(<span class="string">&quot;L2 初始化&quot;</span>, L2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list(n,elem); //构造函数将n个elem拷贝给本身。</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L3(<span class="number">8</span>, <span class="number">110</span>);</span><br><span class="line">    printList(<span class="string">&quot;L3 初始化&quot;</span>, L3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list(const list &amp;lit); //拷贝构造函数</span></span><br><span class="line">    list&lt;<span class="built_in">int</span>&gt;L4(L1);</span><br><span class="line">    printList(<span class="string">&quot;L4 初始化&quot;</span>, L4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结：list构造方式同其他几个STL常用容器，熟练掌握即可。"><a href="#总结：list构造方式同其他几个STL常用容器，熟练掌握即可。" class="headerlink" title="总结：list构造方式同其他几个STL常用容器，熟练掌握即可。"></a>总结：list构造方式同其他几个STL常用容器，熟练掌握即可。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（list容器-list构造函数）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程48：STL常用容器（list容器-list基本概念）</title>
    <link href="https://notes.camcad.cn/post/61296b91.html"/>
    <id>https://notes.camcad.cn/post/61296b91.html</id>
    <published>2020-07-27T06:39:19.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-7-list容器"><a href="#3-7-list容器" class="headerlink" title="3.7 list容器"></a>3.7 list容器</h1><h2 id="3-7-1-list基本容器"><a href="#3-7-1-list基本容器" class="headerlink" title="3.7.1 list基本容器"></a>3.7.1 list基本容器</h2><p><strong>功能：</strong>将数据进行链式存储 <strong>链表</strong>（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的。</p><p>链表的组成：链表由一系列<strong>结点</strong>组成。</p><p>结点的组成：一个是存储数据元素的<strong>数据域</strong>，另一个是存储下一个结点地址的<strong>指针域</strong>。</p><p>STL中的链表是一个双向循环链表：<br><img src="http://image.camcad.cn/2020/06/2020062807024439.jpg"><br>由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于<strong>双向迭代器</strong>。</p><p><strong>list的优点：</strong></p><ul><li>采用动态存储分配，不会造成内存浪费和溢出</li><li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素。</li><li>list有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器的失效，这丰vector是不成立的。</li></ul><p><strong>list的缺点：</strong></p><ul><li>链表灵活，但是空间（指针域）和时间（遍历）额外耗费较大。</li></ul><h3 id="总结：STL中list和vector是两个最常用被使用的容器，各有优缺点。"><a href="#总结：STL中list和vector是两个最常用被使用的容器，各有优缺点。" class="headerlink" title="总结：STL中list和vector是两个最常用被使用的容器，各有优缺点。"></a>总结：STL中list和vector是两个最常用被使用的容器，各有优缺点。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（list容器-list基本概念）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程47：STL常用容器（queue容器-queue常用接口）</title>
    <link href="https://notes.camcad.cn/post/1d8639a1.html"/>
    <id>https://notes.camcad.cn/post/1d8639a1.html</id>
    <published>2020-07-26T19:26:31.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-6-2-queue常用接口"><a href="#3-6-2-queue常用接口" class="headerlink" title="3.6.2 queue常用接口"></a>3.6.2 queue常用接口</h2><p>功能描述：栈容器常用的对外接口</p><p><strong>构造函数：</strong></p><ul><li><code>queue&lt;T&gt; que;</code> &#x2F;&#x2F;queue采用模板类实现，queue对象的默认构造形式</li><li><code>queue(const queue &amp;que);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><p><strong>赋值操作：</strong></p><ul><li><code>queue &amp;operator=(const queue &amp;que);</code> &#x2F;&#x2F;重载等号操作符</li></ul><p><strong>数据存取：</strong></p><ul><li><code>push(elem);</code> &#x2F;&#x2F;往队尾添加元素</li><li><code>pop( );</code> &#x2F;&#x2F;从队头移除第一个元素</li><li><code>back( );</code> &#x2F;&#x2F;返回最后一个元素</li><li><code>front( );</code> &#x2F;&#x2F;返回第一个元素</li></ul><p><strong>大小操作：</strong></p><ul><li><code>enoty( );</code> &#x2F;&#x2F;判断堆栈是否为空</li><li><code>size( );</code> &#x2F;&#x2F;返回栈的大小</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;queue&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    queue&lt;<span class="built_in">int</span>&gt;q;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//往队尾添加元素</span></span><br><span class="line">    q.push(<span class="number">120</span>);</span><br><span class="line">    q.push(<span class="number">110</span>);</span><br><span class="line">    q.push(<span class="number">119</span>);</span><br><span class="line">    q.push(<span class="number">112</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回最后一个元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;q 返回最后一个元素：&quot;</span> &lt;&lt; q.back() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回第一个元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;q 返回第一个元素：&quot;</span> &lt;&lt; q.front() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;返回栈的大小：&quot;</span> &lt;&lt; q.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断堆栈是否为空 返回元素</span></span><br><span class="line">    <span class="keyword">while</span> (! q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//返回第一个元素</span></span><br><span class="line">        cout &lt;&lt; q.front() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从队头移除第一个元素</span></span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;返回栈的大小：&quot;</span> &lt;&lt; q.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062803254435-1024x381.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>入队（push）</li><li>出队（pop）</li><li>返回队头元素（front）</li><li>返回队尾元素（back）</li><li>判断队是否为空（empty）</li><li>返回队列大小（size）</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（queue容器-queue常用接口）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程46：STL常用容器（queue容器-queue基本概念）</title>
    <link href="https://notes.camcad.cn/post/8813420.html"/>
    <id>https://notes.camcad.cn/post/8813420.html</id>
    <published>2020-07-26T15:05:53.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-6-queue容器"><a href="#3-6-queue容器" class="headerlink" title="3.6 queue容器"></a>3.6 queue容器</h1><h2 id="3-6-1-queue基本概念"><a href="#3-6-1-queue基本概念" class="headerlink" title="3.6.1 queue基本概念"></a>3.6.1 queue基本概念</h2><p><strong>概念：</strong>Queue是一种<strong>先进先出</strong>（First In First Out,FIFO）的数据结构，它有两个出口。<br><img src="http://image.camcad.cn/2020/06/202006280251581.jpg"><br>队列容器允许从一端新增元素，从另一端移除元素。 队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为 队列中进数据称为—<strong>入队</strong><code>push</code> 队列中出数据称为—<strong>出队</strong><code>pop</code></p><p><strong>生活中的队列：</strong><br><img src="http://image.camcad.cn/2020/06/2020062802565955.jpg"></p>]]></content>
    
    
    <summary type="html">STL常用容器（queue容器-queue基本概念）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程45：STL常用容器（stack容器-stack常用接口）</title>
    <link href="https://notes.camcad.cn/post/40b5411f.html"/>
    <id>https://notes.camcad.cn/post/40b5411f.html</id>
    <published>2020-07-26T15:03:37.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-5-2-stack常用接口"><a href="#3-5-2-stack常用接口" class="headerlink" title="3.5.2 stack常用接口"></a>3.5.2 stack常用接口</h2><p>功能描述：栈容器常用的对外接口</p><p><strong>构造函数：</strong><br><code>stack&lt;T&gt; stk;</code> &#x2F;&#x2F;stack采用模板类实现，stack对象的默认构造形式。<br><code>stack(const stack &amp;stk);</code> &#x2F;&#x2F;拷贝构造函数 </p><p><strong>赋值操作：</strong></p><ul><li><code>stack &amp;operator=（const stack &amp;stk);</code> &#x2F;&#x2F;重载等号操作符</li></ul><p><strong>数据存取：</strong></p><ul><li><code>push(elem);</code> &#x2F;&#x2F;向栈顶添加元素</li><li><code>pop( );</code> &#x2F;&#x2F;从栈顶移除第一个元素</li><li><code>top( );</code> &#x2F;&#x2F;返回栈顶元素</li></ul><p><strong>大小操作：</strong></p><ul><li><code>empty( );</code> &#x2F;&#x2F;判断堆栈是否为空</li><li><code>size( );</code> &#x2F;&#x2F;返回栈的大小</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;stack&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    stack&lt;<span class="built_in">int</span>&gt;stk1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向栈顶添加元素</span></span><br><span class="line">    stk1.push(<span class="number">110</span>);</span><br><span class="line">    stk1.push(<span class="number">120</span>);</span><br><span class="line">    stk1.push(<span class="number">119</span>);</span><br><span class="line">    stk1.push(<span class="number">192</span>);</span><br><span class="line"></span><br><span class="line">    stack&lt;<span class="built_in">int</span>&gt;stk;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载等号操作符</span></span><br><span class="line">    stk = stk1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回栈的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;栈的大小为：&quot;</span> &lt;&lt; stk.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断堆栈是否为空 访问元素</span></span><br><span class="line">    <span class="keyword">while</span> (!stk.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//返回栈顶元素</span></span><br><span class="line">        cout &lt;&lt; stk.top() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从栈顶移除第一个元素</span></span><br><span class="line">        stk.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回栈的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;栈的大小为：&quot;</span> &lt;&lt; stk.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062802320475-1024x368.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>入栈（push）</li><li>出栈（pop）</li><li>返回栈顶（top）</li><li>判断栈是否为空（empty）</li><li>返回栈大小（size）</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（stack容器-stack常用接口）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程44：STL常用容器（stack容器-stack基本概念）</title>
    <link href="https://notes.camcad.cn/post/55b24c9e.html"/>
    <id>https://notes.camcad.cn/post/55b24c9e.html</id>
    <published>2020-07-26T13:00:05.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-5-stack容器"><a href="#3-5-stack容器" class="headerlink" title="3.5 stack容器"></a>3.5 stack容器</h1><h2 id="3-5-1-stack基本概念"><a href="#3-5-1-stack基本概念" class="headerlink" title="3.5.1 stack基本概念"></a>3.5.1 stack基本概念</h2><p><strong>概念：</strong>stack是一种<strong>先进后出</strong>（First In Last Out,FILO）和数据结构，它只有一个出口。<br><a href="http://image.camcad.cn/2020/06/2020062801573083.jpg"><img src="http://image.camcad.cn/2020/06/2020062801573083.jpg"></a> </p><p><strong>生活中的栈：</strong><br><img src="http://image.camcad.cn/2020/06/2020062802000455.jpg"></p>]]></content>
    
    
    <summary type="html">STL常用容器（stack容器-stack基本概念）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程43：STL常用容器（案例-评委打分）</title>
    <link href="https://notes.camcad.cn/post/39e2ef53.html"/>
    <id>https://notes.camcad.cn/post/39e2ef53.html</id>
    <published>2020-07-26T12:40:13.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-4-案例-评委打分"><a href="#3-4-案例-评委打分" class="headerlink" title="3.4 案例-评委打分"></a>3.4 案例-评委打分</h1><h2 id="3-4-1-案例描述"><a href="#3-4-1-案例描述" class="headerlink" title="3.4.1 案例描述"></a>3.4.1 案例描述</h2><p>有5名选手：选手ABCDE，10个评委分别对每一名选手打分，去除评委中最高分、最低分，取每个选手平均分打印出来。</p><h2 id="3-4-2-实现步骤"><a href="#3-4-2-实现步骤" class="headerlink" title="3.4.2 实现步骤"></a>3.4.2 实现步骤</h2><ul><li>1.创建五名选手，放到vector容器中</li><li>2.遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分存到deque容器中</li><li>3.sort算法对deque容器中分数排序，去除最高分和最低分</li><li>4.deque容器遍历一遍，累加总分</li><li>5.获取平均分</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;deque&gt;</span></span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include &lt;ctime&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;algorithm&gt;  //标准算法 头文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="built_in">int</span> score)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> m_Name;  <span class="comment">//姓名</span></span><br><span class="line">    <span class="built_in">int</span> m_Score;    <span class="comment">//平均分</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建选择</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createPerson</span>(<span class="params">vector&lt;Person&gt; &amp;v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> nameNnm = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> name = <span class="string">&quot;选手&quot;</span>;</span><br><span class="line">        name += nameNnm[i];</span><br><span class="line"></span><br><span class="line">        <span class="function">Person <span class="title">p</span>(<span class="params">name, <span class="number">0</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将创建的Person对象，放入到容器中</span></span><br><span class="line">        v.push_back(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//评委打分</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setScore</span>(<span class="params">vector&lt;Person&gt; &amp;v, <span class="keyword">const</span> <span class="built_in">int</span> len</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//添加随机数种子，利用当前系统时间生成随机数，防止每次随机数都一样</span></span><br><span class="line">    srand((unsigned <span class="built_in">int</span>)time(NULL));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取五名选手</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Person&gt;::iterator vit = v.begin(); vit != v.end(); vit++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将评委的分数 放入到deque容器中</span></span><br><span class="line">        deque&lt;<span class="built_in">int</span>&gt;d;</span><br><span class="line">        <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//1、系统生成随机数</span></span><br><span class="line">            <span class="built_in">int</span> score = rand() % <span class="number">41</span> + <span class="number">60</span>;    <span class="comment">//rand() % 41 + 60 生成 0 + 60 ~ 40 + 60 随机数</span></span><br><span class="line">            d.push_back(score);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//排序升序</span></span><br><span class="line">        sort(d.begin(), d.end());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//去除最高分</span></span><br><span class="line">        d.pop_back();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//去除最低分</span></span><br><span class="line">        d.pop_front();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//求取平均分</span></span><br><span class="line">        <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (deque&lt;<span class="built_in">int</span>&gt;::iterator dit = d.begin(); dit != d.end(); dit++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += *dit;    <span class="comment">//累加每个评委的分数</span></span><br><span class="line">        &#125;</span><br><span class="line">        vit-&gt;m_Score = sum / d.size();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取平均分</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showScore</span>(<span class="params">vector&lt;Person&gt; &amp;v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Person&gt;::iterator vit = v.begin(); vit != v.end(); vit++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; vit-&gt;m_Name &lt;&lt; <span class="string">&quot; 平均分：&quot;</span> &lt;&lt; vit-&gt;m_Score &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//1.创建五名选手，放到vector容器中</span></span><br><span class="line">    vector&lt;Person&gt;v;</span><br><span class="line">    createPerson(v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分存到deque容器中</span></span><br><span class="line">    <span class="built_in">int</span> len = <span class="number">10</span>;</span><br><span class="line">    setScore(v, len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.获取平均分</span></span><br><span class="line">    showScore(v);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062711492377-1024x396.jpg"></p>]]></content>
    
    
    <summary type="html">STL常用容器（案例-评委打分）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程42：STL常用容器（deque容器-deque排序）</title>
    <link href="https://notes.camcad.cn/post/f71fb165.html"/>
    <id>https://notes.camcad.cn/post/f71fb165.html</id>
    <published>2020-07-25T21:37:01.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-3-7-deque排序"><a href="#3-3-7-deque排序" class="headerlink" title="3.3.7 deque排序"></a>3.3.7 deque排序</h2><p><strong>功能描述：</strong><br>利用算法实现对deque容器进行排序 </p><p><strong>算法：</strong></p><ul><li><code>sort(iterator beg, iterator end)</code> &#x2F;&#x2F;对beg和end区间内元素进行排序。</li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码:"></a>示例代码:</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;deque&gt;</span></span><br><span class="line"><span class="meta">#include &lt;ctime&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &lt;algorithm&gt;  //标准算法 头文件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> m_size 15</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDeque</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> deque&lt;<span class="built_in">int</span>&gt; &amp;d</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (deque&lt;<span class="built_in">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//添加随机数种子，利用当前系统时间生成随机数，防止每次随机数都一样</span></span><br><span class="line">    srand((unsigned <span class="built_in">int</span>)time(NULL));</span><br><span class="line"></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; m_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//1、系统生成随机数</span></span><br><span class="line">        <span class="built_in">int</span> iNum = rand() % <span class="number">100</span> + <span class="number">1</span>;    <span class="comment">//rand() % 100 + 1 生成 0 + 1 ~ 99 + 1 随机数</span></span><br><span class="line"></span><br><span class="line">        d1.push_back(iNum);</span><br><span class="line">    &#125;</span><br><span class="line">    printDeque(<span class="string">&quot;d1 初始化&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对beg和end区间内元素进行排序。</span></span><br><span class="line">    <span class="comment">//对于支持随机访问的迭代器的容器，都可以利用sort算法直接对其进行排序</span></span><br><span class="line">    sort(d1.begin(), d1.end());     <span class="comment">//默认为 升序</span></span><br><span class="line">    printDeque(<span class="string">&quot;d1 排序后&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062709081044-1024x333.jpg"></p><h3 id="总结：sort算法非常实用，使用时包含头文件algorithhm即可。"><a href="#总结：sort算法非常实用，使用时包含头文件algorithhm即可。" class="headerlink" title="总结：sort算法非常实用，使用时包含头文件algorithhm即可。"></a>总结：sort算法非常实用，使用时包含头文件algorithhm即可。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（deque容器-deque排序）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程41：STL常用容器（deque容器-deque数据存取）</title>
    <link href="https://notes.camcad.cn/post/2593a9e0.html"/>
    <id>https://notes.camcad.cn/post/2593a9e0.html</id>
    <published>2020-07-25T13:44:46.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-3-6-deque数据存取"><a href="#3-3-6-deque数据存取" class="headerlink" title="3.3.6 deque数据存取"></a>3.3.6 deque数据存取</h2><p><strong>功能描述：</strong><br>对deque中的数据的存取操作 </p><p><strong>函数原型：</strong></p><ul><li><code>operator[int idx];</code> &#x2F;&#x2F;返回索引int idx所指的数据</li><li><code>at[int idx];</code> &#x2F;&#x2F;返回索引int idx所指的数据</li><li><code>front();</code> &#x2F;&#x2F;返回容器中第一个数据元素</li><li><code>back();</code> &#x2F;&#x2F;返回容器中最后一个数据元素</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;deque&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d1;</span><br><span class="line">    d1.push_back(<span class="number">10</span>);</span><br><span class="line">    d1.push_back(<span class="number">110</span>);</span><br><span class="line">    d1.push_back(<span class="number">120</span>);</span><br><span class="line">    d1.push_back(<span class="number">119</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//operator[int idx];    //返回索引[int idx]所指的数据</span></span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; d1.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;d1[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;]= &quot;</span> &lt;&lt; d1[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//at[int idx];  //返回索引[int idx]所指的数据</span></span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; d1.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;d1.at(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)= &quot;</span> &lt;&lt; d1.at(i) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//front();  //返回容器中第一个数据元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;d1 容器中第一个数据元素为：&quot;</span> &lt;&lt; d1.front() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//back();   //返回容器中最后一个数据元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;d1 容器中最后一个数据元素为：&quot;</span> &lt;&lt; d1.back() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062708313491-1024x442.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>除了用迭代器获取deque容器中元素，[ ]和at也可以。</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（deque容器-deque数据存取）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程40：STL常用容器（deque容器-deque插入和删除）</title>
    <link href="https://notes.camcad.cn/post/8feeb365.html"/>
    <id>https://notes.camcad.cn/post/8feeb365.html</id>
    <published>2020-07-25T12:38:49.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-3-5-deque插入和删除"><a href="#3-3-5-deque插入和删除" class="headerlink" title="3.3.5 deque插入和删除"></a>3.3.5 deque插入和删除</h2><p><strong>功能描述：</strong><br>向deque容器中插入和删除数据 </p><p><strong>函数原型：</strong><br>两端插入操作：</p><ul><li><code>push_back(elem);</code> &#x2F;&#x2F;在容器尾部添加一个数据</li><li><code>push_front(elem);</code> &#x2F;&#x2F;在容器头部插入一个数据</li><li><code>pop_back();</code> &#x2F;&#x2F;删除容器最后一个数据</li><li><code>pop_front();</code> &#x2F;&#x2F;删除容器第一个数据 指定位置操作：</li><li><code>insert(pos, elem);</code> &#x2F;&#x2F;在pos位置插入一个elem元素的拷贝，返回新数据的位置</li><li><code>insert(pos,n,elem);</code> &#x2F;&#x2F;在pos位置插入n个elem数据，无返回值</li><li><code>insert(pos,beg, end);</code> 在pos位置插入beg,end区间的数据，无返回值</li><li><code>erase(beg,end);</code> 删除beg,end区间的数据，返回下一个数据的位置</li><li><code>erase(pos);</code> &#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置</li><li><code>clear();</code> &#x2F;&#x2F;清空容器的所有数据</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;deque&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDeque</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> deque&lt;<span class="built_in">int</span>&gt; &amp;d</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (deque&lt;<span class="built_in">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//push_back(elem);      //在容器尾部添加一个数据</span></span><br><span class="line">    d1.push_back(<span class="number">10</span>);</span><br><span class="line">    d1.push_back(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//push_front(elem);     //在容器头部插入一个数据</span></span><br><span class="line">    d1.push_front(<span class="number">111</span>);</span><br><span class="line"></span><br><span class="line">    printDeque(<span class="string">&quot;d1 初始化&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//pop_back();   //删除容器最后一个数据</span></span><br><span class="line">    d1.pop_back();</span><br><span class="line">    printDeque(<span class="string">&quot;d1 删除容器最后一个数据&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//pop_front();  //删除容器第一个数据</span></span><br><span class="line">    d1.pop_front();</span><br><span class="line">    printDeque(<span class="string">&quot;d1 删除容器第一个数据&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d2;</span><br><span class="line">    d2.push_back(<span class="number">10</span>);</span><br><span class="line">    d2.push_back(<span class="number">20</span>);</span><br><span class="line">    d2.push_front(<span class="number">100</span>);</span><br><span class="line">    d2.push_front(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    printDeque(<span class="string">&quot;d2 初始化&quot;</span>, d2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert(pos, elem);        //在pos位置插入一个elem元素的拷贝，返回新数据的位置</span></span><br><span class="line">    d2.insert(d2.begin(), <span class="number">120</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d2 在pos位置插入一个elem元素的拷贝&quot;</span>, d2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert(pos,n,elem);       //在pos位置插入n个elem数据，无返回值</span></span><br><span class="line">    d2.insert(d2.end(), <span class="number">2</span>, <span class="number">110</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d2 在pos位置插入n个elem数据&quot;</span>, d2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//insert(pos,beg, end); 在pos位置插入[beg,end]区间的数据，无返回值</span></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d3;</span><br><span class="line">    d3.insert(d3.end(), d2.begin(), d2.end());</span><br><span class="line">    printDeque(<span class="string">&quot;d3 在pos位置插入[beg,end]区间的数据&quot;</span>, d3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(beg,end);   删除[beg,end]区间的数据，返回下一个数据的位置</span></span><br><span class="line">    d3.erase(d3.begin() + <span class="number">1</span>, d3.end() - <span class="number">1</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d3 删除[beg,end]区间的数据&quot;</span>, d3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//erase(pos);   //删除pos位置的数据，返回下一个数据的位置</span></span><br><span class="line">    d3.erase(d3.begin());</span><br><span class="line">    printDeque(<span class="string">&quot;d3 删除pos位置的数据，返回下一个数据的位置&quot;</span>, d3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//clear();  //清空容器的所有数据</span></span><br><span class="line">    d2.clear();</span><br><span class="line">    printDeque(<span class="string">&quot;d2 清空容器的所有数据&quot;</span>, d2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/20200627080647100-1024x491.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>插入和删除提供的位置是迭代器!</li><li>尾插（push_back）</li><li>尾删（pop_back）</li><li>头插（push_front）</li><li>头删（pop_front）</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（deque容器-deque插入和删除）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
    <category term="C++核心编程" scheme="https://notes.camcad.cn/tags/C-%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程39：STL常用容器（deque容器-deque大小操作）</title>
    <link href="https://notes.camcad.cn/post/ffb738d8.html"/>
    <id>https://notes.camcad.cn/post/ffb738d8.html</id>
    <published>2020-07-25T11:32:08.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-3-4-deque大小操作"><a href="#3-3-4-deque大小操作" class="headerlink" title="3.3.4 deque大小操作"></a>3.3.4 deque大小操作</h2><p><strong>功能描述：</strong><br>对deque容器的大小进行操作。 </p><p><strong>函数原型：</strong></p><ul><li><code>deque.empty();</code> &#x2F;&#x2F;判断容器是否为空</li><li><code>deque.size();</code> &#x2F;&#x2F;返回容器中元素的个数</li><li><code>deque.resize(num);</code> &#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以默认值填充新位置。 &#x2F;&#x2F;如果容器变短，则未尾超出容器长度的元素被删除。</li><li><code>deque.resize(num,elem)</code> &#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以elem值填充新位置。 &#x2F;&#x2F;如果容器变短，则未性超出容器长度的元素被删除。</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;deque&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> m_size 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDeque</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> deque&lt;<span class="built_in">int</span>&gt; &amp;d</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (deque&lt;<span class="built_in">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; m_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        d1.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    printDeque(<span class="string">&quot;d1 初始化&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//deque.empty(); //判断容器是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (d1.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;容器为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//deque.size(); //返回容器中元素的个数</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;d1 容器中元素的个数为：&quot;</span> &lt;&lt; d1.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//deque.resize(num); //重新指定容器的长度为 num,若容器变长，则以默认值填充新位置。</span></span><br><span class="line">    d1.resize(<span class="number">15</span>, <span class="number">120</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d1 容器变长：&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果容器变短，则未尾超出容器长度的元素被删除。</span></span><br><span class="line">    d1.resize(<span class="number">5</span>,<span class="number">120</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d1 容器变短：&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//deque.resize(num,elem) //重新指定容器的长度为 num,若容器变长，则以 elem 值填充新位置。</span></span><br><span class="line">    d1.resize(<span class="number">10</span>, <span class="number">110</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d1 重新指定容器：&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果容器变短，则未性超出容器长度的元素被删除。</span></span><br><span class="line">    d1.resize(<span class="number">4</span>, <span class="number">110</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d1 重新指定容器：&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062706062394-1024x399.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>deque没有容量的概念。</li><li>判断是否为空（empty）</li><li>返回元素个数（size）</li><li>重新指定个数（resize）</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（deque容器-deque大小操作）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程38：STL常用容器（deque容器-deque赋值操作）</title>
    <link href="https://notes.camcad.cn/post/7bcbbe51.html"/>
    <id>https://notes.camcad.cn/post/7bcbbe51.html</id>
    <published>2020-07-24T21:22:58.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<p><strong>功能描述：</strong><br>给deque容器进行赋值。 </p><p><strong>函数原型：</strong></p><ul><li><code>deque &amp;operator=(const deque&lt;T&gt; &amp;deq);</code> &#x2F;&#x2F;重载等号操作符</li><li><code>assign(deg,end);</code> &#x2F;&#x2F;将beg,end区间中的数据拷贝赋值给本身。</li><li><code>assign(n,elem);</code> &#x2F;&#x2F;将n个elem拷贝赋值给本身。</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;deque&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> m_size 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDeque</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> deque&lt;<span class="built_in">int</span>&gt; &amp;d</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (deque&lt;<span class="built_in">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; m_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        d1.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    printDeque(<span class="string">&quot;d1 赋值为&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//deque &amp;operator=(const deque&lt;T&gt; &amp;deq); //重载等号操作符</span></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d2 = d1;</span><br><span class="line">    printDeque(<span class="string">&quot;d2 赋值为&quot;</span>, d2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//assign(deg,end); //将[beg,end]区间中的数据拷贝赋值给本身。</span></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d3;</span><br><span class="line">    d3.assign(d1.begin(), d1.end());</span><br><span class="line">    printDeque(<span class="string">&quot;d3 赋值为&quot;</span>,d3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//assign(n,elem); //将n个elem拷贝赋值给本身。</span></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d4;</span><br><span class="line">    d4.assign(<span class="number">10</span>, <span class="number">101</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d4 赋值为&quot;</span>, d4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062705294550-1024x297.jpg"></p><h3 id="总结：deque赋值操作也与vector相同，需熟练掌握。"><a href="#总结：deque赋值操作也与vector相同，需熟练掌握。" class="headerlink" title="总结：deque赋值操作也与vector相同，需熟练掌握。"></a>总结：deque赋值操作也与vector相同，需熟练掌握。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（deque容器-deque赋值操作）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程37：STL常用容器（deque容器-deque构造函数）</title>
    <link href="https://notes.camcad.cn/post/3ddb7e7f.html"/>
    <id>https://notes.camcad.cn/post/3ddb7e7f.html</id>
    <published>2020-07-24T18:12:26.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-3-2-deque构造函数"><a href="#3-3-2-deque构造函数" class="headerlink" title="3.3.2 deque构造函数"></a>3.3.2 deque构造函数</h2><p><strong>功能描述：</strong><br>deque容器构造 </p><p><strong>函数原型：</strong></p><ul><li><code>deque&lt;T&gt;deqT;</code> &#x2F;&#x2F;默认构造形式</li><li><code>deque(beg, end);</code> &#x2F;&#x2F;构造函数将 deg,end 区间中的元素拷贝给本身。</li><li><code>deque(n, elem);</code> &#x2F;&#x2F;构造函数将n个elem拷贝给本身</li><li><code>deque(const deque &amp;deq);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;deque&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> m_size 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDeque</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str, <span class="keyword">const</span> deque&lt;<span class="built_in">int</span>&gt; &amp;d</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (deque&lt;<span class="built_in">int</span>&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//deque&lt;T&gt;deqT; //默认构造形式</span></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; m_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        d1.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    printDeque(<span class="string">&quot;d1 初始化&quot;</span>, d1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//deque(begin, end); //构造函数将[degin,end]区间中的元素拷贝给本身。</span></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d2(d1.begin(), d1.end());</span><br><span class="line">    printDeque(<span class="string">&quot;d2 初始化&quot;</span>, d2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//deque(n, elem); //构造函数将n个elem拷贝给本身</span></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d3(<span class="number">10</span>, <span class="number">120</span>);</span><br><span class="line">    printDeque(<span class="string">&quot;d3 初始化&quot;</span>, d3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//deque(const deque &amp;deq); //拷贝构造函数</span></span><br><span class="line">    deque&lt;<span class="built_in">int</span>&gt;d4(d2);</span><br><span class="line">    printDeque(<span class="string">&quot;d4 初始化&quot;</span>, d4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062702420121-1024x441.jpg"></p><h3 id="总结：deque容器和vector容器的构造方式几乎一致，灵活使用即可。"><a href="#总结：deque容器和vector容器的构造方式几乎一致，灵活使用即可。" class="headerlink" title="总结：deque容器和vector容器的构造方式几乎一致，灵活使用即可。"></a>总结：deque容器和vector容器的构造方式几乎一致，灵活使用即可。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（deque容器-deque构造函数）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程36：STL常用容器（deque容器-deque容器基本概念）</title>
    <link href="https://notes.camcad.cn/post/2d258b96.html"/>
    <id>https://notes.camcad.cn/post/2d258b96.html</id>
    <published>2020-07-24T17:07:46.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-3-deque容器"><a href="#3-3-deque容器" class="headerlink" title="3.3 deque容器"></a>3.3 deque容器</h1><h2 id="3-3-1-deque容器基本概念"><a href="#3-3-1-deque容器基本概念" class="headerlink" title="3.3.1 deque容器基本概念"></a>3.3.1 deque容器基本概念</h2><p><strong>功能：</strong></p><ul><li>双端数组，可以对头端进行插入删除操作。</li></ul><p><strong>deque与vector区别：</strong></p><ul><li>vector对于头部的插入删除效率低，数据量越大，效率越低。</li><li>deque相对而言，对头部的插入删除速度会比vector快。</li><li>vector访问元素时的速度会比deque快，这和两者实现有关。<br><a href="http://image.camcad.cn/2020/06/2020062701504737.jpg"><img src="http://image.camcad.cn/2020/06/2020062701504737.jpg"></a></li></ul><p><strong>deque内部工作原理：</strong> deque内部有个<strong>中控器</strong>，维护每段缓冲区中的内容，缓冲区中存放真实数据。中控器维护的是每个缓冲区的地址，使得使用deque时像一片连接的内存空间。<br><img src="http://image.camcad.cn/2020/06/2020062701554631.jpg"></p><ul><li>deque容器的迭代器也是支持随机访问的。</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（deque容器-deque容器基本概念）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程35：STL常用容器（vector容器- vector预留空间）</title>
    <link href="https://notes.camcad.cn/post/d3b74cd4.html"/>
    <id>https://notes.camcad.cn/post/d3b74cd4.html</id>
    <published>2020-07-24T08:59:13.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-2-8-vector预留空间"><a href="#3-2-8-vector预留空间" class="headerlink" title="3.2.8 vector预留空间"></a>3.2.8 vector预留空间</h2><p><strong>功能描述：</strong><br>减少vector在动态扩展容量时的扩展次数。 </p><p><strong>函数原型：</strong></p><ul><li><code>reserve(int len);</code> &#x2F;&#x2F;容器预留len个元素长度，预留位置不初始化，元素不可访问。</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> m_size 100000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;    </span><br><span class="line">    <span class="built_in">int</span> num = <span class="number">0</span>;    <span class="comment">//统计开辟次数</span></span><br><span class="line">    <span class="built_in">int</span> *p = NULL;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(i);</span><br><span class="line">        <span class="keyword">if</span> (p != &amp;v1[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            p = &amp;v1[<span class="number">0</span>];</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;未加reserve v1开辟次数为：&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v2;</span><br><span class="line">    <span class="built_in">int</span> num1 = <span class="number">0</span>;   <span class="comment">//统计开辟次数</span></span><br><span class="line">    <span class="built_in">int</span> *p1 = NULL;</span><br><span class="line"></span><br><span class="line">    v2.reserve(m_size);     <span class="comment">//预留空间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v2.push_back(i);</span><br><span class="line">        <span class="keyword">if</span> (p1 != &amp;v2[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            p1 = &amp;v2[<span class="number">0</span>];</span><br><span class="line">            num1++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;加上reserve v2开辟次数为：&quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062509384530-1024x321.jpg"></p><h3 id="总结：如果数据量较大，可以一开始利用reserve预留空间。"><a href="#总结：如果数据量较大，可以一开始利用reserve预留空间。" class="headerlink" title="总结：如果数据量较大，可以一开始利用reserve预留空间。"></a>总结：如果数据量较大，可以一开始利用reserve预留空间。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（vector容器- vector预留空间）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程34：STL常用容器（vector容器- vector互换容器）</title>
    <link href="https://notes.camcad.cn/post/ae7f0af0.html"/>
    <id>https://notes.camcad.cn/post/ae7f0af0.html</id>
    <published>2020-07-23T21:57:34.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-2-7-vector互换容器"><a href="#3-2-7-vector互换容器" class="headerlink" title="3.2.7 vector互换容器"></a>3.2.7 vector互换容器</h2><p><strong>功能描述：</strong><br>实现两个容器内元素进行互换 </p><p><strong>函数原型：</strong></p><ul><li><code>swap(vec)；</code> &#x2F;&#x2F;将vec与本身的元素互换</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> m_size 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str,vector&lt;<span class="built_in">int</span>&gt; &amp;v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; v.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; v[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//容器1</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; m_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    printVector(<span class="string">&quot;v1互换前初始值为：&quot;</span>, v1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//窗口2</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v2;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; m_size<span class="number">-5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v2.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    printVector(<span class="string">&quot;v2互换前初始值为：&quot;</span>, v2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//容器互换</span></span><br><span class="line">    v1.swap(v2);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    printVector(<span class="string">&quot;v1互换后初始值为：&quot;</span>, v1);</span><br><span class="line">    printVector(<span class="string">&quot;v2互换后初始值为：&quot;</span>, v2);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际应用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;实际应用：&quot;</span> &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;itv;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        itv.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;itv的容量为：&quot;</span> &lt;&lt; itv.capacity() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;itv的大小为：&quot;</span> &lt;&lt; itv.size() &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重新定义 itv.size() 的内存大小</span></span><br><span class="line">    itv.resize(<span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;定义后 itv的容量为：&quot;</span> &lt;&lt; itv.capacity() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;定义后 itv的大小为：&quot;</span> &lt;&lt; itv.size() &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//容器互换（优化容量）</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;(itv).swap(itv);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;优化后 itv的容量为：&quot;</span> &lt;&lt; itv.capacity() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;优化后 itv的大小为：&quot;</span> &lt;&lt; itv.size() &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062507504748-1024x585.jpg"></p><h3 id="总结：swap-可以使用两个容器互换，可以达到实用的收缩内存效果。"><a href="#总结：swap-可以使用两个容器互换，可以达到实用的收缩内存效果。" class="headerlink" title="总结：swap()可以使用两个容器互换，可以达到实用的收缩内存效果。"></a>总结：swap()可以使用两个容器互换，可以达到实用的收缩内存效果。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（vector容器- vector互换容器）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程33：STL常用容器（vector容器- vector数据存取）</title>
    <link href="https://notes.camcad.cn/post/7528e38.html"/>
    <id>https://notes.camcad.cn/post/7528e38.html</id>
    <published>2020-07-23T18:54:39.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-2-6-vector数据存取"><a href="#3-2-6-vector数据存取" class="headerlink" title="3.2.6 vector数据存取"></a>3.2.6 vector数据存取</h2><p><strong>功能描述：</strong><br>对vector中的数据的存取操作 </p><p><strong>函数原型：</strong></p><ul><li><code>operator[];</code> &#x2F;&#x2F;返回索引idx所指的数据</li><li><code>at(int idx);</code> &#x2F;&#x2F;返回索引idx所指的数据</li><li><code>front();</code> &#x2F;&#x2F;返回容器中第一个数据元素</li><li><code>back();</code> &#x2F;&#x2F;返回容器中最后一个数据元素</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> m_size 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str,vector&lt;<span class="built_in">int</span>&gt; &amp;v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it=v.begin();it !=v.end();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; m_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v.push_back(i+<span class="number">11</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    printVector(<span class="string">&quot;初始化&quot;</span>,v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//operator[];   //返回索引[ idx ]所指的数据</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;索引 [2] 所指的数据为：&quot;</span> &lt;&lt; v[<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//at(int idx);  //返回索引[ idx ]所指的数据</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;索引 [4] 所指的数据为：&quot;</span> &lt;&lt; v.at(<span class="number">4</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//front();      //返回容器中第一个数据元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;返回容器中第一个数据元素：&quot;</span> &lt;&lt; v.front() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//back();       //返回容器中最后一个数据元素</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;返回容器中最后一个数据元素：&quot;</span> &lt;&lt; v.back() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062506560863-1024x418.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>除了用迭代器获取vector容器中元素,operatoridx和at(int idx)也可以。</li><li>front()返回容器第一个元素</li><li>back()返回容器最后一个元素</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（vector容器- vector数据存取）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程32：STL常用容器（vector容器- vector插入和删除）</title>
    <link href="https://notes.camcad.cn/post/e8abcb67.html"/>
    <id>https://notes.camcad.cn/post/e8abcb67.html</id>
    <published>2020-07-23T12:02:00.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-2-5-vector插入和删除"><a href="#3-2-5-vector插入和删除" class="headerlink" title="3.2.5 vector插入和删除"></a>3.2.5 vector插入和删除</h2><p><strong>功能描述：</strong><br>对vector容器进行插入、删除操作 </p><p><strong>函数原型：</strong></p><ul><li><code>push_back(ele);</code> &#x2F;&#x2F;尾部插入元素ele</li><li><code>pop_back();</code> &#x2F;&#x2F;删除最后一个元素</li><li><code>insert(const_iterator pos, ele);</code> &#x2F;&#x2F;迭代器指向位置pos插入元素ele</li><li><code>insert(const_iterator pos, int count, ele);</code> &#x2F;&#x2F;迭代器指向位置pos插入count个元素ele</li><li><code>erase(const_iterator pos);</code> &#x2F;&#x2F;删除迭代器指向的元素</li><li><code>erase(const_iterator start, const_iterator end);</code> &#x2F;&#x2F;删除迭代器从start到end之间的元素</li><li><code>clear();</code> &#x2F;&#x2F;删除容器中所有元素</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i_size 10   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params"><span class="keyword">const</span> <span class="built_in">string</span> str,vector&lt;<span class="built_in">int</span>&gt; &amp;v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; <span class="string">&quot;：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; i_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    printVector(<span class="string">&quot;初始化&quot;</span>,v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾插</span></span><br><span class="line">    v.push_back(<span class="number">110</span>);</span><br><span class="line">    printVector(<span class="string">&quot;尾插&quot;</span>,v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾删</span></span><br><span class="line">    v.pop_back();</span><br><span class="line">    printVector(<span class="string">&quot;尾删&quot;</span>,v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代器指向位置pos插入元素ele</span></span><br><span class="line">    v.insert(v.begin() + <span class="number">1</span>, <span class="number">120</span>);</span><br><span class="line">    printVector(<span class="string">&quot;迭代器指向位置pos插入元素ele&quot;</span>,v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代器指向位置pos插入count个元素ele</span></span><br><span class="line">    v.insert(v.begin(), <span class="number">3</span>, <span class="number">66</span>);</span><br><span class="line">    printVector(<span class="string">&quot;迭代器指向位置pos插入count个元素ele&quot;</span>, v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除迭代器指向的元素</span></span><br><span class="line">    v.erase(v.begin());</span><br><span class="line">    printVector(<span class="string">&quot;删除迭代器指向的元素&quot;</span>, v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //删除迭代器从start到end之间的元素</span></span><br><span class="line"><span class="comment">    v.erase(v.begin(), v.end());</span></span><br><span class="line"><span class="comment">    printVector(&quot;删除迭代器从start到end之间的元素&quot;, v);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除容器中所有元素</span></span><br><span class="line">    v.clear();</span><br><span class="line">    printVector(<span class="string">&quot;删除容器中所有元素&quot;</span>,v);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062502132056-1024x337.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>尾插（push_back）</li><li>尾删（pop_back）</li><li>插入（insert）–&gt;（位置迭代器）</li><li>删除（erase）–&gt;（位置迭代器）</li><li>清空（clear）</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（vector容器- vector插入和删除）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程31：STL常用容器（vector容器- vector容量和大小）</title>
    <link href="https://notes.camcad.cn/post/e82d8690.html"/>
    <id>https://notes.camcad.cn/post/e82d8690.html</id>
    <published>2020-07-23T11:23:08.000Z</published>
    <updated>2023-04-05T14:42:32.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-2-4-vector容量和大小"><a href="#3-2-4-vector容量和大小" class="headerlink" title="3.2.4 vector容量和大小"></a>3.2.4 vector容量和大小</h2><p><strong>功能描述：</strong></p><ul><li>对vector容器的容量和大小操作。</li></ul><p><strong>函数原型：</strong></p><ul><li><code>empty();</code> &#x2F;&#x2F;判断容器是否为空。</li><li><code>capacity();</code> &#x2F;&#x2F;容器的容量。</li><li><code>size();</code> &#x2F;&#x2F;返回容器中元素的个数。</li><li><code>resize(int num);</code> &#x2F;&#x2F;1.重新指定容器的长度为num，若容器变长，则以默认值填充新位置。 &#x2F;&#x2F;2.如果容器变短，则未尾超出容器长度的元素被删除。</li><li><code>resize（int num,elem);</code> &#x2F;&#x2F;1.重新指定容器的长度为num,若容器变长，则以elem值填充新位置。 &#x2F;&#x2F;2.如果容器变短，则未尾超出容器长度的元素被删除。</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> i_size 10   </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params">vector&lt;<span class="built_in">int</span>&gt; v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; i_size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    printVector(v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//empty(); //判断容器是否为空。</span></span><br><span class="line">    <span class="keyword">if</span> (!v.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;容器不为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//capacity(); //容器的容量。</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;容器的容量为：&quot;</span> &lt;&lt; v.capacity() &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//size(); //返回容器中元素的个数（大小）。</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;容器中元素的个数（大小）为：&quot;</span> &lt;&lt; v.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//resize(int num); //1.重新指定容器的长度为num，若容器变长，则以默认值0填充新位置。</span></span><br><span class="line">    v.resize(<span class="number">15</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;容器中元素的个数（大小）为：&quot;</span> &lt;&lt; v.size() &lt;&lt; endl;</span><br><span class="line">    printVector(v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.如果容器变短，则未尾超出容器长度的元素被删除。</span></span><br><span class="line">    v.resize(<span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;容器中元素的个数（大小）为：&quot;</span> &lt;&lt; v.size() &lt;&lt; endl;</span><br><span class="line">    printVector(v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//resize（int num, elem); //1.重新指定容器的长度为num,若容器变长，则以elem值填充新位置。</span></span><br><span class="line">    v.resize(<span class="number">9</span>, <span class="number">110</span>); </span><br><span class="line">    printVector(v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.如果容器变短，则未尾超出容器长度的元素被删除。</span></span><br><span class="line">    v.resize(<span class="number">7</span>,<span class="number">110</span>);</span><br><span class="line">    printVector(v);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062408214446-1024x577.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>判断是否为空（empty）</li><li>返回元素个数（size）</li><li>返回容器容量（capacity）</li><li>重新指定大小（resize）</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（vector容器- vector容量和大小）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
</feed>
