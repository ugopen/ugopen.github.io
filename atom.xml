<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>知识储存库</title>
  
  <subtitle>增长盈利，降本增效&lt;br&gt;逆境求生存，顺境求发展</subtitle>
  <link href="https://notes.camcad.cn/atom.xml" rel="self"/>
  
  <link href="https://notes.camcad.cn/"/>
  <updated>2024-04-27T14:09:01.125Z</updated>
  <id>https://notes.camcad.cn/</id>
  
  <author>
    <name>蚂蚁Emmet</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gitlab-ci/cd学习11：把工程打包成docker image</title>
    <link href="https://notes.camcad.cn/post/d092dd69.html"/>
    <id>https://notes.camcad.cn/post/d092dd69.html</id>
    <published>2024-04-26T21:20:12.000Z</published>
    <updated>2024-04-27T14:09:01.125Z</updated>
    
    <content type="html"><![CDATA[<p>Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><span id="more"></span><h3 id="decker基础操作"><a href="#decker基础操作" class="headerlink" title="decker基础操作"></a>decker基础操作</h3><p><a href="https://notes.camcad.cn/post/c1d6c914.html">https://notes.camcad.cn/post/c1d6c914.html</a></p><h3 id="gitlab-ci-yml"><a href="#gitlab-ci-yml" class="headerlink" title="gitlab-ci.yml"></a>gitlab-ci.yml</h3><figure class="highlight yml"><figcaption><span>gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">testing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">run_tests:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">denoland/deno:latest</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">deno</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build_docker_image:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mydebian</span></span><br><span class="line">  <span class="attr">needs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">job:</span> <span class="string">run_tests</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-f</span> <span class="string">./DockerFile</span> <span class="string">.</span> <span class="string">-t</span> <span class="string">hellocat</span></span><br></pre></td></tr></table></figure><h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><figure class="highlight docker"><figcaption><span>DockerFile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> denoland/deno:alpine-<span class="number">1.26</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> deno cache main.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;run&quot;</span>,<span class="string">&quot;--allow-all&quot;</span>,<span class="string">&quot;main.ts&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p><strong>FROM</strong>：这里使用了Deno的Alpine版本 1.26.0 作为基础。<br><strong>WORKDIR</strong>：设置工作目录为<code>/app</code>，之后的指令将在这个目录下执行。<br><strong>COPY</strong>：将当前目录中的所有文件复制到容器中的<code>/app</code>目录下。<br><strong>EXPOSE</strong>：指定容器将监听的端口号为 8000。<br><strong>RUN</strong>：在容器中运行<code>deno cache</code>命令<br><strong>CMD</strong>：指定容器启动时的默认命令。在这里，它运行了<code>main.ts</code>文件，并且使用了<code>--allow-all</code>参数，表示允许所有的权限请求。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.youtube.com/watch?v=8d26a90UR9s&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=15">為你自己學 GitLab CI&#x2F;CD Day 15 - 專案演練 part 2 把專案打包成 Docker Image</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>Docker基础操作</title>
    <link href="https://notes.camcad.cn/post/c1d6c914.html"/>
    <id>https://notes.camcad.cn/post/c1d6c914.html</id>
    <published>2024-04-23T22:37:02.000Z</published>
    <updated>2024-04-27T14:09:01.129Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。</p><p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><span id="more"></span><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p><a href="https://docs.docker.com/desktop/install/windows-install/">https://docs.docker.com/desktop/install/windows-install/</a></p><p><a href="https://docs.docker.com/engine/install/debian/">https://docs.docker.com/engine/install/debian/</a></p><h3 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 生成镜像</span><br><span class="line"># docker build -f DockerFile文件路径 . -t 镜像名称</span><br><span class="line">docker build -f ./DockerFile . -t hellocat</span><br><span class="line"></span><br><span class="line"># 本地主机上所有镜像</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"># 查询名称镜像</span><br><span class="line"># docker images | grep 名称</span><br><span class="line">docker images | grep hellocat</span><br><span class="line"></span><br><span class="line"># 运行镜像</span><br><span class="line">docker run -p 本地端口:容器端口 镜像名称</span><br><span class="line">docker run -p 9000:8000 hellocat</span><br><span class="line"></span><br><span class="line"># 列出所有的容器 ID</span><br><span class="line">docker ps -aq</span><br><span class="line"></span><br><span class="line"># 停止所有的容器</span><br><span class="line">docker stop $(docker ps -aq)</span><br><span class="line"></span><br><span class="line"># 删除所有的容器</span><br><span class="line">docker rm $(docker ps -aq)</span><br><span class="line"></span><br><span class="line"># 删除所有的镜像</span><br><span class="line">docker rmi $(docker images -q)</span><br><span class="line"></span><br><span class="line"># docker rmi 镜像名称</span><br><span class="line">docker rmi hellocat</span><br></pre></td></tr></table></figure><h3 id="附加权限"><a href="#附加权限" class="headerlink" title="附加权限"></a>附加权限</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usermod -aG docker gitlab-runner</span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><p><img src="https://image.camcad.cn/vscode/20240425210824.png" alt="20240425210824"></p><h3 id="使用-i-port-来显示与指定端口相关的网络信息"><a href="#使用-i-port-来显示与指定端口相关的网络信息" class="headerlink" title="使用-i:port 来显示与指定端口相关的网络信息"></a>使用-i:port 来显示与指定端口相关的网络信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsof -i :端口</span><br><span class="line"></span><br><span class="line">lsof -i :9000</span><br></pre></td></tr></table></figure><h3 id="docker操作"><a href="#docker操作" class="headerlink" title="docker操作"></a>docker操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 开启docker服务</span><br><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"># 重启docker服务</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line">#　查询docker服务状态</span><br><span class="line">systemctl status docker.service</span><br><span class="line"></span><br><span class="line"># 停止docker服务</span><br><span class="line">systemctl stop docker.socket</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.docker.com/">https://docs.docker.com/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。&lt;/p&gt;
&lt;p&gt;Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。&lt;/p&gt;
&lt;p&gt;容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。&lt;/p&gt;</summary>
    
    
    
    <category term="辅助" scheme="https://notes.camcad.cn/categories/%E8%BE%85%E5%8A%A9/"/>
    
    
    <category term="docker" scheme="https://notes.camcad.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习10：debian系统注册gitlab runner</title>
    <link href="https://notes.camcad.cn/post/ec1e8394.html"/>
    <id>https://notes.camcad.cn/post/ec1e8394.html</id>
    <published>2024-04-22T22:50:52.000Z</published>
    <updated>2024-04-27T14:09:01.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装GitLab-Runner"><a href="#安装GitLab-Runner" class="headerlink" title="安装GitLab Runner"></a>安装GitLab Runner</h3><p><a href="https://docs.gitlab.com/runner/install/linux-repository.html">https://docs.gitlab.com/runner/install/linux-repository.html</a><br>使用官方GitLab存储库安装GitLab Runner。<br>For Debian&#x2F;Ubuntu&#x2F;Mint:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -L &quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh&quot; | sudo bash</span><br><span class="line"></span><br><span class="line">sudo apt-get install gitlab-runner</span><br></pre></td></tr></table></figure><span id="more"></span><p>For RHEL&#x2F;CentOS&#x2F;Fedora:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -L &quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh&quot; | sudo bash</span><br><span class="line"></span><br><span class="line">sudo yum install gitlab-runner</span><br></pre></td></tr></table></figure><h3 id="查询软件是否存在"><a href="#查询软件是否存在" class="headerlink" title="查询软件是否存在"></a>查询软件是否存在</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which gitlab-runner</span><br></pre></td></tr></table></figure><h3 id="注册runner"><a href="#注册runner" class="headerlink" title="注册runner"></a>注册runner</h3><p><a href="https://docs.gitlab.com/runner/register/">https://docs.gitlab.com/runner/register/</a><br>runner注册是将runner与一个或多个GitLab实例链接起来的过程。您必须注册runner，以便它可以从GitLab实例中获取作业。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner register</span><br></pre></td></tr></table></figure><p><img src="https://image.camcad.cn/vscode/20240422231307.png" alt="20240422231307"><br><img src="https://image.camcad.cn/vscode/20240422231432.png" alt="20240422231432"></p><h3 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner help</span><br></pre></td></tr></table></figure><h3 id="启动Runner"><a href="#启动Runner" class="headerlink" title="启动Runner"></a>启动Runner</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner start</span><br></pre></td></tr></table></figure><h3 id="查看Runner状态"><a href="#查看Runner状态" class="headerlink" title="查看Runner状态"></a>查看Runner状态</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner status</span><br></pre></td></tr></table></figure><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight yml"><figcaption><span>gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">testing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">image:</span> <span class="string">alpine:latest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;构建项目...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_unit_testing:</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mydebian</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">uname</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hostname</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;单元测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;上线部署...&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://image.camcad.cn/vscode/20240422233617.png" alt="20240422233617"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.youtube.com/watch?v=wRXBztn6OkE&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=11">為你自己學 GitLab CI&#x2F;CD Day 11 - 在本機的 GitLab Runner</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;安装GitLab-Runner&quot;&gt;&lt;a href=&quot;#安装GitLab-Runner&quot; class=&quot;headerlink&quot; title=&quot;安装GitLab Runner&quot;&gt;&lt;/a&gt;安装GitLab Runner&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/runner/install/linux-repository.html&quot;&gt;https://docs.gitlab.com/runner/install/linux-repository.html&lt;/a&gt;&lt;br&gt;使用官方GitLab存储库安装GitLab Runner。&lt;br&gt;For Debian&amp;#x2F;Ubuntu&amp;#x2F;Mint:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -L &amp;quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh&amp;quot; | sudo bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install gitlab-runner&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习09：gitlab runner与executor</title>
    <link href="https://notes.camcad.cn/post/ae4a6896.html"/>
    <id>https://notes.camcad.cn/post/ae4a6896.html</id>
    <published>2024-04-21T14:51:23.000Z</published>
    <updated>2024-04-27T14:09:01.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h3><p><a href="https://docs.gitlab.com/runner/">https://docs.gitlab.com/runner/</a><br><a href="https://docs.gitlab.com/runner/">GitLab Runner</a>是一个与GitLab CI&#x2F;CD一起在管道中运行作业的应用程序。它可以在不同的操作系统和平台上运行，例如 Linux、Windows 和 macOS，并且可以通过 Docker 和 Kubernetes 等容器化技术运行。</p><span id="more"></span><p>Runner 主要负责接收作业并在本地或远程执行它们。在运行作业时，Runner 可以使用不同的执行器（executor）来提供作业执行环境。执行器定义了作业将被执行的方式，例如在本地机器上运行、在 Docker 容器中运行或者在 Kubernetes 集群中运行。</p><h3 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h3><p><a href="https://docs.gitlab.com/runner/executors/">https://docs.gitlab.com/runner/executors/</a><br>GitLab Runner实现了许多可用于在不同环境中运行构建的执行器。</p><h3 id="以下是-GitLab-Runner-支持的一些Executor："><a href="#以下是-GitLab-Runner-支持的一些Executor：" class="headerlink" title="以下是 GitLab Runner 支持的一些Executor："></a>以下是 GitLab Runner 支持的一些Executor：</h3><p><img src="https://image.camcad.cn/vscode/20240421204523.png" alt="20240421204523"><br><strong>Shell Executor</strong>：Shell 执行器是最简单的执行器，它在 Runner 所在的本地机器上执行作业脚本。这种执行器不需要额外的配置，但是它的扩展性有限，因为它只能在单个机器上运行。<br><strong>Docker Executor</strong>：Docker 执行器将作业运行在 Docker 容器中，允许作业在隔离的环境中执行。这种执行器使得作业的环境更加可控，并且可以方便地运行在不同的操作系统和软件环境中。<br><strong>Kubernetes Executor</strong>：Kubernetes 执行器允许作业在 Kubernetes 集群中运行，这使得作业可以在自动扩展的容器环境中执行，并且可以更好地利用集群资源。<br><strong>SSH Executor</strong>：SSH 执行器允许作业通过 SSH 连接到远程服务器，并在远程服务器上执行作业脚本。这种执行器适用于需要在特定的远程环境中执行作业的场景。</p><h3 id="转轮执行流程"><a href="#转轮执行流程" class="headerlink" title="转轮执行流程"></a>转轮执行流程</h3><p>此图显示了如何注册运行程序以及如何请求和处理作业。它还显示了哪些操作使用注册、身份验证和作业令牌。<br><img src="https://image.camcad.cn/vscode/20240421203718.png" alt="20240421203718"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.gitlab.com/runner/">https://docs.gitlab.com/runner/</a><br><a href="https://www.youtube.com/watch?v=WOnldT1FRoI&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=10">為你自己學 GitLab CI&#x2F;CD Day 10 - Runner 與 Executor</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Runner&quot;&gt;&lt;a href=&quot;#Runner&quot; class=&quot;headerlink&quot; title=&quot;Runner&quot;&gt;&lt;/a&gt;Runner&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.gitlab.com/runner/&quot;&gt;https://docs.gitlab.com/runner/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://docs.gitlab.com/runner/&quot;&gt;GitLab Runner&lt;/a&gt;是一个与GitLab CI&amp;#x2F;CD一起在管道中运行作业的应用程序。它可以在不同的操作系统和平台上运行，例如 Linux、Windows 和 macOS，并且可以通过 Docker 和 Kubernetes 等容器化技术运行。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习08：gitlab ci与docker image</title>
    <link href="https://notes.camcad.cn/post/57c50fa4.html"/>
    <id>https://notes.camcad.cn/post/57c50fa4.html</id>
    <published>2024-04-21T13:14:45.000Z</published>
    <updated>2024-04-27T14:09:01.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在GitLab CI&#x2F;CD的配置文件（.gitlab-ci.yml）中，<code>image</code>关键字用于指定作业所需的Docker镜像。这个镜像将作为作业运行环境的基础。</p><span id="more"></span><h3 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h3><p><a href="https://hub.docker.com/">Docker Hub</a>是一个公共的Docker镜像注册中心，用于存储、分享和管理Docker镜像。它是Docker官方提供的服务之一，提供了一个集中的平台，供开发者和运维人员发布、发现和拉取Docker镜像。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight yml"><figcaption><span>gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">testing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">image:</span> <span class="string">alpine:latest</span>  <span class="comment"># 全局Docker镜像</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;构建项目...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_unit_testing:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;单元测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_ruby:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">ruby:3.3.0-alpine3.19</span>  <span class="comment"># 局部指定Ruby镜像</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ruby</span> <span class="string">-v</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ruby</span> <span class="string">-e</span> <span class="string">&quot;puts &#x27;emmet --&gt; Hello, Ruby!&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;上线部署...&quot;</span></span><br></pre></td></tr></table></figure><h3 id="全局指定Docker镜像"><a href="#全局指定Docker镜像" class="headerlink" title="全局指定Docker镜像"></a>全局指定Docker镜像</h3><p><strong>image: alpine:latest</strong>：这行指定了全局Docker镜像，意味着所有作业都将在<code>alpine:latest</code>镜像中运行，除非在作业级别中指定了其他镜像。<br><img src="https://image.camcad.cn/vscode/20240421132007.png" alt="20240421132007"></p><h3 id="局部指定Docker镜像"><a href="#局部指定Docker镜像" class="headerlink" title="局部指定Docker镜像"></a>局部指定Docker镜像</h3><p><strong>image: ruby:3.3.0-alpine3.19</strong>：这行指定了局部的Ruby镜像，用于在该作业中运行Ruby相关的脚本。<br><img src="https://image.camcad.cn/vscode/20240421132153.png" alt="20240421132153"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过这样的配置，您可以灵活地指定全局和局部的Docker镜像，以确保作业在正确的环境中运行。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.youtube.com/watch?v=tcW7rSh_gGI&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=9">為你自己學 GitLab CI&#x2F;CD Day 09 - GitLab CI 與 Docker Image</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;在GitLab CI&amp;#x2F;CD的配置文件（.gitlab-ci.yml）中，&lt;code&gt;image&lt;/code&gt;关键字用于指定作业所需的Docker镜像。这个镜像将作为作业运行环境的基础。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习07：使用变量</title>
    <link href="https://notes.camcad.cn/post/78e6172.html"/>
    <id>https://notes.camcad.cn/post/78e6172.html</id>
    <published>2024-04-20T14:07:23.000Z</published>
    <updated>2024-04-27T14:09:01.125Z</updated>
    
    <content type="html"><![CDATA[<p>在GitLab CI&#x2F;CD中，您可以使用几种方法来定义和使用变量。这些方法可以帮助您在CI&#x2F;CD流水线中传递参数、配置环境和保护敏感信息。以下是一些常见的方法：</p><span id="more"></span><figure class="highlight yaml"><figcaption><span>gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">testing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflow:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_PIPELINE_SOURCE</span> <span class="string">==</span> <span class="string">&quot;merge_request_event&quot;</span>  <span class="comment"># 仅当合并请求事件时执行</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">always</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">when:</span> <span class="string">never</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">G_NAME:</span> <span class="string">&quot;全局变量&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$&#123;G_NAME&#125;--&gt;此变量为全局变量&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_test:</span></span><br><span class="line">  <span class="attr">variables:</span></span><br><span class="line">    <span class="attr">NAME:</span> <span class="string">&quot;局部变量&quot;</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$&#123;NAME&#125;--&gt;此变量为局部变量&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$&#123;G_NAME&#125;--&gt;此变量为全局变量&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_unit_testing:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$&#123;MY_PROJECT_VARIABLE&#125;--&gt;此变量在gitlab项目中定义&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$&#123;CI_JOB_NAME&#125;--&gt;此变量为系统变量&quot;</span></span><br></pre></td></tr></table></figure><h3 id="workflow"><a href="#workflow" class="headerlink" title="workflow"></a>workflow</h3><p>这个GitLab CI&#x2F;CD配置文件中的workflow部分定义了一系列规则（rules），用于确定何时执行流水线中的作业（jobs）。这些规则基于不同的条件来定义流水线的行为。<br><strong>1、第一条规则:</strong></p><ul><li><code>if: $CI_PIPELINE_SOURCE == &quot;merge_request_event&quot;</code>：这个条件判断了CI&#x2F;CD流水线的来源是否为合并请求事件。当流水线是由合并请求事件触发时，这个条件将会被满足。</li><li><code>when: always</code>：当第一个条件满足时，这个规则将会触发作业执行。when: always表示无论其他条件如何，作业都应该被执行。</li></ul><p><strong>2、第二条规则:</strong></p><ul><li><code>when: never</code>：这个规则明确地指定了作业永远不会被执行。无论其他条件如何，这个作业都不会被触发执行。</li></ul><h3 id="变量（Variables）"><a href="#变量（Variables）" class="headerlink" title="变量（Variables）"></a>变量（Variables）</h3><ul><li><code>G_NAME</code>：定义了一个全局变量，可以在整个流水线中使用。</li><li><code>NAME</code>：定义了一个局部变量，只能在指定的作业中使用。</li><li><code>MY_PROJECT_VARIABLE</code>：定义了一个项目变量，可以在项目中使用。</li><li><code>CI_COMMIT_BRANCH</code>：系统定义的变量，获取提交分支名称。</li><li><code>CI_JOB_NAME</code>：系统定义的变量，获取当前工作名称。</li></ul><h3 id="项目变量"><a href="#项目变量" class="headerlink" title="项目变量"></a>项目变量</h3><p><img src="https://image.camcad.cn/vscode/20240420154114.png" alt="20240420154114"></p><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><p><a href="https://docs.gitlab.com/ee/ci/variables/predefined_variables.html">https://docs.gitlab.com/ee/ci/variables/predefined_variables.html</a></p><p><img src="https://image.camcad.cn/vscode/20240420145625.png" alt="20240420145625"></p><h3 id="合并请求时，事件触发"><a href="#合并请求时，事件触发" class="headerlink" title="合并请求时，事件触发"></a>合并请求时，事件触发</h3><p><img src="https://image.camcad.cn/vscode/20240420145356.png" alt="20240420145356"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.youtube.com/watch?v=7MLKzgCJAE4&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=8">為你自己學 GitLab CI&#x2F;CD Day 08 - 環境變數</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在GitLab CI&amp;#x2F;CD中，您可以使用几种方法来定义和使用变量。这些方法可以帮助您在CI&amp;#x2F;CD流水线中传递参数、配置环境和保护敏感信息。以下是一些常见的方法：&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习06：指定分支</title>
    <link href="https://notes.camcad.cn/post/812131ff.html"/>
    <id>https://notes.camcad.cn/post/812131ff.html</id>
    <published>2024-04-20T13:46:00.000Z</published>
    <updated>2024-04-27T14:09:01.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用only关键字"><a href="#使用only关键字" class="headerlink" title="使用only关键字"></a>使用<code>only</code>关键字</h2><p>在GitLab CI&#x2F;CD配置文件（.gitlab-ci.yml）中，可以使用<code>only</code>关键字来指定作业（job）在哪些分支上执行。这样可以控制作业在哪些分支上触发执行，而在其他分支上不执行。这对于限制作业的执行范围或者针对特定分支进行不同的处理非常有用。</p><span id="more"></span><p>以下是使用<code>only</code>关键字的示例：</p><figure class="highlight yaml"><figcaption><span>gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">testing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;构建项目...&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">./emmet_run.sh</span> <span class="comment"># 给脚本赋予执行权限</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./emmet_run.sh</span>          <span class="comment"># 执行脚本</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;开发测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_unit_testing:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;单元测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_deploy:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;上线部署...&quot;</span></span><br></pre></td></tr></table></figure><h4 id="dev分支脚本执行"><a href="#dev分支脚本执行" class="headerlink" title="dev分支脚本执行"></a>dev分支脚本执行</h4><p><img src="https://image.camcad.cn/vscode/20240420135042.png" alt="20240420135042"></p><h4 id="main分支脚本执行"><a href="#main分支脚本执行" class="headerlink" title="main分支脚本执行"></a>main分支脚本执行</h4><p><img src="https://image.camcad.cn/vscode/20240420135113.png" alt="20240420135113"></p><h2 id="except关键字"><a href="#except关键字" class="headerlink" title="except关键字"></a><code>except</code>关键字</h2><p>Gitlab CI&#x2F;CD配置文件<code>.gitlab-ci.yml</code>中，<code>only</code>关键字用于指定在哪些分支上执行作业。与之相对应的是<code>except</code>关键字，它的作用是排除在指定的分支上执行作业。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.youtube.com/watch?v=_H0v2qz21N0&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=7">為你自己學 GitLab CI&#x2F;CD Day 07 - 指定分支</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;使用only关键字&quot;&gt;&lt;a href=&quot;#使用only关键字&quot; class=&quot;headerlink&quot; title=&quot;使用only关键字&quot;&gt;&lt;/a&gt;使用&lt;code&gt;only&lt;/code&gt;关键字&lt;/h2&gt;&lt;p&gt;在GitLab CI&amp;#x2F;CD配置文件（.gitlab-ci.yml）中，可以使用&lt;code&gt;only&lt;/code&gt;关键字来指定作业（job）在哪些分支上执行。这样可以控制作业在哪些分支上触发执行，而在其他分支上不执行。这对于限制作业的执行范围或者针对特定分支进行不同的处理非常有用。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习05：执行外部脚本</title>
    <link href="https://notes.camcad.cn/post/4ff7be47.html"/>
    <id>https://notes.camcad.cn/post/4ff7be47.html</id>
    <published>2024-04-19T20:59:53.000Z</published>
    <updated>2024-04-27T14:09:01.125Z</updated>
    
    <content type="html"><![CDATA[<p>在GitLab CI&#x2F;CD中，您可以执行外部脚本作为作业的一部分。这可以通过使用shell executor来实现。下面是一些常见的方法：</p><span id="more"></span><p><code>注意：</code>记得给脚本文本添加执行权限。</p><figure class="highlight yaml"><figcaption><span>.gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">testing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;构建项目...&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">./emmet_run.sh</span> <span class="comment"># 给脚本赋予执行权限</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./emmet_run.sh</span>          <span class="comment"># 执行脚本</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;开发测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_unit_testing:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;单元测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;上线部署...&quot;</span></span><br></pre></td></tr></table></figure><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><figure class="highlight shell"><figcaption><span>emmet_run.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br><span class="line">hostname</span><br><span class="line">ls -al</span><br></pre></td></tr></table></figure><h4 id="以上脚本执行结果"><a href="#以上脚本执行结果" class="headerlink" title="以上脚本执行结果"></a>以上脚本执行结果</h4><p><img src="https://image.camcad.cn/vscode/20240419211958.png" alt="20240419211958"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.youtube.com/watch?v=p8JgCDeMpYU&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=6">為你自己學 GitLab CI&#x2F;CD Day 06 - 執行外部檔案</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在GitLab CI&amp;#x2F;CD中，您可以执行外部脚本作为作业的一部分。这可以通过使用shell executor来实现。下面是一些常见的方法：&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习04：工作阶段和相依性</title>
    <link href="https://notes.camcad.cn/post/9c8d76a5.html"/>
    <id>https://notes.camcad.cn/post/9c8d76a5.html</id>
    <published>2024-04-19T20:27:28.000Z</published>
    <updated>2024-04-27T14:09:01.125Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>.gitlab-ci.yml</code>文件中，<code>stages</code>关键字用于定义CI&#x2F;CD流水线中的各个阶段。CI&#x2F;CD流水线是一系列的阶段，每个阶段可以包含一个或多个作业（jobs），用于完成特定的任务。<code>stages</code>关键字允许您明确指定流水线中的各个阶段，以便组织和控制作业的执行顺序。</p><span id="more"></span> <figure class="highlight yml"><figcaption><span>.gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">testing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;构建项目...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;开发测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_unit_testing:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">testing</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;单元测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">emmet_deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;上线部署...&quot;</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，我们定义了三个阶段：<code>build</code>、<code>testing</code>和<code>deploy</code>。每个阶段可以包含一个或多个作业，这些作业将按照定义的顺序执行。</p><h4 id="build阶段"><a href="#build阶段" class="headerlink" title="build阶段"></a>build阶段</h4><p><img src="https://image.camcad.cn/vscode/20240419204816.png" alt="20240419204816"></p><h4 id="testing阶段"><a href="#testing阶段" class="headerlink" title="testing阶段"></a>testing阶段</h4><p><img src="https://image.camcad.cn/vscode/20240419204840.png" alt="20240419204840"></p><h4 id="deploy阶段"><a href="#deploy阶段" class="headerlink" title="deploy阶段"></a>deploy阶段</h4><p><img src="https://image.camcad.cn/vscode/20240419204845.png" alt="20240419204845"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.youtube.com/watch?v=eHGwioHmJfM&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=5">為你自己學 GitLab CI&#x2F;CD Day 05 - 工作階段以及相依性</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;文件中，&lt;code&gt;stages&lt;/code&gt;关键字用于定义CI&amp;#x2F;CD流水线中的各个阶段。CI&amp;#x2F;CD流水线是一系列的阶段，每个阶段可以包含一个或多个作业（jobs），用于完成特定的任务。&lt;code&gt;stages&lt;/code&gt;关键字允许您明确指定流水线中的各个阶段，以便组织和控制作业的执行顺序。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习03：定义执行任务开始和结束要运行的脚本</title>
    <link href="https://notes.camcad.cn/post/8671d331.html"/>
    <id>https://notes.camcad.cn/post/8671d331.html</id>
    <published>2024-04-10T23:25:24.000Z</published>
    <updated>2024-04-27T14:09:01.125Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>.gitlab-ci.yml</code>文件中，可以使用<code>before_script</code>和<code>after_script</code>指令来定义在执行任务前和任务后要运行的脚本。<br>这些脚本可以在每个作业（job）的开始和结束时执行，用于执行一些共享的准备工作或清理工作。</p><p><strong>before_script</strong>：在每个作业执行之前运行的脚本。通常用于设置环境、安装依赖项等操作。<code>before_script</code>中定义的命令会在作业的脚本之前执行。</p><p><strong>after_script</strong>：在每个作业执行完毕后运行的脚本。通常用于清理工作，如关闭服务、收集日志等。<code>after_script</code>中定义的命令会在作业的脚本之后执行。</p><span id="more"></span><figure class="highlight yaml"><figcaption><span>.gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;构建项目...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">unit_testing:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;单元测试...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;上线部署...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;执行任务前处理...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;执行任务后处理...&quot;</span></span><br></pre></td></tr></table></figure><h4 id="bulid"><a href="#bulid" class="headerlink" title="bulid:"></a>bulid:</h4><p><img src="https://image.camcad.cn/vscode/20240410235016.png" alt="20240410235016"></p><h4 id="unit-testing"><a href="#unit-testing" class="headerlink" title="unit_testing:"></a>unit_testing:</h4><p><img src="https://image.camcad.cn/vscode/20240410235228.png" alt="20240410235228"></p><h4 id="deploy"><a href="#deploy" class="headerlink" title="deploy:"></a>deploy:</h4><p><img src="https://image.camcad.cn/vscode/20240410235131.png" alt="20240410235131"></p><p><strong>注意</strong>：以上脚本工作流为乱序。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.youtube.com/watch?v=yFw5zoABS8M&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=4">為你自己學 GitLab CI&#x2F;CD Day 04 - 新增 Pipeline Job</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;文件中，可以使用&lt;code&gt;before_script&lt;/code&gt;和&lt;code&gt;after_script&lt;/code&gt;指令来定义在执行任务前和任务后要运行的脚本。&lt;br&gt;这些脚本可以在每个作业（job）的开始和结束时执行，用于执行一些共享的准备工作或清理工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;before_script&lt;/strong&gt;：在每个作业执行之前运行的脚本。通常用于设置环境、安装依赖项等操作。&lt;code&gt;before_script&lt;/code&gt;中定义的命令会在作业的脚本之前执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;after_script&lt;/strong&gt;：在每个作业执行完毕后运行的脚本。通常用于清理工作，如关闭服务、收集日志等。&lt;code&gt;after_script&lt;/code&gt;中定义的命令会在作业的脚本之后执行。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习02：建立.gitlab-ci.yml</title>
    <link href="https://notes.camcad.cn/post/26de28d.html"/>
    <id>https://notes.camcad.cn/post/26de28d.html</id>
    <published>2024-04-10T20:59:20.000Z</published>
    <updated>2024-04-27T14:09:01.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gitlab-ci-yml"><a href="#gitlab-ci-yml" class="headerlink" title=".gitlab-ci.yml"></a>.gitlab-ci.yml</h3><p><code>.gitlab-ci.yml</code>文件是GitLab CI&#x2F;CD的配置文件，用于定义持续集成和持续交付的流水线。该文件包含了一系列的阶段（stages）、任务（jobs）、脚本（scripts）和指令（directives），用于描述代码仓库中的代码在提交后应该如何被构建、测试和部署。</p><h3 id="第一个脚本"><a href="#第一个脚本" class="headerlink" title="第一个脚本"></a>第一个脚本</h3><span id="more"></span><figure class="highlight yaml"><figcaption><span>.gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">HelloWorld:</span>  <span class="comment"># 自定义</span></span><br><span class="line">  <span class="attr">script:</span>    <span class="comment"># 固定格式</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Hello HelloWorld , emmet!&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://image.camcad.cn/vscode/20240410212354.png" alt="20240410212354"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://chat.openai.com/">open ai</a></p><p><a href="https://www.youtube.com/watch?v=v3gU5zJmK-M&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=3">為你自己學 GitLab CI&#x2F;CD Day 03 - 建立.gitlab-ci.yml</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;gitlab-ci-yml&quot;&gt;&lt;a href=&quot;#gitlab-ci-yml&quot; class=&quot;headerlink&quot; title=&quot;.gitlab-ci.yml&quot;&gt;&lt;/a&gt;.gitlab-ci.yml&lt;/h3&gt;&lt;p&gt;&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;文件是GitLab CI&amp;#x2F;CD的配置文件，用于定义持续集成和持续交付的流水线。该文件包含了一系列的阶段（stages）、任务（jobs）、脚本（scripts）和指令（directives），用于描述代码仓库中的代码在提交后应该如何被构建、测试和部署。&lt;/p&gt;
&lt;h3 id=&quot;第一个脚本&quot;&gt;&lt;a href=&quot;#第一个脚本&quot; class=&quot;headerlink&quot; title=&quot;第一个脚本&quot;&gt;&lt;/a&gt;第一个脚本&lt;/h3&gt;</summary>
    
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab-ci/cd学习01：什么是CI/CD</title>
    <link href="https://notes.camcad.cn/post/e5e0b1bf.html"/>
    <id>https://notes.camcad.cn/post/e5e0b1bf.html</id>
    <published>2024-04-10T20:29:18.000Z</published>
    <updated>2024-04-27T14:09:01.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是CI-x2F-CD"><a href="#什么是CI-x2F-CD" class="headerlink" title="什么是CI&#x2F;CD"></a>什么是CI&#x2F;CD</h3><p>CI&#x2F;CD是持续集成（Continuous Integration）和持续交付（Continuous Delivery）的缩写。它是一种软件开发实践，旨在通过自动化的流程和工具来提高软件交付的速度和质量。</p><p><strong>持续集成（Continuous Integration，CI）</strong>：CI是一种开发实践，开发人员将代码频繁地合并到共享存储库中（gitlab、github），每次合并都会触发自动化构建和测试流程。这样可以尽早地发现和解决代码集成问题，确保团队的代码始终保持在一个可集成状态。</p><p><strong>持续交付（Continuous Delivery，CD）</strong>：CD是在持续集成的基础上构建的，它将代码集成后通过自动化流程将其部署到生产环境中。持续交付的目标是确保软件在任何时候都是可部署的，从而使团队能够更快地将新功能、修复和改进推送到生产环境中。</p><span id="more"></span><h4 id="CI-x2F-CD的优点包括："><a href="#CI-x2F-CD的优点包括：" class="headerlink" title="CI&#x2F;CD的优点包括："></a>CI&#x2F;CD的优点包括：</h4><p><strong>快速反馈</strong>：CI&#x2F;CD使开发团队能够更快地获得关于其代码质量和功能的反馈，有助于快速发现和解决问题。</p><p><strong>降低风险</strong>：自动化的测试和部署过程有助于降低人为错误，减少因人为操作而引入的风险。</p><p><strong>增强可靠性</strong>：通过自动化流程，可以提高软件交付的一致性和可靠性，减少部署失败的可能性。</p><p><strong>加速交付</strong>：CI&#x2F;CD使团队能够更频繁地交付软件，从而提高了交付速度，使市场反馈更加及时。</p><h4 id="CI-x2F-CD的缺点包括："><a href="#CI-x2F-CD的缺点包括：" class="headerlink" title="CI&#x2F;CD的缺点包括："></a>CI&#x2F;CD的缺点包括：</h4><p><strong>复杂性</strong>：CI&#x2F;CD的实施可能涉及许多不同的工具和技术，需要团队成员具备相应的技能和知识。这种复杂性可能增加了学习曲线和维护成本。</p><p><strong>成本</strong>：实施CI&#x2F;CD所需的工具和基础设施可能需要显著的投资。此外，需要额外的时间和资源来配置、管理和维护CI&#x2F;CD管道。</p><p><strong>自动化风险</strong>：尽管自动化流程可以减少人为错误，但如果流程配置不当或测试不充分，自动化也可能导致错误和问题在生产环境中更快地传播。</p><p><strong>文化变革</strong>：CI&#x2F;CD不仅仅是工具和流程的实施，还需要组织文化上的变革。有些团队可能对持续集成、持续交付和自动化流程的理念存在抵触情绪，需要适应和接受这种变革。</p><p><strong>安全风险</strong>：CI&#x2F;CD管道中的自动化流程可能存在安全漏洞，尤其是如果安全性不是充分考虑的话。不当的配置、权限管理不当或者第三方工具的漏洞都可能导致安全问题。</p><p><strong>部署复杂性</strong>：持续交付意味着软件会更频繁地部署到生产环境中，这可能增加部署过程的复杂性。特别是在复杂的系统中，部署可能需要额外的策略和手段来确保稳定性和可用性。</p><p><strong>总结</strong>： 总的来说，CI&#x2F;CD是现代软件开发中的关键实践，有助于团队更快地交付高质量的软件。</p><h3 id="CI-x2F-CD常见开发上线流程"><a href="#CI-x2F-CD常见开发上线流程" class="headerlink" title="CI&#x2F;CD常见开发上线流程"></a>CI&#x2F;CD常见开发上线流程</h3><p><img src="https://image.camcad.cn/vscode/20240410203112.png" alt="20240410203112"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://chat.openai.com/">open ai</a></p><p><a href="https://www.youtube.com/watch?v=zCFFot5HnEw&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=2">為你自己學 GitLab CI&#x2F;CD Day 02 - 什麼是 CI&#x2F;CD</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;什么是CI-x2F-CD&quot;&gt;&lt;a href=&quot;#什么是CI-x2F-CD&quot; class=&quot;headerlink&quot; title=&quot;什么是CI&amp;#x2F;CD&quot;&gt;&lt;/a&gt;什么是CI&amp;#x2F;CD&lt;/h3&gt;&lt;p&gt;CI&amp;#x2F;CD是持续集成（Continuous Integration）和持续交付（Continuous Delivery）的缩写。它是一种软件开发实践，旨在通过自动化的流程和工具来提高软件交付的速度和质量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;持续集成（Continuous Integration，CI）&lt;/strong&gt;：CI是一种开发实践，开发人员将代码频繁地合并到共享存储库中（gitlab、github），每次合并都会触发自动化构建和测试流程。这样可以尽早地发现和解决代码集成问题，确保团队的代码始终保持在一个可集成状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;持续交付（Continuous Delivery，CD）&lt;/strong&gt;：CD是在持续集成的基础上构建的，它将代码集成后通过自动化流程将其部署到生产环境中。持续交付的目标是确保软件在任何时候都是可部署的，从而使团队能够更快地将新功能、修复和改进推送到生产环境中。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/categories/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/categories/gitlab/CI-CD/"/>
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/tags/gitlab/"/>
    
    <category term="CI/CD" scheme="https://notes.camcad.cn/tags/CI-CD/"/>
    
  </entry>
  
  <entry>
    <title>gitlab开启Container Registry（容器镜像仓库）功能</title>
    <link href="https://notes.camcad.cn/post/e5b819e9.html"/>
    <id>https://notes.camcad.cn/post/e5b819e9.html</id>
    <published>2024-04-09T22:20:41.000Z</published>
    <updated>2024-04-27T14:09:01.125Z</updated>
    
    <content type="html"><![CDATA[<p>通过将 Docker 容器注册表集成到 GitLab 中，每个项目都可以拥有自己的空间来存储其 Docker 映像.</p><span id="more"></span><h3 id="Container-Registry配置"><a href="#Container-Registry配置" class="headerlink" title="Container Registry配置"></a>Container Registry配置</h3><p>修改<code>/etc/gitlab/gitlab.rb</code>配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">registry_external_url &#x27;https://gitlab.example.com:9588&#x27;</span><br><span class="line">registry_nginx[&#x27;ssl_certificate&#x27;] = &quot;/path/to/certificate.pem&quot;</span><br><span class="line">registry_nginx[&#x27;ssl_certificate_key&#x27;] = &quot;/path/to/certificate.key&quot;</span><br></pre></td></tr></table></figure><p>重载配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure><p><img src="https://image.camcad.cn/vscode/20240409223015.png" alt="20240409223015"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.gitlab.com/ee/administration/packages/container_registry.html">Enable the container registry（启用容器注册表）</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过将 Docker 容器注册表集成到 GitLab 中，每个项目都可以拥有自己的空间来存储其 Docker 映像.&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/categories/gitlab/"/>
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>yt-dlp命令基础操作</title>
    <link href="https://notes.camcad.cn/post/3391d630.html"/>
    <id>https://notes.camcad.cn/post/3391d630.html</id>
    <published>2024-04-09T12:17:15.000Z</published>
    <updated>2024-04-27T14:09:01.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><a href="https://github.com/yt-dlp/yt-dlp">yt-dlp</a>是著名的YouTube-DL项目的一个分支，它是一个命令行程序，用于从YouTube和其他视频平台下载视频。</p><span id="more"></span><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p><strong>下载最佳视频流并将其与最佳音频流合并</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yt-dlp -f &#x27;bv*+ba&#x27; &quot;https://www.youtube.com/watch?v=8wXuSnFmbWU&quot; -o &#x27;%(id)s.%(ext)s&#x27;</span><br></pre></td></tr></table></figure><p><strong>下载 mp4 格式的 1080p 视频并与最佳 m4a 音频格式合并</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yt-dlp -f &#x27;bv[height=1080][ext=mp4]+ba[ext=m4a]&#x27; --merge-output-format mp4 &quot;https://www.youtube.com/watch?v=8wXuSnFmbWU&quot; -o &#x27;%(id)s.mp4&#x27;</span><br></pre></td></tr></table></figure><p><strong>下载播放列表</strong><br>下载包含 1080p 视频和最佳音频的 YouTube 播放列表。将视频保存到 channel_id&#x2F;playlist_id 目录中，并将视频添加到存档文本文件中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yt-dlp -f &#x27;bv*[height=1080]+ba&#x27; --download-archive videos.txt  &quot;https://www.youtube.com/playlist?list=PLQ_PIlf6OzqI34ZPxXk4HGnqADpiF9rcV&quot; -o &#x27;%(channel_id)s/%(playlist_id)s/%(id)s.%(ext)s&#x27;</span><br></pre></td></tr></table></figure><p><strong>下载频道</strong><br>将整个 YouTube 频道下载为具有最佳音频的 720p 视频。保存到以频道名称命名的文件夹中，视频文件是视频的标题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yt-dlp -f &#x27;bv*[height=720]+ba&#x27; --download-archive videos.txt &quot;https://www.youtube.com/c/SoothingRelaxation/videos&quot; -o &#x27;%(channel)s/%(title)s.%(ext)s&#x27; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/yt-dlp/yt-dlp&quot;&gt;yt-dlp&lt;/a&gt;是著名的YouTube-DL项目的一个分支，它是一个命令行程序，用于从YouTube和其他视频平台下载视频。&lt;/p&gt;</summary>
    
    
    
    <category term="辅助" scheme="https://notes.camcad.cn/categories/%E8%BE%85%E5%8A%A9/"/>
    
    
    <category term="yt-dlp" scheme="https://notes.camcad.cn/tags/yt-dlp/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu服务器上安装code-server编辑器</title>
    <link href="https://notes.camcad.cn/post/8c5222fa.html"/>
    <id>https://notes.camcad.cn/post/8c5222fa.html</id>
    <published>2024-04-05T16:11:57.000Z</published>
    <updated>2024-04-27T14:09:01.129Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器中的VSCode</p><span id="more"></span><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p><code>github仓库地址：</code><a href="https://github.com/coder/code-server/">https://github.com/coder/code-server/</a></p><p>在<code>github</code>仓库下载与系统对应的安装包，例如系统为<code>ubuntu</code>应该下载<code>*.deb</code>格式安装包。<br><img src="http://image.camcad.cn/2024/04/01.png" alt="01"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>将下载的安装包上传至ubuntu服务器中，通过<code>dpkg</code>命令安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i 安装包</span><br><span class="line"></span><br><span class="line">sudo dpkg -i code-server_4.22.1_amd64.deb</span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>编辑<code>~/.config/code-server/config.yaml</code>配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bind-addr: 0.0.0.0:6868     # 0.0.0.0表示本地IP，6868表示访问端口</span><br><span class="line">auth: password</span><br><span class="line">password: 321456            # 登录密码</span><br><span class="line"></span><br><span class="line"># https访问</span><br><span class="line">cert: /home/emmet/.config/code-server/vscode.camcad.cn.pem  # 私钥</span><br><span class="line">cert-key: /home/emmet/.config/code-server/vscode.camcad.cn.key  # 公钥</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 加载新的unit配置文件</span><br><span class="line">sudo systemctl reload-daemon</span><br><span class="line"></span><br><span class="line"># 重启code-server配置文件</span><br><span class="line">sudo systemctl restart code-server@$USER</span><br><span class="line"></span><br><span class="line"># 设置code-server开机自启动</span><br><span class="line">sudo systemctl enable code-server@$USER</span><br><span class="line"></span><br><span class="line"># 停止code-server服务</span><br><span class="line">sudo systemctl stop code-server@$USER</span><br><span class="line"></span><br><span class="line"># 执行如下命令将相关文件全部删除即可完成卸载</span><br><span class="line">sudo rm -rf /usr/lib/code-server</span><br><span class="line">sudo rm -rf ~/.local/share/code-server</span><br><span class="line">sudo rm -rf ~/.config/code-server</span><br></pre></td></tr></table></figure><h3 id="离线安装插件"><a href="#离线安装插件" class="headerlink" title="离线安装插件"></a>离线安装插件</h3><p>在官网下载插件：<a href="https://marketplace.visualstudio.com/vscode">https://marketplace.visualstudio.com/vscode</a><br><img src="http://image.camcad.cn/2024/04/vscode_vsix.png" alt="vscode_vsix"></p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>将下载好的软件上传至服务器中，通过<code>扩展 --&gt; 从 VSIX 安装</code>。<br><img src="http://image.camcad.cn/2024/04/vscode_vsix_install.png" alt="vscode_vsix_install"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;浏览器中的VSCode&lt;/p&gt;</summary>
    
    
    
    <category term="辅助" scheme="https://notes.camcad.cn/categories/%E8%BE%85%E5%8A%A9/"/>
    
    
    <category term="vscode" scheme="https://notes.camcad.cn/tags/vscode/"/>
    
    <category term="code-server" scheme="https://notes.camcad.cn/tags/code-server/"/>
    
  </entry>
  
  <entry>
    <title>Windows上运行GitLab Runner</title>
    <link href="https://notes.camcad.cn/post/282df0ab.html"/>
    <id>https://notes.camcad.cn/post/282df0ab.html</id>
    <published>2024-04-02T20:17:27.000Z</published>
    <updated>2024-04-27T14:09:01.125Z</updated>
    
    <content type="html"><![CDATA[<p>要在Windows上安装和运行GitLab Runner，您需要：<br>1、本机需要有Git，可以从<a href="http://git-scm.com/downloads">官方网站</a>安装。<br>2、如果你想在你的用户帐户而不是内置系统帐户下运行它，你的用户账户的密码。<br>3、git的基本操作。<br>4、gitlab Runner配置文件<code>.gitlab-ci.yml</code>的基础语法。</p><span id="more"></span><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p>1、创建文件夹，在系统中的某个位置创建一个文件夹，例如：<code>C:\GitLab Runner</code>。</p><p>2、下载Runner软件，下载<a href="https://s3.dualstack.us-east-1.amazonaws.com/gitlab-runner-downloads/latest/binaries/gitlab-runner-windows-amd64.exe">64位</a>或<a href="https://s3.dualstack.us-east-1.amazonaws.com/gitlab-runner-downloads/latest/binaries/gitlab-runner-windows-386.exe">32位</a>的二进制文件，并将其放入您创建的文件夹中。以下假设您已将二进制文件重命名为<code>gitlab-runner.exe</code>（可选）。</p><h3 id="注册Runner（内置系统账户）"><a href="#注册Runner（内置系统账户）" class="headerlink" title="注册Runner（内置系统账户）"></a>注册Runner（内置系统账户）</h3><h4 id="安装-gitlab-runner-exe-install解决权限问题"><a href="#安装-gitlab-runner-exe-install解决权限问题" class="headerlink" title="安装.\gitlab-runner.exe install解决权限问题"></a>安装<a href="https://stackoverflow.com/questions/61310681/fatal-failed-to-start-gitlab-runner-access-is-denied">.\gitlab-runner.exe install</a>解决权限问题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">步骤：</span><br><span class="line"></span><br><span class="line">1、Windows + X</span><br><span class="line">2、终端管理员</span><br><span class="line">3、cd &quot;C:\GitLab-Runner&quot;</span><br></pre></td></tr></table></figure><h4 id="安装Runner"><a href="#安装Runner" class="headerlink" title="安装Runner"></a>安装Runner</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\GitLab-Runner&gt; .\gitlab-runner.exe install</span><br><span class="line">Runtime platform                                    arch=amd64 os=windows pid=22100 revision=81ab07f6 version=16.10.0</span><br></pre></td></tr></table></figure><h4 id="启动Runner"><a href="#启动Runner" class="headerlink" title="启动Runner"></a>启动Runner</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\GitLab-Runner&gt; .\gitlab-runner.exe start</span><br><span class="line">Runtime platform                                    arch=amd64 os=windows pid=9320 revision=81ab07f6 version=16.10.0</span><br></pre></td></tr></table></figure><h4 id="Registering-runners"><a href="#Registering-runners" class="headerlink" title="Registering runners"></a>Registering runners</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">step1：</span><br><span class="line">PS C:\GitLab-Runner&gt; .\gitlab-runner.exe register</span><br><span class="line">Runtime platform                                    arch=amd64 os=windows pid=19132 revision=81ab07f6 version=16.10.0</span><br><span class="line">Enter the GitLab instance URL (for example, https://gitlab.com/):</span><br><span class="line">https://gitlab.com/</span><br><span class="line"></span><br><span class="line">step 2：</span><br><span class="line">Enter the registration token:</span><br><span class="line">GR13489419-azyx4zw35diAddjseWFfh</span><br><span class="line"></span><br><span class="line">step 3：</span><br><span class="line">Enter a description for the runner:</span><br><span class="line">[emmet]: 用于打包程序</span><br><span class="line"></span><br><span class="line">step 4：</span><br><span class="line">Enter tags for the runner (comma-separated):</span><br><span class="line">MyDeploy</span><br><span class="line"></span><br><span class="line">step 5：</span><br><span class="line">Enter optional maintenance note for the runner:</span><br><span class="line">other</span><br><span class="line"></span><br><span class="line">step 6：</span><br><span class="line">WARNING: Support for registration tokens and runner parameters in the &#x27;register&#x27; command has been deprecated in GitLab Runner 15.6 and will be replaced with support for authentication tokens. For more information, see https://docs.gitlab.com/ee/ci/runners/new_creation_workflow</span><br><span class="line">Registering runner... succeeded                     runner=GR13489419-Vzyx4z</span><br><span class="line">Enter an executor: ssh, parallels, docker, kubernetes, docker-autoscaler, custom, virtualbox, docker-windows, docker+machine, instance, shell:</span><br><span class="line">shell</span><br></pre></td></tr></table></figure><p>如图所示，本机添加runner成功<br><img src="http://image.camcad.cn/2024/04/gitlab-add-runner.png" alt="gitlab-add-runner"></p><h4 id="问题处理：ERROR-Job-failed-system-failure-prepare-environment-failed-to-start-process-exec-“pwsh”-executable-file-not-found-in-PATH"><a href="#问题处理：ERROR-Job-failed-system-failure-prepare-environment-failed-to-start-process-exec-“pwsh”-executable-file-not-found-in-PATH" class="headerlink" title="问题处理：ERROR: Job failed (system failure): prepare environment: failed to start process: exec: “pwsh”: executable file not found in %PATH%."></a>问题处理：<a href="https://stackoverflow.com/questions/68050125/gitlab-runner-prepare-environment-failed-to-start-process-pwsh-in-windows">ERROR: Job failed (system failure): prepare environment: failed to start process: exec: “pwsh”: executable file not found in %PATH%.</a></h4><p>编辑config.toml以使用较旧的powershell.exe：</p><figure class="highlight plaintext"><figcaption><span>from</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[runners]]</span><br><span class="line">  name = &quot;ci-runner&quot;</span><br><span class="line">  url = &quot;http://xxx.yyy.xx/&quot;</span><br><span class="line">  token = &quot;XXXXX&quot;</span><br><span class="line">  executor = &quot;shell&quot;</span><br><span class="line">  shell = &quot;pwsh&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>to</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[runners]]</span><br><span class="line">  name = &quot;ci-runner&quot;</span><br><span class="line">  url = &quot;http://xxx.yyy.xx/&quot;</span><br><span class="line">  token = &quot;XXXXX&quot;</span><br><span class="line">  executor = &quot;shell&quot;</span><br><span class="line">  shell = &quot;powershell&quot;</span><br></pre></td></tr></table></figure><p>然后重新启动gitlab runner解决了这个问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gitlab-runner.exe restart</span><br></pre></td></tr></table></figure><h3 id="本地运行Runner"><a href="#本地运行Runner" class="headerlink" title="本地运行Runner"></a>本地运行Runner</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS C:\GitLab-Runner&gt; .\gitlab-runner.exe run</span><br><span class="line">Runtime platform                                    arch=amd64 os=windows pid=27404 revision=81ab07f6 version=16.10.0</span><br><span class="line">Starting multi-runner from C:\GitLab-Runner\config.toml...  builds=0 max_builds=0</span><br><span class="line">There might be a problem with your config based on jsonschema annotations in common/config.go (experimental feature):</span><br><span class="line">jsonschema: &#x27;/runners/0/Monitoring&#x27; does not validate with https://gitlab.com/gitlab-org/gitlab-runner/common/config#/$ref/properties/runners/items/$ref/properties/Monitoring/$ref/type: expected object, but got null</span><br><span class="line"></span><br><span class="line">Configuration loaded                                builds=0 max_builds=1</span><br><span class="line">listen_address not defined, metrics &amp; debug endpoints disabled  builds=0 max_builds=1</span><br><span class="line">[session_server].listen_address not defined, session endpoints disabled  builds=0 max_builds=1</span><br><span class="line">Initializing executor providers                     builds=0 max_builds=1</span><br></pre></td></tr></table></figure><h3 id="流水线规则定义"><a href="#流水线规则定义" class="headerlink" title="流水线规则定义"></a>流水线规则定义</h3><p>在项目目录下创建<code>.gitlab-ci.yml</code>文件，内容如下：</p><figure class="highlight yaml"><figcaption><span>.gitlab-ci.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑规则</span></span><br><span class="line"><span class="attr">workflow:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_BRANCH</span> <span class="string">==</span> <span class="string">&quot;main&quot;</span> <span class="comment"># CI_COMMIT_BRANCH 表示分支为main就触发</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">always</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">when:</span> <span class="string">never</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy_emmet:</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">MyDeploy</span> <span class="comment"># 本地 Runner名称</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hostname</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pwd</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ls</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;本地程序部署&quot;</span></span><br></pre></td></tr></table></figure><h3 id="将代码上传到仓库，查看流水线"><a href="#将代码上传到仓库，查看流水线" class="headerlink" title="将代码上传到仓库，查看流水线"></a>将代码上传到仓库，查看流水线</h3><p>如下所示表示Runner完成<br><img src="http://image.camcad.cn/2024/04/gitlab-runner-deploy-test.png" alt="gitlab-runner-deploy-test"></p><hr><p><img src="http://image.camcad.cn/2024/04/gitlab-runner.png" alt="gitlab-runner"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.gitlab.com/runner/install/windows.html">Install GitLab Runner on Windows</a><br><a href="https://www.youtube.com/watch?v=wRXBztn6OkE&list=PLBd8JGCAcUAEwyH2kT1wW2BUmcSPQzGcu&index=11">為你自己學 GitLab CI&#x2F;CD</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;要在Windows上安装和运行GitLab Runner，您需要：&lt;br&gt;1、本机需要有Git，可以从&lt;a href=&quot;http://git-scm.com/downloads&quot;&gt;官方网站&lt;/a&gt;安装。&lt;br&gt;2、如果你想在你的用户帐户而不是内置系统帐户下运行它，你的用户账户的密码。&lt;br&gt;3、git的基本操作。&lt;br&gt;4、gitlab Runner配置文件&lt;code&gt;.gitlab-ci.yml&lt;/code&gt;的基础语法。&lt;/p&gt;</summary>
    
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/categories/gitlab/"/>
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>gitlab升级流程（ubuntu serve ）</title>
    <link href="https://notes.camcad.cn/post/e7d1d05.html"/>
    <id>https://notes.camcad.cn/post/e7d1d05.html</id>
    <published>2024-04-02T12:49:52.000Z</published>
    <updated>2024-04-27T14:09:01.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># lsb_release -a</span><br><span class="line"></span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description:    Ubuntu 20.04.6 LTS</span><br><span class="line">Release:        20.04</span><br><span class="line">Codename:       focal</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="查看本地的GitLab-CE版本"><a href="#查看本地的GitLab-CE版本" class="headerlink" title="查看本地的GitLab CE版本"></a>查看本地的GitLab CE版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># apt policy gitlab-ce</span><br><span class="line"></span><br><span class="line">gitlab-ce:</span><br><span class="line">  Installed: 15.1.0-ce.0</span><br><span class="line">  Candidate: 15.1.0-ce.0</span><br><span class="line">  Version table:</span><br><span class="line"> *** 15.1.0-ce.0 100</span><br><span class="line">        100 /var/lib/dpkg/status</span><br></pre></td></tr></table></figure><h3 id="备份gitlab"><a href="#备份gitlab" class="headerlink" title="备份gitlab"></a>备份gitlab</h3><p>备份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure><p>并备份下列两个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/gitlab/gitlab.rb</span><br><span class="line">/etc/gitlab/gitlab-secrets.json</span><br></pre></td></tr></table></figure><h3 id="确认升级路径"><a href="#确认升级路径" class="headerlink" title="确认升级路径"></a>确认升级路径</h3><p>确认升级路径URL：<a href="https://gitlab-com.gitlab.io/support/toolbox/upgrade-path/">https://gitlab-com.gitlab.io/support/toolbox/upgrade-path/</a></p><p><img src="http://image.camcad.cn/2024/03/gitlab-upgrade-path.png" alt="gitlab-upgrade-path"></p><h3 id="升级包查看"><a href="#升级包查看" class="headerlink" title="升级包查看"></a>升级包查看</h3><p>社区版升级包下载：<a href="https://packages.gitlab.com/gitlab/gitlab-ce">https://packages.gitlab.com/gitlab/gitlab-ce</a><br><img src="http://image.camcad.cn/2024/03/gitlab-ce.png" alt="gitlab-ce"></p><h3 id="下载升级包"><a href="#下载升级包" class="headerlink" title="下载升级包"></a>下载升级包</h3><p>安装包下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --content-disposition 安装包URL</span><br><span class="line"></span><br><span class="line">wget --content-disposition https://packages.gitlab.com/gitlab/gitlab-ce/packages/ubuntu/focal/gitlab-ce_15.1.6-ce.0_amd64.deb/download.deb</span><br></pre></td></tr></table></figure><h3 id="gitlab升级"><a href="#gitlab升级" class="headerlink" title="gitlab升级"></a>gitlab升级</h3><p>停止服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl stop unicorn</span><br><span class="line">gitlab-ctl stop sidekiq</span><br><span class="line">gitlab-ctl stop nginx</span><br></pre></td></tr></table></figure><p><code>15.11.13 --&gt; 16.1.6</code>需要升级数据库（PostgreSQL）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl pg-upgrade</span><br></pre></td></tr></table></figure><p>安装软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i 软件包</span><br><span class="line"></span><br><span class="line">dpkg -i gitlab-ce_15.4.6-ce.0_amd64.deb</span><br></pre></td></tr></table></figure><p>如下图所示，表示升级完成<br><img src="http://image.camcad.cn/2024/03/gitlab-upgrade-done.png" alt="gitlab-upgrade-done"></p><p>安装完成之后，执行下列命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl reconfigure</span><br><span class="line">gitlab-ctl restart</span><br><span class="line">gitlab-rake gitlab:check SANITIZE=true</span><br></pre></td></tr></table></figure><p>查看gitlab版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1、注意版本，CE 升级到 CE；EE 升级到 EE<br>2、升级路径必须要到官方推荐升级路径上，一个版本一个版本升<br>3、升级前务必做好备份</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;查看系统版本&quot;&gt;&lt;a href=&quot;#查看系统版本&quot; class=&quot;headerlink&quot; title=&quot;查看系统版本&quot;&gt;&lt;/a&gt;查看系统版本&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# lsb_release -a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;No LSB modules are available.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Distributor ID: Ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Description:    Ubuntu 20.04.6 LTS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Release:        20.04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Codename:       focal&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/categories/gitlab/"/>
    
    
    <category term="gitlab" scheme="https://notes.camcad.cn/tags/gitlab/"/>
    
    <category term="ubuntu" scheme="https://notes.camcad.cn/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>CATIA二次开发流程</title>
    <link href="https://notes.camcad.cn/post/2dc29672.html"/>
    <id>https://notes.camcad.cn/post/2dc29672.html</id>
    <published>2024-03-02T19:28:51.000Z</published>
    <updated>2024-04-27T14:09:01.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一个CAA开发流程"><a href="#一个CAA开发流程" class="headerlink" title="一个CAA开发流程"></a>一个CAA开发流程</h3><h4 id="新建菜单和工具条"><a href="#新建菜单和工具条" class="headerlink" title="新建菜单和工具条"></a>新建菜单和工具条</h4><ul><li>新建Workspace，创建Framework</li><li>为addin添加Module</li><li>添加Component</li><li>添加菜单和工具条代码</li><li>定义菜单工具条图标名称资源</li></ul><h4 id="创建响应命令和对话框"><a href="#创建响应命令和对话框" class="headerlink" title="创建响应命令和对话框"></a>创建响应命令和对话框</h4><ul><li>添加新的Module</li><li>添加命令Command</li><li>新建对话框Dialog</li><li>对话框按钮响应</li><li>添加功能函数</li></ul><h4 id="程序调试流程"><a href="#程序调试流程" class="headerlink" title="程序调试流程"></a>程序调试流程</h4><h4 id="复制工作空间"><a href="#复制工作空间" class="headerlink" title="复制工作空间"></a>复制工作空间</h4><span id="more"></span><hr><hr><h3 id="Workspace"><a href="#Workspace" class="headerlink" title="Workspace"></a>Workspace</h3><h4 id="1、New-CAA-V5-Workspace"><a href="#1、New-CAA-V5-Workspace" class="headerlink" title="1、New CAA V5 Workspace"></a>1、New CAA V5 Workspace</h4><p><img src="http://image.camcad.cn/2024/03/01.png" alt="01"><br><img src="http://image.camcad.cn/2024/03/02.png" alt="02"></p><h4 id="2、with、Workspace-Directory、Tool-level"><a href="#2、with、Workspace-Directory、Tool-level" class="headerlink" title="2、with、Workspace Directory、Tool level"></a>2、with、Workspace Directory、Tool level</h4><p><code>with</code>：mkmk是一种用于从源文件构建程序的工具。<br><code>Workspace Directory</code>：设置项目保存目录<br><code>Tool level</code>：CATIA版本<br><img src="http://image.camcad.cn/2024/03/03.png" alt="03"></p><h4 id="3、Create-new-generic-framework"><a href="#3、Create-new-generic-framework" class="headerlink" title="3、Create new generic framework"></a>3、Create new generic framework</h4><p><img src="http://image.camcad.cn/2024/03/04.png" alt="04"></p><h4 id="4、New-Framework"><a href="#4、New-Framework" class="headerlink" title="4、New Framework"></a>4、New Framework</h4><p><code>Implementation</code>：应用程序<br><code>Interface</code>：接口<br><img src="http://image.camcad.cn/2024/03/05.png" alt="05"></p><h4 id="5、New-Module"><a href="#5、New-Module" class="headerlink" title="5、New Module"></a>5、New Module</h4><p><img src="http://image.camcad.cn/2024/03/06.png" alt="06"><br><img src="http://image.camcad.cn/2024/03/07.png" alt="07"></p><h3 id="加载CATIA安装目录"><a href="#加载CATIA安装目录" class="headerlink" title="加载CATIA安装目录"></a>加载CATIA安装目录</h3><h4 id="1、将Module设为启动项目"><a href="#1、将Module设为启动项目" class="headerlink" title="1、将Module设为启动项目"></a>1、将<code>Module</code>设为启动项目</h4><p><img src="http://image.camcad.cn/2024/03/08.png" alt="08"></p><h4 id="2、Locate-Prerequisite-Workspaces"><a href="#2、Locate-Prerequisite-Workspaces" class="headerlink" title="2、Locate Prerequisite Workspaces"></a>2、Locate Prerequisite Workspaces</h4><p><img src="http://image.camcad.cn/2024/03/12.png" alt="12"></p><h4 id="3、添加CATIA安装目录"><a href="#3、添加CATIA安装目录" class="headerlink" title="3、添加CATIA安装目录"></a>3、添加CATIA安装目录</h4><p><img src="http://image.camcad.cn/2024/03/13.png" alt="13"></p><p><img src="http://image.camcad.cn/2024/03/14.png" alt="14"></p><h5 id="3-1-加载成功"><a href="#3-1-加载成功" class="headerlink" title="3.1 加载成功"></a>3.1 加载成功</h5><p><img src="http://image.camcad.cn/2024/03/16.png" alt="16"></p><h5 id="3-2-加载失败"><a href="#3-2-加载失败" class="headerlink" title="3.2 加载失败"></a>3.2 <code>加载失败</code></h5><p><img src="http://image.camcad.cn/2024/03/17.png" alt="17"></p><h3 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h3><p><img src="http://image.camcad.cn/2024/03/09.png" alt="09"></p><h4 id="1、Insert-Component"><a href="#1、Insert-Component" class="headerlink" title="1、Insert Component"></a>1、Insert Component</h4><p><img src="http://image.camcad.cn/2024/03/10.png" alt="10"><br><img src="http://image.camcad.cn/2024/03/11.png" alt="11"></p><h4 id="2、Interface-to-implement"><a href="#2、Interface-to-implement" class="headerlink" title="2、Interface to implement"></a>2、Interface to implement</h4><p><img src="http://image.camcad.cn/2024/03/18.png" alt="18"><br><img src="http://image.camcad.cn/2024/03/19.png" alt="19"><br><img src="http://image.camcad.cn/2024/03/20.png" alt="20"></p><h3 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h3><p><img src="http://image.camcad.cn/2024/03/26.png" alt="26"><br><img src="http://image.camcad.cn/2024/03/27.png" alt="27"><br><img src="http://image.camcad.cn/2024/03/28.png" alt="28"></p><h3 id="按钮位图资源文件存储"><a href="#按钮位图资源文件存储" class="headerlink" title="按钮位图资源文件存储"></a>按钮位图资源文件存储</h3><p>在<code>...\CNext\resources\graphic\icons\normal\</code>目录下创建<code>CAAHHello.bmp</code>资源文件。<br>创建<code>...\CNext\resources\msgcatalog\CAAHHello.CATRsc</code>文件，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAAHHello.CAACmd.Icon.Normal=&quot;CAAHHello.bmp&quot;;</span><br></pre></td></tr></table></figure><h3 id="按钮相关帮助文件"><a href="#按钮相关帮助文件" class="headerlink" title="按钮相关帮助文件"></a>按钮相关帮助文件</h3><p>创建<code>...\CNext\resources\msgcatalog\CAAHHello.CATNls</code>文件，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CAAHHello.CAACmd.Title = &quot;EMMET命令&quot;;</span><br><span class="line">CAAHHello.CAACmd.Help = &quot;EMMET提示文字&quot;;</span><br><span class="line">CAAHHello.CAACmd.ShortHelp = &quot;EMMET冒泡信息&quot;;</span><br></pre></td></tr></table></figure><h3 id="按钮标题"><a href="#按钮标题" class="headerlink" title="按钮标题"></a>按钮标题</h3><p>创建<code>...\CNext\resources\msgcatalog\CAACHello.CATNls</code>文件，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BtToolbar.Title = &quot;EMMET工具名称&quot;;</span><br></pre></td></tr></table></figure><h3 id="按钮激活提示信息"><a href="#按钮激活提示信息" class="headerlink" title="按钮激活提示信息"></a>按钮激活提示信息</h3><p>创建<code>...\CNext\resources\msgcatalog\CAARCHello.CATNls</code>文件，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAARCHello.initialState.Message = &quot;按钮激活后的状态提示&quot;;</span><br></pre></td></tr></table></figure><h3 id="mkmk编译"><a href="#mkmk编译" class="headerlink" title="mkmk编译"></a>mkmk编译</h3><h4 id="1、mkmk编译设置"><a href="#1、mkmk编译设置" class="headerlink" title="1、mkmk编译设置"></a>1、mkmk编译设置</h4><p><img src="http://image.camcad.cn/2024/03/21.png" alt="21"><br><img src="http://image.camcad.cn/2024/03/22.png" alt="22"></p><h4 id="2、编译存在错误"><a href="#2、编译存在错误" class="headerlink" title="2、编译存在错误"></a>2、编译存在错误</h4><p><img src="http://image.camcad.cn/2024/03/23.png" alt="23"></p><h4 id="3、添加接口"><a href="#3、添加接口" class="headerlink" title="3、添加接口"></a>3、添加接口</h4><h5 id="IdentityCard-IdentityCard-h"><a href="#IdentityCard-IdentityCard-h" class="headerlink" title="...\IdentityCard\IdentityCard.h"></a><code>...\IdentityCard\IdentityCard.h</code></h5><figure class="highlight c++"><figcaption><span>IdentityCard.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="built_in">AddPrereqComponent</span>(<span class="string">&quot;ApplicationFrame&quot;</span>,Protected);</span><br><span class="line"><span class="built_in">AddPrereqComponent</span>(<span class="string">&quot;DialogEngine&quot;</span>,Public);</span><br><span class="line"><span class="built_in">AddPrereqComponent</span>(<span class="string">&quot;Mathematics&quot;</span>,Public);</span><br><span class="line"><span class="built_in">AddPrereqComponent</span>(<span class="string">&quot;Dialog&quot;</span>,Public);</span><br></pre></td></tr></table></figure><p><img src="http://image.camcad.cn/2024/03/24.png" alt="24"></p><h4 id="4、添加模块"><a href="#4、添加模块" class="headerlink" title="4、添加模块"></a>4、添加模块</h4><h5 id="CAAMHello-m-Imakefile-mk"><a href="#CAAMHello-m-Imakefile-mk" class="headerlink" title="...\CAAMHello.m\Imakefile.mk"></a><code>...\CAAMHello.m\Imakefile.mk</code></h5><figure class="highlight c++"><figcaption><span>Imakefile.mk</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">LINK_WITH = $(WIZARD_LINK_MODULES) CATApplicationFrame \</span><br><span class="line">CATDialogEngine CATMathematics DI0PANV2</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p><img src="http://image.camcad.cn/2024/03/25.png" alt="25"></p><h5 id="在-CAAMHello-m-LocalInterfaces-CAACHello-h文件中，添加内容如下："><a href="#在-CAAMHello-m-LocalInterfaces-CAACHello-h文件中，添加内容如下：" class="headerlink" title="在...\CAAMHello.m\LocalInterfaces\CAACHello.h文件中，添加内容如下："></a>在<code>...\CAAMHello.m\LocalInterfaces\CAACHello.h</code>文件中，添加内容如下：</h5><figure class="highlight c++"><figcaption><span>CAACHello.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;CATCmdContainer.h&gt;</span><span class="comment">// “CATCmdContainer * CreateToolbars()” 函数返回指针，所需头文件</span></span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CAACHello</span>: <span class="keyword">public</span> CATBaseUnknown</span><br><span class="line">&#123;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateCommands</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">CATCmdContainer * <span class="title">CreateToolbars</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="在-CAAMHello-m-src-CAACHello-cpp文件中，添加内容如下："><a href="#在-CAAMHello-m-src-CAACHello-cpp文件中，添加内容如下：" class="headerlink" title="在...\CAAMHello.m\src\CAACHello.cpp文件中，添加内容如下："></a>在<code>...\CAAMHello.m\src\CAACHello.cpp</code>文件中，添加内容如下：</h5><p>注意“MacDeclareHeader(CAAHHello);”中<code>CAAHHello</code>名称自行定义，但需要<code>保持一致</code>。</p><figure class="highlight c++"><figcaption><span>CAACHello.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;CATIPRDWorkshopAddin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;CATCommandHeader.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;CATCmdContainer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;CATCreateWorkshop.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;CATStateCommand.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;CATMathPlane.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">MacDeclareHeader</span>(CAAHHello);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">CATImplementClass</span>(CAACHello,</span><br><span class="line">                  Implementation,</span><br><span class="line">                  CATBaseUnknown,</span><br><span class="line">                  CATnull );</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAACHello::CreateCommands</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 新建按钮</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">CAAHHello</span></span><br><span class="line">(<span class="string">&quot;CAACmd&quot;</span>,</span><br><span class="line"><span class="string">&quot;CAACHello&quot;</span>,</span><br><span class="line"><span class="string">&quot;CAARCHello&quot;</span>,</span><br><span class="line">(<span class="type">void</span>*)<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">CATCmdContainer * <span class="title">CAACHello::CreateToolbars</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">NewAccess</span>(CATCmdContainer,pToolbarContainer,BtToolbar);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NewAccess</span>(CATCmdStarter,pCommandStarter,CATnull);</span><br><span class="line"></span><br><span class="line"><span class="built_in">SetAccessCommand</span>(pCommandStarter,<span class="string">&quot;CAACmd&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">SetAccessChild</span>(pToolbarContainer,pCommandStarter);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> nVisibleFlag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">AddToolbarView</span>(pToolbarContainer,nVisibleFlag,Top);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pToolbarContainer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、添加提示对话框"><a href="#5、添加提示对话框" class="headerlink" title="5、添加提示对话框"></a>5、添加提示对话框</h4><p>在<code>...\CAAMHello.m\src\CAARCHello.cpp</code>文件，添加如下代码：</p><figure class="highlight c++"><figcaption><span>CAARCHello.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;CATApplicationFrame.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;CATDlgNotify.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CAARCHello::BuildGraph</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Define the StateChart</span></span><br><span class="line">  <span class="comment">// ---------------------------</span></span><br><span class="line">  _Indication = <span class="keyword">new</span> <span class="built_in">CATIndicationAgent</span> (<span class="string">&quot;Indication&quot;</span>);</span><br><span class="line">  CATMathPlane PlaneXY;</span><br><span class="line">  _Indication -&gt; <span class="built_in">SetMathPlane</span> (PlaneXY);</span><br><span class="line">  CATDialogState * initialState = <span class="built_in">GetInitialState</span>(<span class="string">&quot;initialState&quot;</span>);</span><br><span class="line">  initialState -&gt; <span class="built_in">AddDialogAgent</span> (_Indication);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">AddTransition</span>( initialState, <span class="literal">NULL</span>, </span><br><span class="line">                 <span class="built_in">IsOutputSetCondition</span> (_Indication),</span><br><span class="line">                 <span class="built_in">Action</span> ((ActionMethod) &amp;CAARCHello::ActionOne));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加提示对话框</span></span><br><span class="line">  CATApplicationFrame *pApplication = CATApplicationFrame::<span class="built_in">GetFrame</span>();</span><br><span class="line">  <span class="keyword">if</span>(pApplication != <span class="literal">NULL</span>)&#123;</span><br><span class="line">CATDlgWindow *pMainWindow = pApplication-&gt;<span class="built_in">GetMainWindow</span>();</span><br><span class="line">CATDlgNotify *pNotifyDlg = <span class="keyword">new</span> <span class="built_in">CATDlgNotify</span>(pMainWindow,<span class="string">&quot;BtCommandDlg&quot;</span>,CATDlgNfyOK);</span><br><span class="line"><span class="keyword">if</span>(pNotifyDlg != <span class="literal">NULL</span>)&#123;</span><br><span class="line">pNotifyDlg-&gt;<span class="built_in">DisplayBlocked</span>(<span class="string">&quot;Hello World!&quot;</span>,<span class="string">&quot;EMMET 对话框名称&quot;</span>);</span><br><span class="line">pNotifyDlg-&gt;<span class="built_in">RequestDelayedDestruction</span>();</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">RequestDelayedDestruction</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译工程"><a href="#编译工程" class="headerlink" title="编译工程"></a>编译工程</h3><p><img src="http://image.camcad.cn/2024/03/31.png" alt="31"></p><h3 id="Create-x2F-Update-Runtime-View"><a href="#Create-x2F-Update-Runtime-View" class="headerlink" title="Create&#x2F;Update Runtime View"></a>Create&#x2F;Update Runtime View</h3><p><img src="http://image.camcad.cn/2024/03/32.png" alt="32"><br><img src="http://image.camcad.cn/2024/03/33.png" alt="33"></p><h3 id="CAA控制台窗口的输出变量设置"><a href="#CAA控制台窗口的输出变量设置" class="headerlink" title="CAA控制台窗口的输出变量设置"></a>CAA控制台窗口的输出变量设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET CNEXTOUTPUT = CONSOLE</span><br><span class="line"></span><br><span class="line">变量名称：CNEXTOUTPUT，值：CONSOLE</span><br></pre></td></tr></table></figure><p><img src="http://image.camcad.cn/2024/03/29.png" alt="29"><br><img src="http://image.camcad.cn/2024/03/30.png" alt="30"></p><h3 id="调动CATIA"><a href="#调动CATIA" class="headerlink" title="调动CATIA"></a>调动CATIA</h3><p><img src="http://image.camcad.cn/2024/03/34.png" alt="34"><br><img src="http://image.camcad.cn/2024/03/35.png" alt="35"></p><h3 id="工具条加载效果"><a href="#工具条加载效果" class="headerlink" title="工具条加载效果"></a>工具条加载效果</h3><p><img src="http://image.camcad.cn/2024/03/36.png" alt="36"><br><img src="http://image.camcad.cn/2024/03/37.png" alt="37"></p><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p><img src="http://image.camcad.cn/2024/03/38.png" alt="38"></p><h4 id="运行效果（无对话框）"><a href="#运行效果（无对话框）" class="headerlink" title="运行效果（无对话框）"></a>运行效果（无对话框）</h4><p><img src="http://image.camcad.cn/2024/03/39.png" alt="39"></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;一个CAA开发流程&quot;&gt;&lt;a href=&quot;#一个CAA开发流程&quot; class=&quot;headerlink&quot; title=&quot;一个CAA开发流程&quot;&gt;&lt;/a&gt;一个CAA开发流程&lt;/h3&gt;&lt;h4 id=&quot;新建菜单和工具条&quot;&gt;&lt;a href=&quot;#新建菜单和工具条&quot; class=&quot;headerlink&quot; title=&quot;新建菜单和工具条&quot;&gt;&lt;/a&gt;新建菜单和工具条&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;新建Workspace，创建Framework&lt;/li&gt;
&lt;li&gt;为addin添加Module&lt;/li&gt;
&lt;li&gt;添加Component&lt;/li&gt;
&lt;li&gt;添加菜单和工具条代码&lt;/li&gt;
&lt;li&gt;定义菜单工具条图标名称资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;创建响应命令和对话框&quot;&gt;&lt;a href=&quot;#创建响应命令和对话框&quot; class=&quot;headerlink&quot; title=&quot;创建响应命令和对话框&quot;&gt;&lt;/a&gt;创建响应命令和对话框&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;添加新的Module&lt;/li&gt;
&lt;li&gt;添加命令Command&lt;/li&gt;
&lt;li&gt;新建对话框Dialog&lt;/li&gt;
&lt;li&gt;对话框按钮响应&lt;/li&gt;
&lt;li&gt;添加功能函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;程序调试流程&quot;&gt;&lt;a href=&quot;#程序调试流程&quot; class=&quot;headerlink&quot; title=&quot;程序调试流程&quot;&gt;&lt;/a&gt;程序调试流程&lt;/h4&gt;&lt;h4 id=&quot;复制工作空间&quot;&gt;&lt;a href=&quot;#复制工作空间&quot; class=&quot;headerlink&quot; title=&quot;复制工作空间&quot;&gt;&lt;/a&gt;复制工作空间&lt;/h4&gt;</summary>
    
    
    
    <category term="CATIA" scheme="https://notes.camcad.cn/categories/CATIA/"/>
    
    
    <category term="CATIA二次开发" scheme="https://notes.camcad.cn/tags/CATIA%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>socket编程</title>
    <link href="https://notes.camcad.cn/post/79a3d743.html"/>
    <id>https://notes.camcad.cn/post/79a3d743.html</id>
    <published>2023-12-10T21:36:12.000Z</published>
    <updated>2024-04-27T14:09:01.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>socket</strong>—插口代表一条通信链路的一端，存储或指向与链路有关的所有信息。这些信息包括：使用的协议、协议的状态信息(包括源和目的地址)、到达的连接队列、数据缓存和可选标志。</p><span id="more"></span><table>    <tr>        <th>类别</th>        <th>名称</th>        <th>功能</th>      </tr >    <tr >        <td align="center" colspan="3">Net/3中的网络系统调用</td>    </tr>    <tr >        <td rowspan="2">建立</td>        <td>socket</td>        <td>在指明的通信域内产生一个未命名的插口</td>    </tr>    <tr>        <td>bind</td>        <td>分配一个本地地址给插口</td>    </tr>    <tr>        <td rowspan="2">服务器</td>        <td>listen</td>        <td>使插口准备接收连接请求</td>    </tr>    <tr>        <td>accept</td>        <td>等待并接受连接</td>    </tr>    <tr>      <td>客户</td>      <td>connect</td>        <td>同外部插口建立连接</td>    </tr>    <tr>        <td rowspan="5">输入</td>        <td>read</td>        <td>接收数据到一个缓存中</td>    </tr>    <tr>        <td>readv</td>        <td>接收数据到多个缓存中</td>    </tr>    <tr>        <td>recv</td>        <td>指明选项接收数据</td>    </tr>    <tr>        <td>recvfrom</td>        <td>接收数据和发送者的地址</td>    </tr>    <tr>        <td >recvmsg</td>        <td>接收数据到多个缓存中，接收控制信息和发送者地址；指明接收选项</td>    </tr>    <tr>        <td rowspan="5">输出</td>        <td >write</td>        <td >发送一个缓存中的数据</td>    </tr>    <tr>        <td >writev</td>        <td >发送多个缓存中的数据</td>    </tr>    <tr>        <td >send</td>        <td >指明选项发送数据</td>    </tr>    <tr>        <td >sendto</td>        <td >发送数据到指明的地址</td>    </tr>    <tr>        <td >sendmsg</td>        <td >从多个缓存发送数据和控制信息到指明的地址；指明发送选项</td>    </tr>    <tr>        <td >I/O</td>        <td >select</td>        <td >等待I/O事件</td>    </tr>    <tr>        <td rowspan="2">终止</td>        <td >shutdown</td>        <td >终止一个或两个方向上的连接</td>    </tr>    <tr>        <td >close</td>        <td >终止连接并释放插口</td>    </tr>    <tr>        <td rowspan="6">管理</td>        <td >fcntl</td>        <td >修改I/O语义</td>    </tr>    <tr>        <td >ioctl</td>        <td >各类插口操作</td>    </tr>    <tr>        <td >setsockopt</td>        <td >设置插口或协议选项</td>    </tr>    <tr>        <td >getsockopt</td>        <td >得到插口或协议选项</td>    </tr>    <tr>        <td >getsockname</td>        <td >得到分配给插口的本地地址</td>    </tr>    <tr>        <td >getpeername</td>        <td >得到分配给插口的远端地址</td>    <tr >        <td align="center" colspan="3">蚂蚁Emmet</td>    </tr></table><h3 id="网络系统调用流程图"><a href="#网络系统调用流程图" class="headerlink" title="网络系统调用流程图"></a>网络系统调用流程图</h3><p><img src="http://image.camcad.cn/2023/12/%E7%BD%91%E7%BB%9C%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="网络系统调用流程图"></p><h2 id="socket系统原型"><a href="#socket系统原型" class="headerlink" title="socket系统原型"></a>socket系统原型</h2><h4 id="Linux-Ubuntu"><a href="#Linux-Ubuntu" class="headerlink" title="Linux Ubuntu"></a>Linux Ubuntu</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>    <span class="comment">/* See NOTES */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">socket</span><span class="params">(<span class="type">int</span> domain, <span class="type">int</span> type, <span class="type">int</span> protocol)</span>;</span><br></pre></td></tr></table></figure><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">SOCKET WSAAPI <span class="title function_">socket</span><span class="params">([in] <span class="type">int</span> af,[in] <span class="type">int</span> type,[in] <span class="type">int</span> protocol)</span>;</span><br></pre></td></tr></table></figure><h4 id="domain-x2F-af-常用互联网协议"><a href="#domain-x2F-af-常用互联网协议" class="headerlink" title="[domain&#x2F;af]常用互联网协议"></a>[domain&#x2F;af]常用互联网协议</h4><p>Internet地址协议族格式。</p><table><thead><tr><th align="center">参数</th><th align="center">作用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">AF_INET</td><td align="center">IPv4 Internet protocols</td><td align="center">IPv4互联网协议</td></tr><tr><td align="center">AF_INET6</td><td align="center">IPv6 Internet protocols</td><td align="center">IPv6互联网协议</td></tr></tbody></table><h4 id="type-常用参数"><a href="#type-常用参数" class="headerlink" title="[type]常用参数"></a>[type]常用参数</h4><p>套接字具有指定的类型，该类型指定通信语义。</p><table><thead><tr><th align="center">参数</th><th align="left">作用</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">SOCK_STREAM</td><td align="left">Provides sequenced, reliable, two-way, connection-based byte  streams. An out-of-band data transmission mechanism may be supported.</td><td align="left">提供有序、可靠、双向、基于连接的字节流。可以支持带外数据传输机制。此套接字类型将传输控制协议（TCP）用于Internet地址系列（AF_INET或AF_INET6）。</td></tr><tr><td align="center">SOCK_DGRAM</td><td align="left">A socket type that supports datagrams, which are connectionless, unreliable buffers of a fixed (typically small) maximum length. This socket type uses the User Datagram Protocol (UDP) for the Internet address family (AF_INET or AF_INET6).</td><td align="left">支持数据报的套接字类型，数据报是无连接、不可靠的最大长度固定(通常很小)的缓冲区。此套接字类型将用户数据报协议(UDP)用于Internet地址系列(AF_INET或AF_INET6)。</td></tr></tbody></table><h4 id="protocol-参数"><a href="#protocol-参数" class="headerlink" title="[protocol]参数"></a>[protocol]参数</h4><p>要使用的协议。协议参数的可能选项特定于指定的地址族和套接字类型。</p><h5 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h5><p>用于制定某个协议的特定类型，即type类型中的某个类型。通常某协议中只有一种特定类型，这样protocol参数仅能设置为0；但是有些协议有多种特定的类型，就需要设置这个参数来选择特定的类型。</p><blockquote><p>1、类型为SOCK_STREAM的套接字表示一个双向的字节流，与管道类似。流式的套接字在进行数据收发之前必须已经连接，连接使用<code>connect()</code>函数进行。一旦连接，可以使用read()或者write()函数进行数据的传输。流式通信方式保证数据不会丢失或者重复接收，当数据在一段时间内任然没有接受完毕，可以认为这个连接已经死掉。<br>2、SOCK_DGRAM和SOCK_RAW 这个两种套接字可以使用函数<code>sendto()</code>来发送数据，使用recvfrom()函数接受数据，recvfrom()接受来自制定IP地址的发送方的数据。<br>3、SOCK_PACKET是一种专用的数据包，它直接从设备驱动接受数据。</p></blockquote><h5 id="windows-1"><a href="#windows-1" class="headerlink" title="windows"></a>windows</h5><table><thead><tr><th align="center">参数</th><th align="left">作用</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">IPPROTO_TCP</td><td align="left">The Transmission Control Protocol (TCP). This is a possible value when the af parameter is AF_INET or AF_INET6 and the type parameter is SOCK_STREAM.</td><td align="left">传输控制协议（TCP）。当af参数为<code>AF_INET</code>或<code>AF_INET6</code>并且类型参数为<code>SOCK_STREAM</code>时，这是一个可能的值。</td></tr><tr><td align="center">IPPROTO_UDP</td><td align="left">The User Datagram Protocol (UDP). This is a possible value when the af parameter is AF_INET or AF_INET6 and the type parameter is SOCK_DGRAM.</td><td align="left">用户数据报协议（UDP）。当af参数是<code>AF_INET</code>或<code>AF_INET6</code>并且类型参数是<code>SOCK_DGRAM</code>时，这是一个可能的值。</td></tr></tbody></table><h4 id="return-value（返回值）"><a href="#return-value（返回值）" class="headerlink" title="return value（返回值）"></a>return value（返回值）</h4><table><thead><tr><th align="center">系统</th><th align="left">作用</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">linux ubuntu</td><td align="left">On success, a file descriptor for the new socket is returned.  On error, -1 is returned, and errno is set appropriately.</td><td align="left">成功后，将返回新套接字的文件描述符。出现错误时，返回-1，并且errno被适当地设置(查看帮助)</td></tr><tr><td align="center">windows</td><td align="left">If no error occurs, socket returns a descriptor referencing the new socket. Otherwise, a value of INVALID_SOCKET is returned, and a specific error code can be retrieved by calling WSAGetLastError.</td><td align="left">如果没有出现错误，socket将返回一个引用新套接字的描述符。否则，将返回INVALID_SOCKET的值，并且可以通过调用WSAGetLastError来检索特定的错误代码。</td></tr></tbody></table><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>[第15章 插口层 355页]TCPIP详解 卷2：实现（原书第2版） by Kevin R. Fall W. Richard Stevens<br><a href="http://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-socket">windows-socket</a><br>[man 2 socket] linux ubuntu 函数帮助文档</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;socket&lt;/strong&gt;—插口代表一条通信链路的一端，存储或指向与链路有关的所有信息。这些信息包括：使用的协议、协议的状态信息(包括源和目的地址)、到达的连接队列、数据缓存和可选标志。&lt;/p&gt;</summary>
    
    
    
    <category term="网络编程" scheme="https://notes.camcad.cn/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="socket" scheme="https://notes.camcad.cn/tags/socket/"/>
    
    <category term="网络编程" scheme="https://notes.camcad.cn/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++API设计（API Design for C++）</title>
    <link href="https://notes.camcad.cn/post/9d7d8543.html"/>
    <id>https://notes.camcad.cn/post/9d7d8543.html</id>
    <published>2023-12-09T16:19:02.000Z</published>
    <updated>2024-04-27T14:09:01.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><h3 id="Pimpl（pointer-to-implementation-x3D-指向实现的指针）惯用法"><a href="#Pimpl（pointer-to-implementation-x3D-指向实现的指针）惯用法" class="headerlink" title="Pimpl（pointer to implementation &#x3D; 指向实现的指针）惯用法"></a>Pimpl（pointer to implementation &#x3D; 指向实现的指针）惯用法</h3><p>Pimpl（pointer to implementation &#x3D; 指向实现的指针）惯用法，该技巧支持在公有接口中完全隐藏内部细节。从本质上讲，它支持将私有的成员数据和方法转移到<code>.cpp</code>文件中。因此，Pimpl惯用法是构建接口和实现恰当分离的API的不可或缺的技巧。</p><span id="more"></span><figure class="highlight c++"><figcaption><span>autotimer.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// -*- tab-width: 4; c-basic-offset: 4; indent-tabs-mode: t -*-</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// \file   autotimer.h</span></span><br><span class="line"><span class="comment">/// \author Martin Reddy</span></span><br><span class="line"><span class="comment">/// \brief  An example of Pimpl with a smart pointer.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Copyright (c) 2010, Martin Reddy. All rights reserved.</span></span><br><span class="line"><span class="comment">/// Distributed under the X11/MIT License. See LICENSE.txt.</span></span><br><span class="line"><span class="comment">/// See http://APIBook.com/ for the latest version.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> AUTOTIMER_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AUTOTIMER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> apibook &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// An object that reports how long it was alive for when it</span></span><br><span class="line"><span class="comment">/// is destroyed.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AutoTimer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/// Create a new timer object with a human-readable name</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">AutoTimer</span><span class="params">(<span class="type">const</span> std::string &amp;name)</span></span>;</span><br><span class="line"><span class="comment">/// On destruction, the timer reports how long it was alive</span></span><br><span class="line">~<span class="built_in">AutoTimer</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Impl</span>;</span><br><span class="line">std::shared_ptr&lt;Impl&gt; mImpl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>autotimer.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// -*- tab-width: 4; c-basic-offset: 4; indent-tabs-mode: t -*-</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// \file   autotimer.cpp</span></span><br><span class="line"><span class="comment">/// \author Martin Reddy</span></span><br><span class="line"><span class="comment">/// \brief  An example of Pimpl with a smart pointer.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Copyright (c) 2010, Martin Reddy. All rights reserved.</span></span><br><span class="line"><span class="comment">/// Distributed under the X11/MIT License. See LICENSE.txt.</span></span><br><span class="line"><span class="comment">/// See http://APIBook.com/ for the latest version.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;autotimer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> apibook &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AutoTimer</span>::Impl</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Return how long the object has been alive</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">GetElapsed</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">GetTickCount</span>() - mStartTime) / <span class="number">1e3</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">timeval</span> end_time;</span><br><span class="line"><span class="built_in">gettimeofday</span>(&amp;end_time, <span class="literal">NULL</span>);</span><br><span class="line"><span class="type">double</span> t1 = mStartTime.tv_usec / <span class="number">1e6</span> + mStartTime.tv_sec;</span><br><span class="line"><span class="type">double</span> t2 = end_time.tv_usec / <span class="number">1e6</span> + end_time.tv_sec;</span><br><span class="line"><span class="keyword">return</span> t2 - t1;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::string mName;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">DWORD mStartTime;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">timeval</span> mStartTime;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">AutoTimer::<span class="built_in">AutoTimer</span>(<span class="type">const</span> std::string &amp;name) :</span><br><span class="line"><span class="built_in">mImpl</span>(<span class="keyword">new</span> AutoTimer::<span class="built_in">Impl</span>())</span><br><span class="line">&#123;</span><br><span class="line">mImpl-&gt;mName = name;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">mImpl-&gt;mStartTime = <span class="built_in">GetTickCount</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="built_in">gettimeofday</span>(&amp;mImpl-&gt;mStartTime, <span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AutoTimer::~<span class="built_in">AutoTimer</span>()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; mImpl-&gt;mName &lt;&lt; <span class="string">&quot;: took &quot;</span> &lt;&lt; mImpl-&gt;<span class="built_in">GetElapsed</span>()</span><br><span class="line">  &lt;&lt; <span class="string">&quot; secs&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>main.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// -*- tab-width: 4; c-basic-offset: 4; indent-tabs-mode: t -*-</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// \file   main.cpp</span></span><br><span class="line"><span class="comment">/// \author Martin Reddy</span></span><br><span class="line"><span class="comment">/// \brief  An example of Pimpl with a smart pointer.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Copyright (c) 2010, Martin Reddy. All rights reserved.</span></span><br><span class="line"><span class="comment">/// Distributed under the X11/MIT License. See LICENSE.txt.</span></span><br><span class="line"><span class="comment">/// See http://APIBook.com/ for the latest version.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;autotimer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span>, <span class="type">char</span> **)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">apibook::AutoTimer <span class="title">timer</span><span class="params">(<span class="string">&quot;MyTimer&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li><strong>信息隐藏</strong>—私有成员现在可以完全隐藏在公有接口之外，使得实现细节得以隐藏（同时保护了闭源API的专有性)。信息隐藏也意味着公有头文件能够更加干净、更加清晰地表达真正的公有接口，因此也更易于用户阅读和理解。信息隐藏带来的另一个好处是，用户不能轻易使用“脏”手段访问私有成员。</li><li><strong>降低耦合</strong>—不用Pimpl，公有头文件就必须包含所有私有成员变量所需的头文件，这就增加了API与其他部分在编译时的耦合度。使用Pimpl可以将那些依赖项转移到.cpp文件中，并移除耦合的元素。</li><li><strong>加速编译</strong>—将与实现相关的头文件移入.cpp文件带来的另一个隐含结果是API的引用层次得以降低，这将直接影响编译时间。</li><li><strong>更好的二进制兼容性</strong>—采用Pimpl的对象大小从不改变，因为对象总是单个指针的大小。对私有成员变量做任何修改都只影响隐藏在.cpp文件内部的实现类的大小。如果对实现做出重大改变时，对象的<code>二进制</code>表示可以不变。</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>Pimpl惯用法最主要的缺点是，必须为你创建的每个对象<code>分配并释放</code>实现对象。这使对象增加了一个指针，同时因为必须通过指针间接访问所有成员变量，这种额外的调用层次与新增的<code>new和delete</code>开销类似，可能引入性能冲击。</li><li>编译器将不再能够捕获<code>const</code>方法中对成员变量的修改。这是由于成员变量现在存在于独立的对象中。编译器仅检查<code>const</code>方法中的<code>mImp1</code>指针值是否发生变化，而不检查<code>mImp1</code>指向的任何成员。事实上，采用Pimpl的类中的每个成员函数都可以定义为<code>const</code>的。(除了构造函数和析构函数。)下面的const方法改变了Imp1对象中的变量，这证明了上述说法。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PimpledObject::ConstMethod</span><span class="params">()</span> <span class="type">const</span></span>&#123;</span><br><span class="line">    mImp1-&gt;mName = <span class="string">&quot;const方法更改的字符串&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li>C++ API设计( API Design for C++) ([美]Martin Reddy 刘晓娜，臧秀涛，林健)[第3章 模式-pimpl惯用法，55页]</li><li><a href="http://apibook.com/">http://apibook.com</a></li></ol><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><h3 id="类设计选项"><a href="#类设计选项" class="headerlink" title="类设计选项"></a>类设计选项</h3><ol><li><strong>const的使用</strong>—尽可能将参数、返回值和方法定义为const。</li><li><strong>exp1icit的使用</strong>—对于单参数构造函数使用<code>explicit</code>关键字以避免意外的类型转换。</li></ol><figure class="highlight c++"><figcaption><span>定义</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">A</span>();<span class="comment">// default构造函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">B</span><span class="params">(<span class="type">int</span> x = <span class="number">0</span>,<span class="type">bool</span> b = <span class="literal">true</span>)</span></span>;<span class="comment">//explicit和default构造函数;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doSomething</span><span class="params">(B bObject)</span></span>;<span class="comment">// 接受一个类型为B的对象</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>正确示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">B bObj1;<span class="comment">// 一个类型为B的对象</span></span><br><span class="line"><span class="built_in">doSomething</span>(bObj1);<span class="comment">// 没问题，传递一个B对象给doSomething函数</span></span><br><span class="line"><span class="function">B <span class="title">bObj2</span><span class="params">(<span class="number">26</span>)</span></span>;<span class="comment">// 没问题，根据int（26）建立一个B对象（函数的bool参数缺省值为true）</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>错误示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">doSomething</span>(<span class="number">26</span>);<span class="comment">//explicit：错误，doSomething应该接受一个B对象，不是一个int，而int至B对象之间，并没有隐式转换</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">doSomething</span>(<span class="built_in">B</span>(<span class="number">26</span>));<span class="comment">// 没有问题，使用B构造函数将int显式转换（也就是转型，cast）为一个B对象以促成此一调用</span></span><br></pre></td></tr></table></figure><h4 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h4><ol><li>C++ API设计( API Design for C++) ([美]Martin Reddy 刘晓娜，臧秀涛，林健)[第4章 设计-类的设计，113页]</li><li>Effective C++ 改善程序与设计的55个具体做法 第3版 ([美] Scott Meyers  侯捷 译)[1.让自己习惯C++ -条例03：尽可能使用const，13页]</li><li><a href="http://apibook.com/">http://apibook.com</a></li></ol><h3 id="为多态基类声明virtual析构函数"><a href="#为多态基类声明virtual析构函数" class="headerlink" title="为多态基类声明virtual析构函数"></a>为多态基类声明virtual析构函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TimeKeeper</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">TimeKeeper</span>()&#123;&#125;</span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">TimeKeeper</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AtomicClock</span>: <span class="keyword">public</span> TimeKeeper&#123;...&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WaterClock</span>: <span class="keyword">public</span> TimeKeeper&#123;...&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WristWatch</span>: <span class="keyword">public</span> TimeKeeper&#123;...&#125;;</span><br></pre></td></tr></table></figure><p><strong>避免资源泄漏：</strong>polymorphic（带多态性质的）base classes应该声明一个virtual析构函数。如果class带有任何virtual函数，它就应该拥有一个virtual析构函数。<br><strong>非基类不声明virtual：</strong>Classes的设计目的如果不是作为base classes使用，或不是为了具备多态性(polymorphically），就不该声明virtual析构函数。<code>不然会导致对象的体积增加和不再具有移植性</code>。</p><h4 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h4><ol><li>Effective C++ 改善程序与设计的55个具体做法 第3版 ([美] Scott Meyers  侯捷 译)[2.构造 &#x2F; 析构 &#x2F; 赋值运算-条例07：为多态基类声明virtual析构函数，40页]</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;模式&quot;&gt;&lt;a href=&quot;#模式&quot; class=&quot;headerlink&quot; title=&quot;模式&quot;&gt;&lt;/a&gt;模式&lt;/h2&gt;&lt;h3 id=&quot;Pimpl（pointer-to-implementation-x3D-指向实现的指针）惯用法&quot;&gt;&lt;a href=&quot;#Pimpl（pointer-to-implementation-x3D-指向实现的指针）惯用法&quot; class=&quot;headerlink&quot; title=&quot;Pimpl（pointer to implementation &amp;#x3D; 指向实现的指针）惯用法&quot;&gt;&lt;/a&gt;Pimpl（pointer to implementation &amp;#x3D; 指向实现的指针）惯用法&lt;/h3&gt;&lt;p&gt;Pimpl（pointer to implementation &amp;#x3D; 指向实现的指针）惯用法，该技巧支持在公有接口中完全隐藏内部细节。从本质上讲，它支持将私有的成员数据和方法转移到&lt;code&gt;.cpp&lt;/code&gt;文件中。因此，Pimpl惯用法是构建接口和实现恰当分离的API的不可或缺的技巧。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="https://notes.camcad.cn/categories/C/"/>
    
    
    <category term="C++" scheme="https://notes.camcad.cn/tags/C/"/>
    
  </entry>
  
</feed>
