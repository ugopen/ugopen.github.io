<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蚂蚁Emmet</title>
  
  <subtitle>逆境求生存，顺境求发展</subtitle>
  <link href="https://notes.camcad.cn/atom.xml" rel="self"/>
  
  <link href="https://notes.camcad.cn/"/>
  <updated>2023-04-05T05:49:30.801Z</updated>
  <id>https://notes.camcad.cn/</id>
  
  <author>
    <name>蚂蚁Emmet</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++提高编程29：STL常用容器（vector容器- vector构造函数）</title>
    <link href="https://notes.camcad.cn/post/4a098d18.html"/>
    <id>https://notes.camcad.cn/post/4a098d18.html</id>
    <published>2020-07-22T22:36:01.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-2-2-vector-构造函数"><a href="#3-2-2-vector-构造函数" class="headerlink" title="3.2.2 vector 构造函数"></a>3.2.2 vector 构造函数</h2><p><strong>功能描述：</strong></p><ul><li>创建vector容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>vector&lt;T&gt;v;</code> &#x2F;&#x2F;采用模板实现类实现，默认构造函数</li><li><code>vector(v.begin(), v.end());</code> &#x2F;&#x2F;将v(begin(), end())区间中的元素拷贝给本身</li><li><code>vector(n, elem);</code> &#x2F;&#x2F;构造函数将n个elem拷贝给本身</li><li><code>vector(const vector &amp;vec);</code> &#x2F;&#x2F;拷贝构造函数</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span>(<span class="params">vector&lt;<span class="built_in">int</span>&gt; &amp;v</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator i = v.begin(); i != v.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//采用模板实现类实现，默认构造函数</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(<span class="number">11</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">    printVector(v1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过区间方式进行构造</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v2(v1.begin(), v1.end());</span><br><span class="line">    printVector(v2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//n个elem方式构造</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v3(<span class="number">10</span>, <span class="number">110</span>);</span><br><span class="line">    printVector(v3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拷贝构造</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v4(v1);</span><br><span class="line">    printVector(v4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/202006240129145-1024x321.jpg"></p><h3 id="总结：vector的多种构造方式没有可比性，灵活使用即可。"><a href="#总结：vector的多种构造方式没有可比性，灵活使用即可。" class="headerlink" title="总结：vector的多种构造方式没有可比性，灵活使用即可。"></a>总结：vector的多种构造方式没有可比性，灵活使用即可。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（vector容器- vector构造函数）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程28：STL常用容器（vector容器- vector基本概念）</title>
    <link href="https://notes.camcad.cn/post/874b2290.html"/>
    <id>https://notes.camcad.cn/post/874b2290.html</id>
    <published>2020-07-22T19:58:29.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h1><h2 id="3-2-1-vector基本概念"><a href="#3-2-1-vector基本概念" class="headerlink" title="3.2.1 vector基本概念"></a>3.2.1 vector基本概念</h2><p><strong>功能：</strong></p><ul><li>vector数据结构和<strong>数组非常相似</strong>，也称为<strong>单端数组</strong>。</li></ul><p><strong>vector与普通数组区别：</strong></p><ul><li>不同之处在于数组是静态空间，面vector可以<strong>动态扩展</strong>。</li></ul><p><strong>动态扩展：</strong></p><ul><li><p>并不是在原空间之后续接新空间，而是找更大的内存空间，然后将原数据拷贝新空间，释放原空间。<br><img src="http://image.camcad.cn/2020/06/2020062400481370.jpg"></p></li><li><p>vector容器的迭代器是支持随机访问的迭代器</p></li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（vector容器- vector基本概念）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程27：STL常用容器（string容器- string子串）</title>
    <link href="https://notes.camcad.cn/post/4addf364.html"/>
    <id>https://notes.camcad.cn/post/4addf364.html</id>
    <published>2020-07-22T19:17:53.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-9-string子串"><a href="#3-1-9-string子串" class="headerlink" title="3.1.9 string子串"></a>3.1.9 string子串</h2><p><strong>功能描述：</strong></p><ul><li>从字符串中获取想要的子串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string substr(int pos = 0,int n = npos) const;</code> &#x2F;&#x2F;返回由pos开始的n个字符组成的字符串</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> sub = str.substr(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str.substr(2, 3)= &quot;</span> &lt;&lt; sub &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//实战案例</span></span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">&quot;emmet_huang@163.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取str字符串“&amp;”符号的位置</span></span><br><span class="line">    <span class="built_in">string</span> sub = str.substr(<span class="number">0</span>, str.find(<span class="string">&quot;@&quot;</span>));</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;实战案例：&quot;</span> &lt;&lt; sub &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译结果如下："><a href="#以上代码编译结果如下：" class="headerlink" title="以上代码编译结果如下："></a>以上代码编译结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062309143135-1024x311.jpg"></p><h3 id="总结：灵活的运用求子串功能，可以在实际开发中获取有效的信息。"><a href="#总结：灵活的运用求子串功能，可以在实际开发中获取有效的信息。" class="headerlink" title="总结：灵活的运用求子串功能，可以在实际开发中获取有效的信息。"></a>总结：灵活的运用求子串功能，可以在实际开发中获取有效的信息。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（string容器- string子串）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程26：STL常用容器（string容器- string插入和删除）</title>
    <link href="https://notes.camcad.cn/post/fda2c593.html"/>
    <id>https://notes.camcad.cn/post/fda2c593.html</id>
    <published>2020-07-22T15:36:47.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-8-string插入和删除"><a href="#3-1-8-string插入和删除" class="headerlink" title="3.1.8 string插入和删除"></a>3.1.8 string插入和删除</h2><p><strong>功能描述：</strong></p><ul><li>对string字符串进行插入和删除字符操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string &amp;insert（int pos, const char *s);</code> &#x2F;&#x2F;插入字符串</li><li><code>string &amp;insert（int pos, const string &amp;str);</code> &#x2F;&#x2F;插入字符串</li><li><code>string &amp;insert（int pos, int n, char c);</code> &#x2F;&#x2F;在指定位置插入n个字符c</li><li><code>string &amp;erase(int pos, int n = npos);</code> &#x2F;&#x2F;删除从pos开始的n个字符</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//插入字符串（字符）</span></span><br><span class="line">    <span class="built_in">string</span> str = <span class="string">&quot;heoll&quot;</span>;</span><br><span class="line">    str.insert(str.size(), <span class="string">&quot; world&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;插入：&quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除字符串（字符）</span></span><br><span class="line">    str.erase(str.size()<span class="number">-6</span>, <span class="number">6</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;删除：&quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062308444158-1024x387.jpg"></p><h3 id="总结：插入和删除的起始下标都是从0开始。"><a href="#总结：插入和删除的起始下标都是从0开始。" class="headerlink" title="总结：插入和删除的起始下标都是从0开始。"></a>总结：插入和删除的起始下标都是从0开始。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（string容器- string插入和删除）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程25：STL常用容器（string容器- string字符存取）</title>
    <link href="https://notes.camcad.cn/post/f8fa3b7d.html"/>
    <id>https://notes.camcad.cn/post/f8fa3b7d.html</id>
    <published>2020-07-22T12:38:28.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="string字符存取"><a href="#string字符存取" class="headerlink" title="string字符存取"></a>string字符存取</h2><p><strong>string中单个字符存取方式有两种：</strong></p><ul><li><code>char &amp;operator[ ](int n);</code> &#x2F;&#x2F;通过方式取字符</li><li><code>char &amp;at(int n);</code> &#x2F;&#x2F;通过at方法获取字符</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;读取字符串中指定位置字符&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">string</span> str1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法一</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;方法一 str1[i]：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; str1.size()<span class="comment">/*获取字符串大小*/</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; str1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法二</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;方法二 str1.at(i)：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; str1.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; str1.at(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;更改字符串中指定位置字符&quot;</span> &lt;&lt; endl;</span><br><span class="line">    str1[<span class="number">2</span>] = <span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1[2] = &#x27;L&#x27; 更改后：&quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    str1.at(<span class="number">0</span>) = <span class="string">&#x27;H&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1.at(0) = &#x27;H&#x27; 更改后：&quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062307561880-1024x482.jpg"></p><h3 id="总结：string字符串中单个字符存取有两种方式，利用-或at。"><a href="#总结：string字符串中单个字符存取有两种方式，利用-或at。" class="headerlink" title="总结：string字符串中单个字符存取有两种方式，利用[]或at。"></a>总结：string字符串中单个字符存取有两种方式，利用[]或at。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（string容器- string字符存取）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程24：STL常用容器（string容器- string字符串比较）</title>
    <link href="https://notes.camcad.cn/post/35ac6e08.html"/>
    <id>https://notes.camcad.cn/post/35ac6e08.html</id>
    <published>2020-07-22T11:21:01.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-6-string字符串比较"><a href="#3-1-6-string字符串比较" class="headerlink" title="3.1.6 string字符串比较"></a>3.1.6 string字符串比较</h2><p><strong>功能描述：</strong></p><ul><li>字符串之间的比较</li></ul><p><strong>比较方式：</strong></p><ul><li>字符串比较是按字符的ASCII码进行对比 <code>= 返回 0</code> <code>&gt; 返回 1</code> <code>&lt; 返回 -1</code></li></ul><p><strong>函数原型：</strong></p><ul><li><code>int compare(const string &amp;s)const;</code> &#x2F;&#x2F;与字符串s比较</li><li><code>int compare(const char *s)const;</code> &#x2F;&#x2F;与字符串s比较</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> str1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> str2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str1.compare(str2)==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;str1等于str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (str1.compare(str2) &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;str1大于str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (str1.compare(str2) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;str1小于str2&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/202006230721372-1024x287.jpg"></p><h3 id="总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大。"><a href="#总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大。" class="headerlink" title="总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大。"></a>总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（string容器- string字符串比较）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程23：STL常用容器（string容器-string查找和替换）</title>
    <link href="https://notes.camcad.cn/post/708754f6.html"/>
    <id>https://notes.camcad.cn/post/708754f6.html</id>
    <published>2020-07-21T20:15:20.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-5-string查找和替换"><a href="#3-1-5-string查找和替换" class="headerlink" title="3.1.5 string查找和替换"></a>3.1.5 string查找和替换</h2><p><strong>功能描述：</strong></p><ul><li>查找：查找指定字符串是否存在</li><li>替换：在指定的位置替换字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>int find(const string &amp;str, int pos = 0)const;</code> &#x2F;&#x2F;查找str第一次出现位置，从pos开始查找</p></li><li><p><code>int find(const char *s, int pos = 0)const;</code> &#x2F;&#x2F;查找s第一次出现位置，从pos开始查找</p></li><li><p><code>int find(const char *s, int pos, int n)const;</code> &#x2F;&#x2F;从pos位置查找s的前n个字符串，第一次位置</p></li><li><p><code>int find(const char c, int pos = 0)const;</code> &#x2F;&#x2F;查找字符c第一次出现位置</p></li><li><p><code>int rfind(const string &amp;str, int pos = npos)const;</code> &#x2F;&#x2F;查找str最后一次位置，从pos开始查找</p></li><li><p><code>int rfind(const char *s, int pos = npos)const;</code> &#x2F;&#x2F;查找s最后一次出现位置，从pos开始查找</p></li><li><p><code>int rfind(const char *s, int pos, int n)const;</code> &#x2F;&#x2F;从pos查找s的前n个字符,最后一次位置</p></li><li><p><code>int rfind(const char c, int pos = 0)const;</code> &#x2F;&#x2F;查找字符c最后一次出现位置</p></li><li><p><code>string &amp;replace(int pos, int n, const string &amp;str);</code> &#x2F;&#x2F;替换从pos开始n个字符为字符串str</p></li><li><p><code>string &amp;replace(int pos, int n, const char *s);</code> &#x2F;&#x2F;替换从pos开始的n个字符为字符串s</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;查找&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">string</span> str1 = <span class="string">&quot;abcdec&quot;</span>;</span><br><span class="line">    <span class="built_in">int</span> pos = str1.find(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pos==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;未找到！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;find c的位置为：&quot;</span> &lt;&lt; pos &lt;&lt; endl;   <span class="comment">//2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//rfind和find区别</span></span><br><span class="line">    <span class="comment">//rfind从右往左查找，find从左往右查找</span></span><br><span class="line">     pos = str1.rfind(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pos == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;未找到！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;rfind c的位置为：&quot;</span> &lt;&lt; pos &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; endl;  <span class="comment">//5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;替换&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">string</span> str1 = <span class="string">&quot;heoll world&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从3号位置起 2个字符，替换为&quot;222&quot;</span></span><br><span class="line">    str1.replace(<span class="number">3</span>, <span class="number">2</span>,<span class="string">&quot;222&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;replace str1：&quot;</span> &lt;&lt; str1 &lt;&lt; endl;    <span class="comment">//heo222 world</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062306181193-1024x430.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>find查找是从左往后，rfind从右往左</li><li>find找到字符串后返回查找的第一个字符位置，找不到返回-1</li><li>replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li></ul>]]></content>
    
    
    <summary type="html">STL常用容器（string容器-string查找和替换）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程22：STL常用容器（string容器-string字符串拼接）</title>
    <link href="https://notes.camcad.cn/post/688b2f27.html"/>
    <id>https://notes.camcad.cn/post/688b2f27.html</id>
    <published>2020-07-21T19:08:38.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-4-string字符串拼接"><a href="#3-1-4-string字符串拼接" class="headerlink" title="3.1.4 string字符串拼接"></a>3.1.4 string字符串拼接</h2><p><strong>功能描述：</strong></p><ul><li>实现在字符串未尾拼接字符串 <strong>函数原型：</strong><ul><li><code>string&amp; operator+=(const char *str);</code> &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; operator+=(const char c);</code> &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; operator+=(const string &amp;str);</code> &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; append(const char *s);</code> &#x2F;&#x2F;把字符串s连接到当前字符串结尾</li><li><code>string&amp; append(const char *s, int n);</code> &#x2F;&#x2F;把字符串s的前n个字符连接到当前字符串结尾</li><li><code>string&amp; append(const string &amp;s);</code> &#x2F;&#x2F;同operator+&#x3D;（const string &amp;str)</li><li><code>string&amp; append(const string &amp;s, int pos, int n);</code> &#x2F;&#x2F;字符串s中从pos开始的n个字符连接到字符串结尾</li></ul></li></ul><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//string&amp; operator+=(const char *str);  //重载+=操作符</span></span><br><span class="line">    <span class="built_in">string</span> str11 = <span class="string">&quot;Huang&quot;</span>;</span><br><span class="line">    str11 += <span class="string">&quot;my-Emmet&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str11：&quot;</span> &lt;&lt; str11 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//string&amp; operator+=(const char c);     //重载+=操作符</span></span><br><span class="line">    <span class="built_in">string</span> str21 = <span class="string">&quot;Emme&quot;</span>;</span><br><span class="line">    str21 += <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str21：&quot;</span> &lt;&lt; str21 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//string&amp; operator+=(const string &amp;str);    //重载+=操作符</span></span><br><span class="line">    <span class="built_in">string</span> str31 = <span class="string">&quot;Huangmy-&quot;</span>;</span><br><span class="line">    str31 += str21;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str31：&quot;</span> &lt;&lt; str31 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//string&amp; append(const char *s);    //把字符串s连接到当前字符串结尾</span></span><br><span class="line">    <span class="built_in">string</span> str41 = <span class="string">&quot;NX&quot;</span>;</span><br><span class="line">    str41.append(<span class="string">&quot;OPEN&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str41：&quot;</span> &lt;&lt; str41 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//string&amp; append(const char *s, int n); //把字符串s的前n个字符连接到当前字符串结尾</span></span><br><span class="line">    <span class="built_in">string</span> str51 = <span class="string">&quot;NX二次开发&quot;</span>;</span><br><span class="line">    str51.append(<span class="string">&quot;OPEN API&quot;</span>,<span class="number">4</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str51：&quot;</span> &lt;&lt; str51 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//string&amp; append(const string &amp;s);      //同operator+=（const string &amp;str)</span></span><br><span class="line">    <span class="built_in">string</span> str61 = <span class="string">&quot;NX-&quot;</span>;</span><br><span class="line">    str61.append(str11);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str61：&quot;</span> &lt;&lt; str61 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//string&amp; append(const string &amp;s, int pos, int n);  //字符串s中从pos开始的n个字符连接到字符串结尾</span></span><br><span class="line">    <span class="built_in">string</span> str71;</span><br><span class="line">    str71.append(str51,<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str71：&quot;</span> &lt;&lt; str71 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062302533218-1024x608.jpg"></p><h3 id="总结：字符串拼接的重载版本很多，初学阶段记住几种即可。"><a href="#总结：字符串拼接的重载版本很多，初学阶段记住几种即可。" class="headerlink" title="总结：字符串拼接的重载版本很多，初学阶段记住几种即可。"></a>总结：字符串拼接的重载版本很多，初学阶段记住几种即可。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（string容器-string字符串拼接）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程21：STL常用容器（string容器-string赋值操作）</title>
    <link href="https://notes.camcad.cn/post/1e20fd3e.html"/>
    <id>https://notes.camcad.cn/post/1e20fd3e.html</id>
    <published>2020-07-21T10:44:53.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-3-string赋值操作"><a href="#3-1-3-string赋值操作" class="headerlink" title="3.1.3 string赋值操作"></a>3.1.3 string赋值操作</h2><p><strong>功能描述：</strong></p><ul><li>给string字符串进行赋值</li></ul><p><strong>赋值的函数原型：</strong></p><ul><li><code>string&amp; operator=(const char *s);</code> &#x2F;&#x2F;char*类型字符串赋值给当前的字符串</li><li><code>string&amp; operator=(const string &amp;s);</code> &#x2F;&#x2F;把字符串s赋给当前的字符串</li><li><code>string&amp; operator=(char c);</code> &#x2F;&#x2F;字符赋值给字符串</li><li><code>string&amp; assign(const char *s);</code> &#x2F;&#x2F;把字符串s赋给当前的字符串</li><li><code>string&amp; assign(const char *s , int n );</code> &#x2F;&#x2F;把字符串s的前n个字符赋给当前的字符串</li><li><code>string&amp; assign(const string &amp;s);</code> &#x2F;&#x2F;把字符串s赋给当前字符串</li><li><code>string&amp; assign(int n , char c);</code> &#x2F;&#x2F;用n个字符c赋给当前字符串</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.string&amp; operator=(const char *s); //char*类型字符串赋值给当前的字符串</span></span><br><span class="line">    <span class="built_in">string</span> str1;</span><br><span class="line">    str1 = <span class="string">&quot;Emmet&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str1：&quot;</span> &lt;&lt; str1 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.string&amp; operator=(const string &amp;s); //把字符串s赋给当前的字符串</span></span><br><span class="line">    <span class="built_in">string</span> str2;</span><br><span class="line">    str2 = str1;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str2：&quot;</span> &lt;&lt; str2 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.string&amp; operator=(char c); //字符赋值给字符串</span></span><br><span class="line">    <span class="built_in">string</span> str3;</span><br><span class="line">    str3 = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str3：&quot;</span> &lt;&lt; str3 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.string&amp; assign(const char *s); //把字符串s赋给当前的字符串</span></span><br><span class="line">    <span class="built_in">string</span> str4;</span><br><span class="line">    str4.assign(<span class="string">&quot;Huangmy-Emmet&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str4：&quot;</span> &lt;&lt; str4 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.string&amp; assign(const char *s, int n); //把字符串s的前n个字符赋给当前的字符串</span></span><br><span class="line">    <span class="built_in">string</span> str5;</span><br><span class="line">    str5.assign(<span class="string">&quot;Huangmy-Emmet&quot;</span>,<span class="number">7</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str5：&quot;</span> &lt;&lt; str5 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.string&amp; assign(const string &amp;s); //把字符串s赋给当前字符串</span></span><br><span class="line">    <span class="built_in">string</span> str6;</span><br><span class="line">    str6.assign(str5);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str6：&quot;</span> &lt;&lt; str6 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7.string&amp; assign(int n, char c); //用n个字符c赋给当前字符串</span></span><br><span class="line">    <span class="built_in">string</span> str7;</span><br><span class="line">    str7.assign(<span class="number">10</span>,<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;str7：&quot;</span> &lt;&lt; str7 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062302002080-1024x552.jpg"></p><h3 id="总结：string的赋值方式很多，operator-x3D-这种方式是比较实用的。"><a href="#总结：string的赋值方式很多，operator-x3D-这种方式是比较实用的。" class="headerlink" title="总结：string的赋值方式很多，operator&#x3D;这种方式是比较实用的。"></a>总结：string的赋值方式很多，operator&#x3D;这种方式是比较实用的。</h3>]]></content>
    
    
    <summary type="html">STL常用容器（string容器-string赋值操作）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程20：STL常用容器（string容器-string构造函数）</title>
    <link href="https://notes.camcad.cn/post/4cf03f75.html"/>
    <id>https://notes.camcad.cn/post/4cf03f75.html</id>
    <published>2020-07-20T21:53:05.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-1-2-string构造函数"><a href="#3-1-2-string构造函数" class="headerlink" title="3.1.2 string构造函数"></a>3.1.2 string构造函数</h2><p><strong>构造函数原型：</strong></p><ul><li><p><code>string( );</code> &#x2F;&#x2F;创建一个空的字符串 例如：string str;</p></li><li><p><code>string( const char *s );</code> &#x2F;&#x2F;使用字符串s初始化</p></li><li><p><code>string( const string &amp;srt );</code> &#x2F;&#x2F;使用一个string对象初始化另一个string对象</p></li><li><p><code>string( int n,char c );</code> &#x2F;&#x2F;使用n个字符c初始化</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.string( ); //创建一个空的字符串 例如：string str;</span></span><br><span class="line">    <span class="built_in">string</span> s1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.string( const char *s ); //使用字符串s初始化</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s2</span>(<span class="params"><span class="string">&quot;abc&quot;</span></span>)</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符串s2：&quot;</span> &lt;&lt; s2 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.string( const string &amp;srt ); //使用一个string对象初始化另一个string对象</span></span><br><span class="line">    <span class="built_in">string</span> s3 = s2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符串s3：&quot;</span> &lt;&lt; s3 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.string( int n,char c ); //使用n个字符c初始化</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s4</span>(<span class="params"><span class="number">11</span>,<span class="string">&#x27;a&#x27;</span></span>)</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符串s4：&quot;</span> &lt;&lt; s4 &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062214034738-1024x500.jpg"></p>]]></content>
    
    
    <summary type="html">STL常用容器（string容器-string构造函数）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程19：STL常用容器（string容器-string基本概念）</title>
    <link href="https://notes.camcad.cn/post/41dab95a.html"/>
    <id>https://notes.camcad.cn/post/41dab95a.html</id>
    <published>2020-07-20T21:52:21.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-1-string容器"><a href="#3-1-string容器" class="headerlink" title="3.1 string容器"></a>3.1 string容器</h1><h2 id="3-1-1-string基本概念"><a href="#3-1-1-string基本概念" class="headerlink" title="3.1.1 string基本概念"></a>3.1.1 string基本概念</h2><p><strong>本质：</strong></p><ul><li>string是C++风格的字符串，而string本质上是一个类。 *_string和chat_区别：**</li><li>chat*是一个指针</li><li>string是一个类，类内部封装了char_，管理这个字符串，是一个char_型的容器。</li></ul><p><strong>特点：</strong> string类内部封装了很多成员方法 例如：查找（find），拷贝（copy），删除（delete），替换（replace），插入（insert）。 string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责。</p>]]></content>
    
    
    <summary type="html">STL常用容器（string容器-string基本概念）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程18：STL初识（容器算法迭代器初识）</title>
    <link href="https://notes.camcad.cn/post/9ad20f91.html"/>
    <id>https://notes.camcad.cn/post/9ad20f91.html</id>
    <published>2020-07-20T17:33:15.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-提高编程"><a href="#C-提高编程" class="headerlink" title="C++提高编程"></a>C++提高编程</h1><h2 id="2-5-容器算法迭代器初识"><a href="#2-5-容器算法迭代器初识" class="headerlink" title="2.5 容器算法迭代器初识"></a>2.5 容器算法迭代器初识</h2><p>了解STL中容器、算法、迭代器概念之后，我们利用代码感受STL的魅力。 STL中最常用的容器是Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据，并遍历这个容器。</p><h3 id="2-5-1-vector存放内置数据类型"><a href="#2-5-1-vector存放内置数据类型" class="headerlink" title="2.5.1 vector存放内置数据类型"></a>2.5.1 vector存放内置数据类型</h3><ul><li><p>容器：<code>vector</code></p></li><li><p>算法：<code>for_each</code></p></li><li><p>迭代器：<code>vector&lt;int&gt;::iterator</code></p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码:"></a>示例代码:</h4></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;     //vector容器 头文件</span></span><br><span class="line"><span class="meta">#include &lt;algorithm&gt;  //算法 头文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span>(<span class="params"><span class="built_in">int</span> val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建vector容器对象，并且通过模板参数指定容器中存放的数据类型</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向容器尾部插入数据</span></span><br><span class="line">    v.push_back(<span class="number">10</span>);</span><br><span class="line">    v.push_back(<span class="number">11</span>);</span><br><span class="line">    v.push_back(<span class="number">23</span>);</span><br><span class="line">    v.push_back(<span class="number">44</span>);</span><br><span class="line">    v.push_back(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素</span></span><br><span class="line">    <span class="comment">//v.begin() 返回迭代器指向容器中第一个数据</span></span><br><span class="line">    <span class="comment">//v.end()   返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置</span></span><br><span class="line">    <span class="comment">//vector&lt;int&gt;::iterator   拿到vector&lt;int&gt;这种容器的迭代器类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历方法一</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历方法一（while）&quot;</span> &lt;&lt; endl;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;::iterator itBegin = v.begin();</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;::iterator itEnd = v.end();</span><br><span class="line">    <span class="keyword">while</span> (itBegin != itEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *itBegin &lt;&lt; endl;</span><br><span class="line">        itBegin++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历方法二</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历方法二（for）&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator i = v.begin(); i != v.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *i &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历方法三</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历方法三（算法）&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v.begin(), v.end(), func);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h4><p><img src="http://image.camcad.cn/2020/06/2020062207315468-1024x755.jpg"></p><h3 id="2-5-2-vector存放自定义数据类型"><a href="#2-5-2-vector存放自定义数据类型" class="headerlink" title="2.5.2 vector存放自定义数据类型"></a>2.5.2 vector存放自定义数据类型</h3><p>学习目标：vector中存放自定义数据类型，并打印输出。</p><h4 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;     //vector容器 头文件</span></span><br><span class="line"><span class="meta">#include &lt;algorithm&gt;  //算法 头文件</span></span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="built_in">string</span> name,<span class="built_in">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span>(<span class="params">Person val</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; val.m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; val.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放自定义数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建vector容器对象，并且通过模板参数指定容器中存放的数据类型</span></span><br><span class="line">    vector&lt;Person&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建自定义数据类型</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span>(<span class="params"><span class="string">&quot;张三&quot;</span>, <span class="number">18</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span>(<span class="params"><span class="string">&quot;李四&quot;</span>, <span class="number">28</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span>(<span class="params"><span class="string">&quot;王五&quot;</span>, <span class="number">22</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span>(<span class="params"><span class="string">&quot;赵六&quot;</span>, <span class="number">23</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span>(<span class="params"><span class="string">&quot;小二&quot;</span>, <span class="number">20</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向容器尾部插入数据</span></span><br><span class="line">    v.push_back(p1);</span><br><span class="line">    v.push_back(p2);</span><br><span class="line">    v.push_back(p3);</span><br><span class="line">    v.push_back(p4);</span><br><span class="line">    v.push_back(p5);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素</span></span><br><span class="line">    <span class="comment">//v.begin() 返回迭代器指向容器中第一个数据</span></span><br><span class="line">    <span class="comment">//v.end()   返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置</span></span><br><span class="line">    <span class="comment">//vector&lt;int&gt;::iterator   拿到vector&lt;int&gt;这种容器的迭代器类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历方法一</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历方法一（while）&quot;</span> &lt;&lt; endl;</span><br><span class="line">    vector&lt;Person&gt;::iterator itBegin = v.begin();</span><br><span class="line">    vector&lt;Person&gt;::iterator itEnd = v.end();</span><br><span class="line">    <span class="keyword">while</span> (itBegin != itEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; (*itBegin).m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; (*itBegin).m_Age &lt;&lt; endl;</span><br><span class="line">        itBegin++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历方法二</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历方法二（for）&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Person&gt;::iterator i = v.begin(); i != v.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; i-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; i-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; (*i).m_Name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; (*i).m_Age &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历方法三</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历方法三（算法）&quot;</span> &lt;&lt; endl;</span><br><span class="line">    for_each(v.begin(), v.end(), func);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存放自定义数据类型 指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建vector容器对象，并且通过模板参数指定容器中存放的数据类型</span></span><br><span class="line">    vector&lt;Person*&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建自定义数据类型</span></span><br><span class="line">    <span class="function">Person <span class="title">p1</span>(<span class="params"><span class="string">&quot;张三&quot;</span>, <span class="number">18</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span>(<span class="params"><span class="string">&quot;李四&quot;</span>, <span class="number">28</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span>(<span class="params"><span class="string">&quot;王五&quot;</span>, <span class="number">22</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span>(<span class="params"><span class="string">&quot;赵六&quot;</span>, <span class="number">23</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span>(<span class="params"><span class="string">&quot;小二&quot;</span>, <span class="number">20</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向容器尾部插入数据</span></span><br><span class="line">    v.push_back(&amp;p1);</span><br><span class="line">    v.push_back(&amp;p2);</span><br><span class="line">    v.push_back(&amp;p3);</span><br><span class="line">    v.push_back(&amp;p4);</span><br><span class="line">    v.push_back(&amp;p5);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历方法二</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;遍历方法二（for）&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;Person*&gt;::iterator i = v.begin(); i != v.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;指针-姓名：&quot;</span> &lt;&lt; (*i)-&gt;m_Name &lt;&lt; <span class="string">&quot; 指针-年龄：&quot;</span> &lt;&lt; (*i)-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; (**i).m_Name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; (**i).m_Age &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h4><p><img src="http://image.camcad.cn/2020/06/2020062208322680-1024x918.jpg"></p><h3 id="2-5-3-vector容器嵌套容器"><a href="#2-5-3-vector容器嵌套容器" class="headerlink" title="2.5.3 vector容器嵌套容器"></a>2.5.3 vector容器嵌套容器</h3><p>学习目标：容器中嵌套容器，我们将所有数据进行遍历输出</p><h4 id="示例代码：-1"><a href="#示例代码：-1" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;vector&gt;     //vector容器 头文件</span></span><br><span class="line"><span class="meta">#include &lt;algorithm&gt;  //算法 头文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//容器嵌套容器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建主容器</span></span><br><span class="line">    vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt; v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建子容器</span></span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v1;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v2;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v3;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v4;</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt;v5;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//子容器赋值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1.push_back(<span class="number">1</span> + i);</span><br><span class="line">        v2.push_back(<span class="number">2</span> + i);</span><br><span class="line">        v3.push_back(<span class="number">3</span> + i);</span><br><span class="line">        v4.push_back(<span class="number">4</span> + i);</span><br><span class="line">        v5.push_back(<span class="number">5</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主容器赋值</span></span><br><span class="line">    v.push_back(v1);</span><br><span class="line">    v.push_back(v2);</span><br><span class="line">    v.push_back(v3);</span><br><span class="line">    v.push_back(v4);</span><br><span class="line">    v.push_back(v5);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历主容器里的值</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;vector&lt;<span class="built_in">int</span>&gt;&gt;::iterator i = v.begin(); i != v.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历子容器里的值</span></span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="built_in">int</span>&gt;::iterator j = (*i).begin(); j != (*i).end(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; *j&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="以上代码编译执行结果如下：-2"><a href="#以上代码编译执行结果如下：-2" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h4><p><img src="http://image.camcad.cn/2020/06/2020062210244935-1024x445.jpg"></p>]]></content>
    
    
    <summary type="html">STL初识（容器算法迭代器初识）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程17：STL初识（STL的诞生，STL基本概念，STL六大组件，STL中容器、算法、迭代器）</title>
    <link href="https://notes.camcad.cn/post/51a145f9.html"/>
    <id>https://notes.camcad.cn/post/51a145f9.html</id>
    <published>2020-07-20T14:10:18.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章：STL初识"><a href="#第二章：STL初识" class="headerlink" title="第二章：STL初识"></a>第二章：STL初识</h1><h2 id="2-1-STL的诞生"><a href="#2-1-STL的诞生" class="headerlink" title="2.1 STL的诞生"></a>2.1 STL的诞生</h2><ul><li><p>长久以来，软件界一直希望建立一种可重复利用的东西</p></li><li><p>C++的<strong>面向对象</strong>和<strong>泛型编程</strong>思想，目的就是复用性的提升</p></li><li><p>大多情况下，数据结构和算法都未能有一套标准，导致被迫从事大量重复工作</p></li><li><p>为了建立数据结构和算法的一套标准，诞生了STL</p><h2 id="2-2-STL基本概念"><a href="#2-2-STL基本概念" class="headerlink" title="2.2 STL基本概念"></a>2.2 STL基本概念</h2></li><li><p>STL（Standard Template-Library）标准模板库</p></li><li><p>STL从广义上分为：容器（container），算法（algorithm），迭代器（iterator）</p></li><li><p><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接</p></li><li><p>STL几乎所有的代码都采用模板类或者模板函数</p></li></ul><h2 id="2-3-STL六大组件"><a href="#2-3-STL六大组件" class="headerlink" title="2.3 STL六大组件"></a>2.3 STL六大组件</h2><p>STL大体分为六大组件，分别是：<strong>容器</strong>、<strong>算法</strong>、<strong>迭代器</strong>、<strong>仿函数</strong>、<strong>适配器</strong>（<strong>配接器</strong>）、<strong>空间配置器</strong></p><ul><li>1.容器：各种数据结构，如 向量(vector)、列表(list)、栈(stack)、队列(queue)、集合(set)、映射(map)、deque等，用来存放数据。</li><li>2.算法，各种常用的算法，如sort、find、copy、for_each等。</li><li>3.迭代器：扮演了容器与算法之间的胶合剂。</li><li>4.仿函数：行为类似函数，可作为算法的某种策略。</li><li>5.适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。</li><li>6.空间配置器：负责空间的配置与管理。</li></ul><h2 id="2-4-STL中容器、算法、迭代器"><a href="#2-4-STL中容器、算法、迭代器" class="headerlink" title="2.4 STL中容器、算法、迭代器"></a>2.4 STL中容器、算法、迭代器</h2><h3 id="容器：置物之所也"><a href="#容器：置物之所也" class="headerlink" title="容器：置物之所也"></a>容器：置物之所也</h3><p>STL<strong>容器</strong>就是将运用最<strong>广泛的一些数据结构</strong>实现出来。 常用的数据结构：数组，链表，树，栈，队列，集合，映射表等。 这些容器分为<strong>序列式容器</strong>和<strong>关联式容器</strong>两种。 <strong>序列式容器：</strong>强调值的排序，序列式容器中的每个元素均有固定的位置。 <strong>关联式容器：</strong>二叉树结构，各元素之间没有严格的物理上的顺序关系。</p><h3 id="算法：问题之解法也"><a href="#算法：问题之解法也" class="headerlink" title="算法：问题之解法也"></a>算法：问题之解法也</h3><p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法（Algorithms） 算法分为 ：<strong>质变算法**<strong>非质变算法</strong>。</strong> 质变算法：<strong>是指运算过程中会更改区间内的元素的内容，例如拷贝，替换，删除等等。</strong> 非质变算法：**是指运算过程中不会更改区间内的元素内容，例如查找，计数，遍历，寻找极值等等。</p><h3 id="迭代器：容器和算法之间粘合剂"><a href="#迭代器：容器和算法之间粘合剂" class="headerlink" title="迭代器：容器和算法之间粘合剂"></a>迭代器：容器和算法之间粘合剂</h3><p>提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。 每个容器都有自己专属的迭代器 迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针。</p><p><strong>迭代器种类：</strong></p><table><thead><tr><th align="center">种类</th><th align="left">功能</th><th align="left">支持运算</th></tr></thead><tbody><tr><td align="center">输入迭代器</td><td align="left">对数据的只读访问</td><td align="left">只读，支持++、&#x3D;&#x3D;、!&#x3D;</td></tr><tr><td align="center">输出迭代器</td><td align="left">对数据的只写访问</td><td align="left">只写，支持++</td></tr><tr><td align="center">前向迭代器</td><td align="left">读写操作，并能向前推进迭代器</td><td align="left">读写，支持++、&#x3D;&#x3D;、!&#x3D;</td></tr><tr><td align="center">双向迭代器</td><td align="left">读写操作，并能向前和向后操作</td><td align="left">读写，支持++、–</td></tr><tr><td align="center">随机访问迭代器</td><td align="left">读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td><td align="left">读写，支持++、–、[n] 、-n、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;</td></tr></tbody></table><h3 id="总结：常用的容器中迭代器种类为双向迭代器和随机访问迭代器。"><a href="#总结：常用的容器中迭代器种类为双向迭代器和随机访问迭代器。" class="headerlink" title="总结：常用的容器中迭代器种类为双向迭代器和随机访问迭代器。"></a>总结：常用的容器中迭代器种类为双向迭代器和随机访问迭代器。</h3>]]></content>
    
    
    <summary type="html">STL初识（STL的诞生，STL基本概念，STL六大组件，STL中容器、算法、迭代器）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++ STL" scheme="https://notes.camcad.cn/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程16：模板（类模板-类模板案例）</title>
    <link href="https://notes.camcad.cn/post/a1b304bb.html"/>
    <id>https://notes.camcad.cn/post/a1b304bb.html</id>
    <published>2020-07-20T11:13:29.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-3-9-类模板案例"><a href="#1-3-9-类模板案例" class="headerlink" title="1.3.9 类模板案例"></a>1.3.9 类模板案例</h1><p><strong>案例描述：</strong>实现一个通用的数组类，要求如下：</p><ul><li>可以对内置数据类型以及自定义数据类型的数据进行存储</li><li>将数组中的数据存储到堆区</li><li>构造函数中可以传入数组的容量</li><li>提供对应的拷贝构造函数以及operator&#x3D;防止浅拷贝问题</li><li>提供尾插和尾删法对数组中的数据进行增加和删除</li><li>可以通过下标的方式访问数组中的元素</li><li>可以获取数组中当前元素个数和数组容量</li></ul><h2 id="原理分析："><a href="#原理分析：" class="headerlink" title="原理分析："></a>原理分析：</h2><p><a href="http://image.camcad.cn/2020/06/2020062001520059.jpg"><img src="http://image.camcad.cn/2020/06/2020062001520059-1024x383.jpg"></a></p><h2 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h2><h3 id="头文件（myArray-hpp）"><a href="#头文件（myArray-hpp）" class="headerlink" title="头文件（myArray.hpp）"></a>头文件（myArray.hpp）</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">MyArray</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造函数（参数 容量）</span></span><br><span class="line">    MyArray(<span class="built_in">int</span> capacity)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;有参构造函数&quot; &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;m_Capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拷贝构造函数</span></span><br><span class="line">    MyArray(<span class="keyword">const</span> MyArray &amp;array)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; &quot;拷贝构造&quot; &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Capacity = array.m_Capacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size = array.m_Size;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//深拷贝</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[array.m_Capacity];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数组array中的数据都拷贝过来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;pAddress[i] = array.pAddress[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载= 操作符operator= 防止浅拷贝问题</span></span><br><span class="line">    MyArray&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyArray &amp;array)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先判断原来堆区是否有数据，如果有先释放</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;pAddress != NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; &quot;operator=函数&quot; &lt;&lt; endl;</span></span><br><span class="line">            delete[] <span class="keyword">this</span>-&gt;pAddress;</span><br><span class="line">            <span class="keyword">this</span>-&gt;pAddress = NULL;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_Capacity = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Capacity = array.m_Capacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size = array.m_Size;</span><br><span class="line">        <span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;m_Capacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;pAddress[i] = array.pAddress[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾插法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Push_Back</span>(<span class="params"><span class="keyword">const</span> T &amp;<span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断容量是否等于大小</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Capacity==<span class="keyword">this</span>-&gt;m_Size)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;容量已满！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;pAddress[<span class="keyword">this</span>-&gt;m_Size] = <span class="keyword">value</span>;     <span class="comment">//在数组未尾插入数组</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size++;      <span class="comment">//更新数组大小</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾删法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Pop_Back</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//让用户访问不到最后一个元素，即为尾删，逻辑删除</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Size==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重载[] 操作符 arr[0]</span></span><br><span class="line">    <span class="comment">//通过下标访问数组中的元素</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span>[](<span class="built_in">int</span> index)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;pAddress[index];    <span class="comment">//不考虑越界，用户自己处理</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数组中的容量</span></span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">getCapacity</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数组的大小</span></span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">getSize</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~MyArray()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;pAddress != NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;</span></span><br><span class="line">            delete[] <span class="keyword">this</span>-&gt;pAddress;</span><br><span class="line">            <span class="keyword">this</span>-&gt;pAddress = NULL;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_Capacity = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组</span></span><br><span class="line">    T* pAddress;;   <span class="comment">//指定一个堆空间，这个空间存储真正的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//容量</span></span><br><span class="line">    <span class="built_in">int</span> m_Capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//大小</span></span><br><span class="line">    <span class="built_in">int</span> m_Size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="主文件（main-cpp）"><a href="#主文件（main-cpp）" class="headerlink" title="主文件（main.cpp）"></a>主文件（main.cpp）</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#include &quot;myArray.hpp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printIntAttay</span>(<span class="params">MyArray&lt;<span class="built_in">int</span>&gt; p</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; p.getSize(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; p[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    MyArray&lt;<span class="built_in">int</span>&gt;p1(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p1.Push_Back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1的打印输出为：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    printIntAttay(p1);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1的容量为：&quot;</span> &lt;&lt; p1.getCapacity() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p1的大小为：&quot;</span> &lt;&lt; p1.getSize() &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2的打印输出为：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    MyArray&lt;<span class="built_in">int</span>&gt;p2(p1);</span><br><span class="line">    printIntAttay(p2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾删</span></span><br><span class="line">    p2.Pop_Back();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2尾删后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2的容量为：&quot;</span> &lt;&lt; p2.getCapacity() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2的大小为：&quot;</span> &lt;&lt; p2.getSize() &lt;&lt; endl;</span><br><span class="line">    printIntAttay(p2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    Person() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="built_in">int</span> age)</span><br><span class="line">    &#123;</span><br><span class="line">        m_Name = name;</span><br><span class="line">        m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="built_in">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPersonArray</span>(<span class="params">MyArray&lt;Person&gt; &amp;arr</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.getSize(); i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; arr[i].m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; arr[i].m_Age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    MyArray &lt;Person&gt;arr(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function">Person <span class="title">p1</span>(<span class="params"><span class="string">&quot;小二&quot;</span>, <span class="number">18</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span>(<span class="params"><span class="string">&quot;张二&quot;</span>, <span class="number">20</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span>(<span class="params"><span class="string">&quot;李四&quot;</span>, <span class="number">23</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span>(<span class="params"><span class="string">&quot;王五&quot;</span>, <span class="number">19</span></span>)</span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span>(<span class="params"><span class="string">&quot;赵六&quot;</span>, <span class="number">25</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">    arr.Push_Back(p1);</span><br><span class="line">    arr.Push_Back(p2);</span><br><span class="line">    arr.Push_Back(p3);</span><br><span class="line">    arr.Push_Back(p4);</span><br><span class="line">    arr.Push_Back(p5);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据插入数组中</span></span><br><span class="line">    printPersonArray(arr);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;arr的容量为：&quot;</span> &lt;&lt; arr.getCapacity() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;arr的大小为：&quot;</span> &lt;&lt; arr.getSize() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;一、内置数据类型测试&quot;</span> &lt;&lt; endl;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;二、自定义数据类型测试&quot;</span> &lt;&lt; endl;</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062015484681-1024x679.jpg"></p><h2 id="总结：能够利用所学知识点实现通用的数组。"><a href="#总结：能够利用所学知识点实现通用的数组。" class="headerlink" title="总结：能够利用所学知识点实现通用的数组。"></a>总结：能够利用所学知识点实现通用的数组。</h2>]]></content>
    
    
    <summary type="html">模板（类模板-类模板案例）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程15：模板（类模板-类模板与友元）</title>
    <link href="https://notes.camcad.cn/post/809a0b8.html"/>
    <id>https://notes.camcad.cn/post/809a0b8.html</id>
    <published>2020-07-19T20:28:32.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-3-8-类模板与友无"><a href="#1-3-8-类模板与友无" class="headerlink" title="1.3.8 类模板与友无"></a>1.3.8 类模板与友无</h1><p><strong>学习目标：</strong></p><ul><li>掌握类模板配合友元函数的类内和类外实现。</li></ul><h3 id="全局函数类内实现-直接在类内声明友元即可。"><a href="#全局函数类内实现-直接在类内声明友元即可。" class="headerlink" title="全局函数类内实现-直接在类内声明友元即可。"></a>全局函数类内实现-直接在类内声明友元即可。</h3><h3 id="全局函数类外实现-需要提前让编译器知道全局函数的存在。"><a href="#全局函数类外实现-需要提前让编译器知道全局函数的存在。" class="headerlink" title="全局函数类外实现-需要提前让编译器知道全局函数的存在。"></a>全局函数类外实现-需要提前让编译器知道全局函数的存在。</h3><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.提前让编译器知道Person类的存在</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.全局函数（类外实现）</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">showPrint02</span>(<span class="title">Person</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt;&amp;<span class="title">p</span>)</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局函数（类外实现） 姓名：&quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="string">&quot;全局函数（类外实现）年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//全局函数（类内实现）</span></span><br><span class="line">    <span class="function">friend <span class="keyword">void</span> <span class="title">showPrint01</span>(<span class="params">Person&lt;T1, T2&gt;&amp;p</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;全局函数（类内实现） 姓名：&quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="string">&quot;全局函数（类内实现）年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.全局函数（类外实现）</span></span><br><span class="line">    <span class="comment">//加空模板参数列表 &lt;&gt;</span></span><br><span class="line">    <span class="comment">//如果全局函数是类外实现，需要让编译器提前知道这个函数的存在</span></span><br><span class="line">    friend <span class="keyword">void</span> showPrint02&lt;&gt;(Person&lt;T1, T2&gt;&amp;p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    Person(T1 name, T2 age)</span><br><span class="line">    &#123;</span><br><span class="line">        m_Name = name;</span><br><span class="line">        m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T1 m_Name;</span><br><span class="line">    T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;p(<span class="string">&quot;类内实现&quot;</span>,<span class="number">18</span>);</span><br><span class="line">    showPrint01(p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;p(<span class="string">&quot;类外实现&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    showPrint02(p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020062001161751-1024x414.jpg"></p>]]></content>
    
    
    <summary type="html">模板（类模板-类模板与友元）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程14：模板（类模板-类模板分文件编写）</title>
    <link href="https://notes.camcad.cn/post/a5263ddf.html"/>
    <id>https://notes.camcad.cn/post/a5263ddf.html</id>
    <published>2020-07-19T15:28:43.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-3-7-类模板分文件编写"><a href="#1-3-7-类模板分文件编写" class="headerlink" title="1.3.7 类模板分文件编写"></a>1.3.7 类模板分文件编写</h1><p><strong>学习目标：</strong></p><ul><li>掌握类模板成员函数分文件编写产生的问题以及解决方式。</li></ul><p><strong>问题：</strong></p><ul><li>类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</li></ul><p><strong>解决：</strong></p><ul><li>解决方式1：直接包含.cpp源文件</li><li>解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，.hpp是约定的名称，并不是强制。</li></ul><h2 id="方法一：直接包含-cpp源文件"><a href="#方法一：直接包含-cpp源文件" class="headerlink" title="方法一：直接包含.cpp源文件"></a>方法一：直接包含.cpp源文件</h2><h3 id="示例代码-头文件（-h）"><a href="#示例代码-头文件（-h）" class="headerlink" title="示例代码 头文件（.h）"></a>示例代码 头文件（.h）</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span> &gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    Person(T1 name, T2 age);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPrint</span>()</span>;</span><br><span class="line"></span><br><span class="line">    T1 m_Name;</span><br><span class="line">    T2 m_Age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="示例代码-源文件（-cpp）"><a href="#示例代码-源文件（-cpp）" class="headerlink" title="示例代码 源文件（.cpp）"></a>示例代码 源文件（.cpp）</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include &quot;Person.h&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数 类外实现</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="title">Person</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt;::<span class="title">Person</span>(<span class="title">T1</span> <span class="title">name</span>, <span class="title">T2</span> <span class="title">age</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数 类外实现</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">Person</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt;::<span class="title">showPrint</span>()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例代码-主文件"><a href="#示例代码-主文件" class="headerlink" title="示例代码 主文件"></a>示例代码 主文件</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &quot;Person.cpp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;p(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    p.showPrint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020061914362125-1024x356.jpg"></p><h2 id="方法二：将声明和实现写到同一个文件中，并更改后缀名为-hpp，-hpp是约定的名称，并不是强制。"><a href="#方法二：将声明和实现写到同一个文件中，并更改后缀名为-hpp，-hpp是约定的名称，并不是强制。" class="headerlink" title="方法二：将声明和实现写到同一个文件中，并更改后缀名为.hpp，.hpp是约定的名称，并不是强制。"></a>方法二：将声明和实现写到同一个文件中，并更改后缀名为.hpp，.hpp是约定的名称，并不是强制。</h2><h3 id="示例代码-头文件及源文件（-hpp）"><a href="#示例代码-头文件及源文件（-hpp）" class="headerlink" title="示例代码 头文件及源文件（.hpp）"></a>示例代码 头文件及源文件（.hpp）</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span> &gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    Person(T1 name, T2 age);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPrint</span>()</span>;</span><br><span class="line"></span><br><span class="line">    T1 m_Name;</span><br><span class="line">    T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数 类外实现</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="title">Person</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt;::<span class="title">Person</span>(<span class="title">T1</span> <span class="title">name</span>, <span class="title">T2</span> <span class="title">age</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数 类外实现</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">Person</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt;::<span class="title">showPrint</span>()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例代码-主文件-1"><a href="#示例代码-主文件-1" class="headerlink" title="示例代码 主文件"></a>示例代码 主文件</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"><span class="meta">#include &quot;Person.hpp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;p(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    p.showPrint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下：-1"><a href="#以上代码编译执行结果如下：-1" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/20200619144222100-1024x356.jpg"></p><h2 id="总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为-hpp"><a href="#总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为-hpp" class="headerlink" title="总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp"></a>总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</h2>]]></content>
    
    
    <summary type="html">模板（类模板-类模板分文件编写）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程13：模板（类模板-类模板成员函数类外实现）</title>
    <link href="https://notes.camcad.cn/post/bbca2a77.html"/>
    <id>https://notes.camcad.cn/post/bbca2a77.html</id>
    <published>2020-07-19T10:14:38.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-3-6-类模板成员函数类外实现"><a href="#1-3-6-类模板成员函数类外实现" class="headerlink" title="1.3.6 类模板成员函数类外实现"></a>1.3.6 类模板成员函数类外实现</h1><p>学习目标：能够掌握类模板中的成员函数类外实现。</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板中构造函数、成员函数类内声明 类外实现</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数 类内声明</span></span><br><span class="line">    Person(T1 name, T2 age);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员函数 类内声明</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showprint</span>()</span>;</span><br><span class="line"></span><br><span class="line">    T1 m_Name;</span><br><span class="line">    T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数 类外实现</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="title">Person</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt;::<span class="title">Person</span>(<span class="title">T1</span> <span class="title">name</span>,<span class="title">T2</span> <span class="title">age</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数 类外实现</span></span><br><span class="line">template&lt;<span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">Person</span>&lt;<span class="title">T1</span>,<span class="title">T2</span>&gt;::<span class="title">showprint</span>()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Person m_Name：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="string">&quot;Person m_Age：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Person&lt;<span class="built_in">string</span>,<span class="built_in">int</span>&gt; <span class="title">p</span>(<span class="params"><span class="string">&quot;张三&quot;</span>, <span class="number">18</span></span>)</span>;</span><br><span class="line">    p.showprint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020061909293344-1024x382.jpg"></p><h3 id="总结：类模板中成员函数类外实现时，需要加上模板参数列表。"><a href="#总结：类模板中成员函数类外实现时，需要加上模板参数列表。" class="headerlink" title="总结：类模板中成员函数类外实现时，需要加上模板参数列表。"></a>总结：类模板中成员函数类外实现时，需要加上模板参数列表。</h3>]]></content>
    
    
    <summary type="html">模板（类模板-类模板成员函数类外实现）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程12：模板（类模板-类模板与继承）</title>
    <link href="https://notes.camcad.cn/post/24f7c9.html"/>
    <id>https://notes.camcad.cn/post/24f7c9.html</id>
    <published>2020-07-18T21:54:21.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-3-5-类模板与继承"><a href="#1-3-5-类模板与继承" class="headerlink" title="1.3.5 类模板与继承"></a>1.3.5 类模板与继承</h1><p>当类模板碰到继承时，需要注意一下几点：</p><ul><li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型。</li><li>如果不指定，编译器无法给子类分配内存。</li><li>如果想灵活指定出父类中T的类型，子类也需变为类模板。</li></ul><h2 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//父类模板</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Base</span></span><br><span class="line">&#123;</span><br><span class="line">    T m_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="comment">//class Son :public Base        //错误，C++编译需要给子类分配内存，必须知道父类中T的类型才可以向下继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Son</span> :<span class="title">public</span> <span class="title">Base</span>&lt;<span class="title">int</span>&gt;       <span class="comment">//必须指定一个类型</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Son()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son 指定一个类型&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Son s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果想灵活指定父类中T类型，子类也需要变类模板</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Son2</span> :<span class="title">public</span> <span class="title">Base</span>&lt;<span class="title">T2</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Son2()</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son2 T1的数据类型为：&quot;</span> &lt;&lt; typeid(T1).name() &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Son2 T2的数据类型为：&quot;</span> &lt;&lt; typeid(T2).name() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T1 obj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Son2&lt;<span class="built_in">char</span>, <span class="built_in">int</span>&gt;s2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    test02();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/2020061908243032-1024x433.jpg"></p><h3 id="总结：如果父类是类模板，子类需要指定出父类中T的数据类型。"><a href="#总结：如果父类是类模板，子类需要指定出父类中T的数据类型。" class="headerlink" title="总结：如果父类是类模板，子类需要指定出父类中T的数据类型。"></a>总结：如果父类是类模板，子类需要指定出父类中T的数据类型。</h3>]]></content>
    
    
    <summary type="html">模板（类模板-类模板与继承）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程11：模板（类模板-类模板对象做函数参数）</title>
    <link href="https://notes.camcad.cn/post/b9754251.html"/>
    <id>https://notes.camcad.cn/post/b9754251.html</id>
    <published>2020-07-18T19:22:08.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-3-4-类模板对象做函数参数"><a href="#1-3-4-类模板对象做函数参数" class="headerlink" title="1.3.4 类模板对象做函数参数"></a>1.3.4 类模板对象做函数参数</h1><h4 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h4><ul><li><p>类模板实例化出的对象，向函数传参的方式</p><h3 id="一共有三种传入方式："><a href="#一共有三种传入方式：" class="headerlink" title="一共有三种传入方式："></a>一共有三种传入方式：</h3></li><li><p>1.指定传入的类型：直接显示对象的数据类型</p></li><li><p>2.参数模板化：将对象中的参数变为模板进行传递</p></li><li><p>3.整个类模板化：将这个对象类型模板化进行传递</p><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="meta">#include &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">typeName</span>,<span class="keyword">class</span> <span class="title">typeAge</span>=<span class="built_in">int</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    Person(typeName name,typeAge age)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPrint</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;m_Name：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; <span class="string">&quot;m_Age：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    typeName m_Name;</span><br><span class="line">    typeAge m_Age;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.指定传入的类型：直接显示对象的数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Person01</span>(<span class="params">Person&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;&amp;p</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    p.showPrint();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p的数据类型为：&quot;</span> &lt;&lt; typeid(p).name() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>,<span class="built_in">int</span>&gt;p(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    Person01(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.参数模板化：将对象中的参数变为模板进行传递</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">Person02</span>(<span class="title">Person</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt;&amp;<span class="title">p</span>)</span><br><span class="line">&#123;</span><br><span class="line">    p.showPrint();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;T1的数据类型为：&quot;</span> &lt;&lt; typeid(T1).name() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;T2的数据类型为：&quot;</span> &lt;&lt; typeid(T2).name() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>&gt;p(<span class="string">&quot;李四&quot;</span>, <span class="number">23</span>);</span><br><span class="line">    Person02(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.整个类模板化：将这个对象类型模板化进行传递</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T</span>&gt;</span><br><span class="line"><span class="title">void</span> <span class="title">Person03</span>(<span class="title">T</span> &amp;<span class="title">p</span>)</span><br><span class="line">&#123;</span><br><span class="line">    p.showPrint();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;T的数据类型为：&quot;</span> &lt;&lt; typeid(T).name() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>&gt;p(<span class="string">&quot;王五&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    Person03(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    test02();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    test03();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上代码编译执行结果如下："><a href="#以上代码编译执行结果如下：" class="headerlink" title="以上代码编译执行结果如下："></a>以上代码编译执行结果如下：</h3><p><img src="http://image.camcad.cn/2020/06/202006190707434-1024x339.jpg"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>1.使用typeid( 类型 ).name( )可以返回本身的数据类型。</li><li>2.通过类模板创建的对象，可以有三种方式向函数中进行传参</li><li>3.使用比较广泛是第一种：指定传入类型</li></ul>]]></content>
    
    
    <summary type="html">模板（类模板-类模板对象做函数参数）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++提高编程10：模板（类模板-类模板中成员函数创建时机）</title>
    <link href="https://notes.camcad.cn/post/c6fb3775.html"/>
    <id>https://notes.camcad.cn/post/c6fb3775.html</id>
    <published>2020-07-18T12:59:55.000Z</published>
    <updated>2023-04-05T05:49:30.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-3-3-类模板中成员函数创建时机"><a href="#1-3-3-类模板中成员函数创建时机" class="headerlink" title="1.3.3 类模板中成员函数创建时机"></a>1.3.3 类模板中成员函数创建时机</h1><p><strong>类模板中成员函数和普通类中成员函数创建时机是有区别的：</strong></p><ul><li>普通类中的成员函数一开始就可以创建</li><li>类模板中的成员函数在调用是才创建</li></ul><h3 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Porson01</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">showPorson01</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">         cout &lt;&lt; <span class="string">&quot;showPorson01调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Porson02</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPorson02</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;showPorson02调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板</span></span><br><span class="line">template &lt;<span class="keyword">class</span> <span class="title">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title">tempPorson</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    T obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类模板中的成员函数，并不是一开始就创建的，而是在模板调用再生成</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func01</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        obj.showPorson01();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func02</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        obj.showPorson02();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    tempPorson &lt;Porson01&gt;t;</span><br><span class="line">    t.func01();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//t.func02();   //编译会出错，说明函数调用才会创建成员函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建。"><a href="#总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建。" class="headerlink" title="总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建。"></a>总结：类模板中的成员函数并不是一开始就创建的，在调用时才去创建。</h3>]]></content>
    
    
    <summary type="html">模板（类模板-类模板中成员函数创建时机）</summary>
    
    
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/categories/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="C/C++" scheme="https://notes.camcad.cn/tags/C-C/"/>
    
    <category term="蚂蚁Emmet" scheme="https://notes.camcad.cn/tags/%E8%9A%82%E8%9A%81Emmet/"/>
    
    <category term="C++提高编程" scheme="https://notes.camcad.cn/tags/C-%E6%8F%90%E9%AB%98%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
